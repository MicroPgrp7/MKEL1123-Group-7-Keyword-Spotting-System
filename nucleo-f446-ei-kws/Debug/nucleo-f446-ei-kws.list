
nucleo-f446-ei-kws.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002d550  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004a34  0802d720  0802d720  0003d720  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08032154  08032154  00050300  2**0
                  CONTENTS
  4 .ARM          00000008  08032154  08032154  00042154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803215c  0803215c  00050300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803215c  0803215c  0004215c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08032164  08032164  00042164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000300  20000000  0803216c  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007040  20000300  0803246c  00050300  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007340  0803246c  00057340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050300  2**0
                  CONTENTS, READONLY
 12 .debug_info   00130b35  00000000  00000000  00050330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001540b  00000000  00000000  00180e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005860  00000000  00000000  00196270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00005580  00000000  00000000  0019bad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000379be  00000000  00000000  001a1050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0007382f  00000000  00000000  001d8a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00192598  00000000  00000000  0024c23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  003de7d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001a498  00000000  00000000  003de828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000300 	.word	0x20000300
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802d708 	.word	0x0802d708

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000304 	.word	0x20000304
 800020c:	0802d708 	.word	0x0802d708

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strcmp>:
 80002b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	429a      	cmpcs	r2, r3
 80002be:	d0f7      	beq.n	80002b0 <strcmp>
 80002c0:	1ad0      	subs	r0, r2, r3
 80002c2:	4770      	bx	lr

080002c4 <strlen>:
 80002c4:	4603      	mov	r3, r0
 80002c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d1fb      	bne.n	80002c6 <strlen+0x2>
 80002ce:	1a18      	subs	r0, r3, r0
 80002d0:	3801      	subs	r0, #1
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_drsub>:
 80002d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d8:	e002      	b.n	80002e0 <__adddf3>
 80002da:	bf00      	nop

080002dc <__aeabi_dsub>:
 80002dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e0 <__adddf3>:
 80002e0:	b530      	push	{r4, r5, lr}
 80002e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ea:	ea94 0f05 	teq	r4, r5
 80002ee:	bf08      	it	eq
 80002f0:	ea90 0f02 	teqeq	r0, r2
 80002f4:	bf1f      	itttt	ne
 80002f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000306:	f000 80e2 	beq.w	80004ce <__adddf3+0x1ee>
 800030a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000312:	bfb8      	it	lt
 8000314:	426d      	neglt	r5, r5
 8000316:	dd0c      	ble.n	8000332 <__adddf3+0x52>
 8000318:	442c      	add	r4, r5
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	ea82 0000 	eor.w	r0, r2, r0
 8000326:	ea83 0101 	eor.w	r1, r3, r1
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	2d36      	cmp	r5, #54	; 0x36
 8000334:	bf88      	it	hi
 8000336:	bd30      	pophi	{r4, r5, pc}
 8000338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800033c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x70>
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000354:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x84>
 800035e:	4252      	negs	r2, r2
 8000360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000364:	ea94 0f05 	teq	r4, r5
 8000368:	f000 80a7 	beq.w	80004ba <__adddf3+0x1da>
 800036c:	f1a4 0401 	sub.w	r4, r4, #1
 8000370:	f1d5 0e20 	rsbs	lr, r5, #32
 8000374:	db0d      	blt.n	8000392 <__adddf3+0xb2>
 8000376:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037a:	fa22 f205 	lsr.w	r2, r2, r5
 800037e:	1880      	adds	r0, r0, r2
 8000380:	f141 0100 	adc.w	r1, r1, #0
 8000384:	fa03 f20e 	lsl.w	r2, r3, lr
 8000388:	1880      	adds	r0, r0, r2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	4159      	adcs	r1, r3
 8000390:	e00e      	b.n	80003b0 <__adddf3+0xd0>
 8000392:	f1a5 0520 	sub.w	r5, r5, #32
 8000396:	f10e 0e20 	add.w	lr, lr, #32
 800039a:	2a01      	cmp	r2, #1
 800039c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a0:	bf28      	it	cs
 80003a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	18c0      	adds	r0, r0, r3
 80003ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	d507      	bpl.n	80003c6 <__adddf3+0xe6>
 80003b6:	f04f 0e00 	mov.w	lr, #0
 80003ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80003be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ca:	d31b      	bcc.n	8000404 <__adddf3+0x124>
 80003cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d0:	d30c      	bcc.n	80003ec <__adddf3+0x10c>
 80003d2:	0849      	lsrs	r1, r1, #1
 80003d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003dc:	f104 0401 	add.w	r4, r4, #1
 80003e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e8:	f080 809a 	bcs.w	8000520 <__adddf3+0x240>
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	bf08      	it	eq
 80003f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f6:	f150 0000 	adcs.w	r0, r0, #0
 80003fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fe:	ea41 0105 	orr.w	r1, r1, r5
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000408:	4140      	adcs	r0, r0
 800040a:	eb41 0101 	adc.w	r1, r1, r1
 800040e:	3c01      	subs	r4, #1
 8000410:	bf28      	it	cs
 8000412:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000416:	d2e9      	bcs.n	80003ec <__adddf3+0x10c>
 8000418:	f091 0f00 	teq	r1, #0
 800041c:	bf04      	itt	eq
 800041e:	4601      	moveq	r1, r0
 8000420:	2000      	moveq	r0, #0
 8000422:	fab1 f381 	clz	r3, r1
 8000426:	bf08      	it	eq
 8000428:	3320      	addeq	r3, #32
 800042a:	f1a3 030b 	sub.w	r3, r3, #11
 800042e:	f1b3 0220 	subs.w	r2, r3, #32
 8000432:	da0c      	bge.n	800044e <__adddf3+0x16e>
 8000434:	320c      	adds	r2, #12
 8000436:	dd08      	ble.n	800044a <__adddf3+0x16a>
 8000438:	f102 0c14 	add.w	ip, r2, #20
 800043c:	f1c2 020c 	rsb	r2, r2, #12
 8000440:	fa01 f00c 	lsl.w	r0, r1, ip
 8000444:	fa21 f102 	lsr.w	r1, r1, r2
 8000448:	e00c      	b.n	8000464 <__adddf3+0x184>
 800044a:	f102 0214 	add.w	r2, r2, #20
 800044e:	bfd8      	it	le
 8000450:	f1c2 0c20 	rsble	ip, r2, #32
 8000454:	fa01 f102 	lsl.w	r1, r1, r2
 8000458:	fa20 fc0c 	lsr.w	ip, r0, ip
 800045c:	bfdc      	itt	le
 800045e:	ea41 010c 	orrle.w	r1, r1, ip
 8000462:	4090      	lslle	r0, r2
 8000464:	1ae4      	subs	r4, r4, r3
 8000466:	bfa2      	ittt	ge
 8000468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800046c:	4329      	orrge	r1, r5
 800046e:	bd30      	popge	{r4, r5, pc}
 8000470:	ea6f 0404 	mvn.w	r4, r4
 8000474:	3c1f      	subs	r4, #31
 8000476:	da1c      	bge.n	80004b2 <__adddf3+0x1d2>
 8000478:	340c      	adds	r4, #12
 800047a:	dc0e      	bgt.n	800049a <__adddf3+0x1ba>
 800047c:	f104 0414 	add.w	r4, r4, #20
 8000480:	f1c4 0220 	rsb	r2, r4, #32
 8000484:	fa20 f004 	lsr.w	r0, r0, r4
 8000488:	fa01 f302 	lsl.w	r3, r1, r2
 800048c:	ea40 0003 	orr.w	r0, r0, r3
 8000490:	fa21 f304 	lsr.w	r3, r1, r4
 8000494:	ea45 0103 	orr.w	r1, r5, r3
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f1c4 040c 	rsb	r4, r4, #12
 800049e:	f1c4 0220 	rsb	r2, r4, #32
 80004a2:	fa20 f002 	lsr.w	r0, r0, r2
 80004a6:	fa01 f304 	lsl.w	r3, r1, r4
 80004aa:	ea40 0003 	orr.w	r0, r0, r3
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	fa21 f004 	lsr.w	r0, r1, r4
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f094 0f00 	teq	r4, #0
 80004be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c2:	bf06      	itte	eq
 80004c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c8:	3401      	addeq	r4, #1
 80004ca:	3d01      	subne	r5, #1
 80004cc:	e74e      	b.n	800036c <__adddf3+0x8c>
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf18      	it	ne
 80004d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d8:	d029      	beq.n	800052e <__adddf3+0x24e>
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	d005      	beq.n	80004f2 <__adddf3+0x212>
 80004e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ea:	bf04      	itt	eq
 80004ec:	4619      	moveq	r1, r3
 80004ee:	4610      	moveq	r0, r2
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea91 0f03 	teq	r1, r3
 80004f6:	bf1e      	ittt	ne
 80004f8:	2100      	movne	r1, #0
 80004fa:	2000      	movne	r0, #0
 80004fc:	bd30      	popne	{r4, r5, pc}
 80004fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000502:	d105      	bne.n	8000510 <__adddf3+0x230>
 8000504:	0040      	lsls	r0, r0, #1
 8000506:	4149      	adcs	r1, r1
 8000508:	bf28      	it	cs
 800050a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000514:	bf3c      	itt	cc
 8000516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051a:	bd30      	popcc	{r4, r5, pc}
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000528:	f04f 0000 	mov.w	r0, #0
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000532:	bf1a      	itte	ne
 8000534:	4619      	movne	r1, r3
 8000536:	4610      	movne	r0, r2
 8000538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800053c:	bf1c      	itt	ne
 800053e:	460b      	movne	r3, r1
 8000540:	4602      	movne	r2, r0
 8000542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000546:	bf06      	itte	eq
 8000548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800054c:	ea91 0f03 	teqeq	r1, r3
 8000550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	bf00      	nop

08000558 <__aeabi_ui2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f04f 0500 	mov.w	r5, #0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e750      	b.n	8000418 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_i2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000590:	bf48      	it	mi
 8000592:	4240      	negmi	r0, r0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e73e      	b.n	8000418 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_f2d>:
 800059c:	0042      	lsls	r2, r0, #1
 800059e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005aa:	bf1f      	itttt	ne
 80005ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b8:	4770      	bxne	lr
 80005ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005be:	bf08      	it	eq
 80005c0:	4770      	bxeq	lr
 80005c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c6:	bf04      	itt	eq
 80005c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	e71c      	b.n	8000418 <__adddf3+0x138>
 80005de:	bf00      	nop

080005e0 <__aeabi_ul2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	e00a      	b.n	8000606 <__aeabi_l2d+0x16>

080005f0 <__aeabi_l2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fe:	d502      	bpl.n	8000606 <__aeabi_l2d+0x16>
 8000600:	4240      	negs	r0, r0
 8000602:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000606:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000612:	f43f aed8 	beq.w	80003c6 <__adddf3+0xe6>
 8000616:	f04f 0203 	mov.w	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062e:	f1c2 0320 	rsb	r3, r2, #32
 8000632:	fa00 fc03 	lsl.w	ip, r0, r3
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 fe03 	lsl.w	lr, r1, r3
 800063e:	ea40 000e 	orr.w	r0, r0, lr
 8000642:	fa21 f102 	lsr.w	r1, r1, r2
 8000646:	4414      	add	r4, r2
 8000648:	e6bd      	b.n	80003c6 <__adddf3+0xe6>
 800064a:	bf00      	nop

0800064c <__aeabi_dmul>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000652:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000656:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065a:	bf1d      	ittte	ne
 800065c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000660:	ea94 0f0c 	teqne	r4, ip
 8000664:	ea95 0f0c 	teqne	r5, ip
 8000668:	f000 f8de 	bleq	8000828 <__aeabi_dmul+0x1dc>
 800066c:	442c      	add	r4, r5
 800066e:	ea81 0603 	eor.w	r6, r1, r3
 8000672:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000676:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067e:	bf18      	it	ne
 8000680:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800068c:	d038      	beq.n	8000700 <__aeabi_dmul+0xb4>
 800068e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000692:	f04f 0500 	mov.w	r5, #0
 8000696:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a2:	f04f 0600 	mov.w	r6, #0
 80006a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006aa:	f09c 0f00 	teq	ip, #0
 80006ae:	bf18      	it	ne
 80006b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c0:	d204      	bcs.n	80006cc <__aeabi_dmul+0x80>
 80006c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c6:	416d      	adcs	r5, r5
 80006c8:	eb46 0606 	adc.w	r6, r6, r6
 80006cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e4:	bf88      	it	hi
 80006e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ea:	d81e      	bhi.n	800072a <__aeabi_dmul+0xde>
 80006ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f0:	bf08      	it	eq
 80006f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f6:	f150 0000 	adcs.w	r0, r0, #0
 80006fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000704:	ea46 0101 	orr.w	r1, r6, r1
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000714:	bfc2      	ittt	gt
 8000716:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071e:	bd70      	popgt	{r4, r5, r6, pc}
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f04f 0e00 	mov.w	lr, #0
 8000728:	3c01      	subs	r4, #1
 800072a:	f300 80ab 	bgt.w	8000884 <__aeabi_dmul+0x238>
 800072e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000732:	bfde      	ittt	le
 8000734:	2000      	movle	r0, #0
 8000736:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd70      	pople	{r4, r5, r6, pc}
 800073c:	f1c4 0400 	rsb	r4, r4, #0
 8000740:	3c20      	subs	r4, #32
 8000742:	da35      	bge.n	80007b0 <__aeabi_dmul+0x164>
 8000744:	340c      	adds	r4, #12
 8000746:	dc1b      	bgt.n	8000780 <__aeabi_dmul+0x134>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f305 	lsl.w	r3, r0, r5
 8000754:	fa20 f004 	lsr.w	r0, r0, r4
 8000758:	fa01 f205 	lsl.w	r2, r1, r5
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	fa21 f604 	lsr.w	r6, r1, r4
 8000770:	eb42 0106 	adc.w	r1, r2, r6
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 040c 	rsb	r4, r4, #12
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f304 	lsl.w	r3, r0, r4
 800078c:	fa20 f005 	lsr.w	r0, r0, r5
 8000790:	fa01 f204 	lsl.w	r2, r1, r4
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a0:	f141 0100 	adc.w	r1, r1, #0
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f205 	lsl.w	r2, r0, r5
 80007b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007bc:	fa20 f304 	lsr.w	r3, r0, r4
 80007c0:	fa01 f205 	lsl.w	r2, r1, r5
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
 80007c8:	fa21 f004 	lsr.w	r0, r1, r4
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	fa21 f204 	lsr.w	r2, r1, r4
 80007d4:	ea20 0002 	bic.w	r0, r0, r2
 80007d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f094 0f00 	teq	r4, #0
 80007ec:	d10f      	bne.n	800080e <__aeabi_dmul+0x1c2>
 80007ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f2:	0040      	lsls	r0, r0, #1
 80007f4:	eb41 0101 	adc.w	r1, r1, r1
 80007f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3c01      	subeq	r4, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1a6>
 8000802:	ea41 0106 	orr.w	r1, r1, r6
 8000806:	f095 0f00 	teq	r5, #0
 800080a:	bf18      	it	ne
 800080c:	4770      	bxne	lr
 800080e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	eb43 0303 	adc.w	r3, r3, r3
 8000818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3d01      	subeq	r5, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1c6>
 8000822:	ea43 0306 	orr.w	r3, r3, r6
 8000826:	4770      	bx	lr
 8000828:	ea94 0f0c 	teq	r4, ip
 800082c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000830:	bf18      	it	ne
 8000832:	ea95 0f0c 	teqne	r5, ip
 8000836:	d00c      	beq.n	8000852 <__aeabi_dmul+0x206>
 8000838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083c:	bf18      	it	ne
 800083e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000842:	d1d1      	bne.n	80007e8 <__aeabi_dmul+0x19c>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000856:	bf06      	itte	eq
 8000858:	4610      	moveq	r0, r2
 800085a:	4619      	moveq	r1, r3
 800085c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000860:	d019      	beq.n	8000896 <__aeabi_dmul+0x24a>
 8000862:	ea94 0f0c 	teq	r4, ip
 8000866:	d102      	bne.n	800086e <__aeabi_dmul+0x222>
 8000868:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800086c:	d113      	bne.n	8000896 <__aeabi_dmul+0x24a>
 800086e:	ea95 0f0c 	teq	r5, ip
 8000872:	d105      	bne.n	8000880 <__aeabi_dmul+0x234>
 8000874:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000878:	bf1c      	itt	ne
 800087a:	4610      	movne	r0, r2
 800087c:	4619      	movne	r1, r3
 800087e:	d10a      	bne.n	8000896 <__aeabi_dmul+0x24a>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000890:	f04f 0000 	mov.w	r0, #0
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089e:	bd70      	pop	{r4, r5, r6, pc}

080008a0 <__aeabi_ddiv>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ae:	bf1d      	ittte	ne
 80008b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b4:	ea94 0f0c 	teqne	r4, ip
 80008b8:	ea95 0f0c 	teqne	r5, ip
 80008bc:	f000 f8a7 	bleq	8000a0e <__aeabi_ddiv+0x16e>
 80008c0:	eba4 0405 	sub.w	r4, r4, r5
 80008c4:	ea81 0e03 	eor.w	lr, r1, r3
 80008c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d0:	f000 8088 	beq.w	80009e4 <__aeabi_ddiv+0x144>
 80008d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f8:	429d      	cmp	r5, r3
 80008fa:	bf08      	it	eq
 80008fc:	4296      	cmpeq	r6, r2
 80008fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000902:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000906:	d202      	bcs.n	800090e <__aeabi_ddiv+0x6e>
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	1ab6      	subs	r6, r6, r2
 8000910:	eb65 0503 	sbc.w	r5, r5, r3
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 000c 	orrcs.w	r0, r0, ip
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	ebb6 0e02 	subs.w	lr, r6, r2
 800096e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000972:	bf22      	ittt	cs
 8000974:	1ab6      	subcs	r6, r6, r2
 8000976:	4675      	movcs	r5, lr
 8000978:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800097c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000980:	d018      	beq.n	80009b4 <__aeabi_ddiv+0x114>
 8000982:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000986:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000992:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000996:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099e:	d1c0      	bne.n	8000922 <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	d10b      	bne.n	80009be <__aeabi_ddiv+0x11e>
 80009a6:	ea41 0100 	orr.w	r1, r1, r0
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b2:	e7b6      	b.n	8000922 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	bf04      	itt	eq
 80009ba:	4301      	orreq	r1, r0
 80009bc:	2000      	moveq	r0, #0
 80009be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c2:	bf88      	it	hi
 80009c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c8:	f63f aeaf 	bhi.w	800072a <__aeabi_dmul+0xde>
 80009cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d0:	bf04      	itt	eq
 80009d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009da:	f150 0000 	adcs.w	r0, r0, #0
 80009de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f0:	bfc2      	ittt	gt
 80009f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	popgt	{r4, r5, r6, pc}
 80009fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a00:	f04f 0e00 	mov.w	lr, #0
 8000a04:	3c01      	subs	r4, #1
 8000a06:	e690      	b.n	800072a <__aeabi_dmul+0xde>
 8000a08:	ea45 0e06 	orr.w	lr, r5, r6
 8000a0c:	e68d      	b.n	800072a <__aeabi_dmul+0xde>
 8000a0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a12:	ea94 0f0c 	teq	r4, ip
 8000a16:	bf08      	it	eq
 8000a18:	ea95 0f0c 	teqeq	r5, ip
 8000a1c:	f43f af3b 	beq.w	8000896 <__aeabi_dmul+0x24a>
 8000a20:	ea94 0f0c 	teq	r4, ip
 8000a24:	d10a      	bne.n	8000a3c <__aeabi_ddiv+0x19c>
 8000a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2a:	f47f af34 	bne.w	8000896 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	f47f af25 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e72c      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a3c:	ea95 0f0c 	teq	r5, ip
 8000a40:	d106      	bne.n	8000a50 <__aeabi_ddiv+0x1b0>
 8000a42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a46:	f43f aefd 	beq.w	8000844 <__aeabi_dmul+0x1f8>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e722      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5a:	f47f aec5 	bne.w	80007e8 <__aeabi_dmul+0x19c>
 8000a5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a62:	f47f af0d 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6a:	f47f aeeb 	bne.w	8000844 <__aeabi_dmul+0x1f8>
 8000a6e:	e712      	b.n	8000896 <__aeabi_dmul+0x24a>

08000a70 <__gedf2>:
 8000a70:	f04f 3cff 	mov.w	ip, #4294967295
 8000a74:	e006      	b.n	8000a84 <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__ledf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	e002      	b.n	8000a84 <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__cmpdf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9a:	d01b      	beq.n	8000ad4 <__cmpdf2+0x54>
 8000a9c:	b001      	add	sp, #4
 8000a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa8:	ea91 0f03 	teqne	r1, r3
 8000aac:	bf02      	ittt	eq
 8000aae:	ea90 0f02 	teqeq	r0, r2
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	f110 0f00 	cmn.w	r0, #0
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf58      	it	pl
 8000ac0:	4299      	cmppl	r1, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	4290      	cmpeq	r0, r2
 8000ac6:	bf2c      	ite	cs
 8000ac8:	17d8      	asrcs	r0, r3, #31
 8000aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ace:	f040 0001 	orr.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__cmpdf2+0x64>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d107      	bne.n	8000af4 <__cmpdf2+0x74>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d1d6      	bne.n	8000a9c <__cmpdf2+0x1c>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d0d3      	beq.n	8000a9c <__cmpdf2+0x1c>
 8000af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_cdrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	4610      	mov	r0, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	468c      	mov	ip, r1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	e000      	b.n	8000b0c <__aeabi_cdcmpeq>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdcmpeq>:
 8000b0c:	b501      	push	{r0, lr}
 8000b0e:	f7ff ffb7 	bl	8000a80 <__cmpdf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd01      	pop	{r0, pc}

08000b1c <__aeabi_dcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffce 	bl	8000afc <__aeabi_cdrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc4 	bl	8000afc <__aeabi_cdrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmpun>:
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__aeabi_dcmpun+0x10>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d10a      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x20>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0001 	mov.w	r0, #1
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2iz>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d215      	bcs.n	8000be2 <__aeabi_d2iz+0x36>
 8000bb6:	d511      	bpl.n	8000bdc <__aeabi_d2iz+0x30>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d912      	bls.n	8000be8 <__aeabi_d2iz+0x3c>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	4240      	negne	r0, r0
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_d2iz+0x48>
 8000be8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	bf08      	it	eq
 8000bee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2uiz>:
 8000bfc:	004a      	lsls	r2, r1, #1
 8000bfe:	d211      	bcs.n	8000c24 <__aeabi_d2uiz+0x28>
 8000c00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c04:	d211      	bcs.n	8000c2a <__aeabi_d2uiz+0x2e>
 8000c06:	d50d      	bpl.n	8000c24 <__aeabi_d2uiz+0x28>
 8000c08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c10:	d40e      	bmi.n	8000c30 <__aeabi_d2uiz+0x34>
 8000c12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c22:	4770      	bx	lr
 8000c24:	f04f 0000 	mov.w	r0, #0
 8000c28:	4770      	bx	lr
 8000c2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2e:	d102      	bne.n	8000c36 <__aeabi_d2uiz+0x3a>
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	4770      	bx	lr
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2f>:
 8000c3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c44:	bf24      	itt	cs
 8000c46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4e:	d90d      	bls.n	8000c6c <__aeabi_d2f+0x30>
 8000c50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c64:	bf08      	it	eq
 8000c66:	f020 0001 	biceq.w	r0, r0, #1
 8000c6a:	4770      	bx	lr
 8000c6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c70:	d121      	bne.n	8000cb6 <__aeabi_d2f+0x7a>
 8000c72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c76:	bfbc      	itt	lt
 8000c78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	4770      	bxlt	lr
 8000c7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c86:	f1c2 0218 	rsb	r2, r2, #24
 8000c8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c92:	fa20 f002 	lsr.w	r0, r0, r2
 8000c96:	bf18      	it	ne
 8000c98:	f040 0001 	orrne.w	r0, r0, #1
 8000c9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca8:	ea40 000c 	orr.w	r0, r0, ip
 8000cac:	fa23 f302 	lsr.w	r3, r3, r2
 8000cb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb4:	e7cc      	b.n	8000c50 <__aeabi_d2f+0x14>
 8000cb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cba:	d107      	bne.n	8000ccc <__aeabi_d2f+0x90>
 8000cbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cca:	4770      	bxne	lr
 8000ccc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <__aeabi_ldivmod>:
 8000cdc:	b97b      	cbnz	r3, 8000cfe <__aeabi_ldivmod+0x22>
 8000cde:	b972      	cbnz	r2, 8000cfe <__aeabi_ldivmod+0x22>
 8000ce0:	2900      	cmp	r1, #0
 8000ce2:	bfbe      	ittt	lt
 8000ce4:	2000      	movlt	r0, #0
 8000ce6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cea:	e006      	blt.n	8000cfa <__aeabi_ldivmod+0x1e>
 8000cec:	bf08      	it	eq
 8000cee:	2800      	cmpeq	r0, #0
 8000cf0:	bf1c      	itt	ne
 8000cf2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfa:	f000 b9f5 	b.w	80010e8 <__aeabi_idiv0>
 8000cfe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d02:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d06:	2900      	cmp	r1, #0
 8000d08:	db09      	blt.n	8000d1e <__aeabi_ldivmod+0x42>
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db1a      	blt.n	8000d44 <__aeabi_ldivmod+0x68>
 8000d0e:	f000 f883 	bl	8000e18 <__udivmoddi4>
 8000d12:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1a:	b004      	add	sp, #16
 8000d1c:	4770      	bx	lr
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db1b      	blt.n	8000d60 <__aeabi_ldivmod+0x84>
 8000d28:	f000 f876 	bl	8000e18 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4240      	negs	r0, r0
 8000d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	4770      	bx	lr
 8000d44:	4252      	negs	r2, r2
 8000d46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4a:	f000 f865 	bl	8000e18 <__udivmoddi4>
 8000d4e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d56:	b004      	add	sp, #16
 8000d58:	4240      	negs	r0, r0
 8000d5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5e:	4770      	bx	lr
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	f000 f857 	bl	8000e18 <__udivmoddi4>
 8000d6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d72:	b004      	add	sp, #16
 8000d74:	4252      	negs	r2, r2
 8000d76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_uldivmod>:
 8000d7c:	b953      	cbnz	r3, 8000d94 <__aeabi_uldivmod+0x18>
 8000d7e:	b94a      	cbnz	r2, 8000d94 <__aeabi_uldivmod+0x18>
 8000d80:	2900      	cmp	r1, #0
 8000d82:	bf08      	it	eq
 8000d84:	2800      	cmpeq	r0, #0
 8000d86:	bf1c      	itt	ne
 8000d88:	f04f 31ff 	movne.w	r1, #4294967295
 8000d8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d90:	f000 b9aa 	b.w	80010e8 <__aeabi_idiv0>
 8000d94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d9c:	f000 f83c 	bl	8000e18 <__udivmoddi4>
 8000da0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da8:	b004      	add	sp, #16
 8000daa:	4770      	bx	lr

08000dac <__aeabi_d2lz>:
 8000dac:	b538      	push	{r3, r4, r5, lr}
 8000dae:	2200      	movs	r2, #0
 8000db0:	2300      	movs	r3, #0
 8000db2:	4604      	mov	r4, r0
 8000db4:	460d      	mov	r5, r1
 8000db6:	f7ff febb 	bl	8000b30 <__aeabi_dcmplt>
 8000dba:	b928      	cbnz	r0, 8000dc8 <__aeabi_d2lz+0x1c>
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	4629      	mov	r1, r5
 8000dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc4:	f000 b80a 	b.w	8000ddc <__aeabi_d2ulz>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dce:	f000 f805 	bl	8000ddc <__aeabi_d2ulz>
 8000dd2:	4240      	negs	r0, r0
 8000dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd8:	bd38      	pop	{r3, r4, r5, pc}
 8000dda:	bf00      	nop

08000ddc <__aeabi_d2ulz>:
 8000ddc:	b5d0      	push	{r4, r6, r7, lr}
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <__aeabi_d2ulz+0x34>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	4606      	mov	r6, r0
 8000de4:	460f      	mov	r7, r1
 8000de6:	f7ff fc31 	bl	800064c <__aeabi_dmul>
 8000dea:	f7ff ff07 	bl	8000bfc <__aeabi_d2uiz>
 8000dee:	4604      	mov	r4, r0
 8000df0:	f7ff fbb2 	bl	8000558 <__aeabi_ui2d>
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <__aeabi_d2ulz+0x38>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f7ff fc28 	bl	800064c <__aeabi_dmul>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4630      	mov	r0, r6
 8000e02:	4639      	mov	r1, r7
 8000e04:	f7ff fa6a 	bl	80002dc <__aeabi_dsub>
 8000e08:	f7ff fef8 	bl	8000bfc <__aeabi_d2uiz>
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	bdd0      	pop	{r4, r6, r7, pc}
 8000e10:	3df00000 	.word	0x3df00000
 8000e14:	41f00000 	.word	0x41f00000

08000e18 <__udivmoddi4>:
 8000e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e1c:	9d08      	ldr	r5, [sp, #32]
 8000e1e:	4604      	mov	r4, r0
 8000e20:	468e      	mov	lr, r1
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d14d      	bne.n	8000ec2 <__udivmoddi4+0xaa>
 8000e26:	428a      	cmp	r2, r1
 8000e28:	4694      	mov	ip, r2
 8000e2a:	d969      	bls.n	8000f00 <__udivmoddi4+0xe8>
 8000e2c:	fab2 f282 	clz	r2, r2
 8000e30:	b152      	cbz	r2, 8000e48 <__udivmoddi4+0x30>
 8000e32:	fa01 f302 	lsl.w	r3, r1, r2
 8000e36:	f1c2 0120 	rsb	r1, r2, #32
 8000e3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000e3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e42:	ea41 0e03 	orr.w	lr, r1, r3
 8000e46:	4094      	lsls	r4, r2
 8000e48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e4c:	0c21      	lsrs	r1, r4, #16
 8000e4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e52:	fa1f f78c 	uxth.w	r7, ip
 8000e56:	fb08 e316 	mls	r3, r8, r6, lr
 8000e5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e5e:	fb06 f107 	mul.w	r1, r6, r7
 8000e62:	4299      	cmp	r1, r3
 8000e64:	d90a      	bls.n	8000e7c <__udivmoddi4+0x64>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e6e:	f080 811f 	bcs.w	80010b0 <__udivmoddi4+0x298>
 8000e72:	4299      	cmp	r1, r3
 8000e74:	f240 811c 	bls.w	80010b0 <__udivmoddi4+0x298>
 8000e78:	3e02      	subs	r6, #2
 8000e7a:	4463      	add	r3, ip
 8000e7c:	1a5b      	subs	r3, r3, r1
 8000e7e:	b2a4      	uxth	r4, r4
 8000e80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e84:	fb08 3310 	mls	r3, r8, r0, r3
 8000e88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e8c:	fb00 f707 	mul.w	r7, r0, r7
 8000e90:	42a7      	cmp	r7, r4
 8000e92:	d90a      	bls.n	8000eaa <__udivmoddi4+0x92>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9c:	f080 810a 	bcs.w	80010b4 <__udivmoddi4+0x29c>
 8000ea0:	42a7      	cmp	r7, r4
 8000ea2:	f240 8107 	bls.w	80010b4 <__udivmoddi4+0x29c>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eae:	1be4      	subs	r4, r4, r7
 8000eb0:	2600      	movs	r6, #0
 8000eb2:	b11d      	cbz	r5, 8000ebc <__udivmoddi4+0xa4>
 8000eb4:	40d4      	lsrs	r4, r2
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d909      	bls.n	8000eda <__udivmoddi4+0xc2>
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	f000 80ef 	beq.w	80010aa <__udivmoddi4+0x292>
 8000ecc:	2600      	movs	r6, #0
 8000ece:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	fab3 f683 	clz	r6, r3
 8000ede:	2e00      	cmp	r6, #0
 8000ee0:	d14a      	bne.n	8000f78 <__udivmoddi4+0x160>
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d302      	bcc.n	8000eec <__udivmoddi4+0xd4>
 8000ee6:	4282      	cmp	r2, r0
 8000ee8:	f200 80f9 	bhi.w	80010de <__udivmoddi4+0x2c6>
 8000eec:	1a84      	subs	r4, r0, r2
 8000eee:	eb61 0303 	sbc.w	r3, r1, r3
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	469e      	mov	lr, r3
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	d0e0      	beq.n	8000ebc <__udivmoddi4+0xa4>
 8000efa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000efe:	e7dd      	b.n	8000ebc <__udivmoddi4+0xa4>
 8000f00:	b902      	cbnz	r2, 8000f04 <__udivmoddi4+0xec>
 8000f02:	deff      	udf	#255	; 0xff
 8000f04:	fab2 f282 	clz	r2, r2
 8000f08:	2a00      	cmp	r2, #0
 8000f0a:	f040 8092 	bne.w	8001032 <__udivmoddi4+0x21a>
 8000f0e:	eba1 010c 	sub.w	r1, r1, ip
 8000f12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f16:	fa1f fe8c 	uxth.w	lr, ip
 8000f1a:	2601      	movs	r6, #1
 8000f1c:	0c20      	lsrs	r0, r4, #16
 8000f1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f22:	fb07 1113 	mls	r1, r7, r3, r1
 8000f26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f2a:	fb0e f003 	mul.w	r0, lr, r3
 8000f2e:	4288      	cmp	r0, r1
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x12c>
 8000f32:	eb1c 0101 	adds.w	r1, ip, r1
 8000f36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f3a:	d202      	bcs.n	8000f42 <__udivmoddi4+0x12a>
 8000f3c:	4288      	cmp	r0, r1
 8000f3e:	f200 80cb 	bhi.w	80010d8 <__udivmoddi4+0x2c0>
 8000f42:	4643      	mov	r3, r8
 8000f44:	1a09      	subs	r1, r1, r0
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f54:	fb0e fe00 	mul.w	lr, lr, r0
 8000f58:	45a6      	cmp	lr, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x156>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d202      	bcs.n	8000f6c <__udivmoddi4+0x154>
 8000f66:	45a6      	cmp	lr, r4
 8000f68:	f200 80bb 	bhi.w	80010e2 <__udivmoddi4+0x2ca>
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	eba4 040e 	sub.w	r4, r4, lr
 8000f72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f76:	e79c      	b.n	8000eb2 <__udivmoddi4+0x9a>
 8000f78:	f1c6 0720 	rsb	r7, r6, #32
 8000f7c:	40b3      	lsls	r3, r6
 8000f7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f86:	fa20 f407 	lsr.w	r4, r0, r7
 8000f8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f8e:	431c      	orrs	r4, r3
 8000f90:	40f9      	lsrs	r1, r7
 8000f92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f96:	fa00 f306 	lsl.w	r3, r0, r6
 8000f9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f9e:	0c20      	lsrs	r0, r4, #16
 8000fa0:	fa1f fe8c 	uxth.w	lr, ip
 8000fa4:	fb09 1118 	mls	r1, r9, r8, r1
 8000fa8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fac:	fb08 f00e 	mul.w	r0, r8, lr
 8000fb0:	4288      	cmp	r0, r1
 8000fb2:	fa02 f206 	lsl.w	r2, r2, r6
 8000fb6:	d90b      	bls.n	8000fd0 <__udivmoddi4+0x1b8>
 8000fb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fc0:	f080 8088 	bcs.w	80010d4 <__udivmoddi4+0x2bc>
 8000fc4:	4288      	cmp	r0, r1
 8000fc6:	f240 8085 	bls.w	80010d4 <__udivmoddi4+0x2bc>
 8000fca:	f1a8 0802 	sub.w	r8, r8, #2
 8000fce:	4461      	add	r1, ip
 8000fd0:	1a09      	subs	r1, r1, r0
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000fdc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fe0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fe4:	458e      	cmp	lr, r1
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x1e2>
 8000fe8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ff0:	d26c      	bcs.n	80010cc <__udivmoddi4+0x2b4>
 8000ff2:	458e      	cmp	lr, r1
 8000ff4:	d96a      	bls.n	80010cc <__udivmoddi4+0x2b4>
 8000ff6:	3802      	subs	r0, #2
 8000ff8:	4461      	add	r1, ip
 8000ffa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ffe:	fba0 9402 	umull	r9, r4, r0, r2
 8001002:	eba1 010e 	sub.w	r1, r1, lr
 8001006:	42a1      	cmp	r1, r4
 8001008:	46c8      	mov	r8, r9
 800100a:	46a6      	mov	lr, r4
 800100c:	d356      	bcc.n	80010bc <__udivmoddi4+0x2a4>
 800100e:	d053      	beq.n	80010b8 <__udivmoddi4+0x2a0>
 8001010:	b15d      	cbz	r5, 800102a <__udivmoddi4+0x212>
 8001012:	ebb3 0208 	subs.w	r2, r3, r8
 8001016:	eb61 010e 	sbc.w	r1, r1, lr
 800101a:	fa01 f707 	lsl.w	r7, r1, r7
 800101e:	fa22 f306 	lsr.w	r3, r2, r6
 8001022:	40f1      	lsrs	r1, r6
 8001024:	431f      	orrs	r7, r3
 8001026:	e9c5 7100 	strd	r7, r1, [r5]
 800102a:	2600      	movs	r6, #0
 800102c:	4631      	mov	r1, r6
 800102e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001032:	f1c2 0320 	rsb	r3, r2, #32
 8001036:	40d8      	lsrs	r0, r3
 8001038:	fa0c fc02 	lsl.w	ip, ip, r2
 800103c:	fa21 f303 	lsr.w	r3, r1, r3
 8001040:	4091      	lsls	r1, r2
 8001042:	4301      	orrs	r1, r0
 8001044:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001048:	fa1f fe8c 	uxth.w	lr, ip
 800104c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001050:	fb07 3610 	mls	r6, r7, r0, r3
 8001054:	0c0b      	lsrs	r3, r1, #16
 8001056:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800105a:	fb00 f60e 	mul.w	r6, r0, lr
 800105e:	429e      	cmp	r6, r3
 8001060:	fa04 f402 	lsl.w	r4, r4, r2
 8001064:	d908      	bls.n	8001078 <__udivmoddi4+0x260>
 8001066:	eb1c 0303 	adds.w	r3, ip, r3
 800106a:	f100 38ff 	add.w	r8, r0, #4294967295
 800106e:	d22f      	bcs.n	80010d0 <__udivmoddi4+0x2b8>
 8001070:	429e      	cmp	r6, r3
 8001072:	d92d      	bls.n	80010d0 <__udivmoddi4+0x2b8>
 8001074:	3802      	subs	r0, #2
 8001076:	4463      	add	r3, ip
 8001078:	1b9b      	subs	r3, r3, r6
 800107a:	b289      	uxth	r1, r1
 800107c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001080:	fb07 3316 	mls	r3, r7, r6, r3
 8001084:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001088:	fb06 f30e 	mul.w	r3, r6, lr
 800108c:	428b      	cmp	r3, r1
 800108e:	d908      	bls.n	80010a2 <__udivmoddi4+0x28a>
 8001090:	eb1c 0101 	adds.w	r1, ip, r1
 8001094:	f106 38ff 	add.w	r8, r6, #4294967295
 8001098:	d216      	bcs.n	80010c8 <__udivmoddi4+0x2b0>
 800109a:	428b      	cmp	r3, r1
 800109c:	d914      	bls.n	80010c8 <__udivmoddi4+0x2b0>
 800109e:	3e02      	subs	r6, #2
 80010a0:	4461      	add	r1, ip
 80010a2:	1ac9      	subs	r1, r1, r3
 80010a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010a8:	e738      	b.n	8000f1c <__udivmoddi4+0x104>
 80010aa:	462e      	mov	r6, r5
 80010ac:	4628      	mov	r0, r5
 80010ae:	e705      	b.n	8000ebc <__udivmoddi4+0xa4>
 80010b0:	4606      	mov	r6, r0
 80010b2:	e6e3      	b.n	8000e7c <__udivmoddi4+0x64>
 80010b4:	4618      	mov	r0, r3
 80010b6:	e6f8      	b.n	8000eaa <__udivmoddi4+0x92>
 80010b8:	454b      	cmp	r3, r9
 80010ba:	d2a9      	bcs.n	8001010 <__udivmoddi4+0x1f8>
 80010bc:	ebb9 0802 	subs.w	r8, r9, r2
 80010c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010c4:	3801      	subs	r0, #1
 80010c6:	e7a3      	b.n	8001010 <__udivmoddi4+0x1f8>
 80010c8:	4646      	mov	r6, r8
 80010ca:	e7ea      	b.n	80010a2 <__udivmoddi4+0x28a>
 80010cc:	4620      	mov	r0, r4
 80010ce:	e794      	b.n	8000ffa <__udivmoddi4+0x1e2>
 80010d0:	4640      	mov	r0, r8
 80010d2:	e7d1      	b.n	8001078 <__udivmoddi4+0x260>
 80010d4:	46d0      	mov	r8, sl
 80010d6:	e77b      	b.n	8000fd0 <__udivmoddi4+0x1b8>
 80010d8:	3b02      	subs	r3, #2
 80010da:	4461      	add	r1, ip
 80010dc:	e732      	b.n	8000f44 <__udivmoddi4+0x12c>
 80010de:	4630      	mov	r0, r6
 80010e0:	e709      	b.n	8000ef6 <__udivmoddi4+0xde>
 80010e2:	4464      	add	r4, ip
 80010e4:	3802      	subs	r0, #2
 80010e6:	e742      	b.n	8000f6e <__udivmoddi4+0x156>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d005      	beq.n	8001168 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	2203      	movs	r2, #3
 8001166:	4798      	blx	r3
    }
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf0c      	ite	eq
 8001182:	2301      	moveq	r3, #1
 8001184:	2300      	movne	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	731a      	strb	r2, [r3, #12]
 80011b4:	e00e      	b.n	80011d4 <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f01d fb54 	bl	801e870 <_Z9ei_callocjj>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2201      	movs	r2, #1
 80011d2:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d008      	beq.n	800120c <_ZN2ei9ei_matrixD1Ev+0x22>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7b1b      	ldrb	r3, [r3, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f01d fb40 	bl	801e88c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d006      	beq.n	8001238 <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	731a      	strb	r2, [r3, #12]
 8001236:	e00d      	b.n	8001254 <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	2101      	movs	r1, #1
 8001242:	4618      	mov	r0, r3
 8001244:	f01d fb14 	bl	801e870 <_Z9ei_callocjj>
 8001248:	4602      	mov	r2, r0
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2201      	movs	r2, #1
 8001252:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d008      	beq.n	800128c <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7b1b      	ldrb	r3, [r3, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d004      	beq.n	800128c <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f01d fb00 	bl	801e88c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh>:
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_dequantization_fn How to dequantize the values in this matrix
     * @param a_buffer Optional: a buffer, if set we won't allocate memory ourselves
     */
    ei_quantized_matrix(uint32_t n_rows,
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	603b      	str	r3, [r7, #0]
                        const char *file = NULL,
                        int line = 0
#endif
                        )
    {
        if (a_buffer) {
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh+0x22>
            buffer = a_buffer;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2200      	movs	r2, #0
 80012b4:	731a      	strb	r2, [r3, #12]
 80012b6:	e00d      	b.n	80012d4 <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh+0x3e>
        }
        else {
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	2101      	movs	r1, #1
 80012c2:	4618      	mov	r0, r3
 80012c4:	f01d fad4 	bl	801e870 <_Z9ei_callocjj>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2201      	movs	r2, #1
 80012d2:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	609a      	str	r2, [r3, #8]
        dequantization_fn = a_dequantization_fn;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	611a      	str	r2, [r3, #16]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(uint8_t), buffer);
            }
#endif
        }
    }
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_ZN2ei19ei_quantized_matrixD1Ev>:

    ~ei_quantized_matrix() {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <_ZN2ei19ei_quantized_matrixD1Ev+0x22>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	7b1b      	ldrb	r3, [r3, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d004      	beq.n	8001312 <_ZN2ei19ei_quantized_matrixD1Ev+0x22>
            ei_free(buffer);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f01d fabd 	bl	801e88c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(uint8_t), buffer);
            }
#endif
        }
    }
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
 8001320:	e7fe      	b.n	8001320 <_ZSt25__throw_bad_function_callv+0x4>
	...

08001324 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	1e5a      	subs	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4013      	ands	r3, r2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d005      	beq.n	800134a <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 8001340:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 8001342:	213c      	movs	r1, #60	; 0x3c
 8001344:	4817      	ldr	r0, [pc, #92]	; (80013a4 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 8001346:	f02a ff2d 	bl	802c1a4 <__assert_func>

	if(align && size)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d01f      	beq.n	8001390 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01c      	beq.n	8001390 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3301      	adds	r3, #1
 800135a:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4413      	add	r3, r2
 8001362:	2101      	movs	r1, #1
 8001364:	4618      	mov	r0, r3
 8001366:	f01d fa83 	bl	801e870 <_Z9ei_callocjj>
 800136a:	60f8      	str	r0, [r7, #12]

		if(p)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00e      	beq.n	8001390 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4413      	add	r3, r2
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	425b      	negs	r3, r3
 800137e:	4013      	ands	r3, r2
 8001380:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	1ad2      	subs	r2, r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3b02      	subs	r3, #2
 800138c:	b292      	uxth	r2, r2
 800138e:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 8001390:	697b      	ldr	r3, [r7, #20]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	0802d720 	.word	0x0802d720
 80013a0:	0802d73c 	.word	0x0802d73c
 80013a4:	0802d774 	.word	0x0802d774

080013a8 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	assert(ptr);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d105      	bne.n	80013c2 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 80013ba:	215f      	movs	r1, #95	; 0x5f
 80013bc:	480b      	ldr	r0, [pc, #44]	; (80013ec <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 80013be:	f02a fef1 	bl	802c1a4 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 80013c8:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	425b      	negs	r3, r3
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 80013d4:	68b8      	ldr	r0, [r7, #8]
 80013d6:	f01d fa59 	bl	801e88c <_Z7ei_freePv>
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	0802d7f8 	.word	0x0802d7f8
 80013e8:	0802d7fc 	.word	0x0802d7fc
 80013ec:	0802d774 	.word	0x0802d774

080013f0 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80013fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80013fe:	f027 ffc3 	bl	8029388 <ceilf>
 8001402:	eef0 7a40 	vmov.f32	s15, s0
 8001406:	eeb0 0a67 	vmov.f32	s0, s15
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	ed87 0a01 	vstr	s0, [r7, #4]
 800141a:	ed97 0a01 	vldr	s0, [r7, #4]
 800141e:	f028 f985 	bl	802972c <expf>
 8001422:	eef0 7a40 	vmov.f32	s15, s0
 8001426:	eeb0 0a67 	vmov.f32	s0, s15
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	ed87 0a01 	vstr	s0, [r7, #4]
 800143a:	ed97 0a01 	vldr	s0, [r7, #4]
 800143e:	f028 f829 	bl	8029494 <floorf>
 8001442:	eef0 7a40 	vmov.f32	s15, s0
 8001446:	eeb0 0a67 	vmov.f32	s0, s15
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	ed87 0a01 	vstr	s0, [r7, #4]
 800145a:	ed97 0a01 	vldr	s0, [r7, #4]
 800145e:	f028 f9c9 	bl	80297f4 <sqrtf>
 8001462:	eef0 7a40 	vmov.f32	s15, s0
 8001466:	eeb0 0a67 	vmov.f32	s0, s15
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	ed87 0a01 	vstr	s0, [r7, #4]
 800147a:	ed97 0a01 	vldr	s0, [r7, #4]
 800147e:	f028 f84f 	bl	8029520 <roundf>
 8001482:	eef0 7a40 	vmov.f32	s15, s0
 8001486:	eeb0 0a67 	vmov.f32	s0, s15
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <_ZN2ei5numpy4rollEPfji>:
     * @param input_array
     * @param input_array_size
     * @param shift The number of places by which elements are shifted.
     * @returns EIDSP_OK if OK
     */
    static int roll(float *input_array, size_t input_array_size, int shift) {
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
        if (shift < 0) {
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	da03      	bge.n	80014aa <_ZN2ei5numpy4rollEPfji+0x1a>
            shift = input_array_size + shift;
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4413      	add	r3, r2
 80014a8:	607b      	str	r3, [r7, #4]
        }

        if (shift == 0) {
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <_ZN2ei5numpy4rollEPfji+0x24>
            return EIDSP_OK;
 80014b0:	2400      	movs	r4, #0
 80014b2:	e030      	b.n	8001516 <_ZN2ei5numpy4rollEPfji+0x86>
        }

        // so we need to allocate a buffer of the size of shift...
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	f107 0010 	add.w	r0, r7, #16
 80014ba:	2300      	movs	r3, #0
 80014bc:	2101      	movs	r1, #1
 80014be:	f7ff fe69 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <_ZN2ei5numpy4rollEPfji+0x3c>
 80014c8:	4c15      	ldr	r4, [pc, #84]	; (8001520 <_ZN2ei5numpy4rollEPfji+0x90>)
 80014ca:	e01f      	b.n	800150c <_ZN2ei5numpy4rollEPfji+0x7c>

        // we copy from the end of the buffer into the shift buffer
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
 80014cc:	6938      	ldr	r0, [r7, #16]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	18d1      	adds	r1, r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	461a      	mov	r2, r3
 80014e0:	f02a fed6 	bl	802c290 <memcpy>

        // now we do a memmove to shift the array
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	18d0      	adds	r0, r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	461a      	mov	r2, r3
 80014f6:	68f9      	ldr	r1, [r7, #12]
 80014f8:	f02a fed8 	bl	802c2ac <memmove>

        // and copy the shift buffer back to the beginning of the array
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
 80014fc:	6939      	ldr	r1, [r7, #16]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	461a      	mov	r2, r3
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f02a fec3 	bl	802c290 <memcpy>

        return EIDSP_OK;
 800150a:	2400      	movs	r4, #0
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fe6a 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
    }
 8001516:	4623      	mov	r3, r4
 8001518:	4618      	mov	r0, r3
 800151a:	3724      	adds	r7, #36	; 0x24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd90      	pop	{r4, r7, pc}
 8001520:	fffffc16 	.word	0xfffffc16

08001524 <_ZN2ei5numpy3sumEPfj>:
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(int16_t));

        return EIDSP_OK;
    }

    static float sum(float *input_array, size_t input_array_size) {
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
        float res = 0.0f;
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d20f      	bcs.n	8001560 <_ZN2ei5numpy3sumEPfj+0x3c>
            res += input_array[ix];
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001554:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	3301      	adds	r3, #1
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	e7eb      	b.n	8001538 <_ZN2ei5numpy3sumEPfj+0x14>
        }
        return res;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	ee07 3a90 	vmov	s15, r3
    }
 8001566:	eeb0 0a67 	vmov.f32	s0, s15
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE>:
     * @param matrix1_cols matrix1 row size
     * @param matrix2 Pointer to matrix2 (NxK)
     * @param out_matrix Pointer to out matrix (MxK)
     * @returns EIDSP_OK if OK
     */
    static inline int dot_by_row(int i, float *row, size_t matrix1_cols,
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	603b      	str	r3, [r7, #0]
        quantized_matrix_t *matrix2, matrix_t *out_matrix)
    {
        if (matrix1_cols != matrix2->rows) {
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xbc>)
 800158e:	e048      	b.n	8001622 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xae>
        }

        for (uint16_t j = 0; j < matrix2->cols; j++) {
 8001590:	2300      	movs	r3, #0
 8001592:	83fb      	strh	r3, [r7, #30]
 8001594:	8bfa      	ldrh	r2, [r7, #30]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	429a      	cmp	r2, r3
 800159c:	d240      	bcs.n	8001620 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xac>
            float tmp = 0.0;
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 80015a4:	2300      	movs	r3, #0
 80015a6:	82fb      	strh	r3, [r7, #22]
 80015a8:	8afb      	ldrh	r3, [r7, #22]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d926      	bls.n	80015fe <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x8a>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	8afb      	ldrh	r3, [r7, #22]
 80015b6:	6839      	ldr	r1, [r7, #0]
 80015b8:	6889      	ldr	r1, [r1, #8]
 80015ba:	fb03 f101 	mul.w	r1, r3, r1
 80015be:	8bfb      	ldrh	r3, [r7, #30]
 80015c0:	440b      	add	r3, r1
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	757b      	strb	r3, [r7, #21]
                if (u8) { // this matrix appears to be very sparsely populated
 80015c8:	7d7b      	ldrb	r3, [r7, #21]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d013      	beq.n	80015f6 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x82>
                    tmp += row[k] * quantized_values_one_zero[u8];
 80015ce:	8afb      	ldrh	r3, [r7, #22]
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	4413      	add	r3, r2
 80015d6:	ed93 7a00 	vldr	s14, [r3]
 80015da:	7d7b      	ldrb	r3, [r7, #21]
 80015dc:	4a15      	ldr	r2, [pc, #84]	; (8001634 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xc0>)
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80015ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f2:	edc7 7a06 	vstr	s15, [r7, #24]
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 80015f6:	8afb      	ldrh	r3, [r7, #22]
 80015f8:	3301      	adds	r3, #1
 80015fa:	82fb      	strh	r3, [r7, #22]
 80015fc:	e7d4      	b.n	80015a8 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x34>
                }
            }
            out_matrix->buffer[i * matrix2->cols + j] = tmp;
 80015fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	68f9      	ldr	r1, [r7, #12]
 8001608:	fb03 f101 	mul.w	r1, r3, r1
 800160c:	8bfb      	ldrh	r3, [r7, #30]
 800160e:	440b      	add	r3, r1
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	601a      	str	r2, [r3, #0]
        for (uint16_t j = 0; j < matrix2->cols; j++) {
 8001618:	8bfb      	ldrh	r3, [r7, #30]
 800161a:	3301      	adds	r3, #1
 800161c:	83fb      	strh	r3, [r7, #30]
 800161e:	e7b9      	b.n	8001594 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x20>
        }

        return EIDSP_OK;
 8001620:	2300      	movs	r3, #0
    }
 8001622:	4618      	mov	r0, r3
 8001624:	3724      	adds	r7, #36	; 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	fffffc14 	.word	0xfffffc14
 8001634:	0802fb14 	.word	0x0802fb14

08001638 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE>:
     * Return the Discrete Cosine Transform of arbitrary type sequence 2.
     * @param input Input array (of size N)
     * @param N number of items in input and output array
     * @returns EIDSP_OK if OK
     */
    static int dct2(float *input, size_t N, DCT_NORMALIZATION_MODE normalization = DCT_NORMALIZATION_NONE) {
 8001638:	b580      	push	{r7, lr}
 800163a:	ed2d 8b02 	vpush	{d8}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	4613      	mov	r3, r2
 8001648:	71fb      	strb	r3, [r7, #7]
        if (N == 0) {
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x1c>
            return EIDSP_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	e065      	b.n	8001720 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xe8>
        }

        int ret = ei::dct::transform(input, N);
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f01b fa8e 	bl	801cb78 <_ZN2ei3dct9transformEPfj>
 800165c:	6178      	str	r0, [r7, #20]
        if (ret != EIDSP_OK) {
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x30>
            EIDSP_ERR(ret);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	e05b      	b.n	8001720 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xe8>
        }

        // for some reason the output is 2x too low...
        for (size_t ix = 0; ix < N; ix++) {
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	429a      	cmp	r2, r3
 8001672:	d211      	bcs.n	8001698 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x60>
            input[ix] *= 2;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	edd3 7a00 	vldr	s15, [r3]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800168c:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < N; ix++) {
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	3301      	adds	r3, #1
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	e7e9      	b.n	800166c <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x34>
        }

        if (normalization == DCT_NORMALIZATION_ORTHO) {
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d13f      	bne.n	800171e <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xe6>
            input[0] = input[0] * sqrt(1.0f / static_cast<float>(4 * N));
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	ed93 8a00 	vldr	s16, [r3]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	ee07 3a90 	vmov	s15, r3
 80016ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016b8:	eeb0 0a47 	vmov.f32	s0, s14
 80016bc:	f7ff fec8 	bl	8001450 <_ZSt4sqrtf>
 80016c0:	eef0 7a40 	vmov.f32	s15, s0
 80016c4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	edc3 7a00 	vstr	s15, [r3]
            for (size_t ix = 1; ix < N; ix++) {
 80016ce:	2301      	movs	r3, #1
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d221      	bcs.n	800171e <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xe6>
                input[ix] = input[ix] * sqrt(1.0f / static_cast<float>(2 * N));
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4413      	add	r3, r2
 80016e2:	ed93 8a00 	vldr	s16, [r3]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016fa:	eeb0 0a47 	vmov.f32	s0, s14
 80016fe:	f7ff fea7 	bl	8001450 <_ZSt4sqrtf>
 8001702:	eef0 7a40 	vmov.f32	s15, s0
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4413      	add	r3, r2
 800170e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001712:	edc3 7a00 	vstr	s15, [r3]
            for (size_t ix = 1; ix < N; ix++) {
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	3301      	adds	r3, #1
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	e7d9      	b.n	80016d2 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x9a>
            }
        }

        return EIDSP_OK;
 800171e:	2300      	movs	r3, #0
    }
 8001720:	4618      	mov	r0, r3
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	ecbd 8b02 	vpop	{d8}
 800172a:	bd80      	pop	{r7, pc}

0800172c <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE>:
    /**
     * Discrete Cosine Transform of arbitrary type sequence 2 on a matrix.
     * @param matrix
     * @returns EIDSP_OK if OK
     */
    static int dct2(matrix_t *matrix, DCT_NORMALIZATION_MODE normalization = DCT_NORMALIZATION_NONE) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	429a      	cmp	r2, r3
 8001744:	d218      	bcs.n	8001778 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x4c>
            int r = dct2(matrix->buffer + (row * matrix->cols), matrix->cols, normalization);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	68f9      	ldr	r1, [r7, #12]
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	18d0      	adds	r0, r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	4619      	mov	r1, r3
 8001760:	f7ff ff6a 	bl	8001638 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE>
 8001764:	60b8      	str	r0, [r7, #8]
            if (r != EIDSP_OK) {
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x44>
                return r;
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	e004      	b.n	800177a <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x4e>
        for (size_t row = 0; row < matrix->rows; row++) {
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3301      	adds	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	e7e1      	b.n	800173c <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x10>
            }
        }

        return EIDSP_OK;
 8001778:	2300      	movs	r3, #0
    }
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <_ZN2ei5numpy17quantize_zero_oneEf>:

    /**
     * Quantize a float value between zero and one
     * @param value Float value
     */
    static uint8_t quantize_zero_one(float value) {
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	ed87 0a01 	vstr	s0, [r7, #4]
        const size_t length = sizeof(quantized_values_one_zero) / sizeof(float);
 800178e:	23ef      	movs	r3, #239	; 0xef
 8001790:	613b      	str	r3, [r7, #16]

        // look in the table
        for (size_t ix = 0; ix < length; ix++) {
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	2bee      	cmp	r3, #238	; 0xee
 800179a:	d813      	bhi.n	80017c4 <_ZN2ei5numpy17quantize_zero_oneEf+0x40>
            if (quantized_values_one_zero[ix] == value) return ix;
 800179c:	4a4c      	ldr	r2, [pc, #304]	; (80018d0 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	edd3 7a00 	vldr	s15, [r3]
 80017a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80017ac:	eeb4 7a67 	vcmp.f32	s14, s15
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	d102      	bne.n	80017bc <_ZN2ei5numpy17quantize_zero_oneEf+0x38>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	e083      	b.n	80018c4 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        for (size_t ix = 0; ix < length; ix++) {
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	3301      	adds	r3, #1
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e7e8      	b.n	8001796 <_ZN2ei5numpy17quantize_zero_oneEf+0x12>
        }

        // no match?

        if (value < quantized_values_one_zero[0]) {
 80017c4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80018d4 <_ZN2ei5numpy17quantize_zero_oneEf+0x150>
 80017c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d4:	d508      	bpl.n	80017e8 <_ZN2ei5numpy17quantize_zero_oneEf+0x64>
            return quantized_values_one_zero[0];
 80017d6:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80018d4 <_ZN2ei5numpy17quantize_zero_oneEf+0x150>
 80017da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017de:	edc7 7a00 	vstr	s15, [r7]
 80017e2:	783b      	ldrb	r3, [r7, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	e06d      	b.n	80018c4 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        }
        if (value > quantized_values_one_zero[length - 1]) {
 80017e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80017f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	dd08      	ble.n	800180c <_ZN2ei5numpy17quantize_zero_oneEf+0x88>
            return quantized_values_one_zero[length - 1];
 80017fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80017fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001802:	edc7 7a00 	vstr	s15, [r7]
 8001806:	783b      	ldrb	r3, [r7, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	e05b      	b.n	80018c4 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        }

        int lo = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
        int hi = length - 1;
 8001810:	23ee      	movs	r3, #238	; 0xee
 8001812:	617b      	str	r3, [r7, #20]

        while (lo <= hi) {
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	429a      	cmp	r2, r3
 800181a:	dc35      	bgt.n	8001888 <_ZN2ei5numpy17quantize_zero_oneEf+0x104>
            int mid = (hi + lo) / 2;
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	4413      	add	r3, r2
 8001822:	0fda      	lsrs	r2, r3, #31
 8001824:	4413      	add	r3, r2
 8001826:	105b      	asrs	r3, r3, #1
 8001828:	60fb      	str	r3, [r7, #12]

            if (value < quantized_values_one_zero[mid]) {
 800182a:	4a29      	ldr	r2, [pc, #164]	; (80018d0 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	ed97 7a01 	vldr	s14, [r7, #4]
 800183a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001842:	d503      	bpl.n	800184c <_ZN2ei5numpy17quantize_zero_oneEf+0xc8>
                hi = mid - 1;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3b01      	subs	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e7e3      	b.n	8001814 <_ZN2ei5numpy17quantize_zero_oneEf+0x90>
            } else if (value > quantized_values_one_zero[mid]) {
 800184c:	4a20      	ldr	r2, [pc, #128]	; (80018d0 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ed97 7a01 	vldr	s14, [r7, #4]
 800185c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	dd03      	ble.n	800186e <_ZN2ei5numpy17quantize_zero_oneEf+0xea>
                lo = mid + 1;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	3301      	adds	r3, #1
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	e7d2      	b.n	8001814 <_ZN2ei5numpy17quantize_zero_oneEf+0x90>
            } else {
                return quantized_values_one_zero[mid];
 800186e:	4a18      	ldr	r2, [pc, #96]	; (80018d0 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800187e:	edc7 7a00 	vstr	s15, [r7]
 8001882:	783b      	ldrb	r3, [r7, #0]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	e01d      	b.n	80018c4 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
            }
        }

        // lo == hi + 1
        return (quantized_values_one_zero[lo] - value) < (value - quantized_values_one_zero[hi]) ?
 8001888:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	ed93 7a00 	vldr	s14, [r3]
 8001894:	edd7 7a01 	vldr	s15, [r7, #4]
 8001898:	ee37 7a67 	vsub.f32	s14, s14, s15
 800189c:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	edd7 6a01 	vldr	s13, [r7, #4]
 80018ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
            lo :
            hi;
 80018b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	d502      	bpl.n	80018c0 <_ZN2ei5numpy17quantize_zero_oneEf+0x13c>
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	e001      	b.n	80018c4 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	b2db      	uxtb	r3, r3
    }
 80018c4:	4618      	mov	r0, r3
 80018c6:	3724      	adds	r7, #36	; 0x24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	0802fb14 	.word	0x0802fb14
 80018d4:	00000000 	.word	0x00000000

080018d8 <_ZN2ei5numpy19dequantize_zero_oneEh>:

    /**
     * Dequantize a float value between zero and one
     * @param value
     */
    static float dequantize_zero_one(uint8_t value) {
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
        return quantized_values_one_zero[value];
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <_ZN2ei5numpy19dequantize_zero_oneEh+0x28>)
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	ee07 3a90 	vmov	s15, r3
    }
 80018f0:	eeb0 0a67 	vmov.f32	s0, s15
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	0802fb14 	.word	0x0802fb14

08001904 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>:
     * @param output Output matrix of size (M+pad_before+pad_after x N)
     * @param pad_before Number of items to pad before
     * @param pad_after Number of items to pad after
     * @returns 0 if OK
     */
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	4611      	mov	r1, r2
 8001910:	461a      	mov	r2, r3
 8001912:	460b      	mov	r3, r1
 8001914:	80fb      	strh	r3, [r7, #6]
 8001916:	4613      	mov	r3, r2
 8001918:	80bb      	strh	r3, [r7, #4]
        if (output->cols != input->cols) {
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	429a      	cmp	r2, r3
 8001924:	d001      	beq.n	800192a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001926:	4b66      	ldr	r3, [pc, #408]	; (8001ac0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1bc>)
 8001928:	e0c5      	b.n	8001ab6 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b2>
        }

        if (output->rows != input->rows + pad_before + pad_after) {
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6859      	ldr	r1, [r3, #4]
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	4419      	add	r1, r3
 8001936:	88bb      	ldrh	r3, [r7, #4]
 8001938:	440b      	add	r3, r1
 800193a:	429a      	cmp	r2, r3
 800193c:	d001      	beq.n	8001942 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800193e:	4b60      	ldr	r3, [pc, #384]	; (8001ac0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1bc>)
 8001940:	e0b9      	b.n	8001ab6 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b2>
        }

        if (input->rows == 0) {
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x4a>
            EIDSP_ERR(EIDSP_INPUT_MATRIX_EMPTY);
 800194a:	4b5e      	ldr	r3, [pc, #376]	; (8001ac4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1c0>)
 800194c:	e0b3      	b.n	8001ab6 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b2>
        }

        uint32_t pad_before_index = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
        bool pad_before_direction_up = true;
 8001952:	2301      	movs	r3, #1
 8001954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	3b01      	subs	r3, #1
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	2b00      	cmp	r3, #0
 8001962:	db42      	blt.n	80019ea <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe6>
            memcpy(output->buffer + (input->cols * ix),
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	69f9      	ldr	r1, [r7, #28]
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	18d0      	adds	r0, r2, r3
                input->buffer + (pad_before_index * input->cols),
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	18d1      	adds	r1, r2, r3
                input->cols * sizeof(float));
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	009b      	lsls	r3, r3, #2
            memcpy(output->buffer + (input->cols * ix),
 800198e:	461a      	mov	r2, r3
 8001990:	f02a fc7e 	bl	802c290 <memcpy>

            if (pad_before_index == 0 && !pad_before_direction_up) {
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10a      	bne.n	80019b0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xac>
 800199a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800199e:	f083 0301 	eor.w	r3, r3, #1
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xac>
                pad_before_direction_up = true;
 80019a8:	2301      	movs	r3, #1
 80019aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019ae:	e018      	b.n	80019e2 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
            }
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d107      	bne.n	80019cc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xc8>
 80019bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xc8>
                pad_before_direction_up = false;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019ca:	e00a      	b.n	80019e2 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
            }
            else if (pad_before_direction_up) {
 80019cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xd8>
                pad_before_index++;
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	3301      	adds	r3, #1
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
 80019da:	e002      	b.n	80019e2 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
            }
            else {
                pad_before_index--;
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	3b01      	subs	r3, #1
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	e7b9      	b.n	800195e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x5a>
            }
        }

        memcpy(output->buffer + (input->cols * pad_before),
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	88f9      	ldrh	r1, [r7, #6]
 80019f4:	fb01 f303 	mul.w	r3, r1, r3
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	18d0      	adds	r0, r2, r3
            input->buffer,
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6819      	ldr	r1, [r3, #0]
            input->rows * input->cols * sizeof(float));
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	6892      	ldr	r2, [r2, #8]
 8001a08:	fb02 f303 	mul.w	r3, r2, r3
 8001a0c:	009b      	lsls	r3, r3, #2
        memcpy(output->buffer + (input->cols * pad_before),
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f02a fc3e 	bl	802c290 <memcpy>

        int32_t pad_after_index = input->rows - 1;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	61bb      	str	r3, [r7, #24]
        bool pad_after_direction_up = false;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	75fb      	strb	r3, [r7, #23]

        for (int32_t ix = 0; ix < pad_after; ix++) {
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	88bb      	ldrh	r3, [r7, #4]
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	da43      	bge.n	8001ab4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b0>
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	88f8      	ldrh	r0, [r7, #6]
 8001a36:	6939      	ldr	r1, [r7, #16]
 8001a38:	4401      	add	r1, r0
 8001a3a:	4608      	mov	r0, r1
 8001a3c:	68f9      	ldr	r1, [r7, #12]
 8001a3e:	6849      	ldr	r1, [r1, #4]
 8001a40:	4401      	add	r1, r0
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	18d0      	adds	r0, r2, r3
                input->buffer + (pad_after_index * input->cols),
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	69b9      	ldr	r1, [r7, #24]
 8001a54:	fb01 f303 	mul.w	r3, r1, r3
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	18d1      	adds	r1, r2, r3
                input->cols * sizeof(float));
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	009b      	lsls	r3, r3, #2
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 8001a62:	461a      	mov	r2, r3
 8001a64:	f02a fc14 	bl	802c290 <memcpy>

            if (pad_after_index == 0 && !pad_after_direction_up) {
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d108      	bne.n	8001a80 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x17c>
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	f083 0301 	eor.w	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x17c>
                pad_after_direction_up = true;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	75fb      	strb	r3, [r7, #23]
 8001a7e:	e015      	b.n	8001aac <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1a8>
            }
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d105      	bne.n	8001a98 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x194>
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x194>
                pad_after_direction_up = false;
 8001a92:	2300      	movs	r3, #0
 8001a94:	75fb      	strb	r3, [r7, #23]
 8001a96:	e009      	b.n	8001aac <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1a8>
            }
            else if (pad_after_direction_up) {
 8001a98:	7dfb      	ldrb	r3, [r7, #23]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1a2>
                pad_after_index++;
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	61bb      	str	r3, [r7, #24]
 8001aa4:	e002      	b.n	8001aac <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1a8>
            }
            else {
                pad_after_index--;
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	61bb      	str	r3, [r7, #24]
        for (int32_t ix = 0; ix < pad_after; ix++) {
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	e7b7      	b.n	8001a24 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x120>
            }
        }

        return EIDSP_OK;
 8001ab4:	2300      	movs	r3, #0
    }
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3728      	adds	r7, #40	; 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	fffffc14 	.word	0xfffffc14
 8001ac4:	fffffc12 	.word	0xfffffc12

08001ac8 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001ad4:	edd7 7a00 	vldr	s15, [r7]
 8001ad8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001adc:	eef4 7a47 	vcmp.f32	s15, s14
 8001ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae4:	d101      	bne.n	8001aea <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e033      	b.n	8001b52 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af2:	d204      	bcs.n	8001afe <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afc:	d301      	bcc.n	8001b02 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001afe:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001b00:	e027      	b.n	8001b52 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	82bb      	strh	r3, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	82fb      	strh	r3, [r7, #22]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	81bb      	strh	r3, [r7, #12]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	81fb      	strh	r3, [r7, #14]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 8001b2e:	f107 020c 	add.w	r2, r7, #12
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4611      	mov	r1, r2
 8001b38:	ed97 0a00 	vldr	s0, [r7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f009 fd55 	bl	800b5ec <arm_mat_scale_f32>
 8001b42:	4603      	mov	r3, r0
 8001b44:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	e000      	b.n	8001b52 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001b50:	2300      	movs	r3, #0
    }
 8001b52:	4618      	mov	r0, r3
 8001b54:	3720      	adds	r7, #32
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	fffffc0c 	.word	0xfffffc0c

08001b60 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6892      	ldr	r2, [r2, #8]
 8001b78:	fb02 f303 	mul.w	r3, r2, r3
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d215      	bcs.n	8001bae <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x4e>
            matrix->buffer[ix] -= subtraction;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	ed93 7a00 	vldr	s14, [r3]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	edd7 7a00 	vldr	s15, [r7]
 8001b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba2:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	e7e0      	b.n	8001b70 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x10>
        }
        return EIDSP_OK;
 8001bae:	2300      	movs	r3, #0
    }
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_>:
     * Calculate the mean over a matrix on axis 0
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Nx1)
     * @returns 0 if OK
     */
    static int mean_axis0(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
        if (input_matrix->cols != output_matrix->rows) {
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d001      	beq.n	8001bd6 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bd2:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xb0>)
 8001bd4:	e043      	b.n	8001c5e <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xa2>
        }

        if (output_matrix->cols != 1) {
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d001      	beq.n	8001be2 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bde:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xb0>)
 8001be0:	e03d      	b.n	8001c5e <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xa2>
        }

        for (size_t col = 0; col < input_matrix->cols; col++) {
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d235      	bcs.n	8001c5c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xa0>
            // gathering up the current columnand moving it into sequential memory to use
            // SIMD to calculate the mean would take more time than the simple loop
            // so disable this case. The alternative is to use 2 transposes and on a "big" ARM
            // platform that will take more time

            float sum = 0.0f;
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]

            for (size_t row = 0; row < input_matrix->rows; row++) {
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d216      	bcs.n	8001c32 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x76>
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	fb03 f101 	mul.w	r1, r3, r1
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	440b      	add	r3, r1
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	edd3 7a00 	vldr	s15, [r3]
 8001c1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c26:	edc7 7a04 	vstr	s15, [r7, #16]
            for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	e7e3      	b.n	8001bfa <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x3e>
            }

            output_matrix->buffer[col] = sum / input_matrix->rows;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	edd7 6a04 	vldr	s13, [r7, #16]
 8001c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c50:	edc3 7a00 	vstr	s15, [r3]
        for (size_t col = 0; col < input_matrix->cols; col++) {
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	e7c4      	b.n	8001be6 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x2a>
        }

        return EIDSP_OK;
 8001c5c:	2300      	movs	r3, #0
    }
 8001c5e:	4618      	mov	r0, r3
 8001c60:	371c      	adds	r7, #28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	fffffc14 	.word	0xfffffc14

08001c70 <_ZN2ei5numpy9std_axis0EPNS_9ei_matrixES2_>:
     * Calculate the standard deviation over a matrix on axis 0
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Nx1)
     * @returns 0 if OK
     */
    static int std_axis0(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
#if EIDSP_USE_CMSIS_DSP
        return std_axis0_CMSIS(input_matrix, output_matrix);
 8001c7a:	6839      	ldr	r1, [r7, #0]
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 fd8f 	bl	80027a0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>
 8001c82:	4603      	mov	r3, r0
            output_matrix->buffer[col] = sqrt(std / input_matrix->rows);
        }

        return EIDSP_OK;
#endif
    }
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>:
    /**
     * Get the minimum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int min(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d001      	beq.n	8001ca6 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001ca2:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x78>)
 8001ca4:	e029      	b.n	8001cfa <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6e>
        }
        if (output_matrix->cols != 1) {
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d001      	beq.n	8001cb2 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x78>)
 8001cb0:	e023      	b.n	8001cfa <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6e>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d21b      	bcs.n	8001cf8 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6c>
#if EIDSP_USE_CMSIS_DSP
            float min;
            uint32_t ix;
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	6979      	ldr	r1, [r7, #20]
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	18d0      	adds	r0, r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6899      	ldr	r1, [r3, #8]
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	f107 0210 	add.w	r2, r7, #16
 8001cde:	f009 fd34 	bl	800b74a <arm_min_f32>
            output_matrix->buffer[row] = min;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	e7de      	b.n	8001cb6 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = min;
#endif
        }

        return EIDSP_OK;
 8001cf8:	2300      	movs	r3, #0
    }
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	fffffc14 	.word	0xfffffc14

08001d08 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>:
    /**
     * Get the maximum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int max(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d001      	beq.n	8001d22 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x78>)
 8001d20:	e029      	b.n	8001d76 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6e>
        }
        if (output_matrix->cols != 1) {
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d001      	beq.n	8001d2e <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x78>)
 8001d2c:	e023      	b.n	8001d76 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6e>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d21b      	bcs.n	8001d74 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6c>
#if EIDSP_USE_CMSIS_DSP
            float max;
            uint32_t ix;
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	6979      	ldr	r1, [r7, #20]
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	18d0      	adds	r0, r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6899      	ldr	r1, [r3, #8]
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	f107 0210 	add.w	r2, r7, #16
 8001d5a:	f009 fcbe 	bl	800b6da <arm_max_f32>
            output_matrix->buffer[row] = max;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	e7de      	b.n	8001d32 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = max;
#endif
        }

        return EIDSP_OK;
 8001d74:	2300      	movs	r3, #0
    }
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	fffffc14 	.word	0xfffffc14

08001d84 <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001d84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d88:	b098      	sub	sp, #96	; 0x60
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	3301      	adds	r3, #1
 8001d9a:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x24>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001da4:	4c6a      	ldr	r4, [pc, #424]	; (8001f50 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1cc>)
 8001da6:	e0cd      	b.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c0>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d901      	bls.n	8001db4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x30>
            src_size = n_fft;
 8001db0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001db2:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001db4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001db8:	2300      	movs	r3, #0
 8001dba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	f7ff f9e9 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
 8001dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <_ZN2ei5numpy4rfftEPKfjPfjj+0x48>
 8001dc8:	4c62      	ldr	r4, [pc, #392]	; (8001f54 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1d0>)
 8001dca:	e0b6      	b.n	8001f3a <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b6>
        if (!fft_input.buffer) {
 8001dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x52>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001dd2:	4c60      	ldr	r4, [pc, #384]	; (8001f54 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1d0>)
 8001dd4:	e0b1      	b.n	8001f3a <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b6>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001dd6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	68f9      	ldr	r1, [r7, #12]
 8001de0:	f02a fa56 	bl	802c290 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8001de4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	18d0      	adds	r0, r2, r3
 8001dec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	461a      	mov	r2, r3
 8001df6:	2100      	movs	r1, #0
 8001df8:	f02a fa72 	bl	802c2e0 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	d025      	beq.n	8001e4e <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 8001e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e04:	2b40      	cmp	r3, #64	; 0x40
 8001e06:	d022      	beq.n	8001e4e <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 8001e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e0a:	2b80      	cmp	r3, #128	; 0x80
 8001e0c:	d01f      	beq.n	8001e4e <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 8001e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e14:	d01b      	beq.n	8001e4e <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 8001e16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e1c:	d017      	beq.n	8001e4e <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e24:	d013      	beq.n	8001e4e <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 8001e26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e2c:	d00f      	beq.n	8001e4e <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 8001e2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e34:	d00b      	beq.n	8001e4e <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001e36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	f000 fb19 	bl	8002474 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 8001e42:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 8001e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d073      	beq.n	8001f32 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1ae>
                EIDSP_ERR(ret);
 8001e4a:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001e4c:	e075      	b.n	8001f3a <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b6>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8001e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e52:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 fd33 	bl	80028c0 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8001e5a:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (status != ARM_MATH_SUCCESS) {
 8001e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <_ZN2ei5numpy4rfftEPKfjPfjj+0xe2>
                return status;
 8001e62:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001e64:	e068      	b.n	8001f38 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001e66:	f107 0014 	add.w	r0, r7, #20
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e6e:	2101      	movs	r1, #1
 8001e70:	f7ff f990 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d102      	bne.n	8001e80 <_ZN2ei5numpy4rfftEPKfjPfjj+0xfc>
 8001e7a:	4c36      	ldr	r4, [pc, #216]	; (8001f54 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1d0>)
 8001e7c:	2500      	movs	r5, #0
 8001e7e:	e050      	b.n	8001f22 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            if (!fft_output.buffer) {
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d102      	bne.n	8001e8c <_ZN2ei5numpy4rfftEPKfjPfjj+0x108>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001e86:	4c33      	ldr	r4, [pc, #204]	; (8001f54 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1d0>)
 8001e88:	2500      	movs	r5, #0
 8001e8a:	e04a      	b.n	8001f22 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001e8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001e94:	2300      	movs	r3, #0
 8001e96:	f00b ffeb 	bl	800de70 <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	440b      	add	r3, r1
 8001eb2:	6852      	ldr	r2, [r2, #4]
 8001eb4:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001eba:	2301      	movs	r3, #1
 8001ebc:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d22b      	bcs.n	8001f20 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	f107 0210 	add.w	r2, r7, #16
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f009 fc6f 	bl	800b7ba <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fb5c 	bl	800059c <__aeabi_f2d>
 8001ee4:	4680      	mov	r8, r0
 8001ee6:	4689      	mov	r9, r1
 8001ee8:	2002      	movs	r0, #2
 8001eea:	f003 ff52 	bl	8005d92 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001eee:	ec53 2b10 	vmov	r2, r3, d0
 8001ef2:	4640      	mov	r0, r8
 8001ef4:	4649      	mov	r1, r9
 8001ef6:	f7fe fba9 	bl	800064c <__aeabi_dmul>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	18d5      	adds	r5, r2, r3
 8001f0a:	f7fe fe97 	bl	8000c3c <__aeabi_d2f>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	602b      	str	r3, [r5, #0]

                fft_output_buffer_ix += 2;
 8001f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f14:	3302      	adds	r3, #2
 8001f16:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f1e:	e7ce      	b.n	8001ebe <_ZN2ei5numpy4rfftEPKfjPfjj+0x13a>
 8001f20:	2501      	movs	r5, #1
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff f95f 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
 8001f2c:	2d01      	cmp	r5, #1
 8001f2e:	d103      	bne.n	8001f38 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>
 8001f30:	e000      	b.n	8001f34 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b0>
            }
 8001f32:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8001f34:	2400      	movs	r4, #0
 8001f36:	e000      	b.n	8001f3a <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b6>
                return status;
 8001f38:	bf00      	nop
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001f3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff f953 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
    }
 8001f44:	4623      	mov	r3, r4
 8001f46:	4618      	mov	r0, r3
 8001f48:	3760      	adds	r7, #96	; 0x60
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f50:	fffffc11 	.word	0xfffffc11
 8001f54:	fffffc16 	.word	0xfffffc16

08001f58 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8001f58:	b5b0      	push	{r4, r5, r7, lr}
 8001f5a:	b098      	sub	sp, #96	; 0x60
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f68:	085b      	lsrs	r3, r3, #1
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d001      	beq.n	8001f7a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001f76:	4c6f      	ldr	r4, [pc, #444]	; (8002134 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1dc>)
 8001f78:	e0d6      	b.n	8002128 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d0>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d901      	bls.n	8001f86 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 8001f82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f84:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d101      	bne.n	8001f96 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8001f96:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f9c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	f7ff f8f8 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
 8001fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 8001faa:	4c63      	ldr	r4, [pc, #396]	; (8002138 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001fac:	e0b7      	b.n	800211e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        if (!fft_input.buffer) {
 8001fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001fb4:	4c60      	ldr	r4, [pc, #384]	; (8002138 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001fb6:	e0b2      	b.n	800211e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        }

        if (!fft_input_buffer) {
 8001fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d112      	bne.n	8001fe4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001fbe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	68f9      	ldr	r1, [r7, #12]
 8001fc8:	f02a f962 	bl	802c290 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 8001fcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	18d0      	adds	r0, r2, r3
 8001fd4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	2100      	movs	r1, #0
 8001fe0:	f02a f97e 	bl	802c2e0 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001fe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d025      	beq.n	8002036 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001fea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fec:	2b40      	cmp	r3, #64	; 0x40
 8001fee:	d022      	beq.n	8002036 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001ff0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ff2:	2b80      	cmp	r3, #128	; 0x80
 8001ff4:	d01f      	beq.n	8002036 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ffc:	d01b      	beq.n	8002036 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002004:	d017      	beq.n	8002036 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8002006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200c:	d013      	beq.n	8002036 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 800200e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002014:	d00f      	beq.n	8002036 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002016:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800201c:	d00b      	beq.n	8002036 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 800201e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002022:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	f000 fa97 	bl	8002558 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 800202a:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 800202c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800202e:	2b00      	cmp	r3, #0
 8002030:	d071      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1be>
                EIDSP_ERR(ret);
 8002032:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002034:	e073      	b.n	800211e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8002036:	f107 0320 	add.w	r3, r7, #32
 800203a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fc3f 	bl	80028c0 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8002042:	64b8      	str	r0, [r7, #72]	; 0x48
            if (status != ARM_MATH_SUCCESS) {
 8002044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf6>
                return status;
 800204a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800204c:	e066      	b.n	800211c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 800204e:	f107 0010 	add.w	r0, r7, #16
 8002052:	2300      	movs	r3, #0
 8002054:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002056:	2101      	movs	r1, #1
 8002058:	f7ff f89c 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x110>
 8002062:	4c35      	ldr	r4, [pc, #212]	; (8002138 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002064:	2500      	movs	r5, #0
 8002066:	e04e      	b.n	8002106 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            if (!fft_output.buffer) {
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11c>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800206e:	4c32      	ldr	r4, [pc, #200]	; (8002138 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002070:	2500      	movs	r5, #0
 8002072:	e048      	b.n	8002106 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8002074:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	f107 0020 	add.w	r0, r7, #32
 800207c:	2300      	movs	r3, #0
 800207e:	f00b fef7 	bl	800de70 <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002096:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800209a:	3b01      	subs	r3, #1
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	440b      	add	r3, r1
 80020a2:	6852      	ldr	r2, [r2, #4]
 80020a4:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 80020a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020a8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80020ac:	3b01      	subs	r3, #1
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 80020ba:	2302      	movs	r3, #2
 80020bc:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80020be:	2301      	movs	r3, #1
 80020c0:	657b      	str	r3, [r7, #84]	; 0x54
 80020c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c4:	3b01      	subs	r3, #1
 80020c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d21b      	bcs.n	8002104 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ac>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	441a      	add	r2, r3
 80020d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	440b      	add	r3, r1
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020e4:	3301      	adds	r3, #1
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	441a      	add	r2, r3
 80020ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	440b      	add	r3, r1
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 80020f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020f8:	3302      	adds	r3, #2
 80020fa:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80020fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020fe:	3301      	adds	r3, #1
 8002100:	657b      	str	r3, [r7, #84]	; 0x54
 8002102:	e7de      	b.n	80020c2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x16a>
 8002104:	2501      	movs	r5, #1
 8002106:	f107 0310 	add.w	r3, r7, #16
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff f86d 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
 8002110:	2d01      	cmp	r5, #1
 8002112:	d103      	bne.n	800211c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
 8002114:	e000      	b.n	8002118 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c0>
            }
 8002116:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8002118:	2400      	movs	r4, #0
 800211a:	e000      	b.n	800211e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
                return status;
 800211c:	bf00      	nop
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 800211e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff f861 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
    }
 8002128:	4623      	mov	r3, r4
 800212a:	4618      	mov	r0, r3
 800212c:	3760      	adds	r7, #96	; 0x60
 800212e:	46bd      	mov	sp, r7
 8002130:	bdb0      	pop	{r4, r5, r7, pc}
 8002132:	bf00      	nop
 8002134:	fffffc11 	.word	0xfffffc11
 8002138:	fffffc16 	.word	0xfffffc16

0800213c <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	ed87 0a03 	vstr	s0, [r7, #12]
 8002146:	edc7 0a02 	vstr	s1, [r7, #8]
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800215a:	4b24      	ldr	r3, [pc, #144]	; (80021ec <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 800215c:	e03f      	b.n	80021de <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d104      	bne.n	800216e <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	e037      	b.n	80021de <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 800216e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002172:	edd7 7a03 	vldr	s15, [r7, #12]
 8002176:	ee77 6a67 	vsub.f32	s13, s14, s15
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3b01      	subs	r3, #1
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800218a:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3b01      	subs	r3, #1
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	429a      	cmp	r2, r3
 800219a:	d216      	bcs.n	80021ca <_ZN2ei5numpy8linspaceEffmPf+0x8e>
            out[ix] = start + ix * step;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	ee07 3a90 	vmov	s15, r3
 80021a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80021aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	4413      	add	r3, r2
 80021b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021be:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	3301      	adds	r3, #1
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	e7e3      	b.n	8002192 <_ZN2ei5numpy8linspaceEffmPf+0x56>
        }

        // last entry always stop
        out[number - 1] = stop;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021d0:	3b01      	subs	r3, #1
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 80021dc:	2300      	movs	r3, #0
    }
 80021de:	4618      	mov	r0, r3
 80021e0:	371c      	adds	r7, #28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	fffffc10 	.word	0xfffffc10

080021f0 <_ZN2ei5numpy14int16_to_floatEPKsPfj>:
     * @param input
     * @param output
     * @param length
     * @returns 0 if OK
     */
    static int int16_to_float(const EIDSP_i16 *input, float *output, size_t length) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
#if EIDSP_USE_CMSIS_DSP
        arm_q15_to_float((q15_t *)input, output, length);
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68b9      	ldr	r1, [r7, #8]
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f009 fb23 	bl	800b84c <arm_q15_to_float>
#else
        for (size_t ix = 0; ix < length; ix++) {
            output[ix] = (float)(input[ix]) / 32768.f;
        }
#endif
        return EIDSP_OK;
 8002206:	2300      	movs	r3, #0
    }
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_ZN2ei5numpy3logEPNS_9ei_matrixE>:
    /**
     * Calculate the natural log value of a matrix. Does an in-place replacement.
     * @param matrix Matrix (MxN)
     * @returns 0 if OK
     */
    static int log(matrix_t *matrix)
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b08d      	sub	sp, #52	; 0x34
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8002218:	2300      	movs	r3, #0
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6892      	ldr	r2, [r2, #8]
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800222a:	429a      	cmp	r2, r3
 800222c:	d26e      	bcs.n	800230c <_ZN2ei5numpy3logEPNS_9ei_matrixE+0xfc>
            matrix->buffer[ix] = numpy::log(matrix->buffer[ix]);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6811      	ldr	r1, [r2, #0]
 800223e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002240:	0092      	lsls	r2, r2, #2
 8002242:	188c      	adds	r4, r1, r2
 8002244:	60fb      	str	r3, [r7, #12]
        g = (int32_t) * ((int32_t *)&a);
 8002246:	f107 030c 	add.w	r3, r7, #12
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60bb      	str	r3, [r7, #8]
        e = (g - 0x3f2aaaab) & 0xff800000;
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	4b31      	ldr	r3, [pc, #196]	; (8002318 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x108>)
 8002252:	4413      	add	r3, r2
 8002254:	0ddb      	lsrs	r3, r3, #23
 8002256:	05db      	lsls	r3, r3, #23
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
        g = g - e;
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	60bb      	str	r3, [r7, #8]
        m = (float) * ((float *)&g);
 8002262:	f107 0308 	add.w	r3, r7, #8
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002274:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800231c <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x10c>
 8002278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800227c:	edc7 7a08 	vstr	s15, [r7, #32]
        f = m - 1.0f;
 8002280:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002288:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800228c:	edc7 7a07 	vstr	s15, [r7, #28]
        s = f * f;
 8002290:	edd7 7a07 	vldr	s15, [r7, #28]
 8002294:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002298:	edc7 7a06 	vstr	s15, [r7, #24]
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 800229c:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8002320 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x110>
 80022a0:	edd7 0a07 	vldr	s1, [r7, #28]
 80022a4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8002324 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x114>
 80022a8:	f027 f936 	bl	8029518 <fmaf>
 80022ac:	ed87 0a05 	vstr	s0, [r7, #20]
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 80022b0:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8002328 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x118>
 80022b4:	edd7 0a07 	vldr	s1, [r7, #28]
 80022b8:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800232c <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x11c>
 80022bc:	f027 f92c 	bl	8029518 <fmaf>
 80022c0:	ed87 0a04 	vstr	s0, [r7, #16]
        r = fmaf(r, s, t);
 80022c4:	ed97 1a04 	vldr	s2, [r7, #16]
 80022c8:	edd7 0a06 	vldr	s1, [r7, #24]
 80022cc:	ed97 0a05 	vldr	s0, [r7, #20]
 80022d0:	f027 f922 	bl	8029518 <fmaf>
 80022d4:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(r, s, f);
 80022d8:	ed97 1a07 	vldr	s2, [r7, #28]
 80022dc:	edd7 0a06 	vldr	s1, [r7, #24]
 80022e0:	ed97 0a05 	vldr	s0, [r7, #20]
 80022e4:	f027 f918 	bl	8029518 <fmaf>
 80022e8:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 80022ec:	ed97 1a05 	vldr	s2, [r7, #20]
 80022f0:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8002330 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x120>
 80022f4:	ed97 0a08 	vldr	s0, [r7, #32]
 80022f8:	f027 f90e 	bl	8029518 <fmaf>
 80022fc:	ed87 0a05 	vstr	s0, [r7, #20]
        return r;
 8002300:	697b      	ldr	r3, [r7, #20]
            matrix->buffer[ix] = numpy::log(matrix->buffer[ix]);
 8002302:	6023      	str	r3, [r4, #0]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	3301      	adds	r3, #1
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800230a:	e787      	b.n	800221c <_ZN2ei5numpy3logEPNS_9ei_matrixE+0xc>
        }

        return EIDSP_OK;
 800230c:	2300      	movs	r3, #0
    }
 800230e:	4618      	mov	r0, r3
 8002310:	3734      	adds	r7, #52	; 0x34
 8002312:	46bd      	mov	sp, r7
 8002314:	bd90      	pop	{r4, r7, pc}
 8002316:	bf00      	nop
 8002318:	c0d55555 	.word	0xc0d55555
 800231c:	34000000 	.word	0x34000000
 8002320:	be8ef46d 	.word	0xbe8ef46d
 8002324:	3e6c6078 	.word	0x3e6c6078
 8002328:	beff712d 	.word	0xbeff712d
 800232c:	3ea9e51a 	.word	0x3ea9e51a
 8002330:	3f317218 	.word	0x3f317218
 8002334:	00000000 	.word	0x00000000

08002338 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>:
    /**
     * Normalize a matrix to 0..1. Does an in-place replacement.
     * Normalization done per row.
     * @param matrix
     */
    static int normalize(matrix_t *matrix) {
 8002338:	b590      	push	{r4, r7, lr}
 800233a:	b093      	sub	sp, #76	; 0x4c
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
        // Python implementation:
        //  matrix = (matrix - np.min(matrix)) / (np.max(matrix) - np.min(matrix))
        int r;

        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6892      	ldr	r2, [r2, #8]
 8002348:	fb03 f202 	mul.w	r2, r3, r2
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002354:	2101      	movs	r1, #1
 8002356:	f7fe ff1d 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>

        matrix_t min_matrix(1, 1);
 800235a:	f107 001c 	add.w	r0, r7, #28
 800235e:	2300      	movs	r3, #0
 8002360:	2201      	movs	r2, #1
 8002362:	2101      	movs	r1, #1
 8002364:	f7fe ff16 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
        if (!min_matrix.buffer) {
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x3a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800236e:	4c40      	ldr	r4, [pc, #256]	; (8002470 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x138>)
 8002370:	e06a      	b.n	8002448 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x110>
        }
        r = min(&temp_matrix, &min_matrix);
 8002372:	f107 021c 	add.w	r2, r7, #28
 8002376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fc85 	bl	8001c8c <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>
 8002382:	6478      	str	r0, [r7, #68]	; 0x44
        if (r != EIDSP_OK) {
 8002384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x56>
            EIDSP_ERR(r);
 800238a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800238c:	e05c      	b.n	8002448 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x110>
        }

        matrix_t max_matrix(1, 1);
 800238e:	f107 000c 	add.w	r0, r7, #12
 8002392:	2300      	movs	r3, #0
 8002394:	2201      	movs	r2, #1
 8002396:	2101      	movs	r1, #1
 8002398:	f7fe fefc 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
        if (!max_matrix.buffer) {
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x6e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80023a2:	4c33      	ldr	r4, [pc, #204]	; (8002470 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x138>)
 80023a4:	e04b      	b.n	800243e <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x106>
        }
        r = max(&temp_matrix, &max_matrix);
 80023a6:	f107 020c 	add.w	r2, r7, #12
 80023aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fca9 	bl	8001d08 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>
 80023b6:	6478      	str	r0, [r7, #68]	; 0x44
        if (r != EIDSP_OK) {
 80023b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x8a>
            EIDSP_ERR(r);
 80023be:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80023c0:	e03d      	b.n	800243e <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x106>
        }

        float min_max_diff = (max_matrix.buffer[0] - min_matrix.buffer[0]);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	ed93 7a00 	vldr	s14, [r3]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	edd3 7a00 	vldr	s15, [r3]
 80023ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023d2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        /* Prevent divide by 0 by setting minimum value for divider */
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
 80023d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80023d8:	f7fe f8e0 	bl	800059c <__aeabi_f2d>
 80023dc:	a322      	add	r3, pc, #136	; (adr r3, 8002468 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x130>)
 80023de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e2:	f7fe fba5 	bl	8000b30 <__aeabi_dcmplt>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xba>
 80023ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80023f0:	e005      	b.n	80023fe <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xc6>
 80023f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023f6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80023fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023fe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        r = subtract(&temp_matrix, min_matrix.buffer[0]);
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	edd3 7a00 	vldr	s15, [r3]
 8002408:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800240c:	eeb0 0a67 	vmov.f32	s0, s15
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fba5 	bl	8001b60 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 8002416:	6478      	str	r0, [r7, #68]	; 0x44
        if (r != EIDSP_OK) {
 8002418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xea>
            EIDSP_ERR(r);
 800241e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002420:	e00d      	b.n	800243e <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x106>
        }

        r = scale(&temp_matrix, row_scale);
 8002422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002426:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fb4c 	bl	8001ac8 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8002430:	6478      	str	r0, [r7, #68]	; 0x44
        if (r != EIDSP_OK) {
 8002432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x104>
            EIDSP_ERR(r);
 8002438:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800243a:	e000      	b.n	800243e <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x106>
        }

        return EIDSP_OK;
 800243c:	2400      	movs	r4, #0
        matrix_t max_matrix(1, 1);
 800243e:	f107 030c 	add.w	r3, r7, #12
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fed1 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
        matrix_t min_matrix(1, 1);
 8002448:	f107 031c 	add.w	r3, r7, #28
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe fecc 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
 8002452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fec7 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
    }
 800245c:	4623      	mov	r3, r4
 800245e:	4618      	mov	r0, r3
 8002460:	374c      	adds	r7, #76	; 0x4c
 8002462:	46bd      	mov	sp, r7
 8002464:	bd90      	pop	{r4, r7, pc}
 8002466:	bf00      	nop
 8002468:	d2f1a9fc 	.word	0xd2f1a9fc
 800246c:	3f50624d 	.word	0x3f50624d
 8002470:	fffffc16 	.word	0xfffffc16

08002474 <_ZN2ei5numpy13software_rfftEPfS1_jj>:

        return EIDSP_OK;
    }

private:
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 8002474:	b5b0      	push	{r4, r5, r7, lr}
 8002476:	b08a      	sub	sp, #40	; 0x28
 8002478:	af02      	add	r7, sp, #8
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4618      	mov	r0, r3
 8002488:	f01c f9e6 	bl	801e858 <_Z9ei_mallocj>
 800248c:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002494:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8002496:	e059      	b.n	800254c <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd8>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f107 0310 	add.w	r3, r7, #16
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	2300      	movs	r3, #0
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	f01b fe2f 	bl	801e108 <kiss_fftr_alloc>
 80024aa:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d104      	bne.n	80024bc <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 80024b2:	69b8      	ldr	r0, [r7, #24]
 80024b4:	f01c f9ea 	bl	801e88c <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 80024ba:	e047      	b.n	800254c <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd8>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	68f9      	ldr	r1, [r7, #12]
 80024c0:	6978      	ldr	r0, [r7, #20]
 80024c2:	f01b ff41 	bl	801e348 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d235      	bcs.n	800253e <_ZN2ei5numpy13software_rfftEPfS1_jj+0xca>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4413      	add	r3, r2
 80024da:	edd3 7a00 	vldr	s15, [r3]
 80024de:	2002      	movs	r0, #2
 80024e0:	eeb0 0a67 	vmov.f32	s0, s15
 80024e4:	f003 fc6d 	bl	8005dc2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80024e8:	ec55 4b10 	vmov	r4, r5, d0
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4413      	add	r3, r2
 80024f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80024f8:	2002      	movs	r0, #2
 80024fa:	eeb0 0a67 	vmov.f32	s0, s15
 80024fe:	f003 fc60 	bl	8005dc2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002502:	ec53 2b10 	vmov	r2, r3, d0
 8002506:	4620      	mov	r0, r4
 8002508:	4629      	mov	r1, r5
 800250a:	f7fd fee9 	bl	80002e0 <__adddf3>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	ec43 2b17 	vmov	d7, r2, r3
 8002516:	eeb0 0a47 	vmov.f32	s0, s14
 800251a:	eef0 0a67 	vmov.f32	s1, s15
 800251e:	f027 f8d9 	bl	80296d4 <sqrt>
 8002522:	ec51 0b10 	vmov	r0, r1, d0
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	18d4      	adds	r4, r2, r3
 800252e:	f7fe fb85 	bl	8000c3c <__aeabi_d2f>
 8002532:	4603      	mov	r3, r0
 8002534:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3301      	adds	r3, #1
 800253a:	61fb      	str	r3, [r7, #28]
 800253c:	e7c5      	b.n	80024ca <_ZN2ei5numpy13software_rfftEPfS1_jj+0x56>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f01c f9a4 	bl	801e88c <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002544:	69b8      	ldr	r0, [r7, #24]
 8002546:	f01c f9a1 	bl	801e88c <_Z7ei_freePv>

        return EIDSP_OK;
 800254a:	2300      	movs	r3, #0
    }
 800254c:	4618      	mov	r0, r3
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bdb0      	pop	{r4, r5, r7, pc}
 8002554:	fffffc16 	.word	0xfffffc16

08002558 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f107 0310 	add.w	r3, r7, #16
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2300      	movs	r3, #0
 8002570:	2200      	movs	r2, #0
 8002572:	2100      	movs	r1, #0
 8002574:	f01b fdc8 	bl	801e108 <kiss_fftr_alloc>
 8002578:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002580:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 8002582:	e008      	b.n	8002596 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	6978      	ldr	r0, [r7, #20]
 800258a:	f01b fedd 	bl	801e348 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f01c f97c 	bl	801e88c <_Z7ei_freePv>

        return EIDSP_OK;
 8002594:	2300      	movs	r3, #0
    }
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	fffffc16 	.word	0xfffffc16

080025a4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
     * @details    Variance in CMSIS version is calculated using fSum / (float32_t)(blockSize - 1)
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param      pResult    The variance
     */
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 80025a4:	b480      	push	{r7}
 80025a6:	b08b      	sub	sp, #44	; 0x2c
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	61bb      	str	r3, [r7, #24]

        if (blockSize <= 1U) {
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d804      	bhi.n	80025d0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x2c>
            *pResult = 0;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
            return;
 80025ce:	e0e2      	b.n	8002796 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1f2>
        }
        blkCnt = blockSize >> 2U;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d02f      	beq.n	800263c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x98>
            sum += *pInput++;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	1d1a      	adds	r2, r3, #4
 80025e0:	61ba      	str	r2, [r7, #24]
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ed97 7a08 	vldr	s14, [r7, #32]
 80025ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ee:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	1d1a      	adds	r2, r3, #4
 80025f6:	61ba      	str	r2, [r7, #24]
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8002600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002604:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	1d1a      	adds	r2, r3, #4
 800260c:	61ba      	str	r2, [r7, #24]
 800260e:	edd3 7a00 	vldr	s15, [r3]
 8002612:	ed97 7a08 	vldr	s14, [r7, #32]
 8002616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800261a:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	1d1a      	adds	r2, r3, #4
 8002622:	61ba      	str	r2, [r7, #24]
 8002624:	edd3 7a00 	vldr	s15, [r3]
 8002628:	ed97 7a08 	vldr	s14, [r7, #32]
 800262c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002630:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	3b01      	subs	r3, #1
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 800263a:	e7cc      	b.n	80025d6 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x32>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00e      	beq.n	8002668 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc4>
            sum += *pInput++;
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	1d1a      	adds	r2, r3, #4
 800264e:	61ba      	str	r2, [r7, #24]
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	ed97 7a08 	vldr	s14, [r7, #32]
 8002658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265c:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	3b01      	subs	r3, #1
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002666:	e7ed      	b.n	8002644 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa0>
        }

        fMean = sum / (float32_t)blockSize;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002672:	edd7 6a08 	vldr	s13, [r7, #32]
 8002676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800267a:	edc7 7a05 	vstr	s15, [r7, #20]

        pInput = pSrc;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	61bb      	str	r3, [r7, #24]

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	2b00      	cmp	r3, #0
 800268c:	d057      	beq.n	800273e <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x19a>
            fValue = *pInput++ - fMean;
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	1d1a      	adds	r2, r3, #4
 8002692:	61ba      	str	r2, [r7, #24]
 8002694:	ed93 7a00 	vldr	s14, [r3]
 8002698:	edd7 7a05 	vldr	s15, [r7, #20]
 800269c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026a0:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80026a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80026a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80026b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b4:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	1d1a      	adds	r2, r3, #4
 80026bc:	61ba      	str	r2, [r7, #24]
 80026be:	ed93 7a00 	vldr	s14, [r3]
 80026c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ca:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80026ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80026d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80026da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026de:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	1d1a      	adds	r2, r3, #4
 80026e6:	61ba      	str	r2, [r7, #24]
 80026e8:	ed93 7a00 	vldr	s14, [r3]
 80026ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80026f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f4:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80026f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80026fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002700:	ed97 7a07 	vldr	s14, [r7, #28]
 8002704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002708:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	1d1a      	adds	r2, r3, #4
 8002710:	61ba      	str	r2, [r7, #24]
 8002712:	ed93 7a00 	vldr	s14, [r3]
 8002716:	edd7 7a05 	vldr	s15, [r7, #20]
 800271a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800271e:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002722:	edd7 7a04 	vldr	s15, [r7, #16]
 8002726:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800272a:	ed97 7a07 	vldr	s14, [r7, #28]
 800272e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002732:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	3b01      	subs	r3, #1
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 800273c:	e7a4      	b.n	8002688 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe4>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	2b00      	cmp	r3, #0
 800274a:	d018      	beq.n	800277e <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1da>
            fValue = *pInput++ - fMean;
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	1d1a      	adds	r2, r3, #4
 8002750:	61ba      	str	r2, [r7, #24]
 8002752:	ed93 7a00 	vldr	s14, [r3]
 8002756:	edd7 7a05 	vldr	s15, [r7, #20]
 800275a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275e:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002762:	edd7 7a04 	vldr	s15, [r7, #16]
 8002766:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800276a:	ed97 7a07 	vldr	s14, [r7, #28]
 800276e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002772:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	3b01      	subs	r3, #1
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 800277c:	e7e3      	b.n	8002746 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1a2>
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	ee07 3a90 	vmov	s15, r3
 8002784:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002788:	edd7 6a07 	vldr	s13, [r7, #28]
 800278c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	edc3 7a00 	vstr	s15, [r3]
    }
 8002796:	372c      	adds	r7, #44	; 0x2c
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>:
     * @param      input_matrix   The input matrix
     * @param      output_matrix  The output matrix
     *
     * @return     EIDSP error
     */
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08c      	sub	sp, #48	; 0x30
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
    {
        arm_matrix_instance_f32 arm_in_matrix, arm_transposed_matrix;

        if (input_matrix->cols != output_matrix->rows) {
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d001      	beq.n	80027ba <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80027b6:	4b40      	ldr	r3, [pc, #256]	; (80028b8 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x118>)
 80027b8:	e07a      	b.n	80028b0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x110>
        }

        if (output_matrix->cols != 1) {
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d001      	beq.n	80027c6 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80027c2:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x118>)
 80027c4:	e074      	b.n	80028b0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x110>
        }

        /* Copy input matrix to arm matrix */
        arm_in_matrix.numRows = input_matrix->rows;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	833b      	strh	r3, [r7, #24]
        arm_in_matrix.numCols = input_matrix->cols;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	837b      	strh	r3, [r7, #26]
        arm_in_matrix.pData = &input_matrix->buffer[0];
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	61fb      	str	r3, [r7, #28]
        /* Create transposed matrix */
        arm_transposed_matrix.numRows = input_matrix->cols;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	823b      	strh	r3, [r7, #16]
        arm_transposed_matrix.numCols = input_matrix->rows;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	827b      	strh	r3, [r7, #18]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6852      	ldr	r2, [r2, #4]
 80027f4:	fb02 f303 	mul.w	r3, r2, r3
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	2101      	movs	r1, #1
 80027fc:	4618      	mov	r0, r3
 80027fe:	f01c f837 	bl	801e870 <_Z9ei_callocjj>
 8002802:	4603      	mov	r3, r0
 8002804:	617b      	str	r3, [r7, #20]

        if (arm_transposed_matrix.pData == NULL) {
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x70>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x11c>)
 800280e:	e04f      	b.n	80028b0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x110>
        }

        int ret = arm_mat_trans_f32(&arm_in_matrix, &arm_transposed_matrix);
 8002810:	f107 0210 	add.w	r2, r7, #16
 8002814:	f107 0318 	add.w	r3, r7, #24
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f008 ff1c 	bl	800b658 <arm_mat_trans_f32>
 8002820:	4603      	mov	r3, r0
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
        if (ret != EIDSP_OK) {
 8002824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x8e>
            EIDSP_ERR(ret);
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	e040      	b.n	80028b0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x110>
        }

        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 800282e:	2300      	movs	r3, #0
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002832:	8a3b      	ldrh	r3, [r7, #16]
 8002834:	461a      	mov	r2, r3
 8002836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002838:	4293      	cmp	r3, r2
 800283a:	d234      	bcs.n	80028a6 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x106>
            float std;
            float var;

            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	8a7b      	ldrh	r3, [r7, #18]
 8002840:	4619      	mov	r1, r3
 8002842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
                               arm_transposed_matrix.numCols, &var);
 800284c:	8a7a      	ldrh	r2, [r7, #18]
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 800284e:	4611      	mov	r1, r2
 8002850:	f107 0208 	add.w	r2, r7, #8
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fea5 	bl	80025a4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
 800285e:	f107 030c 	add.w	r3, r7, #12
 8002862:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002864:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002868:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800286c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002870:	db09      	blt.n	8002886 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xe6>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002872:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002876:	f026 ffbd 	bl	80297f4 <sqrtf>
 800287a:	eef0 7a40 	vmov.f32	s15, s0
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8002884:	e004      	b.n	8002890 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xf0>
    }
    else
    {
      *pOut = 0.0f;
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800288e:	bf00      	nop

            output_matrix->buffer[row] = std;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	3301      	adds	r3, #1
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a4:	e7c5      	b.n	8002832 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
        }

        ei_free(arm_transposed_matrix.pData);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f01b ffef 	bl	801e88c <_Z7ei_freePv>

        return EIDSP_OK;
 80028ae:	2300      	movs	r3, #0
    }
 80028b0:	4618      	mov	r0, r3
 80028b2:	3730      	adds	r7, #48	; 0x30
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	fffffc14 	.word	0xfffffc14
 80028bc:	fffffc16 	.word	0xfffffc16

080028c0 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>:
    /**
     * Initialize a CMSIS-DSP fast rfft structure
     * We do it this way as this means we can compile out fast_init calls which hints the compiler
     * to which tables can be removed
     */
    static int cmsis_rfft_init_f32(arm_rfft_fast_instance_f32 *rfft_instance, const size_t n_fft)
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
    {
// ARM cores (ex M55) with Helium extensions (MVEF) need special treatment (Issue 2843)
#if EI_CLASSIFIER_HAS_FFT_INFO == 1 && !defined(ARM_MATH_MVEF)
        arm_status status;
        switch (n_fft) {
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d004      	beq.n	80028da <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x1a>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d6:	d01d      	beq.n	8002914 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x54>
 80028d8:	e03a      	b.n	8002950 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x90>
#if EI_CLASSIFIER_LOAD_FFT_32 == 1
            case 32: {
                arm_cfft_instance_f32 *S = &(rfft_instance->Sint);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60fb      	str	r3, [r7, #12]
                S->fftLen = 16U;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2210      	movs	r2, #16
 80028e2:	801a      	strh	r2, [r3, #0]
                S->pTwiddle = NULL;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	605a      	str	r2, [r3, #4]
                S->bitRevLength = arm_cfft_sR_f32_len16.bitRevLength;
 80028ea:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xa4>)
 80028ec:	899a      	ldrh	r2, [r3, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	819a      	strh	r2, [r3, #12]
                S->pBitRevTable = arm_cfft_sR_f32_len16.pBitRevTable;
 80028f2:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xa4>)
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	609a      	str	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len16.pTwiddle;
 80028fa:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xa4>)
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	605a      	str	r2, [r3, #4]
                rfft_instance->fftLenRFFT = 32U;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	821a      	strh	r2, [r3, #16]
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_32;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a17      	ldr	r2, [pc, #92]	; (8002968 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xa8>)
 800290c:	615a      	str	r2, [r3, #20]
                status = ARM_MATH_SUCCESS;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]
                break;
 8002912:	e01f      	b.n	8002954 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x94>
                break;
            }
#endif
#if EI_CLASSIFIER_LOAD_FFT_256 == 1
            case 256: {
                arm_cfft_instance_f32 *S = &(rfft_instance->Sint);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	613b      	str	r3, [r7, #16]
                S->fftLen = 128U;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	801a      	strh	r2, [r3, #0]
                S->pTwiddle = NULL;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2200      	movs	r2, #0
 8002922:	605a      	str	r2, [r3, #4]
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xac>)
 8002926:	899a      	ldrh	r2, [r3, #12]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	819a      	strh	r2, [r3, #12]
                S->pBitRevTable = arm_cfft_sR_f32_len128.pBitRevTable;
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xac>)
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	609a      	str	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len128.pTwiddle;
 8002934:	4b0d      	ldr	r3, [pc, #52]	; (800296c <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xac>)
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	605a      	str	r2, [r3, #4]
                rfft_instance->fftLenRFFT = 256U;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002942:	821a      	strh	r2, [r3, #16]
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_256;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xb0>)
 8002948:	615a      	str	r2, [r3, #20]
                status = ARM_MATH_SUCCESS;
 800294a:	2300      	movs	r3, #0
 800294c:	75fb      	strb	r3, [r7, #23]
                break;
 800294e:	e001      	b.n	8002954 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x94>
                status = ARM_MATH_SUCCESS;
                break;
            }
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xb4>)
 8002952:	e001      	b.n	8002958 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x98>
        }

        return status;
 8002954:	f997 3017 	ldrsb.w	r3, [r7, #23]
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
#endif
    }
 8002958:	4618      	mov	r0, r3
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	080309b8 	.word	0x080309b8
 8002968:	08030538 	.word	0x08030538
 800296c:	080309c8 	.word	0x080309c8
 8002970:	080305b8 	.word	0x080305b8
 8002974:	fffffc08 	.word	0xfffffc08

08002978 <_ZN2ei8speechpy9functions16frequency_to_melEf>:
     * Converting from frequency to Mel scale
     *
     * @param f The frequency values(or a single frequency) in Hz.
     * @returns The mel scale values(or a single mel).
     */
    static float frequency_to_mel(float f) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b08c      	sub	sp, #48	; 0x30
 800297c:	af00      	add	r7, sp, #0
 800297e:	ed87 0a01 	vstr	s0, [r7, #4]
#if EI_PORTING_RENESASRA65 == 1
        return 1127.0 * log(1.0 + f / 700.0f);
#else
        return 1127.0 * numpy::log((1.0 + f / 700.0f));
 8002982:	ed97 7a01 	vldr	s14, [r7, #4]
 8002986:	eddf 6a42 	vldr	s13, [pc, #264]	; 8002a90 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x118>
 800298a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800298e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002992:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002996:	edc7 7a04 	vstr	s15, [r7, #16]
        g = (int32_t) * ((int32_t *)&a);
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]
        e = (g - 0x3f2aaaab) & 0xff800000;
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4b3b      	ldr	r3, [pc, #236]	; (8002a94 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x11c>)
 80029a6:	4413      	add	r3, r2
 80029a8:	0ddb      	lsrs	r3, r3, #23
 80029aa:	05db      	lsls	r3, r3, #23
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        g = g - e;
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	60fb      	str	r3, [r7, #12]
        m = (float) * ((float *)&g);
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	ee07 3a90 	vmov	s15, r3
 80029c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029c8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002a98 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x120>
 80029cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        f = m - 1.0f;
 80029d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029e0:	edc7 7a08 	vstr	s15, [r7, #32]
        s = f * f;
 80029e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80029e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029ec:	edc7 7a07 	vstr	s15, [r7, #28]
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 80029f0:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8002a9c <_ZN2ei8speechpy9functions16frequency_to_melEf+0x124>
 80029f4:	edd7 0a08 	vldr	s1, [r7, #32]
 80029f8:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8002aa0 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x128>
 80029fc:	f026 fd8c 	bl	8029518 <fmaf>
 8002a00:	ed87 0a06 	vstr	s0, [r7, #24]
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 8002a04:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8002aa4 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x12c>
 8002a08:	edd7 0a08 	vldr	s1, [r7, #32]
 8002a0c:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002aa8 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x130>
 8002a10:	f026 fd82 	bl	8029518 <fmaf>
 8002a14:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(r, s, t);
 8002a18:	ed97 1a05 	vldr	s2, [r7, #20]
 8002a1c:	edd7 0a07 	vldr	s1, [r7, #28]
 8002a20:	ed97 0a06 	vldr	s0, [r7, #24]
 8002a24:	f026 fd78 	bl	8029518 <fmaf>
 8002a28:	ed87 0a06 	vstr	s0, [r7, #24]
        r = fmaf(r, s, f);
 8002a2c:	ed97 1a08 	vldr	s2, [r7, #32]
 8002a30:	edd7 0a07 	vldr	s1, [r7, #28]
 8002a34:	ed97 0a06 	vldr	s0, [r7, #24]
 8002a38:	f026 fd6e 	bl	8029518 <fmaf>
 8002a3c:	ed87 0a06 	vstr	s0, [r7, #24]
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 8002a40:	ed97 1a06 	vldr	s2, [r7, #24]
 8002a44:	eddf 0a19 	vldr	s1, [pc, #100]	; 8002aac <_ZN2ei8speechpy9functions16frequency_to_melEf+0x134>
 8002a48:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002a4c:	f026 fd64 	bl	8029518 <fmaf>
 8002a50:	ed87 0a06 	vstr	s0, [r7, #24]
        return r;
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fd fda0 	bl	800059c <__aeabi_f2d>
 8002a5c:	a30a      	add	r3, pc, #40	; (adr r3, 8002a88 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x110>)
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a62:	f7fd fdf3 	bl	800064c <__aeabi_dmul>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f7fe f8e5 	bl	8000c3c <__aeabi_d2f>
 8002a72:	4603      	mov	r3, r0
 8002a74:	ee07 3a90 	vmov	s15, r3
#endif
    }
 8002a78:	eeb0 0a67 	vmov.f32	s0, s15
 8002a7c:	3730      	adds	r7, #48	; 0x30
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	f3af 8000 	nop.w
 8002a88:	00000000 	.word	0x00000000
 8002a8c:	40919c00 	.word	0x40919c00
 8002a90:	442f0000 	.word	0x442f0000
 8002a94:	c0d55555 	.word	0xc0d55555
 8002a98:	34000000 	.word	0x34000000
 8002a9c:	be8ef46d 	.word	0xbe8ef46d
 8002aa0:	3e6c6078 	.word	0x3e6c6078
 8002aa4:	beff712d 	.word	0xbeff712d
 8002aa8:	3ea9e51a 	.word	0x3ea9e51a
 8002aac:	3f317218 	.word	0x3f317218

08002ab0 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>:
     * Converting from Mel scale to frequency.
     *
     * @param mel The mel scale values(or a single mel).
     * @returns The frequency values(or a single frequency) in Hz.
     */
    static float mel_to_frequency(float mel) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	ed87 0a01 	vstr	s0, [r7, #4]
        return 700.0f * (exp(mel / 1127.0f) - 1.0f);
 8002aba:	edd7 7a01 	vldr	s15, [r7, #4]
 8002abe:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002aec <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x3c>
 8002ac2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ac6:	eeb0 0a47 	vmov.f32	s0, s14
 8002aca:	f7fe fca1 	bl	8001410 <_ZSt3expf>
 8002ace:	eef0 7a40 	vmov.f32	s15, s0
 8002ad2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ad6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ada:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002af0 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x40>
 8002ade:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 8002ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	448ce000 	.word	0x448ce000
 8002af0:	442f0000 	.word	0x442f0000

08002af4 <_ZN2ei8speechpy9functions13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size) {
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d214      	bcs.n	8002b34 <_ZN2ei8speechpy9functions13zero_handlingEPfj+0x40>
            if (input[ix] == 0) {
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	edd3 7a00 	vldr	s15, [r3]
 8002b16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1e:	d105      	bne.n	8002b2c <_ZN2ei8speechpy9functions13zero_handlingEPfj+0x38>
                input[ix] = 1e-10;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <_ZN2ei8speechpy9functions13zero_handlingEPfj+0x4c>)
 8002b2a:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e7e6      	b.n	8002b02 <_ZN2ei8speechpy9functions13zero_handlingEPfj+0xe>
            }
        }
    }
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	2edbe6ff 	.word	0x2edbe6ff

08002b44 <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE>:
     * This function handle the issue with zero values if the are exposed
     * to become an argument for any log function.
     * @param input Matrix
     * @returns void
     */
    static void zero_handling(matrix_t *input) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
        zero_handling(input->buffer, input->rows * input->cols);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6892      	ldr	r2, [r2, #8]
 8002b58:	fb02 f303 	mul.w	r3, r2, r3
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f7ff ffc9 	bl	8002af4 <_ZN2ei8speechpy9functions13zero_handlingEPfj>
    }
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <_ZN2ei8speechpy9functions8triangleEPfjiii>:
     * @param x_size Size of the linspace output
     * @param left
     * @param middle
     * @param right
     */
    static int triangle(float *x, size_t x_size, int left, int middle, int right) {
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b08b      	sub	sp, #44	; 0x2c
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
        EI_DSP_MATRIX(out, 1, x_size);
 8002b7a:	f107 0014 	add.w	r0, r7, #20
 8002b7e:	2300      	movs	r3, #0
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	2101      	movs	r1, #1
 8002b84:	f7fe fb06 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x26>
 8002b8e:	4c4b      	ldr	r4, [pc, #300]	; (8002cbc <_ZN2ei8speechpy9functions8triangleEPfjiii+0x150>)
 8002b90:	e089      	b.n	8002ca6 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x13a>

        for (size_t ix = 0; ix < x_size; ix++) {
 8002b92:	2300      	movs	r3, #0
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d27b      	bcs.n	8002c96 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x12a>
            if (x[ix] > left && x[ix] <= middle) {
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	ed93 7a00 	vldr	s14, [r3]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	ee07 3a90 	vmov	s15, r3
 8002bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbc:	dd2b      	ble.n	8002c16 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xaa>
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	ed93 7a00 	vldr	s14, [r3]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	ee07 3a90 	vmov	s15, r3
 8002bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bdc:	d81b      	bhi.n	8002c16 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xaa>
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4413      	add	r3, r2
 8002be6:	ed93 7a00 	vldr	s14, [r3]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	ee07 3a90 	vmov	s15, r3
 8002bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c12:	edc3 7a00 	vstr	s15, [r3]
            }

            if (x[ix] < right && middle <= x[ix]) {
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	ed93 7a00 	vldr	s14, [r3]
 8002c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c24:	ee07 3a90 	vmov	s15, r3
 8002c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c34:	d52b      	bpl.n	8002c8e <_ZN2ei8speechpy9functions8triangleEPfjiii+0x122>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	ee07 3a90 	vmov	s15, r3
 8002c3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4413      	add	r3, r2
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c54:	d81b      	bhi.n	8002c8e <_ZN2ei8speechpy9functions8triangleEPfjiii+0x122>
                out.buffer[ix] = (right - x[ix]) / (right - middle);
 8002c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c58:	ee07 3a90 	vmov	s15, r3
 8002c5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4413      	add	r3, r2
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002c70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	ee07 3a90 	vmov	s15, r3
 8002c7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c8a:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < x_size; ix++) {
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	3301      	adds	r3, #1
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
 8002c94:	e77f      	b.n	8002b96 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x2a>
            }
        }

        memcpy(x, out.buffer, x_size * sizeof(float));
 8002c96:	6979      	ldr	r1, [r7, #20]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f029 faf6 	bl	802c290 <memcpy>

        return EIDSP_OK;
 8002ca4:	2400      	movs	r4, #0
        EI_DSP_MATRIX(out, 1, x_size);
 8002ca6:	f107 0314 	add.w	r3, r7, #20
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe fa9d 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
    }
 8002cb0:	4623      	mov	r3, r4
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	372c      	adds	r7, #44	; 0x2c
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd90      	pop	{r4, r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	fffffc16 	.word	0xfffffc16

08002cc0 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>:
    signal_t *signal;
    std::vector<uint32_t> *frame_ixs;
    int frame_length;

    // start_ixs is owned by us
    ~ei_stack_frames_info() {
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
        if (frame_ixs) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev+0x26>
            delete frame_ixs;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685c      	ldr	r4, [r3, #4]
 8002cd4:	2c00      	cmp	r4, #0
 8002cd6:	d006      	beq.n	8002ce6 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev+0x26>
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f003 f8c1 	bl	8005e60 <_ZNSt6vectorImSaImEED1Ev>
 8002cde:	210c      	movs	r1, #12
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f026 f8c9 	bl	8028e78 <_ZdlPvj>
        }
    }
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd90      	pop	{r4, r7, pc}

08002cf0 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>:
     * @param shift (int): The shift step.
     * @param cof (float): The preemphasising coefficient. 0 equals to no filtering.
     */
    class preemphasis {
public:
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6178      	str	r0, [r7, #20]
 8002cf8:	6139      	str	r1, [r7, #16]
 8002cfa:	60fa      	str	r2, [r7, #12]
 8002cfc:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d00:	71fb      	strb	r3, [r7, #7]
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	79fa      	ldrb	r2, [r7, #7]
 8002d18:	761a      	strb	r2, [r3, #24]
        {
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f01b fda5 	bl	801e870 <_Z9ei_callocjj>
 8002d26:	4602      	mov	r2, r0
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	60da      	str	r2, [r3, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	2101      	movs	r1, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f01b fd9c 	bl	801e870 <_Z9ei_callocjj>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	611a      	str	r2, [r3, #16]
            _next_offset_should_be = 0;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2200      	movs	r2, #0
 8002d42:	615a      	str	r2, [r3, #20]

            if (shift < 0) {
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	da06      	bge.n	8002d58 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x68>
                _shift = signal->total_length + shift;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4413      	add	r3, r2
 8002d52:	461a      	mov	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	605a      	str	r2, [r3, #4]
            }

            if (!_prev_buffer || !_end_of_signal_buffer) return;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00e      	beq.n	8002d7e <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x8e>
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x8e>

            // we need to get the shift bytes from the end of the buffer...
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
 8002d68:	6938      	ldr	r0, [r7, #16]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1ad1      	subs	r1, r2, r3
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f003 f844 	bl	8005e04 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002d7c:	e000      	b.n	8002d80 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x90>
            if (!_prev_buffer || !_end_of_signal_buffer) return;
 8002d7e:	bf00      	nop
        }
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>:
         * Get preemphasized data from the underlying audio buffer...
         * This retrieves data from the signal then preemphasizes it.
         * @param offset Offset in the audio signal
         * @param length Length of the audio signal
         */
        int get_data(size_t offset, size_t length, float *out_buffer) {
 8002d8c:	b5b0      	push	{r4, r5, r7, lr}
 8002d8e:	b08c      	sub	sp, #48	; 0x30
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
            if (!_prev_buffer || !_end_of_signal_buffer) {
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1e>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x22>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002daa:	4c76      	ldr	r4, [pc, #472]	; (8002f84 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1f8>)
 8002dac:	e0e4      	b.n	8002f78 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ec>
            }
            if (offset + length > _signal->total_length) {
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	441a      	add	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d901      	bls.n	8002dc2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x36>
                EIDSP_ERR(EIDSP_OUT_OF_BOUNDS);
 8002dbe:	4c72      	ldr	r4, [pc, #456]	; (8002f88 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1fc>)
 8002dc0:	e0da      	b.n	8002f78 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ec>
            }

            int ret;
            if (static_cast<int32_t>(offset) - _shift >= 0) {
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	db14      	blt.n	8002df8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x6c>
                ret = _signal->get_data(offset - _shift, _shift, _prev_buffer);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1a99      	subs	r1, r3, r2
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 f80c 	bl	8005e04 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002dec:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != 0) {
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x6c>
                    EIDSP_ERR(ret);
 8002df4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002df6:	e0bf      	b.n	8002f78 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ec>
                }
            }
            // else we'll use the end_of_signal_buffer; so no need to check

            ret = _signal->get_data(offset, length, out_buffer);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	f002 fffe 	bl	8005e04 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002e08:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != 0) {
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x88>
                EIDSP_ERR(ret);
 8002e10:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002e12:	e0b1      	b.n	8002f78 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ec>
            }

            // it might be that everything is already normalized here...
            bool all_between_min_1_and_1 = true;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            // now we have the signal and we can preemphasize
            for (size_t ix = 0; ix < length; ix++) {
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d279      	bcs.n	8002f1a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x18e>
                float now = out_buffer[ix];
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	623b      	str	r3, [r7, #32]

                // under shift? read from end
                if (offset + ix < static_cast<uint32_t>(_shift)) {
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e36:	4413      	add	r3, r2
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	6852      	ldr	r2, [r2, #4]
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d218      	bcs.n	8002e72 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xe6>
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	440b      	add	r3, r1
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	edd3 7a00 	vldr	s15, [r3]
 8002e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	4413      	add	r3, r2
 8002e64:	ed97 7a08 	vldr	s14, [r7, #32]
 8002e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e6c:	edc3 7a00 	vstr	s15, [r3]
 8002e70:	e012      	b.n	8002e98 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x10c>
                }
                // otherwise read from history buffer
                else {
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e94:	edc3 7a00 	vstr	s15, [r3]
                }

                if (_rescale && all_between_min_1_and_1) {
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	7e1b      	ldrb	r3, [r3, #24]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x156>
 8002ea0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01c      	beq.n	8002ee2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x156>
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	edd3 7a00 	vldr	s15, [r3]
 8002eb4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec0:	d40c      	bmi.n	8002edc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x150>
 8002ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	edd3 7a00 	vldr	s15, [r3]
 8002ece:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eda:	dd02      	ble.n	8002ee2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x156>
                        all_between_min_1_and_1 = false;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    }
                }

                // roll through and overwrite last element
                if (_shift != 1) {
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d008      	beq.n	8002efc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x170>
                    numpy::roll(_prev_buffer, _shift, -1);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	68d8      	ldr	r0, [r3, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	f7fe faca 	bl	8001490 <_ZN2ei5numpy4rollEPfji>
                }
                _prev_buffer[_shift - 1] = now;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	6a3a      	ldr	r2, [r7, #32]
 8002f10:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < length; ix++) {
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f14:	3301      	adds	r3, #1
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f18:	e781      	b.n	8002e1e <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x92>
            }

            _next_offset_should_be += length;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	441a      	add	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	615a      	str	r2, [r3, #20]

            // rescale from [-1 .. 1] ?
            if (_rescale && !all_between_min_1_and_1) {
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	7e1b      	ldrb	r3, [r3, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d023      	beq.n	8002f76 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ea>
 8002f2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f32:	f083 0301 	eor.w	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01c      	beq.n	8002f76 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ea>
                matrix_t scale_matrix(length, 1, out_buffer);
 8002f3c:	f107 0010 	add.w	r0, r7, #16
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2201      	movs	r2, #1
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	f7fe f925 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
                ret = numpy::scale(&scale_matrix, 1.0f / 32768.0f);
 8002f4a:	f107 0310 	add.w	r3, r7, #16
 8002f4e:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002f8c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x200>
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe fdb8 	bl	8001ac8 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8002f58:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != 0) {
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1da>
                    EIDSP_ERR(ret);
 8002f60:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002f62:	2500      	movs	r5, #0
 8002f64:	e000      	b.n	8002f68 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1dc>
 8002f66:	2501      	movs	r5, #1
 8002f68:	f107 0310 	add.w	r3, r7, #16
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe f93c 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
 8002f72:	2d01      	cmp	r5, #1
 8002f74:	d100      	bne.n	8002f78 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ec>
                }
            }

            return EIDSP_OK;
 8002f76:	2400      	movs	r4, #0
        }
 8002f78:	4623      	mov	r3, r4
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3730      	adds	r7, #48	; 0x30
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bdb0      	pop	{r4, r5, r7, pc}
 8002f82:	bf00      	nop
 8002f84:	fffffc16 	.word	0xfffffc16
 8002f88:	fffffc0e 	.word	0xfffffc0e
 8002f8c:	38000000 	.word	0x38000000

08002f90 <_ZN2ei8speechpy10processing11preemphasisD1Ev>:

        ~preemphasis() {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
            if (_prev_buffer) {
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d004      	beq.n	8002faa <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x1a>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f01b fc71 	bl	801e88c <_Z7ei_freePv>
            }
            if (_end_of_signal_buffer) {
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x2c>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f01b fc68 	bl	801e88c <_Z7ei_freePv>
            }
        }
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>:
    /**
     * frame_length is a float and can thus be off by a little bit, e.g.
     * frame_length = 0.018f actually can yield 0.018000011f
     * thus screwing up our frame calculations here...
     */
    static float ceil_unless_very_close_to_floor(float v) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	ed87 0a01 	vstr	s0, [r7, #4]
        if (v > floor(v) && v - floor(v) < 0.001f) {
 8002fd2:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fd6:	f7fe fa2b 	bl	8001430 <_ZSt5floorf>
 8002fda:	eeb0 7a40 	vmov.f32	s14, s0
 8002fde:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fea:	dd12      	ble.n	8003012 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x4a>
 8002fec:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ff0:	f7fe fa1e 	bl	8001430 <_ZSt5floorf>
 8002ff4:	eeb0 7a40 	vmov.f32	s14, s0
 8002ff8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ffc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003000:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003044 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x7c>
 8003004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300c:	d501      	bpl.n	8003012 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x4a>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x4c>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d006      	beq.n	8003026 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x5e>
            v = (floor(v));
 8003018:	ed97 0a01 	vldr	s0, [r7, #4]
 800301c:	f7fe fa08 	bl	8001430 <_ZSt5floorf>
 8003020:	ed87 0a01 	vstr	s0, [r7, #4]
 8003024:	e005      	b.n	8003032 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x6a>
        }
        else {
            v = (ceil(v));
 8003026:	ed97 0a01 	vldr	s0, [r7, #4]
 800302a:	f7fe f9e1 	bl	80013f0 <_ZSt4ceilf>
 800302e:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        return v;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	ee07 3a90 	vmov	s15, r3
    }
 8003038:	eeb0 0a67 	vmov.f32	s0, s15
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	3a83126f 	.word	0x3a83126f

08003048 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f002 ff40 	bl	8005ed6 <_ZNSaImED1Ev>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4618      	mov	r0, r3
 800306c:	f002 ff23 	bl	8005eb6 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <_ZNSt6vectorImSaImEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ffeb 	bl	8003060 <_ZNSt12_Vector_baseImSaImEEC1Ev>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt>:
                            float sampling_frequency,
                            float frame_length,
                            float frame_stride,
                            bool zero_padding,
                            uint16_t version)
    {
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b091      	sub	sp, #68	; 0x44
 8003098:	af00      	add	r7, sp, #0
 800309a:	6178      	str	r0, [r7, #20]
 800309c:	ed87 0a04 	vstr	s0, [r7, #16]
 80030a0:	edc7 0a03 	vstr	s1, [r7, #12]
 80030a4:	ed87 1a02 	vstr	s2, [r7, #8]
 80030a8:	460b      	mov	r3, r1
 80030aa:	71fb      	strb	r3, [r7, #7]
 80030ac:	4613      	mov	r3, r2
 80030ae:	80bb      	strh	r3, [r7, #4]
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00f      	beq.n	80030d8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x44>
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f002 feea 	bl	8005e96 <_ZNKSt8functionIFijjPfEEcvbEv>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f083 0301 	eor.w	r3, r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d104      	bne.n	80030d8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x44>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x48>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x4a>
 80030dc:	2300      	movs	r3, #0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x52>
            EIDSP_ERR(EIDSP_SIGNAL_SIZE_MISMATCH);
 80030e2:	4b7b      	ldr	r3, [pc, #492]	; (80032d0 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x23c>)
 80030e4:	e0ef      	b.n	80032c6 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x232>
        }

        size_t length_signal = info->signal->total_length;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        int frame_sample_length;
        int length;
        if (version == 1) {
 80030ee:	88bb      	ldrh	r3, [r7, #4]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d11f      	bne.n	8003134 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0xa0>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 80030f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80030f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80030fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003100:	eeb0 0a67 	vmov.f32	s0, s15
 8003104:	f7fe f9b4 	bl	8001470 <_ZSt5roundf>
 8003108:	eef0 7a40 	vmov.f32	s15, s0
 800310c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003110:	ee17 3a90 	vmov	r3, s15
 8003114:	63fb      	str	r3, [r7, #60]	; 0x3c
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 8003116:	ed97 7a04 	vldr	s14, [r7, #16]
 800311a:	edd7 7a02 	vldr	s15, [r7, #8]
 800311e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003122:	eeb0 0a67 	vmov.f32	s0, s15
 8003126:	f7fe f9a3 	bl	8001470 <_ZSt5roundf>
 800312a:	ed87 0a02 	vstr	s0, [r7, #8]
            length = frame_sample_length;
 800312e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003130:	63bb      	str	r3, [r7, #56]	; 0x38
 8003132:	e027      	b.n	8003184 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0xf0>
        }
        else {
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 8003134:	ed97 7a04 	vldr	s14, [r7, #16]
 8003138:	edd7 7a03 	vldr	s15, [r7, #12]
 800313c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003140:	eeb0 0a67 	vmov.f32	s0, s15
 8003144:	f7ff ff40 	bl	8002fc8 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 8003148:	eef0 7a40 	vmov.f32	s15, s0
 800314c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003150:	ee17 3a90 	vmov	r3, s15
 8003154:	63fb      	str	r3, [r7, #60]	; 0x3c
            float frame_stride_arg = frame_stride;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 800315a:	ed97 7a04 	vldr	s14, [r7, #16]
 800315e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003166:	eeb0 0a67 	vmov.f32	s0, s15
 800316a:	f7ff ff2d 	bl	8002fc8 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 800316e:	ed87 0a02 	vstr	s0, [r7, #8]
            length = (frame_sample_length - (int)frame_stride);
 8003172:	edd7 7a02 	vldr	s15, [r7, #8]
 8003176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800317a:	ee17 2a90 	vmov	r2, s15
 800317e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        volatile int numframes;
        volatile int len_sig;

        if (zero_padding) {
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d02a      	beq.n	80031e0 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x14c>
            // Calculation of number of frames
            numframes = static_cast<int>(
                ceil(static_cast<float>(length_signal - length) / frame_stride));
 800318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	ee07 3a90 	vmov	s15, r3
 8003194:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003198:	edd7 7a02 	vldr	s15, [r7, #8]
 800319c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80031a0:	eeb0 0a66 	vmov.f32	s0, s13
 80031a4:	f7fe f924 	bl	80013f0 <_ZSt4ceilf>
 80031a8:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 80031ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031b0:	ee17 3a90 	vmov	r3, s15
 80031b4:	61fb      	str	r3, [r7, #28]

            // Zero padding
            len_sig = static_cast<int>(static_cast<float>(numframes) * frame_stride) + frame_sample_length;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	ee07 3a90 	vmov	s15, r3
 80031bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80031c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031cc:	ee17 2a90 	vmov	r2, s15
 80031d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d2:	4413      	add	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]

            info->signal->total_length = static_cast<size_t>(len_sig);
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	611a      	str	r2, [r3, #16]
 80031de:	e02f      	b.n	8003240 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x1ac>
        }
        else {
            numframes = static_cast<int>(
                floor(static_cast<float>(length_signal - length) / frame_stride));
 80031e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80031f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80031f6:	eeb0 0a66 	vmov.f32	s0, s13
 80031fa:	f7fe f919 	bl	8001430 <_ZSt5floorf>
 80031fe:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 8003202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003206:	ee17 3a90 	vmov	r3, s15
 800320a:	61fb      	str	r3, [r7, #28]
            len_sig = static_cast<int>(
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	3b01      	subs	r3, #1
 8003210:	ee07 3a90 	vmov	s15, r3
 8003214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003218:	edd7 7a02 	vldr	s15, [r7, #8]
 800321c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800322a:	ee77 7a27 	vadd.f32	s15, s14, s15
            len_sig = static_cast<int>(
 800322e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003232:	ee17 3a90 	vmov	r3, s15
 8003236:	61bb      	str	r3, [r7, #24]

            info->signal->total_length = static_cast<size_t>(len_sig);
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	611a      	str	r2, [r3, #16]
        }

        // alloc the vector on the heap, will be owned by the info struct
        std::vector<uint32_t> *frame_indices = new std::vector<uint32_t>();
 8003240:	200c      	movs	r0, #12
 8003242:	f025 fe1d 	bl	8028e80 <_Znwj>
 8003246:	4603      	mov	r3, r0
 8003248:	461c      	mov	r4, r3
 800324a:	2300      	movs	r3, #0
 800324c:	6023      	str	r3, [r4, #0]
 800324e:	2300      	movs	r3, #0
 8003250:	6063      	str	r3, [r4, #4]
 8003252:	2300      	movs	r3, #0
 8003254:	60a3      	str	r3, [r4, #8]
 8003256:	4620      	mov	r0, r4
 8003258:	f7ff ff0f 	bl	800307a <_ZNSt6vectorImSaImEEC1Ev>
 800325c:	627c      	str	r4, [r7, #36]	; 0x24

        int frame_count = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	637b      	str	r3, [r7, #52]	; 0x34

        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 8003262:	2300      	movs	r3, #0
 8003264:	633b      	str	r3, [r7, #48]	; 0x30
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	461a      	mov	r2, r3
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	4293      	cmp	r3, r2
 800326e:	bf34      	ite	cc
 8003270:	2301      	movcc	r3, #1
 8003272:	2300      	movcs	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01e      	beq.n	80032b8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x224>
            if (++frame_count > numframes) break;
 800327a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800327c:	3301      	adds	r3, #1
 800327e:	637b      	str	r3, [r7, #52]	; 0x34
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003284:	429a      	cmp	r2, r3
 8003286:	bfcc      	ite	gt
 8003288:	2301      	movgt	r3, #1
 800328a:	2300      	movle	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d111      	bne.n	80032b6 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x222>

            frame_indices->push_back(ix);
 8003292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003294:	623b      	str	r3, [r7, #32]
 8003296:	f107 0320 	add.w	r3, r7, #32
 800329a:	4619      	mov	r1, r3
 800329c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800329e:	f002 fe3f 	bl	8005f20 <_ZNSt6vectorImSaImEE9push_backEOm>
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 80032a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80032a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032aa:	ee17 2a90 	vmov	r2, s15
 80032ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b0:	4413      	add	r3, r2
 80032b2:	633b      	str	r3, [r7, #48]	; 0x30
 80032b4:	e7d7      	b.n	8003266 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x1d2>
            if (++frame_count > numframes) break;
 80032b6:	bf00      	nop
        }

        info->frame_ixs = frame_indices;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032bc:	605a      	str	r2, [r3, #4]
        info->frame_length = frame_sample_length;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032c2:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 80032c4:	2300      	movs	r3, #0
    }
 80032c6:	4618      	mov	r0, r3
 80032c8:	3744      	adds	r7, #68	; 0x44
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd90      	pop	{r4, r7, pc}
 80032ce:	bf00      	nop
 80032d0:	fffffc15 	.word	0xfffffc15

080032d4 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt>:
        uint32_t sampling_frequency,
        float frame_length,
        float frame_stride,
        bool zero_padding,
        uint16_t version)
    {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08a      	sub	sp, #40	; 0x28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6178      	str	r0, [r7, #20]
 80032dc:	6139      	str	r1, [r7, #16]
 80032de:	ed87 0a03 	vstr	s0, [r7, #12]
 80032e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80032e6:	4611      	mov	r1, r2
 80032e8:	461a      	mov	r2, r3
 80032ea:	460b      	mov	r3, r1
 80032ec:	71fb      	strb	r3, [r7, #7]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80bb      	strh	r3, [r7, #4]
        int frame_sample_length;
        int length;
        if (version == 1) {
 80032f2:	88bb      	ldrh	r3, [r7, #4]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d125      	bne.n	8003344 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt+0x70>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003302:	edd7 7a03 	vldr	s15, [r7, #12]
 8003306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330a:	eeb0 0a67 	vmov.f32	s0, s15
 800330e:	f7fe f8af 	bl	8001470 <_ZSt5roundf>
 8003312:	eef0 7a40 	vmov.f32	s15, s0
 8003316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800331a:	ee17 3a90 	vmov	r3, s15
 800331e:	623b      	str	r3, [r7, #32]
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	ee07 3a90 	vmov	s15, r3
 8003326:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800332a:	edd7 7a02 	vldr	s15, [r7, #8]
 800332e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003332:	eeb0 0a67 	vmov.f32	s0, s15
 8003336:	f7fe f89b 	bl	8001470 <_ZSt5roundf>
 800333a:	ed87 0a02 	vstr	s0, [r7, #8]
            length = frame_sample_length;
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
 8003342:	e02d      	b.n	80033a0 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt+0xcc>
        }
        else {
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800334e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	eeb0 0a67 	vmov.f32	s0, s15
 800335a:	f7ff fe35 	bl	8002fc8 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 800335e:	eef0 7a40 	vmov.f32	s15, s0
 8003362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003366:	ee17 3a90 	vmov	r3, s15
 800336a:	623b      	str	r3, [r7, #32]
            float frame_stride_arg = frame_stride;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	61fb      	str	r3, [r7, #28]
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800337a:	edd7 7a07 	vldr	s15, [r7, #28]
 800337e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003382:	eeb0 0a67 	vmov.f32	s0, s15
 8003386:	f7ff fe1f 	bl	8002fc8 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 800338a:	ed87 0a02 	vstr	s0, [r7, #8]
            length = (frame_sample_length - (int)frame_stride);
 800338e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003396:	ee17 2a90 	vmov	r2, s15
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
        }

        volatile int numframes;

        if (zero_padding) {
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d016      	beq.n	80033d4 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt+0x100>
            // Calculation of number of frames
            numframes = static_cast<int>(
                ceil(static_cast<float>(signal_size - length) / frame_stride));
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	ee07 3a90 	vmov	s15, r3
 80033b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80033b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80033bc:	eeb0 0a66 	vmov.f32	s0, s13
 80033c0:	f7fe f816 	bl	80013f0 <_ZSt4ceilf>
 80033c4:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 80033c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033cc:	ee17 3a90 	vmov	r3, s15
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	e015      	b.n	8003400 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt+0x12c>
        }
        else {
            numframes = static_cast<int>(
                floor(static_cast<float>(signal_size - length) / frame_stride));
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80033e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80033ea:	eeb0 0a66 	vmov.f32	s0, s13
 80033ee:	f7fe f81f 	bl	8001430 <_ZSt5floorf>
 80033f2:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 80033f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033fa:	ee17 3a90 	vmov	r3, s15
 80033fe:	61bb      	str	r3, [r7, #24]
        }

        return numframes;
 8003400:	69bb      	ldr	r3, [r7, #24]
    }
 8003402:	4618      	mov	r0, r3
 8003404:	3728      	adds	r7, #40	; 0x28
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt>:
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(float *frame, size_t frame_size, float *out_buffer, size_t out_buffer_size, uint16_t fft_points)
    {
 800340c:	b5b0      	push	{r4, r5, r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 800341a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	b29b      	uxth	r3, r3
 8003420:	3301      	adds	r3, #1
 8003422:	461a      	mov	r2, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4293      	cmp	r3, r2
 8003428:	d001      	beq.n	800342e <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800342a:	4b2b      	ldr	r3, [pc, #172]	; (80034d8 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xcc>)
 800342c:	e050      	b.n	80034d0 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xc4>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 800342e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f7fe fca3 	bl	8001d84 <_ZN2ei5numpy4rfftEPKfjPfjj>
 800343e:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x3e>
            return r;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	e042      	b.n	80034d0 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xc4>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d23b      	bcs.n	80034ce <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xc2>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 8003456:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003460:	ee17 0a90 	vmov	r0, s15
 8003464:	f7fd f89a 	bl	800059c <__aeabi_f2d>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	f04f 0000 	mov.w	r0, #0
 8003470:	491a      	ldr	r1, [pc, #104]	; (80034dc <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xd0>)
 8003472:	f7fd fa15 	bl	80008a0 <__aeabi_ddiv>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4614      	mov	r4, r2
 800347c:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4413      	add	r3, r2
 8003486:	ed93 7a00 	vldr	s14, [r3]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	edd3 7a00 	vldr	s15, [r3]
 8003496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349a:	ee17 0a90 	vmov	r0, s15
 800349e:	f7fd f87d 	bl	800059c <__aeabi_f2d>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 80034a6:	4620      	mov	r0, r4
 80034a8:	4629      	mov	r1, r5
 80034aa:	f7fd f8cf 	bl	800064c <__aeabi_dmul>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	18d4      	adds	r4, r2, r3
 80034be:	f7fd fbbd 	bl	8000c3c <__aeabi_d2f>
 80034c2:	4603      	mov	r3, r0
 80034c4:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	3301      	adds	r3, #1
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	e7bf      	b.n	800344e <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x42>
        }

        return EIDSP_OK;
 80034ce:	2300      	movs	r3, #0
    }
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bdb0      	pop	{r4, r5, r7, pc}
 80034d8:	fffffc14 	.word	0xfffffc14
 80034dc:	3ff00000 	.word	0x3ff00000

080034e0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>:
     * @param scale Scale output to 0..1
     * @returns 0 if OK
     */
    static int cmvnw(matrix_t *features_matrix, uint16_t win_size = 301, bool variance_normalization = false,
        bool scale = false)
    {
 80034e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034e4:	b09f      	sub	sp, #124	; 0x7c
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	4608      	mov	r0, r1
 80034ec:	4611      	mov	r1, r2
 80034ee:	461a      	mov	r2, r3
 80034f0:	4603      	mov	r3, r0
 80034f2:	807b      	strh	r3, [r7, #2]
 80034f4:	460b      	mov	r3, r1
 80034f6:	707b      	strb	r3, [r7, #1]
 80034f8:	4613      	mov	r3, r2
 80034fa:	703b      	strb	r3, [r7, #0]
        if (win_size == 0) {
 80034fc:	887b      	ldrh	r3, [r7, #2]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x26>
            return EIDSP_OK;
 8003502:	2400      	movs	r4, #0
 8003504:	e15d      	b.n	80037c2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2e2>
        }

        uint16_t pad_size = (win_size - 1) / 2;
 8003506:	887b      	ldrh	r3, [r7, #2]
 8003508:	3b01      	subs	r3, #1
 800350a:	0fda      	lsrs	r2, r3, #31
 800350c:	4413      	add	r3, r2
 800350e:	105b      	asrs	r3, r3, #1
 8003510:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        int ret;
        float *features_buffer_ptr;

        // mean & variance normalization
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800351c:	0052      	lsls	r2, r2, #1
 800351e:	1899      	adds	r1, r3, r2
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003528:	2300      	movs	r3, #0
 800352a:	f7fd fe33 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
 800352e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x58>
 8003534:	4ca8      	ldr	r4, [pc, #672]	; (80037d8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003536:	e13f      	b.n	80037b8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2d8>
        if (!vec_pad.buffer) {
 8003538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x62>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800353e:	4ca6      	ldr	r4, [pc, #664]	; (80037d8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003540:	e13a      	b.n	80037b8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2d8>
        }

        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 8003542:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003546:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800354a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fe f9d8 	bl	8001904 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
 8003554:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (ret != EIDSP_OK) {
 8003556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x80>
            EIDSP_ERR(ret);
 800355c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800355e:	e12b      	b.n	80037b8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2d8>
        }

        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 8003560:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003562:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003566:	2300      	movs	r3, #0
 8003568:	2201      	movs	r2, #1
 800356a:	f7fd fe13 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
 800356e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x98>
 8003574:	4c98      	ldr	r4, [pc, #608]	; (80037d8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003576:	e11a      	b.n	80037ae <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2ce>
        if (!mean_matrix.buffer) {
 8003578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xa2>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800357e:	4c96      	ldr	r4, [pc, #600]	; (80037d8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003580:	e115      	b.n	80037ae <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2ce>
        }

        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 8003582:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003584:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003588:	2300      	movs	r3, #0
 800358a:	2201      	movs	r2, #1
 800358c:	f7fd fe02 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xba>
 8003596:	4c90      	ldr	r4, [pc, #576]	; (80037d8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003598:	e104      	b.n	80037a4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        if (!window_variance.buffer) {
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xc4>
            return EIDSP_OUT_OF_MEM;
 80035a0:	4c8d      	ldr	r4, [pc, #564]	; (80037d8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 80035a2:	e0ff      	b.n	80037a4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        }

        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 80035a4:	2300      	movs	r3, #0
 80035a6:	673b      	str	r3, [r7, #112]	; 0x70
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d263      	bcs.n	800367a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x19a>
            // create a slice on the vec_pad
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 80035b2:	887d      	ldrh	r5, [r7, #2]
 80035b4:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 80035b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ba:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	f107 001c 	add.w	r0, r7, #28
 80035c8:	4632      	mov	r2, r6
 80035ca:	4629      	mov	r1, r5
 80035cc:	f7fd fde2 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d102      	bne.n	80035dc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xfc>
 80035d6:	4c80      	ldr	r4, [pc, #512]	; (80037d8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 80035d8:	2500      	movs	r5, #0
 80035da:	e042      	b.n	8003662 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x182>
            if (!window.buffer) {
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d102      	bne.n	80035e8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x108>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80035e2:	4c7d      	ldr	r4, [pc, #500]	; (80037d8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 80035e4:	2500      	movs	r5, #0
 80035e6:	e03c      	b.n	8003662 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x182>
            }

            ret = numpy::mean_axis0(&window, &mean_matrix);
 80035e8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80035ec:	f107 031c 	add.w	r3, r7, #28
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fe fae2 	bl	8001bbc <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_>
 80035f8:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (ret != EIDSP_OK) {
 80035fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x126>
                EIDSP_ERR(ret);
 8003600:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003602:	2500      	movs	r5, #0
 8003604:	e02d      	b.n	8003662 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x182>
            }

            // subtract the mean for the features
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 8003606:	2300      	movs	r3, #0
 8003608:	66fb      	str	r3, [r7, #108]	; 0x6c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003610:	429a      	cmp	r2, r3
 8003612:	d225      	bcs.n	8003660 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x180>
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
                    features_matrix->buffer[(ix * features_matrix->cols) + fm_col] - mean_matrix.buffer[fm_col];
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800361e:	fb03 f101 	mul.w	r1, r3, r1
 8003622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003624:	440b      	add	r3, r1
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	ed93 7a00 	vldr	s14, [r3]
 800362e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	edd3 7a00 	vldr	s15, [r3]
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003644:	fb03 f101 	mul.w	r1, r3, r1
 8003648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800364a:	440b      	add	r3, r1
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
                    features_matrix->buffer[(ix * features_matrix->cols) + fm_col] - mean_matrix.buffer[fm_col];
 8003650:	ee77 7a67 	vsub.f32	s15, s14, s15
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
 8003654:	edc3 7a00 	vstr	s15, [r3]
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 8003658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365a:	3301      	adds	r3, #1
 800365c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800365e:	e7d4      	b.n	800360a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x12a>
 8003660:	2501      	movs	r5, #1
 8003662:	f107 031c 	add.w	r3, r7, #28
 8003666:	4618      	mov	r0, r3
 8003668:	f7fd fdbf 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
 800366c:	2d01      	cmp	r5, #1
 800366e:	f040 8099 	bne.w	80037a4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 8003672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003674:	3301      	adds	r3, #1
 8003676:	673b      	str	r3, [r7, #112]	; 0x70
 8003678:	e796      	b.n	80035a8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xc8>
            }
        }

        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 800367a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800367e:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003682:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fe f93c 	bl	8001904 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
 800368c:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (ret != EIDSP_OK) {
 800368e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1b8>
            EIDSP_ERR(ret);
 8003694:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003696:	e085      	b.n	80037a4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        }

        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 8003698:	2300      	movs	r3, #0
 800369a:	66bb      	str	r3, [r7, #104]	; 0x68
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d271      	bcs.n	800378a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2aa>
            // create a slice on the vec_pad
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 80036a6:	887d      	ldrh	r5, [r7, #2]
 80036a8:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 80036aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	f107 000c 	add.w	r0, r7, #12
 80036bc:	4632      	mov	r2, r6
 80036be:	4629      	mov	r1, r5
 80036c0:	f7fd fd68 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d102      	bne.n	80036d0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1f0>
 80036ca:	4c43      	ldr	r4, [pc, #268]	; (80037d8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 80036cc:	2500      	movs	r5, #0
 80036ce:	e051      	b.n	8003774 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x294>
            if (!window.buffer) {
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1fc>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80036d6:	4c40      	ldr	r4, [pc, #256]	; (80037d8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 80036d8:	2500      	movs	r5, #0
 80036da:	e04b      	b.n	8003774 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x294>
            }

            if (variance_normalization == true) {
 80036dc:	787b      	ldrb	r3, [r7, #1]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d147      	bne.n	8003772 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x292>
                ret = numpy::std_axis0(&window, &window_variance);
 80036e2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80036e6:	f107 030c 	add.w	r3, r7, #12
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fe fabf 	bl	8001c70 <_ZN2ei5numpy9std_axis0EPNS_9ei_matrixES2_>
 80036f2:	65f8      	str	r0, [r7, #92]	; 0x5c
                if (ret != EIDSP_OK) {
 80036f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x220>
                    EIDSP_ERR(ret);
 80036fa:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80036fc:	2500      	movs	r5, #0
 80036fe:	e039      	b.n	8003774 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x294>
                }

                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003706:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	677b      	str	r3, [r7, #116]	; 0x74
                for (size_t col = 0; col < vec_pad.cols; col++) {
 8003712:	2300      	movs	r3, #0
 8003714:	667b      	str	r3, [r7, #100]	; 0x64
 8003716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003718:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800371a:	429a      	cmp	r2, r3
 800371c:	d229      	bcs.n	8003772 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x292>
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 800371e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fc ff3a 	bl	800059c <__aeabi_f2d>
 8003728:	4680      	mov	r8, r0
 800372a:	4689      	mov	r9, r1
                                             (window_variance.buffer[col] + 1e-10);
 800372c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800372e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fc ff30 	bl	800059c <__aeabi_f2d>
 800373c:	a324      	add	r3, pc, #144	; (adr r3, 80037d0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f0>)
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f7fc fdcd 	bl	80002e0 <__adddf3>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 800374a:	4640      	mov	r0, r8
 800374c:	4649      	mov	r1, r9
 800374e:	f7fd f8a7 	bl	80008a0 <__aeabi_ddiv>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4610      	mov	r0, r2
 8003758:	4619      	mov	r1, r3
 800375a:	f7fd fa6f 	bl	8000c3c <__aeabi_d2f>
 800375e:	4602      	mov	r2, r0
 8003760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003762:	601a      	str	r2, [r3, #0]
                    features_buffer_ptr++;
 8003764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003766:	3304      	adds	r3, #4
 8003768:	677b      	str	r3, [r7, #116]	; 0x74
                for (size_t col = 0; col < vec_pad.cols; col++) {
 800376a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800376c:	3301      	adds	r3, #1
 800376e:	667b      	str	r3, [r7, #100]	; 0x64
 8003770:	e7d1      	b.n	8003716 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x236>
 8003772:	2501      	movs	r5, #1
 8003774:	f107 030c 	add.w	r3, r7, #12
 8003778:	4618      	mov	r0, r3
 800377a:	f7fd fd36 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
 800377e:	2d01      	cmp	r5, #1
 8003780:	d110      	bne.n	80037a4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 8003782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003784:	3301      	adds	r3, #1
 8003786:	66bb      	str	r3, [r7, #104]	; 0x68
 8003788:	e788      	b.n	800369c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1bc>
                }
            }
        }

        if (scale) {
 800378a:	783b      	ldrb	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c2>
            ret = numpy::normalize(features_matrix);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7fe fdd1 	bl	8002338 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>
 8003796:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (ret != EIDSP_OK) {
 8003798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c2>
                EIDSP_ERR(ret);
 800379e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80037a0:	e000      	b.n	80037a4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
            }
        }

        return EIDSP_OK;
 80037a2:	2400      	movs	r4, #0
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 80037a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fd fd1e 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 80037ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fd fd19 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 80037b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fd fd14 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
    }
 80037c2:	4623      	mov	r3, r4
 80037c4:	4618      	mov	r0, r3
 80037c6:	377c      	adds	r7, #124	; 0x7c
 80037c8:	46bd      	mov	sp, r7
 80037ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037ce:	bf00      	nop
 80037d0:	d9d7bdbb 	.word	0xd9d7bdbb
 80037d4:	3ddb7cdf 	.word	0x3ddb7cdf
 80037d8:	fffffc16 	.word	0xfffffc16
 80037dc:	00000000 	.word	0x00000000

080037e0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>:
     * @param output_transposed If set to true this will transpose the matrix (memory efficient).
     *                          This is more efficient than calling this function and then transposing
     *                          as the latter requires the filterbank to be allocated twice (for a short while).
     * @returns EIDSP_OK if OK
     */
    static int filterbanks(
 80037e0:	b5b0      	push	{r4, r5, r7, lr}
 80037e2:	ed2d 8b02 	vpush	{d8}
 80037e6:	b098      	sub	sp, #96	; 0x60
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	460b      	mov	r3, r1
 80037f2:	817b      	strh	r3, [r7, #10]
        uint16_t num_filter, int coefficients, uint32_t sampling_freq,
        uint32_t low_freq, uint32_t high_freq,
        bool output_transposed = false
        )
    {
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
 80037f4:	897b      	ldrh	r3, [r7, #10]
 80037f6:	3302      	adds	r3, #2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	647b      	str	r3, [r7, #68]	; 0x44
        const size_t hertz_mem_size = (num_filter + 2) * sizeof(float);
 80037fc:	897b      	ldrh	r3, [r7, #10]
 80037fe:	3302      	adds	r3, #2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t freq_index_mem_size = (num_filter + 2) * sizeof(int);
 8003804:	897b      	ldrh	r3, [r7, #10]
 8003806:	3302      	adds	r3, #2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	63fb      	str	r3, [r7, #60]	; 0x3c

        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
 800380c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800380e:	f01b f823 	bl	801e858 <_Z9ei_mallocj>
 8003812:	63b8      	str	r0, [r7, #56]	; 0x38
        if (!mels) {
 8003814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800381a:	4ca3      	ldr	r4, [pc, #652]	; (8003aa8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c8>)
 800381c:	e1bf      	b.n	8003b9e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3be>
        }

        if (filterbanks->rows != num_filter || filterbanks->cols != static_cast<uint32_t>(coefficients)) {
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	897b      	ldrh	r3, [r7, #10]
 8003824:	429a      	cmp	r2, r3
 8003826:	d104      	bne.n	8003832 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x52>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	429a      	cmp	r2, r3
 8003830:	d001      	beq.n	8003836 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x56>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003832:	4c9e      	ldr	r4, [pc, #632]	; (8003aac <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2cc>)
 8003834:	e1b3      	b.n	8003b9e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3be>
        }

#if EIDSP_QUANTIZE_FILTERBANK
        memset(filterbanks->buffer, 0, filterbanks->rows * filterbanks->cols * sizeof(uint8_t));
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	6892      	ldr	r2, [r2, #8]
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	461a      	mov	r2, r3
 8003848:	2100      	movs	r1, #0
 800384a:	f028 fd49 	bl	802c2e0 <memset>

        // Computing the Mel filterbank
        // converting the upper and lower frequencies to Mels.
        // num_filter + 2 is because for num_filter filterbanks we need
        // num_filter+2 point.
        numpy::linspace(
 800384e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003850:	ee07 3a90 	vmov	s15, r3
 8003854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003858:	eeb0 0a67 	vmov.f32	s0, s15
 800385c:	f7ff f88c 	bl	8002978 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 8003860:	eeb0 8a40 	vmov.f32	s16, s0
 8003864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386e:	eeb0 0a67 	vmov.f32	s0, s15
 8003872:	f7ff f881 	bl	8002978 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 8003876:	eef0 7a40 	vmov.f32	s15, s0
            functions::frequency_to_mel(static_cast<float>(low_freq)),
            functions::frequency_to_mel(static_cast<float>(high_freq)),
            num_filter + 2,
 800387a:	897b      	ldrh	r3, [r7, #10]
 800387c:	3302      	adds	r3, #2
        numpy::linspace(
 800387e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003880:	4618      	mov	r0, r3
 8003882:	eef0 0a67 	vmov.f32	s1, s15
 8003886:	eeb0 0a48 	vmov.f32	s0, s16
 800388a:	f7fe fc57 	bl	800213c <_ZN2ei5numpy8linspaceEffmPf>
            mels);

        // we should convert Mels back to Hertz because the start and end-points
        // should be at the desired frequencies.
        float *hertz = (float*)ei_dsp_malloc(hertz_mem_size);
 800388e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003890:	f01a ffe2 	bl	801e858 <_Z9ei_mallocj>
 8003894:	6378      	str	r0, [r7, #52]	; 0x34
        if (!hertz) {
 8003896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003898:	2b00      	cmp	r3, #0
 800389a:	d104      	bne.n	80038a6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0xc6>
            ei_dsp_free(mels, mels_mem_size);
 800389c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800389e:	f01a fff5 	bl	801e88c <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80038a2:	4c81      	ldr	r4, [pc, #516]	; (8003aa8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c8>)
 80038a4:	e17b      	b.n	8003b9e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3be>
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 80038a6:	2300      	movs	r3, #0
 80038a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80038ac:	897b      	ldrh	r3, [r7, #10]
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038b4:	429a      	cmp	r2, r3
 80038b6:	db74      	blt.n	80039a2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1c2>
            hertz[ix] = functions::mel_to_frequency(mels[ix]);
 80038b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038c0:	4413      	add	r3, r2
 80038c2:	edd3 7a00 	vldr	s15, [r3]
 80038c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038ce:	18d5      	adds	r5, r2, r3
 80038d0:	eeb0 0a67 	vmov.f32	s0, s15
 80038d4:	f7ff f8ec 	bl	8002ab0 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
 80038d8:	eef0 7a40 	vmov.f32	s15, s0
 80038dc:	edc5 7a00 	vstr	s15, [r5]
            if (hertz[ix] < low_freq) {
 80038e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038e8:	4413      	add	r3, r2
 80038ea:	ed93 7a00 	vldr	s14, [r3]
 80038ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038f0:	ee07 3a90 	vmov	s15, r3
 80038f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003900:	d50b      	bpl.n	800391a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x13a>
                hertz[ix] = low_freq;
 8003902:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800390a:	4413      	add	r3, r2
 800390c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800390e:	ee07 2a90 	vmov	s15, r2
 8003912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003916:	edc3 7a00 	vstr	s15, [r3]
            }
            if (hertz[ix] > high_freq) {
 800391a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003922:	4413      	add	r3, r2
 8003924:	ed93 7a00 	vldr	s14, [r3]
 8003928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800392a:	ee07 3a90 	vmov	s15, r3
 800392e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393a:	dd0b      	ble.n	8003954 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x174>
                hertz[ix] = high_freq;
 800393c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003944:	4413      	add	r3, r2
 8003946:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003948:	ee07 2a90 	vmov	s15, r2
 800394c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003950:	edc3 7a00 	vstr	s15, [r3]

            // here is a really annoying bug in Speechpy which calculates the frequency index wrong for the last bucket
            // the last 'hertz' value is not 8,000 (with sampling rate 16,000) but 7,999.999999
            // thus calculating the bucket to 64, not 65.
            // we're adjusting this here a tiny bit to ensure we have the same result
            if (ix == num_filter + 2 - 1) {
 8003954:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8003958:	897b      	ldrh	r3, [r7, #10]
 800395a:	3301      	adds	r3, #1
 800395c:	429a      	cmp	r2, r3
 800395e:	d11a      	bne.n	8003996 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1b6>
                hertz[ix] -= 0.001;
 8003960:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003968:	4413      	add	r3, r2
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fe15 	bl	800059c <__aeabi_f2d>
 8003972:	a34b      	add	r3, pc, #300	; (adr r3, 8003aa0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c0>)
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	f7fc fcb0 	bl	80002dc <__aeabi_dsub>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4610      	mov	r0, r2
 8003982:	4619      	mov	r1, r3
 8003984:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800398c:	18d5      	adds	r5, r2, r3
 800398e:	f7fd f955 	bl	8000c3c <__aeabi_d2f>
 8003992:	4603      	mov	r3, r0
 8003994:	602b      	str	r3, [r5, #0]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003996:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800399a:	3301      	adds	r3, #1
 800399c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80039a0:	e784      	b.n	80038ac <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0xcc>
            }
        }
        ei_dsp_free(mels, mels_mem_size);
 80039a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039a4:	f01a ff72 	bl	801e88c <_Z7ei_freePv>

        // The frequency resolution required to put filters at the
        // exact points calculated above should be extracted.
        //  So we should round those frequencies to the closest FFT bin.
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
 80039a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80039aa:	f01a ff55 	bl	801e858 <_Z9ei_mallocj>
 80039ae:	6338      	str	r0, [r7, #48]	; 0x30
        if (!freq_index) {
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d104      	bne.n	80039c0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1e0>
            ei_dsp_free(hertz, hertz_mem_size);
 80039b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039b8:	f01a ff68 	bl	801e88c <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80039bc:	4c3a      	ldr	r4, [pc, #232]	; (8003aa8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c8>)
 80039be:	e0ee      	b.n	8003b9e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3be>
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 80039c0:	2300      	movs	r3, #0
 80039c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80039c6:	897b      	ldrh	r3, [r7, #10]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80039ce:	429a      	cmp	r2, r3
 80039d0:	db2b      	blt.n	8003a2a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x24a>
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3301      	adds	r3, #1
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039de:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039e6:	4413      	add	r3, r2
 80039e8:	edd3 7a00 	vldr	s15, [r3]
 80039ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039fe:	eeb0 0a66 	vmov.f32	s0, s13
 8003a02:	f7fd fd15 	bl	8001430 <_ZSt5floorf>
 8003a06:	eef0 7a40 	vmov.f32	s15, s0
 8003a0a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a12:	4413      	add	r3, r2
 8003a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a18:	ee17 2a90 	vmov	r2, s15
 8003a1c:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003a1e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003a22:	3301      	adds	r3, #1
 8003a24:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8003a28:	e7cd      	b.n	80039c6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1e6>
        }
        ei_dsp_free(hertz, hertz_mem_size);
 8003a2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a2c:	f01a ff2e 	bl	801e88c <_Z7ei_freePv>

        for (size_t i = 0; i < num_filter; i++) {
 8003a30:	2300      	movs	r3, #0
 8003a32:	653b      	str	r3, [r7, #80]	; 0x50
 8003a34:	897b      	ldrh	r3, [r7, #10]
 8003a36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	f080 809e 	bcs.w	8003b7a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x39a>
            int left = freq_index[i];
 8003a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a44:	4413      	add	r3, r2
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	62fb      	str	r3, [r7, #44]	; 0x2c
            int middle = freq_index[i + 1];
 8003a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a52:	4413      	add	r3, r2
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	62bb      	str	r3, [r7, #40]	; 0x28
            int right = freq_index[i + 2];
 8003a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a60:	4413      	add	r3, r2
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24

            EI_DSP_MATRIX(z, 1, (right - left + 1));
 8003a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f107 0010 	add.w	r0, r7, #16
 8003a74:	2300      	movs	r3, #0
 8003a76:	2101      	movs	r1, #1
 8003a78:	f7fd fb8c 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2a8>
 8003a82:	4c09      	ldr	r4, [pc, #36]	; (8003aa8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c8>)
 8003a84:	2500      	movs	r5, #0
 8003a86:	e06d      	b.n	8003b64 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x384>
            if (!z.buffer) {
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d110      	bne.n	8003ab0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2d0>
                ei_dsp_free(freq_index, freq_index_mem_size);
 8003a8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a90:	f01a fefc 	bl	801e88c <_Z7ei_freePv>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003a94:	4c04      	ldr	r4, [pc, #16]	; (8003aa8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c8>)
 8003a96:	2500      	movs	r5, #0
 8003a98:	e064      	b.n	8003b64 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x384>
 8003a9a:	bf00      	nop
 8003a9c:	f3af 8000 	nop.w
 8003aa0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003aa4:	3f50624d 	.word	0x3f50624d
 8003aa8:	fffffc16 	.word	0xfffffc16
 8003aac:	fffffc14 	.word	0xfffffc14
            }
            numpy::linspace(left, right, (right - left + 1), z.buffer);
 8003ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	ee07 3a10 	vmov	s14, r3
 8003ac0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	461a      	mov	r2, r3
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	eef0 0a47 	vmov.f32	s1, s14
 8003ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8003adc:	f7fe fb2e 	bl	800213c <_ZN2ei5numpy8linspaceEffmPf>
            functions::triangle(z.buffer, (right - left + 1), left, middle, right);
 8003ae0:	6938      	ldr	r0, [r7, #16]
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	3301      	adds	r3, #1
 8003aea:	4619      	mov	r1, r3
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003af4:	f7ff f83a 	bl	8002b6c <_ZN2ei8speechpy9functions8triangleEPfjiii>

            // so... z now contains some values that we need to overwrite in the filterbank
            for (int zx = 0; zx < (right - left + 1); zx++) {
 8003af8:	2300      	movs	r3, #0
 8003afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b04:	429a      	cmp	r2, r3
 8003b06:	dc2c      	bgt.n	8003b62 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x382>
                size_t index = (i * filterbanks->cols) + (left + zx);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b16:	440a      	add	r2, r1
 8003b18:	4413      	add	r3, r2
 8003b1a:	64bb      	str	r3, [r7, #72]	; 0x48

                if (output_transposed) {
 8003b1c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x35a>
                    index = ((left + zx) * filterbanks->rows) + i;
 8003b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b28:	4413      	add	r3, r2
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	fb02 f303 	mul.w	r3, r2, r3
 8003b34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b36:	4413      	add	r3, r2
 8003b38:	64bb      	str	r3, [r7, #72]	; 0x48
                }

#if EIDSP_QUANTIZE_FILTERBANK
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	edd3 7a00 	vldr	s15, [r3]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4c:	18d5      	adds	r5, r2, r3
 8003b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b52:	f7fd fe17 	bl	8001784 <_ZN2ei5numpy17quantize_zero_oneEf>
 8003b56:	4603      	mov	r3, r0
 8003b58:	702b      	strb	r3, [r5, #0]
            for (int zx = 0; zx < (right - left + 1); zx++) {
 8003b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b60:	e7cc      	b.n	8003afc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x31c>
 8003b62:	2501      	movs	r5, #1
 8003b64:	f107 0310 	add.w	r3, r7, #16
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd fb3e 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
 8003b6e:	2d01      	cmp	r5, #1
 8003b70:	d115      	bne.n	8003b9e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3be>
        for (size_t i = 0; i < num_filter; i++) {
 8003b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b74:	3301      	adds	r3, #1
 8003b76:	653b      	str	r3, [r7, #80]	; 0x50
 8003b78:	e75c      	b.n	8003a34 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x254>
                filterbanks->buffer[index] = z.buffer[zx];
#endif
            }
        }

        if (output_transposed) {
 8003b7a:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3b6>
            uint16_t r = filterbanks->rows;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	847b      	strh	r3, [r7, #34]	; 0x22
            filterbanks->rows = filterbanks->cols;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	605a      	str	r2, [r3, #4]
            filterbanks->cols = r;
 8003b90:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	609a      	str	r2, [r3, #8]
        }

        ei_dsp_free(freq_index, freq_index_mem_size);
 8003b96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b98:	f01a fe78 	bl	801e88c <_Z7ei_freePv>

        return EIDSP_OK;
 8003b9c:	2400      	movs	r4, #0
    }
 8003b9e:	4623      	mov	r3, r4
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3758      	adds	r7, #88	; 0x58
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	ecbd 8b02 	vpop	{d8}
 8003baa:	bdb0      	pop	{r4, r5, r7, pc}

08003bac <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>:
     *     In Hz, default is 0.
     * @param high_frequency (int): highest band edge of mel filters.
     *     In Hz, default is samplerate/2
     * @EIDSP_OK if OK
     */
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
 8003bac:	b5b0      	push	{r4, r5, r7, lr}
 8003bae:	b0a2      	sub	sp, #136	; 0x88
 8003bb0:	af04      	add	r7, sp, #16
 8003bb2:	6178      	str	r0, [r7, #20]
 8003bb4:	6139      	str	r1, [r7, #16]
 8003bb6:	60fa      	str	r2, [r7, #12]
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	ed87 0a01 	vstr	s0, [r7, #4]
 8003bbe:	edc7 0a00 	vstr	s1, [r7]
        float frame_length, float frame_stride, uint16_t num_filters,
        uint16_t fft_length, uint32_t low_frequency, uint32_t high_frequency,
        uint16_t version
        )
    {
        int ret = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	667b      	str	r3, [r7, #100]	; 0x64

        if (high_frequency == 0) {
 8003bc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d103      	bne.n	8003bd6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2a>
            high_frequency = sampling_frequency / 2;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        }

        if (low_frequency == 0) {
 8003bd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3a>
            low_frequency = 300;
 8003bde:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003be2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        }

        stack_frames_info_t stack_frame_info = { 0 };
 8003be6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	605a      	str	r2, [r3, #4]
 8003bf0:	609a      	str	r2, [r3, #8]
        stack_frame_info.signal = signal;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ret = processing::stack_frames(
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	ee07 3a90 	vmov	s15, r3
 8003bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c00:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8003c04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c08:	2100      	movs	r1, #0
 8003c0a:	ed97 1a00 	vldr	s2, [r7]
 8003c0e:	edd7 0a01 	vldr	s1, [r7, #4]
 8003c12:	eeb0 0a67 	vmov.f32	s0, s15
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fa3c 	bl	8003094 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt>
 8003c1c:	6678      	str	r0, [r7, #100]	; 0x64
            frame_length,
            frame_stride,
            false,
            version
        );
        if (ret != 0) {
 8003c1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x7c>
            EIDSP_ERR(ret);
 8003c24:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8003c26:	e12c      	b.n	8003e82 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2d6>
        }

        if (stack_frame_info.frame_ixs->size() != out_features->rows) {
 8003c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f002 f989 	bl	8005f42 <_ZNKSt6vectorImSaImEE4sizeEv>
 8003c30:	4602      	mov	r2, r0
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	bf14      	ite	ne
 8003c3a:	2301      	movne	r3, #1
 8003c3c:	2300      	moveq	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x9c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003c44:	4c94      	ldr	r4, [pc, #592]	; (8003e98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2ec>)
 8003c46:	e11c      	b.n	8003e82 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2d6>
        }

        if (num_filters != out_features->cols) {
 8003c48:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xac>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003c54:	4c90      	ldr	r4, [pc, #576]	; (8003e98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2ec>)
 8003c56:	e114      	b.n	8003e82 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2d6>
        }

        if (stack_frame_info.frame_ixs->size() != out_energies->rows || out_energies->cols != 1) {
 8003c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f002 f971 	bl	8005f42 <_ZNKSt6vectorImSaImEE4sizeEv>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d103      	bne.n	8003c72 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xc6>
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d001      	beq.n	8003c76 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xca>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xcc>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xd4>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003c7c:	4c86      	ldr	r4, [pc, #536]	; (8003e98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2ec>)
 8003c7e:	e100      	b.n	8003e82 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2d6>
        }

        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 8003c80:	2300      	movs	r3, #0
 8003c82:	677b      	str	r3, [r7, #116]	; 0x74
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	6892      	ldr	r2, [r2, #8]
 8003c8c:	fb02 f303 	mul.w	r3, r2, r3
 8003c90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d20b      	bcs.n	8003cae <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x102>
            *(out_features->buffer + i) = 0;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 8003ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca8:	3301      	adds	r3, #1
 8003caa:	677b      	str	r3, [r7, #116]	; 0x74
 8003cac:	e7ea      	b.n	8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xd8>
        }

        uint16_t coefficients = fft_length / 2 + 1;
 8003cae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        // calculate the filterbanks first... preferably I would want to do the matrix multiplications
        // whenever they happen, but OK...
#if EIDSP_QUANTIZE_FILTERBANK
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 8003cbc:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8003cc0:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003cc4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003cc8:	2300      	movs	r3, #0
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	4b73      	ldr	r3, [pc, #460]	; (8003e9c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f0>)
 8003cce:	f7fd fae2 	bl	8001296 <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh>
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x130>
 8003cd8:	4c71      	ldr	r4, [pc, #452]	; (8003ea0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f4>)
 8003cda:	e0cd      	b.n	8003e78 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2cc>
#else
        EI_DSP_MATRIX(filterbanks, num_filters, coefficients);
#endif
        if (!filterbanks.buffer) {
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x13a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003ce2:	4c6f      	ldr	r4, [pc, #444]	; (8003ea0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f4>)
 8003ce4:	e0c8      	b.n	8003e78 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2cc>
        }

        ret = feature::filterbanks(
 8003ce6:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003cea:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8003cee:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	9302      	str	r3, [sp, #8]
 8003cf6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f7ff fd6c 	bl	80037e0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>
 8003d08:	6678      	str	r0, [r7, #100]	; 0x64
            &filterbanks, num_filters, coefficients, sampling_frequency, low_frequency, high_frequency, true);
        if (ret != 0) {
 8003d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x168>
            EIDSP_ERR(ret);
 8003d10:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8003d12:	e0b1      	b.n	8003e78 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2cc>
        }
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs->size(); ix++) {
 8003d14:	2300      	movs	r3, #0
 8003d16:	673b      	str	r3, [r7, #112]	; 0x70
 8003d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f002 f911 	bl	8005f42 <_ZNKSt6vectorImSaImEE4sizeEv>
 8003d20:	4602      	mov	r2, r0
 8003d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d24:	4293      	cmp	r3, r2
 8003d26:	bf34      	ite	cc
 8003d28:	2301      	movcc	r3, #1
 8003d2a:	2300      	movcs	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 809e 	beq.w	8003e70 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c4>
            size_t power_spectrum_frame_size = (fft_length / 2 + 1);
 8003d34:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	65fb      	str	r3, [r7, #92]	; 0x5c

            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 8003d40:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003d44:	2300      	movs	r3, #0
 8003d46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d48:	2101      	movs	r1, #1
 8003d4a:	f7fd fa23 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d102      	bne.n	8003d5a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1ae>
 8003d54:	4c52      	ldr	r4, [pc, #328]	; (8003ea0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f4>)
 8003d56:	2500      	movs	r5, #0
 8003d58:	e07f      	b.n	8003e5a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2ae>
            if (!power_spectrum_frame.buffer) {
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d102      	bne.n	8003d66 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1ba>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003d60:	4c4f      	ldr	r4, [pc, #316]	; (8003ea0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f4>)
 8003d62:	2500      	movs	r5, #0
 8003d64:	e079      	b.n	8003e5a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2ae>
            }

            // get signal data from the audio file
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 8003d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d68:	461a      	mov	r2, r3
 8003d6a:	f107 0018 	add.w	r0, r7, #24
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2101      	movs	r1, #1
 8003d72:	f7fd fa0f 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1d6>
 8003d7c:	4c48      	ldr	r4, [pc, #288]	; (8003ea0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f4>)
 8003d7e:	2500      	movs	r5, #0
 8003d80:	e061      	b.n	8003e46 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x29a>

            // don't read outside of the audio buffer... we'll automatically zero pad then
            size_t signal_offset = stack_frame_info.frame_ixs->at(ix);
 8003d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d84:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003d86:	4618      	mov	r0, r3
 8003d88:	f002 f8eb 	bl	8005f62 <_ZNSt6vectorImSaImEE2atEj>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	65bb      	str	r3, [r7, #88]	; 0x58
            size_t signal_length = stack_frame_info.frame_length;
 8003d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d94:	66fb      	str	r3, [r7, #108]	; 0x6c
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 8003d96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9a:	441a      	add	r2, r3
 8003d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d908      	bls.n	8003db6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x20a>
                signal_length = signal_length -
                    (stack_frame_info.signal->total_length - (signal_offset + signal_length));
 8003da4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da8:	441a      	add	r2, r3
 8003daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dac:	691b      	ldr	r3, [r3, #16]
                signal_length = signal_length -
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003db2:	4413      	add	r3, r2
 8003db4:	66fb      	str	r3, [r7, #108]	; 0x6c
            }

            ret = stack_frame_info.signal->get_data(
 8003db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db8:	4618      	mov	r0, r3
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003dc0:	f002 f820 	bl	8005e04 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8003dc4:	6678      	str	r0, [r7, #100]	; 0x64
                signal_offset,
                signal_length,
                signal_frame.buffer
            );
            if (ret != 0) {
 8003dc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x226>
                EIDSP_ERR(ret);
 8003dcc:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8003dce:	2500      	movs	r5, #0
 8003dd0:	e039      	b.n	8003e46 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x29a>
            }

            ret = processing::power_spectrum(
 8003dd2:	69b8      	ldr	r0, [r7, #24]
                signal_frame.buffer,
                stack_frame_info.frame_length,
 8003dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
            ret = processing::power_spectrum(
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dda:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003de2:	f7ff fb13 	bl	800340c <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt>
 8003de6:	6678      	str	r0, [r7, #100]	; 0x64
                power_spectrum_frame.buffer,
                power_spectrum_frame_size,
                fft_length
            );

            if (ret != 0) {
 8003de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x248>
                EIDSP_ERR(ret);
 8003dee:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8003df0:	2500      	movs	r5, #0
 8003df2:	e028      	b.n	8003e46 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x29a>
            }

            float energy = numpy::sum(power_spectrum_frame.buffer, power_spectrum_frame_size);
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fd fb93 	bl	8001524 <_ZN2ei5numpy3sumEPfj>
 8003dfe:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
            if (energy == 0) {
 8003e02:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003e06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0e:	d101      	bne.n	8003e14 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x268>
                energy = 1e-10;
 8003e10:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f8>)
 8003e12:	66bb      	str	r3, [r7, #104]	; 0x68
            }

            out_energies->buffer[ix] = energy;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e20:	601a      	str	r2, [r3, #0]

            // calculate the out_features directly here
            ret = numpy::dot_by_row(
 8003e22:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e32:	f7fd fb9f 	bl	8001574 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE>
 8003e36:	6678      	str	r0, [r7, #100]	; 0x64
                power_spectrum_frame_size,
                &filterbanks,
                out_features
            );

            if (ret != 0) {
 8003e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x298>
                EIDSP_ERR(ret);
 8003e3e:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8003e40:	2500      	movs	r5, #0
 8003e42:	e000      	b.n	8003e46 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x29a>
 8003e44:	2501      	movs	r5, #1
 8003e46:	f107 0318 	add.w	r3, r7, #24
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fd f9cd 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
 8003e50:	2d01      	cmp	r5, #1
 8003e52:	d001      	beq.n	8003e58 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2ac>
 8003e54:	2500      	movs	r5, #0
 8003e56:	e000      	b.n	8003e5a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2ae>
 8003e58:	2501      	movs	r5, #1
 8003e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fd f9c3 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
 8003e64:	2d01      	cmp	r5, #1
 8003e66:	d107      	bne.n	8003e78 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2cc>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs->size(); ix++) {
 8003e68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	673b      	str	r3, [r7, #112]	; 0x70
 8003e6e:	e753      	b.n	8003d18 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x16c>
            }
        }

        functions::zero_handling(out_features);
 8003e70:	6978      	ldr	r0, [r7, #20]
 8003e72:	f7fe fe67 	bl	8002b44 <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE>

        return EIDSP_OK;
 8003e76:	2400      	movs	r4, #0
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 8003e78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fd fa37 	bl	80012f0 <_ZN2ei19ei_quantized_matrixD1Ev>
        stack_frames_info_t stack_frame_info = { 0 };
 8003e82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe ff1a 	bl	8002cc0 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>
    }
 8003e8c:	4623      	mov	r3, r4
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3778      	adds	r7, #120	; 0x78
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bdb0      	pop	{r4, r5, r7, pc}
 8003e96:	bf00      	nop
 8003e98:	fffffc14 	.word	0xfffffc14
 8003e9c:	080018d9 	.word	0x080018d9
 8003ea0:	fffffc16 	.word	0xfffffc16
 8003ea4:	2edbe6ff 	.word	0x2edbe6ff

08003ea8 <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfftt>:
     * @param sampling_frequency (int): The sampling frequency of the signal.
     * @param frame_length (float): The length of the frame in second.
     * @param frame_stride (float): The stride between frames.
     * @param num_filters
     */
    static matrix_size_t calculate_mfe_buffer_size(
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6178      	str	r0, [r7, #20]
 8003eb0:	6139      	str	r1, [r7, #16]
 8003eb2:	60fa      	str	r2, [r7, #12]
 8003eb4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003eb8:	edc7 0a01 	vstr	s1, [r7, #4]
 8003ebc:	807b      	strh	r3, [r7, #2]
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length, float frame_stride, uint16_t num_filters,
        uint16_t version)
    {
        int32_t rows = processing::calculate_no_of_stack_frames(
 8003ebe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	edd7 0a01 	vldr	s1, [r7, #4]
 8003ec6:	ed97 0a02 	vldr	s0, [r7, #8]
 8003eca:	68f9      	ldr	r1, [r7, #12]
 8003ecc:	6938      	ldr	r0, [r7, #16]
 8003ece:	f7ff fa01 	bl	80032d4 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt>
 8003ed2:	61f8      	str	r0, [r7, #28]
            sampling_frequency,
            frame_length,
            frame_stride,
            false,
            version);
        int32_t cols = num_filters;
 8003ed4:	887b      	ldrh	r3, [r7, #2]
 8003ed6:	61bb      	str	r3, [r7, #24]

        matrix_size_t size_matrix;
        size_matrix.rows = (uint32_t)rows;
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	601a      	str	r2, [r3, #0]
        size_matrix.cols = (uint32_t)cols;
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	605a      	str	r2, [r3, #4]
        return size_matrix;
 8003ee4:	bf00      	nop
    }
 8003ee6:	6978      	ldr	r0, [r7, #20]
 8003ee8:	3720      	adds	r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt>:
     *     In Hz, default is samplerate/2
     * @param dc_elimination Whether the first dc component should
     *     be eliminated or not.
     * @returns 0 if OK
     */
    static int mfcc(matrix_t *out_features, signal_t *signal,
 8003ef0:	b590      	push	{r4, r7, lr}
 8003ef2:	b0a5      	sub	sp, #148	; 0x94
 8003ef4:	af06      	add	r7, sp, #24
 8003ef6:	6178      	str	r0, [r7, #20]
 8003ef8:	6139      	str	r1, [r7, #16]
 8003efa:	60fa      	str	r2, [r7, #12]
 8003efc:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f00:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f04:	70fb      	strb	r3, [r7, #3]
        uint32_t sampling_frequency, float frame_length, float frame_stride,
        uint8_t num_cepstral, uint16_t num_filters, uint16_t fft_length,
        uint32_t low_frequency, uint32_t high_frequency, bool dc_elimination,
        uint16_t version)
    {
        if (out_features->cols != num_cepstral) {
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x24>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003f10:	4c94      	ldr	r4, [pc, #592]	; (8004164 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x274>)
 8003f12:	e121      	b.n	8004158 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x268>
                signal->total_length,
                sampling_frequency,
                frame_length,
                frame_stride,
                num_filters,
                version);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	6919      	ldr	r1, [r3, #16]
 8003f18:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8003f1c:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8003f20:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	4613      	mov	r3, r2
 8003f28:	edd7 0a01 	vldr	s1, [r7, #4]
 8003f2c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	f7ff ffb9 	bl	8003ea8 <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfftt>

        if (out_features->rows != mfe_matrix_size.rows) {
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d001      	beq.n	8003f44 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x54>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003f40:	4c88      	ldr	r4, [pc, #544]	; (8004164 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x274>)
 8003f42:	e109      	b.n	8004158 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x268>
        }

        int ret = EIDSP_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	66bb      	str	r3, [r7, #104]	; 0x68

        // allocate some memory for the MFE result
        EI_DSP_MATRIX(features_matrix, mfe_matrix_size.rows, mfe_matrix_size.cols);
 8003f48:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f4c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003f50:	2300      	movs	r3, #0
 8003f52:	f7fd f91f 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
 8003f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x70>
 8003f5c:	4c82      	ldr	r4, [pc, #520]	; (8004168 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x278>)
 8003f5e:	e0f6      	b.n	800414e <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x25e>
        if (!features_matrix.buffer) {
 8003f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x7a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003f66:	4c80      	ldr	r4, [pc, #512]	; (8004168 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x278>)
 8003f68:	e0f1      	b.n	800414e <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x25e>
        }

        EI_DSP_MATRIX(energy_matrix, mfe_matrix_size.rows, 1);
 8003f6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f6c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f70:	2300      	movs	r3, #0
 8003f72:	2201      	movs	r2, #1
 8003f74:	f7fd f90e 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x92>
 8003f7e:	4c7a      	ldr	r4, [pc, #488]	; (8004168 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x278>)
 8003f80:	e0e0      	b.n	8004144 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x254>
        if (!energy_matrix.buffer) {
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x9c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003f88:	4c77      	ldr	r4, [pc, #476]	; (8004168 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x278>)
 8003f8a:	e0db      	b.n	8004144 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x254>
        }

        ret = mfe(&features_matrix, &energy_matrix, signal,
 8003f8c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003f90:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003f94:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8003f98:	9304      	str	r3, [sp, #16]
 8003f9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f9e:	9303      	str	r3, [sp, #12]
 8003fa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fa4:	9302      	str	r3, [sp, #8]
 8003fa6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	edd7 0a01 	vldr	s1, [r7, #4]
 8003fb6:	ed97 0a02 	vldr	s0, [r7, #8]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	f7ff fdf5 	bl	8003bac <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
 8003fc2:	66b8      	str	r0, [r7, #104]	; 0x68
            sampling_frequency, frame_length, frame_stride, num_filters, fft_length,
            low_frequency, high_frequency, version);
        if (ret != EIDSP_OK) {
 8003fc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0xde>
            EIDSP_ERR(ret);
 8003fca:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8003fcc:	e0ba      	b.n	8004144 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x254>
        }

        // ok... now we need to calculate the MFCC from this...
        // first do log() over all features...
        ret = numpy::log(&features_matrix);
 8003fce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe f91c 	bl	8002210 <_ZN2ei5numpy3logEPNS_9ei_matrixE>
 8003fd8:	66b8      	str	r0, [r7, #104]	; 0x68
        if (ret != EIDSP_OK) {
 8003fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0xf4>
            EIDSP_ERR(ret);
 8003fe0:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8003fe2:	e0af      	b.n	8004144 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x254>
        }

        // now do DST type 2
        ret = numpy::dct2(&features_matrix, DCT_NORMALIZATION_ORTHO);
 8003fe4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd fb9e 	bl	800172c <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE>
 8003ff0:	66b8      	str	r0, [r7, #104]	; 0x68
        if (ret != EIDSP_OK) {
 8003ff2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x10c>
            EIDSP_ERR(ret);
 8003ff8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8003ffa:	e0a3      	b.n	8004144 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x254>
        }

        // replace first cepstral coefficient with log of frame energy for DC elimination
        if (dc_elimination) {
 8003ffc:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004000:	2b00      	cmp	r3, #0
 8004002:	d075      	beq.n	80040f0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x200>
            for (size_t row = 0; row < features_matrix.rows; row++) {
 8004004:	2300      	movs	r3, #0
 8004006:	677b      	str	r3, [r7, #116]	; 0x74
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800400c:	429a      	cmp	r2, r3
 800400e:	d26f      	bcs.n	80040f0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x200>
                features_matrix.buffer[row * features_matrix.cols] = numpy::log(energy_matrix.buffer[row]);
 8004010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800401c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800401e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004020:	fb00 f202 	mul.w	r2, r0, r2
 8004024:	0092      	lsls	r2, r2, #2
 8004026:	188c      	adds	r4, r1, r2
 8004028:	623b      	str	r3, [r7, #32]
        g = (int32_t) * ((int32_t *)&a);
 800402a:	f107 0320 	add.w	r3, r7, #32
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	61fb      	str	r3, [r7, #28]
        e = (g - 0x3f2aaaab) & 0xff800000;
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	4b4d      	ldr	r3, [pc, #308]	; (800416c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x27c>)
 8004036:	4413      	add	r3, r2
 8004038:	0ddb      	lsrs	r3, r3, #23
 800403a:	05db      	lsls	r3, r3, #23
 800403c:	667b      	str	r3, [r7, #100]	; 0x64
        g = g - e;
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	61fb      	str	r3, [r7, #28]
        m = (float) * ((float *)&g);
 8004046:	f107 031c 	add.w	r3, r7, #28
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	663b      	str	r3, [r7, #96]	; 0x60
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 800404e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004050:	ee07 3a90 	vmov	s15, r3
 8004054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004058:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004170 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x280>
 800405c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004060:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        f = m - 1.0f;
 8004064:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800406c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004070:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        s = f * f;
 8004074:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004078:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800407c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 8004080:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8004174 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x284>
 8004084:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 8004088:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8004178 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x288>
 800408c:	f025 fa44 	bl	8029518 <fmaf>
 8004090:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 8004094:	ed9f 1a39 	vldr	s2, [pc, #228]	; 800417c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x28c>
 8004098:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 800409c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8004180 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x290>
 80040a0:	f025 fa3a 	bl	8029518 <fmaf>
 80040a4:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
        r = fmaf(r, s, t);
 80040a8:	ed97 1a13 	vldr	s2, [r7, #76]	; 0x4c
 80040ac:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 80040b0:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80040b4:	f025 fa30 	bl	8029518 <fmaf>
 80040b8:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        r = fmaf(r, s, f);
 80040bc:	ed97 1a16 	vldr	s2, [r7, #88]	; 0x58
 80040c0:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 80040c4:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80040c8:	f025 fa26 	bl	8029518 <fmaf>
 80040cc:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 80040d0:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 80040d4:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8004184 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x294>
 80040d8:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 80040dc:	f025 fa1c 	bl	8029518 <fmaf>
 80040e0:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        return r;
 80040e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e6:	6023      	str	r3, [r4, #0]
            for (size_t row = 0; row < features_matrix.rows; row++) {
 80040e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ea:	3301      	adds	r3, #1
 80040ec:	677b      	str	r3, [r7, #116]	; 0x74
 80040ee:	e78b      	b.n	8004008 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x118>
            }
        }

        // copy to the output...
        for (size_t row = 0; row < features_matrix.rows; row++) {
 80040f0:	2300      	movs	r3, #0
 80040f2:	673b      	str	r3, [r7, #112]	; 0x70
 80040f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d222      	bcs.n	8004142 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x252>
            for(int i = 0; i < num_cepstral; i++) {
 80040fc:	2300      	movs	r3, #0
 80040fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004104:	429a      	cmp	r2, r3
 8004106:	da18      	bge.n	800413a <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x24a>
                *(out_features->buffer + (num_cepstral * row) + i) = *(features_matrix.buffer + (features_matrix.cols * row) + i);
 8004108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800410a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800410e:	fb03 f101 	mul.w	r1, r3, r1
 8004112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004114:	440b      	add	r3, r1
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	441a      	add	r2, r3
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	6819      	ldr	r1, [r3, #0]
 800411e:	78fb      	ldrb	r3, [r7, #3]
 8004120:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004122:	fb03 f000 	mul.w	r0, r3, r0
 8004126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004128:	4403      	add	r3, r0
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	6812      	ldr	r2, [r2, #0]
 8004130:	601a      	str	r2, [r3, #0]
            for(int i = 0; i < num_cepstral; i++) {
 8004132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004134:	3301      	adds	r3, #1
 8004136:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004138:	e7e2      	b.n	8004100 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x210>
        for (size_t row = 0; row < features_matrix.rows; row++) {
 800413a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800413c:	3301      	adds	r3, #1
 800413e:	673b      	str	r3, [r7, #112]	; 0x70
 8004140:	e7d8      	b.n	80040f4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x204>
            }
        }

        return EIDSP_OK;
 8004142:	2400      	movs	r4, #0
        EI_DSP_MATRIX(energy_matrix, mfe_matrix_size.rows, 1);
 8004144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004148:	4618      	mov	r0, r3
 800414a:	f7fd f84e 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(features_matrix, mfe_matrix_size.rows, mfe_matrix_size.cols);
 800414e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004152:	4618      	mov	r0, r3
 8004154:	f7fd f849 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
    }
 8004158:	4623      	mov	r3, r4
 800415a:	4618      	mov	r0, r3
 800415c:	377c      	adds	r7, #124	; 0x7c
 800415e:	46bd      	mov	sp, r7
 8004160:	bd90      	pop	{r4, r7, pc}
 8004162:	bf00      	nop
 8004164:	fffffc14 	.word	0xfffffc14
 8004168:	fffffc16 	.word	0xfffffc16
 800416c:	c0d55555 	.word	0xc0d55555
 8004170:	34000000 	.word	0x34000000
 8004174:	be8ef46d 	.word	0xbe8ef46d
 8004178:	3e6c6078 	.word	0x3e6c6078
 800417c:	beff712d 	.word	0xbeff712d
 8004180:	3ea9e51a 	.word	0x3ea9e51a
 8004184:	3f317218 	.word	0x3f317218

08004188 <_ZN2ei8speechpy7feature26calculate_mfcc_buffer_sizeEjmfftt>:
     * @param sampling_frequency (int): The sampling frequency of the signal.
     * @param frame_length (float): The length of the frame in second.
     * @param frame_stride (float): The stride between frames.
     * @param num_cepstral
     */
    static matrix_size_t calculate_mfcc_buffer_size(
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	6178      	str	r0, [r7, #20]
 8004190:	6139      	str	r1, [r7, #16]
 8004192:	60fa      	str	r2, [r7, #12]
 8004194:	ed87 0a02 	vstr	s0, [r7, #8]
 8004198:	edc7 0a01 	vstr	s1, [r7, #4]
 800419c:	807b      	strh	r3, [r7, #2]
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length, float frame_stride, uint16_t num_cepstral,
        uint16_t version)
    {
        int32_t rows = processing::calculate_no_of_stack_frames(
 800419e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041a0:	2200      	movs	r2, #0
 80041a2:	edd7 0a01 	vldr	s1, [r7, #4]
 80041a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80041aa:	68f9      	ldr	r1, [r7, #12]
 80041ac:	6938      	ldr	r0, [r7, #16]
 80041ae:	f7ff f891 	bl	80032d4 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt>
 80041b2:	61f8      	str	r0, [r7, #28]
            sampling_frequency,
            frame_length,
            frame_stride,
            false,
            version);
        int32_t cols = num_cepstral;
 80041b4:	887b      	ldrh	r3, [r7, #2]
 80041b6:	61bb      	str	r3, [r7, #24]

        matrix_size_t size_matrix;
        size_matrix.rows = (uint32_t)rows;
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	601a      	str	r2, [r3, #0]
        size_matrix.cols = (uint32_t)cols;
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	605a      	str	r2, [r3, #4]
        return size_matrix;
 80041c4:	bf00      	nop
    }
 80041c6:	6978      	ldr	r0, [r7, #20]
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fc ffb7 	bl	800114c <_ZNSt14_Function_baseD1Ev>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f001 fec7 	bl	8005f86 <_ZNSt8functionIFijjPfEEC1Ev>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <_ZN2ei11ei_signal_tD1Ev>:
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff ffde 	bl	80041ce <_ZNSt8functionIFijjPfEED1Ev>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf>:

    return EIDSP_OK;
}

static class speechpy::processing::preemphasis *preemphasis;
static int preemphasized_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
    return preemphasis->get_data(offset, length, out_ptr);
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x24>)
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	68f9      	ldr	r1, [r7, #12]
 8004232:	f7fe fdab 	bl	8002d8c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>
 8004236:	4603      	mov	r3, r0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20000320 	.word	0x20000320

08004244 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

__attribute__((unused)) int extract_mfcc_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
 8004244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004246:	b0a9      	sub	sp, #164	; 0xa4
 8004248:	af06      	add	r7, sp, #24
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800425a:	461d      	mov	r5, r3
 800425c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800425e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004264:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (config.axes != 1) {
 800426c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800426e:	2b01      	cmp	r3, #1
 8004270:	d001      	beq.n	8004276 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004272:	4c6b      	ldr	r4, [pc, #428]	; (8004420 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1dc>)
 8004274:	e0ce      	b.n	8004414 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
    }

    if((config.implementation_version == 0) || (config.implementation_version > 3)) {
 8004276:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x42>
 800427e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004282:	2b03      	cmp	r3, #3
 8004284:	d902      	bls.n	800428c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x48>
        EIDSP_ERR(EIDSP_BLOCK_VERSION_INCORRECT);
 8004286:	f46f 747d 	mvn.w	r4, #1012	; 0x3f4
 800428a:	e0c3      	b.n	8004414 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
    }

    if (signal->total_length == 0) {
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x54>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8004294:	4c63      	ldr	r4, [pc, #396]	; (8004424 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e0>)
 8004296:	e0bd      	b.n	8004414 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
    }

    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
 8004298:	edd7 7a00 	vldr	s15, [r7]
 800429c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042a0:	ee17 3a90 	vmov	r3, s15
 80042a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    // preemphasis class to preprocess the audio...
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof, false);
 80042a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042aa:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80042ae:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80042b2:	2300      	movs	r3, #0
 80042b4:	eeb0 0a67 	vmov.f32	s0, s15
 80042b8:	68f9      	ldr	r1, [r7, #12]
 80042ba:	f7fe fd19 	bl	8002cf0 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>
    preemphasis = &pre;
 80042be:	4a5a      	ldr	r2, [pc, #360]	; (8004428 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e4>)
 80042c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042c4:	6013      	str	r3, [r2, #0]

    signal_t preemphasized_audio_signal;
 80042c6:	f107 031c 	add.w	r3, r7, #28
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff ff8c 	bl	80041e8 <_ZN2ei11ei_signal_tC1Ev>
    preemphasized_audio_signal.total_length = signal->total_length;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 80042d6:	4b55      	ldr	r3, [pc, #340]	; (800442c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e8>)
 80042d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042da:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80042de:	f107 031c 	add.w	r3, r7, #28
 80042e2:	4611      	mov	r1, r2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f001 fe5b 	bl	8005fa0 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>

    // calculate the size of the MFCC matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfcc_buffer_size(
            signal->total_length, frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.implementation_version);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6919      	ldr	r1, [r3, #16]
 80042ee:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80042f2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80042f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80042fe:	f107 0014 	add.w	r0, r7, #20
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	4613      	mov	r3, r2
 8004306:	eef0 0a47 	vmov.f32	s1, s14
 800430a:	eeb0 0a67 	vmov.f32	s0, s15
 800430e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004312:	f7ff ff39 	bl	8004188 <_ZN2ei8speechpy7feature26calculate_mfcc_buffer_sizeEjmfftt>
    /* Only throw size mismatch error calculated buffer doesn't fit for continuous inferencing */
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	fb03 f202 	mul.w	r2, r3, r2
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	6889      	ldr	r1, [r1, #8]
 8004326:	fb01 f303 	mul.w	r3, r1, r3
 800432a:	429a      	cmp	r2, r3
 800432c:	d911      	bls.n	8004352 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x10e>
        ei_printf("out_matrix = %dx%d\n", (int)output_matrix->rows, (int)output_matrix->cols);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	4619      	mov	r1, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	461a      	mov	r2, r3
 800433a:	483d      	ldr	r0, [pc, #244]	; (8004430 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ec>)
 800433c:	f001 fcb4 	bl	8005ca8 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %dx%d\n", (int)out_matrix_size.rows, (int)out_matrix_size.cols);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	4619      	mov	r1, r3
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	461a      	mov	r2, r3
 8004348:	483a      	ldr	r0, [pc, #232]	; (8004434 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f0>)
 800434a:	f001 fcad 	bl	8005ca8 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800434e:	4c34      	ldr	r4, [pc, #208]	; (8004420 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1dc>)
 8004350:	e056      	b.n	8004400 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>
    }

    output_matrix->rows = out_matrix_size.rows;
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	605a      	str	r2, [r3, #4]
    output_matrix->cols = out_matrix_size.cols;
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	609a      	str	r2, [r3, #8]

    // and run the MFCC extraction (using 32 rather than 40 filters here to optimize speed on embedded)
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 800435e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004362:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 8004366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004368:	b2dc      	uxtb	r4, r3
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 800436a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 800436c:	b29b      	uxth	r3, r3
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 800436e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004370:	b292      	uxth	r2, r2
        config.low_frequency, config.high_frequency, true, config.implementation_version);
 8004372:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004374:	460d      	mov	r5, r1
        config.low_frequency, config.high_frequency, true, config.implementation_version);
 8004376:	6f39      	ldr	r1, [r7, #112]	; 0x70
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004378:	460e      	mov	r6, r1
 800437a:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 800437e:	f107 001c 	add.w	r0, r7, #28
 8004382:	9105      	str	r1, [sp, #20]
 8004384:	2101      	movs	r1, #1
 8004386:	9104      	str	r1, [sp, #16]
 8004388:	9603      	str	r6, [sp, #12]
 800438a:	9502      	str	r5, [sp, #8]
 800438c:	9201      	str	r2, [sp, #4]
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	4623      	mov	r3, r4
 8004392:	eef0 0a47 	vmov.f32	s1, s14
 8004396:	eeb0 0a67 	vmov.f32	s0, s15
 800439a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800439e:	4601      	mov	r1, r0
 80043a0:	68b8      	ldr	r0, [r7, #8]
 80043a2:	f7ff fda5 	bl	8003ef0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt>
 80043a6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    if (ret != EIDSP_OK) {
 80043aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x17e>
        ei_printf("ERR: MFCC failed (%d)\n", ret);
 80043b2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80043b6:	4820      	ldr	r0, [pc, #128]	; (8004438 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f4>)
 80043b8:	f001 fc76 	bl	8005ca8 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 80043bc:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 80043c0:	e01e      	b.n	8004400 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>
    }

    // cepstral mean and variance normalization
    ret = speechpy::processing::cmvnw(output_matrix, config.win_size, true, false);
 80043c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043c4:	b299      	uxth	r1, r3
 80043c6:	2300      	movs	r3, #0
 80043c8:	2201      	movs	r2, #1
 80043ca:	68b8      	ldr	r0, [r7, #8]
 80043cc:	f7ff f888 	bl	80034e0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>
 80043d0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    if (ret != EIDSP_OK) {
 80043d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d007      	beq.n	80043ec <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a8>
        ei_printf("ERR: cmvnw failed (%d)\n", ret);
 80043dc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80043e0:	4816      	ldr	r0, [pc, #88]	; (800443c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f8>)
 80043e2:	f001 fc61 	bl	8005ca8 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 80043e6:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 80043ea:	e009      	b.n	8004400 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>
    }

    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	fb03 f202 	mul.w	r2, r3, r2
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2201      	movs	r2, #1
 80043fc:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 80043fe:	2400      	movs	r4, #0
    signal_t preemphasized_audio_signal;
 8004400:	f107 031c 	add.w	r3, r7, #28
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fefc 	bl	8004202 <_ZN2ei11ei_signal_tD1Ev>
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof, false);
 800440a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800440e:	4618      	mov	r0, r3
 8004410:	f7fe fdbe 	bl	8002f90 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
}
 8004414:	4623      	mov	r3, r4
 8004416:	4618      	mov	r0, r3
 8004418:	378c      	adds	r7, #140	; 0x8c
 800441a:	46bd      	mov	sp, r7
 800441c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800441e:	bf00      	nop
 8004420:	fffffc14 	.word	0xfffffc14
 8004424:	fffffc10 	.word	0xfffffc10
 8004428:	20000320 	.word	0x20000320
 800442c:	0800421d 	.word	0x0800421d
 8004430:	0802d8d4 	.word	0x0802d8d4
 8004434:	0802d8e8 	.word	0x0802d8e8
 8004438:	0802d904 	.word	0x0802d904
 800443c:	0802d91c 	.word	0x0802d91c

08004440 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8004440:	b5b0      	push	{r4, r5, r7, lr}
 8004442:	b098      	sub	sp, #96	; 0x60
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004456:	ca07      	ldmia	r2, {r0, r1, r2}
 8004458:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	4973      	ldr	r1, [pc, #460]	; (800462c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ec>)
 8004460:	4618      	mov	r0, r3
 8004462:	f7fb ff25 	bl	80002b0 <strcmp>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 8004470:	2303      	movs	r3, #3
 8004472:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_FRAMES * EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	6892      	ldr	r2, [r2, #8]
 800447e:	fb02 f303 	mul.w	r3, r2, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00f      	beq.n	80044a6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x66>
        ei_printf("out_matrix = %d items\n", static_cast<int>(output_matrix->rows * output_matrix->cols));
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	6892      	ldr	r2, [r2, #8]
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	4619      	mov	r1, r3
 8004494:	4866      	ldr	r0, [pc, #408]	; (8004630 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f0>)
 8004496:	f001 fc07 	bl	8005ca8 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %d items\n", static_cast<int>(EI_CLASSIFIER_INPUT_FRAMES * EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
 800449a:	2100      	movs	r1, #0
 800449c:	4865      	ldr	r0, [pc, #404]	; (8004634 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f4>)
 800449e:	f001 fc03 	bl	8005ca8 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80044a2:	4c65      	ldr	r4, [pc, #404]	; (8004638 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f8>)
 80044a4:	e0bc      	b.n	8004620 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e0>
    }

    size_t output_ix = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 80044aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044ae:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80044b6:	2300      	movs	r3, #0
 80044b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044c0:	429a      	cmp	r2, r3
 80044c2:	f080 80ac 	bcs.w	800461e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1de>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044cc:	d803      	bhi.n	80044d6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x96>
 80044ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	e001      	b.n	80044da <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x9a>
 80044d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 80044dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044de:	461a      	mov	r2, r3
 80044e0:	f107 0014 	add.w	r0, r7, #20
 80044e4:	2300      	movs	r3, #0
 80044e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80044e8:	f7fc fe54 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d102      	bne.n	80044f8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb8>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80044f2:	4c52      	ldr	r4, [pc, #328]	; (800463c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1fc>)
 80044f4:	2500      	movs	r5, #0
 80044f6:	e086      	b.n	8004606 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c6>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004500:	f001 fc80 	bl	8005e04 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004504:	2300      	movs	r3, #0
 8004506:	657b      	str	r3, [r7, #84]	; 0x54
 8004508:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800450a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800450c:	429a      	cmp	r2, r3
 800450e:	d275      	bcs.n	80045fc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	edd3 7a00 	vldr	s15, [r3]
 800451c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004520:	ee17 3a90 	vmov	r3, s15
 8004524:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	b2db      	uxtb	r3, r3
 800452c:	ee07 3a90 	vmov	s15, r3
 8004530:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004534:	eddf 6a42 	vldr	s13, [pc, #264]	; 8004640 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x200>
 8004538:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800453c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	b2db      	uxtb	r3, r3
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800454e:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004640 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x200>
 8004552:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004556:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 800455a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800455c:	b2db      	uxtb	r3, r3
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004566:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004640 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x200>
 800456a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800456e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 8004572:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004576:	2b03      	cmp	r3, #3
 8004578:	d11b      	bne.n	80045b2 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x172>
                output_matrix->buffer[output_ix++] = r;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004580:	1c59      	adds	r1, r3, #1
 8004582:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800458a:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004592:	1c59      	adds	r1, r3, #1
 8004594:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800459c:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a4:	1c59      	adds	r1, r3, #1
 80045a6:	65f9      	str	r1, [r7, #92]	; 0x5c
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	e020      	b.n	80045f4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b4>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 80045b2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80045b6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004644 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x204>
 80045ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045be:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80045c2:	eddf 6a21 	vldr	s13, [pc, #132]	; 8004648 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x208>
 80045c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80045ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045ce:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80045d2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800464c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x20c>
 80045d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80045da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045de:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e8:	1c59      	adds	r1, r3, #1
 80045ea:	65f9      	str	r1, [r7, #92]	; 0x5c
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045f2:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80045f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f6:	3301      	adds	r3, #1
 80045f8:	657b      	str	r3, [r7, #84]	; 0x54
 80045fa:	e785      	b.n	8004508 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc8>
            }
        }

        bytes_left -= elements_to_read;
 80045fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
 8004604:	2501      	movs	r5, #1
 8004606:	f107 0314 	add.w	r3, r7, #20
 800460a:	4618      	mov	r0, r3
 800460c:	f7fc fded 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
 8004610:	2d01      	cmp	r5, #1
 8004612:	d105      	bne.n	8004620 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e0>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800461a:	65bb      	str	r3, [r7, #88]	; 0x58
 800461c:	e74d      	b.n	80044ba <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x7a>
    }

    return EIDSP_OK;
 800461e:	2400      	movs	r4, #0
}
 8004620:	4623      	mov	r3, r4
 8004622:	4618      	mov	r0, r3
 8004624:	3760      	adds	r7, #96	; 0x60
 8004626:	46bd      	mov	sp, r7
 8004628:	bdb0      	pop	{r4, r5, r7, pc}
 800462a:	bf00      	nop
 800462c:	0802dae4 	.word	0x0802dae4
 8004630:	0802daf0 	.word	0x0802daf0
 8004634:	0802db08 	.word	0x0802db08
 8004638:	fffffc14 	.word	0xfffffc14
 800463c:	fffffc16 	.word	0xfffffc16
 8004640:	437f0000 	.word	0x437f0000
 8004644:	3e991687 	.word	0x3e991687
 8004648:	3f1645a2 	.word	0x3f1645a2
 800464c:	3de978d5 	.word	0x3de978d5

08004650 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>:

#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 8004650:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004654:	b09e      	sub	sp, #120	; 0x78
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
 800465e:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004668:	ca07      	ldmia	r2, {r0, r1, r2}
 800466a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	49c3      	ldr	r1, [pc, #780]	; (8004980 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x330>)
 8004672:	4618      	mov	r0, r3
 8004674:	f7fb fe1c 	bl	80002b0 <strcmp>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x32>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x34>
 8004682:	2303      	movs	r3, #3
 8004684:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	6892      	ldr	r2, [r2, #8]
 8004690:	fb02 f303 	mul.w	r3, r2, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00f      	beq.n	80046b8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x68>
        ei_printf("out_matrix = %d items\n", static_cast<int>(output_matrix->rows * output_matrix->cols));
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	6892      	ldr	r2, [r2, #8]
 80046a0:	fb02 f303 	mul.w	r3, r2, r3
 80046a4:	4619      	mov	r1, r3
 80046a6:	48b7      	ldr	r0, [pc, #732]	; (8004984 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x334>)
 80046a8:	f001 fafe 	bl	8005ca8 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %d items\n", static_cast<int>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
 80046ac:	2100      	movs	r1, #0
 80046ae:	48b6      	ldr	r0, [pc, #728]	; (8004988 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x338>)
 80046b0:	f001 fafa 	bl	8005ca8 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80046b4:	4cb5      	ldr	r4, [pc, #724]	; (800498c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x33c>)
 80046b6:	e189      	b.n	80049cc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x37c>
    }

    size_t output_ix = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	673b      	str	r3, [r7, #112]	; 0x70

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 80046bc:	f644 438b 	movw	r3, #19595	; 0x4c8b
 80046c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 80046c2:	f249 6345 	movw	r3, #38469	; 0x9645
 80046c6:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 80046c8:	f641 532f 	movw	r3, #7471	; 0x1d2f
 80046cc:	667b      	str	r3, [r7, #100]	; 0x64

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 80046ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046d2:	663b      	str	r3, [r7, #96]	; 0x60
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80046da:	2300      	movs	r3, #0
 80046dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046e4:	429a      	cmp	r2, r3
 80046e6:	f080 8170 	bcs.w	80049ca <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x37a>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f0:	d803      	bhi.n	80046fa <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xaa>
 80046f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	e001      	b.n	80046fe <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xae>
 80046fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046fe:	65bb      	str	r3, [r7, #88]	; 0x58

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	461a      	mov	r2, r3
 8004704:	f107 0014 	add.w	r0, r7, #20
 8004708:	2300      	movs	r3, #0
 800470a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800470c:	f7fc fd42 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d102      	bne.n	800471c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xcc>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004716:	4c9e      	ldr	r4, [pc, #632]	; (8004990 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x340>)
 8004718:	2500      	movs	r5, #0
 800471a:	e14a      	b.n	80049b2 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x362>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004722:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004724:	f001 fb6e 	bl	8005e04 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004728:	2300      	movs	r3, #0
 800472a:	657b      	str	r3, [r7, #84]	; 0x54
 800472c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800472e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004730:	429a      	cmp	r2, r3
 8004732:	f080 8139 	bcs.w	80049a8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x358>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	edd3 7a00 	vldr	s15, [r3]
 8004742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004746:	ee17 3a90 	vmov	r3, s15
 800474a:	653b      	str	r3, [r7, #80]	; 0x50

            if (channel_count == 3) {
 800474c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8004750:	2b03      	cmp	r3, #3
 8004752:	f040 80a5 	bne.w	80048a0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x250>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	b2db      	uxtb	r3, r3
 800475c:	ee07 3a90 	vmov	s15, r3
 8004760:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004764:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8004994 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8004768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800476c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	b2db      	uxtb	r3, r3
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800477e:	eddf 6a85 	vldr	s13, [pc, #532]	; 8004994 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8004782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004786:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 800478a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800478c:	b2db      	uxtb	r3, r3
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004796:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8004994 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 800479a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800479e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 80047a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80047a4:	f7fb fefa 	bl	800059c <__aeabi_f2d>
 80047a8:	a373      	add	r3, pc, #460	; (adr r3, 8004978 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	f7fc f877 	bl	80008a0 <__aeabi_ddiv>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	ec43 2b17 	vmov	d7, r2, r3
 80047ba:	eeb0 0a47 	vmov.f32	s0, s14
 80047be:	eef0 0a67 	vmov.f32	s1, s15
 80047c2:	f024 fd41 	bl	8029248 <round>
 80047c6:	ec51 0b10 	vmov	r0, r1, d0
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	4b72      	ldr	r3, [pc, #456]	; (8004998 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 80047d0:	f7fb fd84 	bl	80002dc <__aeabi_dsub>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4690      	mov	r8, r2
 80047da:	4699      	mov	r9, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047e2:	1c59      	adds	r1, r3, #1
 80047e4:	6739      	str	r1, [r7, #112]	; 0x70
 80047e6:	18d5      	adds	r5, r2, r3
 80047e8:	4640      	mov	r0, r8
 80047ea:	4649      	mov	r1, r9
 80047ec:	f7fc f9de 	bl	8000bac <__aeabi_d2iz>
 80047f0:	4603      	mov	r3, r0
 80047f2:	b25b      	sxtb	r3, r3
 80047f4:	702b      	strb	r3, [r5, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 80047f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047f8:	f7fb fed0 	bl	800059c <__aeabi_f2d>
 80047fc:	a35e      	add	r3, pc, #376	; (adr r3, 8004978 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f7fc f84d 	bl	80008a0 <__aeabi_ddiv>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	ec43 2b17 	vmov	d7, r2, r3
 800480e:	eeb0 0a47 	vmov.f32	s0, s14
 8004812:	eef0 0a67 	vmov.f32	s1, s15
 8004816:	f024 fd17 	bl	8029248 <round>
 800481a:	ec51 0b10 	vmov	r0, r1, d0
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	4b5d      	ldr	r3, [pc, #372]	; (8004998 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 8004824:	f7fb fd5a 	bl	80002dc <__aeabi_dsub>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4690      	mov	r8, r2
 800482e:	4699      	mov	r9, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004836:	1c59      	adds	r1, r3, #1
 8004838:	6739      	str	r1, [r7, #112]	; 0x70
 800483a:	18d5      	adds	r5, r2, r3
 800483c:	4640      	mov	r0, r8
 800483e:	4649      	mov	r1, r9
 8004840:	f7fc f9b4 	bl	8000bac <__aeabi_d2iz>
 8004844:	4603      	mov	r3, r0
 8004846:	b25b      	sxtb	r3, r3
 8004848:	702b      	strb	r3, [r5, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 800484a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800484c:	f7fb fea6 	bl	800059c <__aeabi_f2d>
 8004850:	a349      	add	r3, pc, #292	; (adr r3, 8004978 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	f7fc f823 	bl	80008a0 <__aeabi_ddiv>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	ec43 2b17 	vmov	d7, r2, r3
 8004862:	eeb0 0a47 	vmov.f32	s0, s14
 8004866:	eef0 0a67 	vmov.f32	s1, s15
 800486a:	f024 fced 	bl	8029248 <round>
 800486e:	ec51 0b10 	vmov	r0, r1, d0
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	4b48      	ldr	r3, [pc, #288]	; (8004998 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 8004878:	f7fb fd30 	bl	80002dc <__aeabi_dsub>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4690      	mov	r8, r2
 8004882:	4699      	mov	r9, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800488a:	1c59      	adds	r1, r3, #1
 800488c:	6739      	str	r1, [r7, #112]	; 0x70
 800488e:	18d5      	adds	r5, r2, r3
 8004890:	4640      	mov	r0, r8
 8004892:	4649      	mov	r1, r9
 8004894:	f7fc f98a 	bl	8000bac <__aeabi_d2iz>
 8004898:	4603      	mov	r3, r0
 800489a:	b25b      	sxtb	r3, r3
 800489c:	702b      	strb	r3, [r5, #0]
 800489e:	e067      	b.n	8004970 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x320>
                    else if (gray > 127) gray = 127;
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 80048a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a2:	0c1b      	lsrs	r3, r3, #16
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048ae:	eddf 6a39 	vldr	s13, [pc, #228]	; 8004994 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 80048b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048b6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 80048ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048bc:	0a1b      	lsrs	r3, r3, #8
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	ee07 3a90 	vmov	s15, r3
 80048c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048c8:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004994 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 80048cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048d0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 80048d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	ee07 3a90 	vmov	s15, r3
 80048dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048e0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8004994 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 80048e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048e8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 80048ec:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80048f0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800499c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x34c>
 80048f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80048f8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80048fc:	eddf 6a28 	vldr	s13, [pc, #160]	; 80049a0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x350>
 8004900:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004908:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800490c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80049a4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x354>
 8004910:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004918:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 800491c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800491e:	f7fb fe3d 	bl	800059c <__aeabi_f2d>
 8004922:	a315      	add	r3, pc, #84	; (adr r3, 8004978 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f7fb ffba 	bl	80008a0 <__aeabi_ddiv>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	ec43 2b17 	vmov	d7, r2, r3
 8004934:	eeb0 0a47 	vmov.f32	s0, s14
 8004938:	eef0 0a67 	vmov.f32	s1, s15
 800493c:	f024 fc84 	bl	8029248 <round>
 8004940:	ec51 0b10 	vmov	r0, r1, d0
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	4b13      	ldr	r3, [pc, #76]	; (8004998 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 800494a:	f7fb fcc7 	bl	80002dc <__aeabi_dsub>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4690      	mov	r8, r2
 8004954:	4699      	mov	r9, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800495c:	1c59      	adds	r1, r3, #1
 800495e:	6739      	str	r1, [r7, #112]	; 0x70
 8004960:	18d5      	adds	r5, r2, r3
 8004962:	4640      	mov	r0, r8
 8004964:	4649      	mov	r1, r9
 8004966:	f7fc f921 	bl	8000bac <__aeabi_d2iz>
 800496a:	4603      	mov	r3, r0
 800496c:	b25b      	sxtb	r3, r3
 800496e:	702b      	strb	r3, [r5, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004972:	3301      	adds	r3, #1
 8004974:	657b      	str	r3, [r7, #84]	; 0x54
 8004976:	e6d9      	b.n	800472c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xdc>
 8004978:	e0000000 	.word	0xe0000000
 800497c:	3fa795b1 	.word	0x3fa795b1
 8004980:	0802dae4 	.word	0x0802dae4
 8004984:	0802daf0 	.word	0x0802daf0
 8004988:	0802db08 	.word	0x0802db08
 800498c:	fffffc14 	.word	0xfffffc14
 8004990:	fffffc16 	.word	0xfffffc16
 8004994:	437f0000 	.word	0x437f0000
 8004998:	40240000 	.word	0x40240000
 800499c:	3e991687 	.word	0x3e991687
 80049a0:	3f1645a2 	.word	0x3f1645a2
 80049a4:	3de978d5 	.word	0x3de978d5
                }
            }
        }

        bytes_left -= elements_to_read;
 80049a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
 80049b0:	2501      	movs	r5, #1
 80049b2:	f107 0314 	add.w	r3, r7, #20
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fc fc17 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
 80049bc:	2d01      	cmp	r5, #1
 80049be:	d105      	bne.n	80049cc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x37c>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80049c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049c8:	e689      	b.n	80046de <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x8e>
    }

    return EIDSP_OK;
 80049ca:	2400      	movs	r4, #0
}
 80049cc:	4623      	mov	r3, r4
 80049ce:	4618      	mov	r0, r3
 80049d0:	3778      	adds	r7, #120	; 0x78
 80049d2:	46bd      	mov	sp, r7
 80049d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080049d8 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count):
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	605a      	str	r2, [r3, #4]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	609a      	str	r2, [r3, #8]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	330c      	adds	r3, #12
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fbf3 	bl	80041e8 <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	f000 f82a 	bl	8004a7c <_ZN14SignalWithAxes8get_dataEjjPf>
 8004a28:	4603      	mov	r3, r0
        };
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d102      	bne.n	8004a48 <_ZN14SignalWithAxes10get_signalEv+0x16>
            return this->_original_signal;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	e015      	b.n	8004a74 <_ZN14SignalWithAxes10get_signalEv+0x42>
        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6892      	ldr	r2, [r2, #8]
 8004a52:	fb03 f202 	mul.w	r2, r3, r2
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	61da      	str	r2, [r3, #28]
        };
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f103 020c 	add.w	r2, r3, #12
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	f107 030c 	add.w	r3, r7, #12
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	f001 fab8 	bl	8005fe0 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	330c      	adds	r3, #12
    }
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	; 0x28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	623b      	str	r3, [r7, #32]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	4413      	add	r3, r2
 8004ab0:	6a3a      	ldr	r2, [r7, #32]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d228      	bcs.n	8004b08 <_ZN14SignalWithAxes8get_dataEjjPf+0x8c>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d21d      	bcs.n	8004b00 <_ZN14SignalWithAxes8get_dataEjjPf+0x84>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	18d1      	adds	r1, r2, r3
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	627a      	str	r2, [r7, #36]	; 0x24
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f001 f98c 	bl	8005e04 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8004aec:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <_ZN14SignalWithAxes8get_dataEjjPf+0x7c>
                    return r;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	e008      	b.n	8004b0a <_ZN14SignalWithAxes8get_dataEjjPf+0x8e>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	3301      	adds	r3, #1
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	e7dc      	b.n	8004aba <_ZN14SignalWithAxes8get_dataEjjPf+0x3e>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	3301      	adds	r3, #1
 8004b04:	623b      	str	r3, [r7, #32]
 8004b06:	e7d0      	b.n	8004aaa <_ZN14SignalWithAxes8get_dataEjjPf+0x2e>
                }
            }
        }

        return 0;
 8004b08:	2300      	movs	r3, #0
    }
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3728      	adds	r7, #40	; 0x28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb>:
#else

/**
 * Fill the result structure from a quantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_i8(ei_impulse_result_t *result, int8_t *data, float zero_point, float scale, bool debug) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6178      	str	r0, [r7, #20]
 8004b1c:	6139      	str	r1, [r7, #16]
 8004b1e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004b22:	edc7 0a02 	vstr	s1, [r7, #8]
 8004b26:	4613      	mov	r3, r2
 8004b28:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d837      	bhi.n	8004ba4 <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x90>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f993 3000 	ldrsb.w	r3, [r3]
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b46:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b56:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00e      	beq.n	8004b7e <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x6a>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8004b60:	4a12      	ldr	r2, [pc, #72]	; (8004bac <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x98>)
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4811      	ldr	r0, [pc, #68]	; (8004bb0 <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x9c>)
 8004b6c:	f001 f89c 	bl	8005ca8 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8004b70:	ed97 0a06 	vldr	s0, [r7, #24]
 8004b74:	f019 fd60 	bl	801e638 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8004b78:	480e      	ldr	r0, [pc, #56]	; (8004bb4 <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0xa0>)
 8004b7a:	f001 f895 	bl	8005ca8 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8004b7e:	4a0b      	ldr	r2, [pc, #44]	; (8004bac <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x98>)
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4413      	add	r3, r2
 8004b96:	3304      	adds	r3, #4
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	61fb      	str	r3, [r7, #28]
 8004ba2:	e7c4      	b.n	8004b2e <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb+0x1a>
    }
}
 8004ba4:	bf00      	nop
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	20000000 	.word	0x20000000
 8004bb0:	0802dba8 	.word	0x0802dba8
 8004bb4:	0802dbb0 	.word	0x0802dbb0

08004bb8 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb>:

/**
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_f32(ei_impulse_result_t *result, float *data, bool debug) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d82a      	bhi.n	8004c26 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x6e>
        float value = data[ix];
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	613b      	str	r3, [r7, #16]

        if (debug) {
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00e      	beq.n	8004c00 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x48>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8004be2:	4a13      	ldr	r2, [pc, #76]	; (8004c30 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x78>)
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bea:	4619      	mov	r1, r3
 8004bec:	4811      	ldr	r0, [pc, #68]	; (8004c34 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x7c>)
 8004bee:	f001 f85b 	bl	8005ca8 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8004bf2:	ed97 0a04 	vldr	s0, [r7, #16]
 8004bf6:	f019 fd1f 	bl	801e638 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8004bfa:	480f      	ldr	r0, [pc, #60]	; (8004c38 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x80>)
 8004bfc:	f001 f854 	bl	8005ca8 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8004c00:	4a0b      	ldr	r2, [pc, #44]	; (8004c30 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x78>)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	4413      	add	r3, r2
 8004c18:	3304      	adds	r3, #4
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	3301      	adds	r3, #1
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	e7d1      	b.n	8004bca <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb+0x12>
    }
}
 8004c26:	bf00      	nop
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000000 	.word	0x20000000
 8004c34:	0802dba8 	.word	0x0802dba8
 8004c38:	0802dbb0 	.word	0x0802dbb0

08004c3c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE>:
static EI_IMPULSE_ERROR inference_tflite_setup(uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
#endif
    ei_unique_ptr_t& p_tensor_arena) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 8004c4a:	483f      	ldr	r0, [pc, #252]	; (8004d48 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x10c>)
 8004c4c:	f022 fb48 	bl	80272e0 <_Z18trained_model_initPFPvjjE>
 8004c50:	4603      	mov	r3, r0
 8004c52:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x2e>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 8004c5a:	7dfb      	ldrb	r3, [r7, #23]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	483b      	ldr	r0, [pc, #236]	; (8004d4c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x110>)
 8004c60:	f001 f822 	bl	8005ca8 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8004c64:	f06f 0305 	mvn.w	r3, #5
 8004c68:	e06a      	b.n	8004d40 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x104>
    }

    *ctx_start_us = ei_read_timer_us();
 8004c6a:	f019 fcd1 	bl	801e610 <_Z16ei_read_timer_usv>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	68f9      	ldr	r1, [r7, #12]
 8004c74:	e9c1 2300 	strd	r2, r3, [r1]

    static bool tflite_first_run = true;

    *input = trained_model_input(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
 8004c78:	2000      	movs	r0, #0
 8004c7a:	f022 fd97 	bl	80277ac <_Z19trained_model_inputi>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	601a      	str	r2, [r3, #0]
    *output = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
 8004c84:	2000      	movs	r0, #0
 8004c86:	f022 fda3 	bl	80277d0 <_Z20trained_model_outputi>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	601a      	str	r2, [r3, #0]
    *output_scores = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_SCORE_TENSOR);
    *output_labels = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_LABELS_TENSOR);
#endif // EI_CLASSIFIER_OBJECT_DETECTION

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 8004c90:	4b2f      	ldr	r3, [pc, #188]	; (8004d50 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x114>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d052      	beq.n	8004d3e <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x102>
        assert((*input)->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b09      	cmp	r3, #9
 8004ca0:	d005      	beq.n	8004cae <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x72>
 8004ca2:	4b2c      	ldr	r3, [pc, #176]	; (8004d54 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x118>)
 8004ca4:	4a2c      	ldr	r2, [pc, #176]	; (8004d58 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8004ca6:	2163      	movs	r1, #99	; 0x63
 8004ca8:	482c      	ldr	r0, [pc, #176]	; (8004d5c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8004caa:	f027 fa7b 	bl	802c1a4 <__assert_func>
        assert((*output)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b09      	cmp	r3, #9
 8004cb6:	d005      	beq.n	8004cc4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x88>
 8004cb8:	4b29      	ldr	r3, [pc, #164]	; (8004d60 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x124>)
 8004cba:	4a27      	ldr	r2, [pc, #156]	; (8004d58 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8004cbc:	2164      	movs	r1, #100	; 0x64
 8004cbe:	4827      	ldr	r0, [pc, #156]	; (8004d5c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8004cc0:	f027 fa70 	bl	802c1a4 <__assert_func>
        assert((*output_scores)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
        assert((*output_labels)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
#endif
#if defined(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) || defined(EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED)
        if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) {
            assert((*input)->params.scale == EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ccc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004d64 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x128>
 8004cd0:	eef4 7a47 	vcmp.f32	s15, s14
 8004cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd8:	d005      	beq.n	8004ce6 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0xaa>
 8004cda:	4b23      	ldr	r3, [pc, #140]	; (8004d68 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x12c>)
 8004cdc:	4a1e      	ldr	r2, [pc, #120]	; (8004d58 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8004cde:	216b      	movs	r1, #107	; 0x6b
 8004ce0:	481e      	ldr	r0, [pc, #120]	; (8004d5c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8004ce2:	f027 fa5f 	bl	802c1a4 <__assert_func>
            assert((*input)->params.zero_point == EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f113 0f0a 	cmn.w	r3, #10
 8004cf0:	d005      	beq.n	8004cfe <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0xc2>
 8004cf2:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x130>)
 8004cf4:	4a18      	ldr	r2, [pc, #96]	; (8004d58 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8004cf6:	216c      	movs	r1, #108	; 0x6c
 8004cf8:	4818      	ldr	r0, [pc, #96]	; (8004d5c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8004cfa:	f027 fa53 	bl	802c1a4 <__assert_func>
        }
        if (EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED) {
            assert((*output)->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d06:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004d70 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x134>
 8004d0a:	eef4 7a47 	vcmp.f32	s15, s14
 8004d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d12:	d005      	beq.n	8004d20 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0xe4>
 8004d14:	4b17      	ldr	r3, [pc, #92]	; (8004d74 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x138>)
 8004d16:	4a10      	ldr	r2, [pc, #64]	; (8004d58 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8004d18:	216f      	movs	r1, #111	; 0x6f
 8004d1a:	4810      	ldr	r0, [pc, #64]	; (8004d5c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8004d1c:	f027 fa42 	bl	802c1a4 <__assert_func>
            assert((*output)->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8004d2a:	d005      	beq.n	8004d38 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0xfc>
 8004d2c:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x13c>)
 8004d2e:	4a0a      	ldr	r2, [pc, #40]	; (8004d58 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8004d30:	2170      	movs	r1, #112	; 0x70
 8004d32:	480a      	ldr	r0, [pc, #40]	; (8004d5c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x120>)
 8004d34:	f027 fa36 	bl	802c1a4 <__assert_func>
        }
#endif
        tflite_first_run = false;
 8004d38:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE+0x114>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	08001325 	.word	0x08001325
 8004d4c:	0802dbb4 	.word	0x0802dbb4
 8004d50:	20000058 	.word	0x20000058
 8004d54:	0802dbe8 	.word	0x0802dbe8
 8004d58:	0802dc20 	.word	0x0802dc20
 8004d5c:	0802dc88 	.word	0x0802dc88
 8004d60:	0802dd1c 	.word	0x0802dd1c
 8004d64:	3d3cad8f 	.word	0x3d3cad8f
 8004d68:	0802dd54 	.word	0x0802dd54
 8004d6c:	0802dd90 	.word	0x0802dd90
 8004d70:	3b800000 	.word	0x3b800000
 8004d74:	0802ddd4 	.word	0x0802ddd4
 8004d78:	0802de14 	.word	0x0802de14

08004d7c <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb>:
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
#endif
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 8004d7c:	b5b0      	push	{r4, r5, r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
    if(trained_model_invoke() != kTfLiteOk) {
 8004d8a:	f022 fd33 	bl	80277f4 <_Z20trained_model_invokev>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0x28>
        return EI_IMPULSE_TFLITE_ERROR;
 8004d9e:	f06f 0302 	mvn.w	r3, #2
 8004da2:	e060      	b.n	8004e66 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xea>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 8004da4:	f019 fc34 	bl	801e610 <_Z16ei_read_timer_usv>
 8004da8:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 8004dac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004db0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004db4:	1a84      	subs	r4, r0, r2
 8004db6:	eb61 0503 	sbc.w	r5, r1, r3
 8004dba:	4622      	mov	r2, r4
 8004dbc:	462b      	mov	r3, r5
 8004dbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dc0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8004dca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	f7fb ff83 	bl	8000cdc <__aeabi_ldivmod>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	639a      	str	r2, [r3, #56]	; 0x38

    // Read the predicted y value from the model's output tensor
    if (debug) {
 8004dde:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0x76>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8004de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	4619      	mov	r1, r3
 8004dec:	4820      	ldr	r0, [pc, #128]	; (8004e70 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xf4>)
 8004dee:	f000 ff5b 	bl	8005ca8 <_Z9ei_printfPKcz>
    }
#elif EI_CLASSIFIER_OBJECT_DETECTION == 1
    fill_result_struct_f32(result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
    // fill_result_struct_f32(result, output->data.f, scores_tensor->data.f, labels_tensor->data.f, debug);
#else
    bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b09      	cmp	r3, #9
 8004df8:	bf0c      	ite	eq
 8004dfa:	2301      	moveq	r3, #1
 8004dfc:	2300      	movne	r3, #0
 8004dfe:	75fb      	strb	r3, [r7, #23]
    if (int8_output) {
 8004e00:	7dfb      	ldrb	r3, [r7, #23]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d015      	beq.n	8004e32 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xb6>
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6859      	ldr	r1, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e1c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004e20:	461a      	mov	r2, r3
 8004e22:	eef0 0a47 	vmov.f32	s1, s14
 8004e26:	eeb0 0a67 	vmov.f32	s0, s15
 8004e2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e2c:	f7ff fe72 	bl	8004b14 <_ZL21fill_result_struct_i8P19ei_impulse_result_tPaffb>
 8004e30:	e007      	b.n	8004e42 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xc6>
    }
    else {
        fill_result_struct_f32(result, output->data.f, debug);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e3e:	f7ff febb 	bl	8004bb8 <_ZL22fill_result_struct_f32P19ei_impulse_result_tPfb>
    }
#endif

    trained_model_reset(ei_aligned_free);
 8004e42:	480c      	ldr	r0, [pc, #48]	; (8004e74 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xf8>)
 8004e44:	f022 fd0c 	bl	8027860 <_Z19trained_model_resetPFvPvE>

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8004e48:	f019 fbda 	bl	801e600 <_Z29ei_run_impulse_check_canceledv>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f113 0f02 	cmn.w	r3, #2
 8004e52:	bf0c      	ite	eq
 8004e54:	2301      	moveq	r3, #1
 8004e56:	2300      	movne	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xe8>
        return EI_IMPULSE_CANCELED;
 8004e5e:	f06f 0301 	mvn.w	r3, #1
 8004e62:	e000      	b.n	8004e66 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb+0xea>
    }

    return EI_IMPULSE_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	0802de5c 	.word	0x0802de5c
 8004e74:	080013a9 	.word	0x080013a9

08004e78 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8004e78:	b5b0      	push	{r4, r5, r7, lr}
 8004e7a:	b092      	sub	sp, #72	; 0x48
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	4613      	mov	r3, r2
 8004e84:	71fb      	strb	r3, [r7, #7]
    TfLiteTensor* output;
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
#endif
    uint64_t ctx_start_us = ei_read_timer_us();
 8004e86:	f019 fbc3 	bl	801e610 <_Z16ei_read_timer_usv>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 8004e92:	4b4e      	ldr	r3, [pc, #312]	; (8004fcc <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x154>)
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e96:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004e9a:	f107 0310 	add.w	r3, r7, #16
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 f8cd 	bl	8006040 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
 8004ea6:	f107 0310 	add.w	r3, r7, #16
 8004eaa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004eae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004eb2:	f107 0018 	add.w	r0, r7, #24
 8004eb6:	f7ff fec1 	bl	8004c3c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        &output_labels,
        &output_scores,
#endif
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8004ec0:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x56>
        return init_res;
 8004ec8:	f997 403b 	ldrsb.w	r4, [r7, #59]	; 0x3b
 8004ecc:	e073      	b.n	8004fb6 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x13e>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 8004ece:	f107 0310 	add.w	r3, r7, #16
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f001 f8ea 	bl	80060ac <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8004ed8:	6378      	str	r0, [r7, #52]	; 0x34
        else {
            input->data.f[ix] = fmatrix->buffer[ix];
        }
    }
#else
    bool int8_input = input->type == TfLiteType::kTfLiteInt8;
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b09      	cmp	r3, #9
 8004ee0:	bf0c      	ite	eq
 8004ee2:	2301      	moveq	r3, #1
 8004ee4:	2300      	movne	r3, #0
 8004ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8004eea:	2300      	movs	r3, #0
 8004eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	6892      	ldr	r2, [r2, #8]
 8004ef6:	fb02 f303 	mul.w	r3, r2, r3
 8004efa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d239      	bcs.n	8004f74 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xfc>
        // Quantize the input if it is int8
        if (int8_input) {
 8004f00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d025      	beq.n	8004f54 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xdc>
            input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	ed93 7a00 	vldr	s14, [r3]
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f20:	eeb0 0a66 	vmov.f32	s0, s13
 8004f24:	f7fc faa4 	bl	8001470 <_ZSt5roundf>
 8004f28:	eeb0 7a40 	vmov.f32	s14, s0
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	ee07 3a90 	vmov	s15, r3
 8004f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f42:	4413      	add	r3, r2
 8004f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f48:	edc7 7a00 	vstr	s15, [r7]
 8004f4c:	783a      	ldrb	r2, [r7, #0]
 8004f4e:	b252      	sxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	e00b      	b.n	8004f6c <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xf4>
            // printf("float %ld : %d\r\n", ix, input->data.int8[ix]);
        } else {
            input->data.f[ix] = fmatrix->buffer[ix];
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	441a      	add	r2, r3
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	6859      	ldr	r1, [r3, #4]
 8004f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	601a      	str	r2, [r3, #0]
    for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8004f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f6e:	3301      	adds	r3, #1
 8004f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f72:	e7bc      	b.n	8004eee <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x76>
        }
    }
#endif

    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 8004f74:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	9301      	str	r3, [sp, #4]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f84:	f7ff fefa 	bl	8004d7c <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        output_labels,
        output_scores,
#endif
        tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8004f8e:	f019 fb3f 	bl	801e610 <_Z16ei_read_timer_usv>
 8004f92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f96:	1a84      	subs	r4, r0, r2
 8004f98:	eb61 0503 	sbc.w	r5, r1, r3
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	462b      	mov	r3, r5
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

    if (run_res != EI_IMPULSE_OK) {
 8004fa6:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x13c>
        return run_res;
 8004fae:	f997 4032 	ldrsb.w	r4, [r7, #50]	; 0x32
 8004fb2:	e000      	b.n	8004fb6 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x13e>
    }

    return EI_IMPULSE_OK;
 8004fb4:	2400      	movs	r4, #0
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 8004fb6:	f107 0310 	add.w	r3, r7, #16
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f001 f855 	bl	800606a <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 8004fc0:	4623      	mov	r3, r4
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3740      	adds	r7, #64	; 0x40
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	080013a9 	.word	0x080013a9

08004fd0 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8004fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fd4:	b099      	sub	sp, #100	; 0x64
 8004fd6:	af02      	add	r7, sp, #8
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	71fb      	strb	r3, [r7, #7]
    memset(result, 0, sizeof(ei_impulse_result_t));
 8004fe0:	2260      	movs	r2, #96	; 0x60
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	68b8      	ldr	r0, [r7, #8]
 8004fe6:	f027 f97b 	bl	802c2e0 <memset>
    TfLiteTensor* output;
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
#endif
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 8004fea:	4b73      	ldr	r3, [pc, #460]	; (80051b8 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1e8>)
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004ff2:	f107 0320 	add.w	r3, r7, #32
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f001 f821 	bl	8006040 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
 8004ffe:	f107 0320 	add.w	r3, r7, #32
 8005002:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005006:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800500a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800500e:	f7ff fe15 	bl	8004c3c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE>
 8005012:	4603      	mov	r3, r0
 8005014:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    #if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
        &output_labels,
        &output_scores,
    #endif
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
 8005018:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x56>
        return init_res;
 8005020:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 8005024:	e0b7      	b.n	8005196 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1c6>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b09      	cmp	r3, #9
 800502c:	d002      	beq.n	8005034 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x64>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 800502e:	f06f 0408 	mvn.w	r4, #8
 8005032:	e0b0      	b.n	8005196 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1c6>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 8005034:	f019 faec 	bl	801e610 <_Z16ei_read_timer_usv>
 8005038:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f107 0010 	add.w	r0, r7, #16
 8005044:	f240 427e 	movw	r2, #1150	; 0x47e
 8005048:	2101      	movs	r1, #1
 800504a:	f7fc f8e4 	bl	8001216 <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, ei_dsp_blocks[0].config, EI_CLASSIFIER_FREQUENCY);
 800504e:	4b5b      	ldr	r3, [pc, #364]	; (80051bc <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ec>)
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	f107 0310 	add.w	r3, r7, #16
 8005056:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 80051c0 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f0>
 800505a:	4619      	mov	r1, r3
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f7ff faf7 	bl	8004650 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>
 8005062:	6478      	str	r0, [r7, #68]	; 0x44
    if (ret != EIDSP_OK) {
 8005064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005066:	2b00      	cmp	r3, #0
 8005068:	d006      	beq.n	8005078 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0xa8>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 800506a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800506c:	4855      	ldr	r0, [pc, #340]	; (80051c4 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>)
 800506e:	f000 fe1b 	bl	8005ca8 <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 8005072:	f06f 0404 	mvn.w	r4, #4
 8005076:	e089      	b.n	800518c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1bc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005078:	f019 fac2 	bl	801e600 <_Z29ei_run_impulse_check_canceledv>
 800507c:	4603      	mov	r3, r0
 800507e:	f113 0f02 	cmn.w	r3, #2
 8005082:	bf0c      	ite	eq
 8005084:	2301      	moveq	r3, #1
 8005086:	2300      	movne	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0xc4>
        return EI_IMPULSE_CANCELED;
 800508e:	f06f 0401 	mvn.w	r4, #1
 8005092:	e07b      	b.n	800518c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1bc>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8005094:	f019 fabc 	bl	801e610 <_Z16ei_read_timer_usv>
 8005098:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800509c:	ebb0 0802 	subs.w	r8, r0, r2
 80050a0:	eb61 0903 	sbc.w	r9, r1, r3
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80050b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	f7fb fe0e 	bl	8000cdc <__aeabi_ldivmod>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	635a      	str	r2, [r3, #52]	; 0x34

    if (debug) {
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d02e      	beq.n	800512c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x15c>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d2:	4619      	mov	r1, r3
 80050d4:	483c      	ldr	r0, [pc, #240]	; (80051c8 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f8>)
 80050d6:	f000 fde7 	bl	8005ca8 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80050da:	2300      	movs	r3, #0
 80050dc:	657b      	str	r3, [r7, #84]	; 0x54
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d21f      	bcs.n	8005126 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x156>
            ei_printf_float((features_matrix.buffer[ix] - EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT) * EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ea:	4413      	add	r3, r2
 80050ec:	f993 3000 	ldrsb.w	r3, [r3]
 80050f0:	330a      	adds	r3, #10
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fb fa40 	bl	8000578 <__aeabi_i2d>
 80050f8:	a32d      	add	r3, pc, #180	; (adr r3, 80051b0 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1e0>)
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fe:	f7fb faa5 	bl	800064c <__aeabi_dmul>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4610      	mov	r0, r2
 8005108:	4619      	mov	r1, r3
 800510a:	f7fb fd97 	bl	8000c3c <__aeabi_d2f>
 800510e:	4603      	mov	r3, r0
 8005110:	ee00 3a10 	vmov	s0, r3
 8005114:	f019 fa90 	bl	801e638 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8005118:	482c      	ldr	r0, [pc, #176]	; (80051cc <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1fc>)
 800511a:	f000 fdc5 	bl	8005ca8 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 800511e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005120:	3301      	adds	r3, #1
 8005122:	657b      	str	r3, [r7, #84]	; 0x54
 8005124:	e7db      	b.n	80050de <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x10e>
        }
        ei_printf("\n");
 8005126:	482a      	ldr	r0, [pc, #168]	; (80051d0 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x200>)
 8005128:	f000 fdbe 	bl	8005ca8 <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 800512c:	f019 fa70 	bl	801e610 <_Z16ei_read_timer_usv>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 8005138:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800513c:	6abe      	ldr	r6, [r7, #40]	; 0x28
    #if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
        output_labels,
        output_scores,
    #endif
        static_cast<uint8_t*>(p_tensor_arena.get()),
 800513e:	f107 0320 	add.w	r3, r7, #32
 8005142:	4618      	mov	r0, r3
 8005144:	f000 ffb2 	bl	80060ac <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8005148:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	9301      	str	r3, [sp, #4]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	4613      	mov	r3, r2
 8005154:	4632      	mov	r2, r6
 8005156:	4640      	mov	r0, r8
 8005158:	4649      	mov	r1, r9
 800515a:	f7ff fe0f 	bl	8004d7c <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb>
 800515e:	4603      	mov	r3, r0
 8005160:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        result, debug);

    if (run_res != EI_IMPULSE_OK) {
 8005164:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1a2>
        return run_res;
 800516c:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 8005170:	e00c      	b.n	800518c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1bc>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8005172:	f019 fa4d 	bl	801e610 <_Z16ei_read_timer_usv>
 8005176:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800517a:	1a84      	subs	r4, r0, r2
 800517c:	eb61 0503 	sbc.w	r5, r1, r3
 8005180:	4622      	mov	r2, r4
 8005182:	462b      	mov	r3, r5
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

    return EI_IMPULSE_OK;
 800518a:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 800518c:	f107 0310 	add.w	r3, r7, #16
 8005190:	4618      	mov	r0, r3
 8005192:	f7fc f86a 	bl	800126a <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 8005196:	f107 0320 	add.w	r3, r7, #32
 800519a:	4618      	mov	r0, r3
 800519c:	f000 ff65 	bl	800606a <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80051a0:	4623      	mov	r3, r4
 80051a2:	4618      	mov	r0, r3
 80051a4:	375c      	adds	r7, #92	; 0x5c
 80051a6:	46bd      	mov	sp, r7
 80051a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051ac:	f3af 8000 	nop.w
 80051b0:	e0000000 	.word	0xe0000000
 80051b4:	3fa795b1 	.word	0x3fa795b1
 80051b8:	080013a9 	.word	0x080013a9
 80051bc:	20000044 	.word	0x20000044
 80051c0:	467a0000 	.word	0x467a0000
 80051c4:	0802de7c 	.word	0x0802de7c
 80051c8:	0802dea4 	.word	0x0802dea4
 80051cc:	0802deb8 	.word	0x0802deb8
 80051d0:	0802dbb0 	.word	0x0802dbb0

080051d4 <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	330c      	adds	r3, #12
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff f80e 	bl	8004202 <_ZN2ei11ei_signal_tD1Ev>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <run_inference>:
 */
extern "C" EI_IMPULSE_ERROR run_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	4613      	mov	r3, r2
 80051fc:	71fb      	strb	r3, [r7, #7]
#if (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE_FULL)

    EI_IMPULSE_ERROR run_res = run_nn_inference(fmatrix, result, debug);
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	461a      	mov	r2, r3
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f7ff fe37 	bl	8004e78 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb>
 800520a:	4603      	mov	r3, r0
 800520c:	75fb      	strb	r3, [r7, #23]
    if (run_res != EI_IMPULSE_OK) {
 800520e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <run_inference+0x2c>
        return run_res;
 8005216:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800521a:	e00e      	b.n	800523a <run_inference+0x4a>
        }
    }

#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800521c:	f019 f9f0 	bl	801e600 <_Z29ei_run_impulse_check_canceledv>
 8005220:	4603      	mov	r3, r0
 8005222:	f113 0f02 	cmn.w	r3, #2
 8005226:	bf0c      	ite	eq
 8005228:	2301      	moveq	r3, #1
 800522a:	2300      	movne	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <run_inference+0x48>
        return EI_IMPULSE_CANCELED;
 8005232:	f06f 0301 	mvn.w	r3, #1
 8005236:	e000      	b.n	800523a <run_inference+0x4a>
    }

    return EI_IMPULSE_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005248:	b0a1      	sub	sp, #132	; 0x84
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	4613      	mov	r3, r2
 8005252:	71fb      	strb	r3, [r7, #7]
 8005254:	2600      	movs	r6, #0
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)

    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized() == EI_IMPULSE_OK) {
 8005256:	f000 f901 	bl	800545c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	bf0c      	ite	eq
 8005260:	2301      	moveq	r3, #1
 8005262:	2300      	movne	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d008      	beq.n	800527c <run_classifier+0x38>
        return run_classifier_image_quantized(signal, result, debug);
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	461a      	mov	r2, r3
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f907 	bl	8005484 <run_classifier_image_quantized>
 8005276:	4603      	mov	r3, r0
 8005278:	461e      	mov	r6, r3
 800527a:	e0d9      	b.n	8005430 <run_classifier+0x1ec>
    //     }
    // }
    // printf("\n");
    // }

    memset(result, 0, sizeof(ei_impulse_result_t));
 800527c:	2260      	movs	r2, #96	; 0x60
 800527e:	2100      	movs	r1, #0
 8005280:	68b8      	ldr	r0, [r7, #8]
 8005282:	f027 f82d 	bl	802c2e0 <memset>

    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8005286:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800528a:	2300      	movs	r3, #0
 800528c:	f240 427e 	movw	r2, #1150	; 0x47e
 8005290:	2101      	movs	r1, #1
 8005292:	f7fb ff7f 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 8005296:	f019 f9bb 	bl	801e610 <_Z16ei_read_timer_usv>
 800529a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

    size_t out_features_index = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	67fb      	str	r3, [r7, #124]	; 0x7c

    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 80052a2:	2300      	movs	r3, #0
 80052a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80052a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d16e      	bne.n	800538a <run_classifier+0x146>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
 80052ac:	4963      	ldr	r1, [pc, #396]	; (800543c <run_classifier+0x1f8>)
 80052ae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	440b      	add	r3, r1
 80052ba:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80052be:	461d      	mov	r5, r3
 80052c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
 80052c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052cc:	4413      	add	r3, r2
 80052ce:	f240 427e 	movw	r2, #1150	; 0x47e
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d905      	bls.n	80052e2 <run_classifier+0x9e>
            ei_printf("ERR: Would write outside feature buffer\n");
 80052d6:	485a      	ldr	r0, [pc, #360]	; (8005440 <run_classifier+0x1fc>)
 80052d8:	f000 fce6 	bl	8005ca8 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 80052dc:	f06f 0604 	mvn.w	r6, #4
 80052e0:	e0a0      	b.n	8005424 <run_classifier+0x1e0>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 80052e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80052f0:	460a      	mov	r2, r1
 80052f2:	2101      	movs	r1, #1
 80052f4:	f7fb ff4e 	bl	8001194 <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, EI_CLASSIFIER_FREQUENCY);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size);
 80052f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052fc:	f107 0010 	add.w	r0, r7, #16
 8005300:	68f9      	ldr	r1, [r7, #12]
 8005302:	f7ff fb69 	bl	80049d8 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, EI_CLASSIFIER_FREQUENCY);
 8005306:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8005308:	f107 0310 	add.w	r3, r7, #16
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff fb90 	bl	8004a32 <_ZN14SignalWithAxes10get_signalEv>
 8005312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005314:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005318:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8005444 <run_classifier+0x200>
 800531c:	4619      	mov	r1, r3
 800531e:	47a0      	blx	r4
 8005320:	6678      	str	r0, [r7, #100]	; 0x64
#endif

        if (ret != EIDSP_OK) {
 8005322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <run_classifier+0xf4>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8005328:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800532a:	4847      	ldr	r0, [pc, #284]	; (8005448 <run_classifier+0x204>)
 800532c:	f000 fcbc 	bl	8005ca8 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8005330:	f06f 0604 	mvn.w	r6, #4
 8005334:	2400      	movs	r4, #0
 8005336:	e013      	b.n	8005360 <run_classifier+0x11c>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005338:	f019 f962 	bl	801e600 <_Z29ei_run_impulse_check_canceledv>
 800533c:	4603      	mov	r3, r0
 800533e:	f113 0f02 	cmn.w	r3, #2
 8005342:	bf0c      	ite	eq
 8005344:	2301      	moveq	r3, #1
 8005346:	2300      	movne	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <run_classifier+0x112>
            return EI_IMPULSE_CANCELED;
 800534e:	f06f 0601 	mvn.w	r6, #1
 8005352:	2400      	movs	r4, #0
 8005354:	e004      	b.n	8005360 <run_classifier+0x11c>
        }

        out_features_index += block.n_output_features;
 8005356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005358:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800535a:	4413      	add	r3, r2
 800535c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800535e:	2401      	movs	r4, #1
 8005360:	f107 0310 	add.w	r3, r7, #16
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff ff35 	bl	80051d4 <_ZN14SignalWithAxesD1Ev>
 800536a:	2c01      	cmp	r4, #1
 800536c:	d001      	beq.n	8005372 <run_classifier+0x12e>
 800536e:	2400      	movs	r4, #0
 8005370:	e000      	b.n	8005374 <run_classifier+0x130>
 8005372:	2401      	movs	r4, #1
 8005374:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005378:	4618      	mov	r0, r3
 800537a:	f7fb ff36 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
 800537e:	2c01      	cmp	r4, #1
 8005380:	d150      	bne.n	8005424 <run_classifier+0x1e0>
    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 8005382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005384:	3301      	adds	r3, #1
 8005386:	67bb      	str	r3, [r7, #120]	; 0x78
 8005388:	e78d      	b.n	80052a6 <run_classifier+0x62>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 800538a:	f019 f941 	bl	801e610 <_Z16ei_read_timer_usv>
 800538e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005392:	ebb0 0802 	subs.w	r8, r0, r2
 8005396:	eb61 0903 	sbc.w	r9, r1, r3
 800539a:	4642      	mov	r2, r8
 800539c:	464b      	mov	r3, r9
 800539e:	68b9      	ldr	r1, [r7, #8]
 80053a0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80053aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	f7fb fc93 	bl	8000cdc <__aeabi_ldivmod>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	635a      	str	r2, [r3, #52]	; 0x34

    if (debug) {
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01f      	beq.n	8005404 <run_classifier+0x1c0>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c8:	4619      	mov	r1, r3
 80053ca:	4820      	ldr	r0, [pc, #128]	; (800544c <run_classifier+0x208>)
 80053cc:	f000 fc6c 	bl	8005ca8 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80053d0:	2300      	movs	r3, #0
 80053d2:	677b      	str	r3, [r7, #116]	; 0x74
 80053d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80053d8:	429a      	cmp	r2, r3
 80053da:	d210      	bcs.n	80053fe <run_classifier+0x1ba>
            ei_printf_float(features_matrix.buffer[ix]);
 80053dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80053de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	edd3 7a00 	vldr	s15, [r3]
 80053e8:	eeb0 0a67 	vmov.f32	s0, s15
 80053ec:	f019 f924 	bl	801e638 <_Z15ei_printf_floatf>
            ei_printf(" ");
 80053f0:	4817      	ldr	r0, [pc, #92]	; (8005450 <run_classifier+0x20c>)
 80053f2:	f000 fc59 	bl	8005ca8 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80053f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053f8:	3301      	adds	r3, #1
 80053fa:	677b      	str	r3, [r7, #116]	; 0x74
 80053fc:	e7ea      	b.n	80053d4 <run_classifier+0x190>
        }
        ei_printf("\n");
 80053fe:	4815      	ldr	r0, [pc, #84]	; (8005454 <run_classifier+0x210>)
 8005400:	f000 fc52 	bl	8005ca8 <_Z9ei_printfPKcz>
    }

#if EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE
    if (debug) {
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <run_classifier+0x1cc>
        ei_printf("Running neural network...\n");
 800540a:	4813      	ldr	r0, [pc, #76]	; (8005458 <run_classifier+0x214>)
 800540c:	f000 fc4c 	bl	8005ca8 <_Z9ei_printfPKcz>
    }
#endif

    return run_inference(&features_matrix, result, debug);
 8005410:	79fa      	ldrb	r2, [r7, #7]
 8005412:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff fee9 	bl	80051f0 <run_inference>
 800541e:	4603      	mov	r3, r0
 8005420:	461e      	mov	r6, r3
 8005422:	e000      	b.n	8005426 <run_classifier+0x1e2>
            return EI_IMPULSE_DSP_ERROR;
 8005424:	bf00      	nop
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8005426:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800542a:	4618      	mov	r0, r3
 800542c:	f7fb fedd 	bl	80011ea <_ZN2ei9ei_matrixD1Ev>
}
 8005430:	4633      	mov	r3, r6
 8005432:	4618      	mov	r0, r3
 8005434:	3784      	adds	r7, #132	; 0x84
 8005436:	46bd      	mov	sp, r7
 8005438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800543c:	20000044 	.word	0x20000044
 8005440:	0802debc 	.word	0x0802debc
 8005444:	467a0000 	.word	0x467a0000
 8005448:	0802de7c 	.word	0x0802de7c
 800544c:	0802dea4 	.word	0x0802dea4
 8005450:	0802deb8 	.word	0x0802deb8
 8005454:	0802dbb0 	.word	0x0802dbb0
 8005458:	0802df4c 	.word	0x0802df4c

0800545c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>:
}

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized() {
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED != 1
    return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
#endif

    // And if we have one DSP block which operates on images...
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
 8005460:	4b06      	ldr	r3, [pc, #24]	; (800547c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x20>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4a06      	ldr	r2, [pc, #24]	; (8005480 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x24>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d002      	beq.n	8005470 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x14>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 800546a:	f06f 0308 	mvn.w	r3, #8
 800546e:	e000      	b.n	8005472 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x16>
    }

    return EI_IMPULSE_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	20000044 	.word	0x20000044
 8005480:	08004441 	.word	0x08004441

08005484 <run_classifier_image_quantized>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	4613      	mov	r3, r2
 8005490:	71fb      	strb	r3, [r7, #7]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized();
 8005492:	f7ff ffe3 	bl	800545c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 8005496:	4603      	mov	r3, r0
 8005498:	75fb      	strb	r3, [r7, #23]
    if (verify_res != EI_IMPULSE_OK) {
 800549a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <run_classifier_image_quantized+0x24>
        return verify_res;
 80054a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054a6:	e00c      	b.n	80054c2 <run_classifier_image_quantized+0x3e>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 80054a8:	2260      	movs	r2, #96	; 0x60
 80054aa:	2100      	movs	r1, #0
 80054ac:	68b8      	ldr	r0, [r7, #8]
 80054ae:	f026 ff17 	bl	802c2e0 <memset>

#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TFLITE)
    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
#else

    return run_nn_inference_image_quantized(signal, result, debug);
 80054b2:	79fb      	ldrb	r3, [r7, #7]
 80054b4:	461a      	mov	r2, r3
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f7ff fd89 	bl	8004fd0 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb>
 80054be:	4603      	mov	r3, r0
 80054c0:	bf00      	nop
        result->classification[ix].value = value;
    }

    return EI_IMPULSE_OK;
#endif // (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TENSAIFLOW)
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80054cc:	b590      	push	{r4, r7, lr}
 80054ce:	b0a3      	sub	sp, #140	; 0x8c
 80054d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    HAL_StatusTypeDef hal_res;
    int print_results = -(EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW);
 80054d2:	f06f 0303 	mvn.w	r3, #3
 80054d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t timestamp = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80054de:	f002 fb9d 	bl	8007c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80054e2:	f000 f92f 	bl	8005744 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80054e6:	f000 fad1 	bl	8005a8c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80054ea:	f000 fa91 	bl	8005a10 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 80054ee:	f000 fa61 	bl	80059b4 <_ZL19MX_USART2_UART_Initv>
  MX_CRC_Init();
 80054f2:	f000 f9d9 	bl	80058a8 <_ZL11MX_CRC_Initv>
  MX_SAI1_Init();
 80054f6:	f000 fa21 	bl	800593c <_ZL12MX_SAI1_Initv>
  MX_I2S2_Init();
 80054fa:	f000 f9ed 	bl	80058d8 <_ZL12MX_I2S2_Initv>
  /* USER CODE BEGIN 2 */
  //Receiver
HAL_SAI_Receive(&hsai_BlockB1, rxBuf, BLOCK_SIZE_U16, 4);
 80054fe:	2304      	movs	r3, #4
 8005500:	2204      	movs	r2, #4
 8005502:	497b      	ldr	r1, [pc, #492]	; (80056f0 <main+0x224>)
 8005504:	487b      	ldr	r0, [pc, #492]	; (80056f4 <main+0x228>)
 8005506:	f005 f8fb 	bl	800a700 <HAL_SAI_Receive>
  // Say some stuff
  ei_printf("Inferencing settings:\r\n");
 800550a:	487b      	ldr	r0, [pc, #492]	; (80056f8 <main+0x22c>)
 800550c:	f000 fbcc 	bl	8005ca8 <_Z9ei_printfPKcz>
  ei_printf("\tInterval: %.2f ms.\r\n", (float)EI_CLASSIFIER_INTERVAL_MS);
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	4b79      	ldr	r3, [pc, #484]	; (80056fc <main+0x230>)
 8005516:	487a      	ldr	r0, [pc, #488]	; (8005700 <main+0x234>)
 8005518:	f000 fbc6 	bl	8005ca8 <_Z9ei_printfPKcz>
  ei_printf("\tFrame size: %d\r\n", EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
 800551c:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8005520:	4878      	ldr	r0, [pc, #480]	; (8005704 <main+0x238>)
 8005522:	f000 fbc1 	bl	8005ca8 <_Z9ei_printfPKcz>
  ei_printf("\tSample length: %d ms.\r\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT / 16);
 8005526:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800552a:	4877      	ldr	r0, [pc, #476]	; (8005708 <main+0x23c>)
 800552c:	f000 fbbc 	bl	8005ca8 <_Z9ei_printfPKcz>
  ei_printf("\tNo. of classes: %d\r\n", sizeof(ei_classifier_inferencing_categories) / sizeof(ei_classifier_inferencing_categories[0]));
 8005530:	2105      	movs	r1, #5
 8005532:	4876      	ldr	r0, [pc, #472]	; (800570c <main+0x240>)
 8005534:	f000 fbb8 	bl	8005ca8 <_Z9ei_printfPKcz>
  // Create double buffer
  inference.buffers[0] = (int16_t *)malloc(EI_CLASSIFIER_SLICE_SIZE * sizeof(int16_t));
 8005538:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800553c:	f026 fe98 	bl	802c270 <malloc>
 8005540:	4603      	mov	r3, r0
 8005542:	461a      	mov	r2, r3
 8005544:	4b72      	ldr	r3, [pc, #456]	; (8005710 <main+0x244>)
 8005546:	601a      	str	r2, [r3, #0]
  if(inference.buffers[0] == NULL)
 8005548:	4b71      	ldr	r3, [pc, #452]	; (8005710 <main+0x244>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d102      	bne.n	8005556 <main+0x8a>
  {
    ei_printf("ERROR: Could not create buffer 1. Likely ran out of heap memory.\r\n");
 8005550:	4870      	ldr	r0, [pc, #448]	; (8005714 <main+0x248>)
 8005552:	f000 fba9 	bl	8005ca8 <_Z9ei_printfPKcz>
  }
  inference.buffers[1] = (int16_t *)malloc(EI_CLASSIFIER_SLICE_SIZE * sizeof(int16_t));
 8005556:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800555a:	f026 fe89 	bl	802c270 <malloc>
 800555e:	4603      	mov	r3, r0
 8005560:	461a      	mov	r2, r3
 8005562:	4b6b      	ldr	r3, [pc, #428]	; (8005710 <main+0x244>)
 8005564:	605a      	str	r2, [r3, #4]
  if(inference.buffers[1] == NULL)
 8005566:	4b6a      	ldr	r3, [pc, #424]	; (8005710 <main+0x244>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d102      	bne.n	8005574 <main+0xa8>
  {
    ei_printf("ERROR: Could not create buffer 2. Likely ran out of heap memory.\r\n");
 800556e:	486a      	ldr	r0, [pc, #424]	; (8005718 <main+0x24c>)
 8005570:	f000 fb9a 	bl	8005ca8 <_Z9ei_printfPKcz>
  }
  // Set inference parameters
  inference.buf_select = 0;
 8005574:	4b66      	ldr	r3, [pc, #408]	; (8005710 <main+0x244>)
 8005576:	2200      	movs	r2, #0
 8005578:	721a      	strb	r2, [r3, #8]
  inference.buf_count  = 0;
 800557a:	4b65      	ldr	r3, [pc, #404]	; (8005710 <main+0x244>)
 800557c:	2200      	movs	r2, #0
 800557e:	60da      	str	r2, [r3, #12]
  inference.n_samples  = EI_CLASSIFIER_SLICE_SIZE;
 8005580:	4b63      	ldr	r3, [pc, #396]	; (8005710 <main+0x244>)
 8005582:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8005586:	611a      	str	r2, [r3, #16]
  inference.buf_ready  = 0;
 8005588:	4b61      	ldr	r3, [pc, #388]	; (8005710 <main+0x244>)
 800558a:	2200      	movs	r2, #0
 800558c:	725a      	strb	r2, [r3, #9]
  // Start receiving I2S audio data
  hal_res =  HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t *)i2s_buf, I2S_BUF_LEN);
 800558e:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8005592:	4962      	ldr	r1, [pc, #392]	; (800571c <main+0x250>)
 8005594:	4857      	ldr	r0, [pc, #348]	; (80056f4 <main+0x228>)
 8005596:	f005 f97f 	bl	800a898 <HAL_SAI_Receive_DMA>
 800559a:	4603      	mov	r3, r0
 800559c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  if (hal_res != HAL_OK)
 80055a0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <main+0xe2>
  {
    ei_printf("ERROR: Could not initialize I2S microphone.\r\n");
 80055a8:	485d      	ldr	r0, [pc, #372]	; (8005720 <main+0x254>)
 80055aa:	f000 fb7d 	bl	8005ca8 <_Z9ei_printfPKcz>
  }
  // Start doing inference
  record_ready = true;
 80055ae:	4b5d      	ldr	r3, [pc, #372]	; (8005724 <main+0x258>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

	          // Do classification (i.e. the inference part)
	          signal_t signal;
 80055b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fe fe15 	bl	80041e8 <_ZN2ei11ei_signal_tC1Ev>
	          signal.total_length = EI_CLASSIFIER_SLICE_SIZE;
 80055be:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80055c2:	673b      	str	r3, [r7, #112]	; 0x70
	          signal.get_data = &get_audio_signal_data;
 80055c4:	4b58      	ldr	r3, [pc, #352]	; (8005728 <main+0x25c>)
 80055c6:	677b      	str	r3, [r7, #116]	; 0x74
 80055c8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80055cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80055d0:	4611      	mov	r1, r2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fce4 	bl	8005fa0 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
	          ei_impulse_result_t result = { 0 };
 80055d8:	463b      	mov	r3, r7
 80055da:	2260      	movs	r2, #96	; 0x60
 80055dc:	2100      	movs	r1, #0
 80055de:	4618      	mov	r0, r3
 80055e0:	f026 fe7e 	bl	802c2e0 <memset>
	          EI_IMPULSE_ERROR res = run_classifier(&signal, &result, debug_nn);
 80055e4:	4b51      	ldr	r3, [pc, #324]	; (800572c <main+0x260>)
 80055e6:	781a      	ldrb	r2, [r3, #0]
 80055e8:	4639      	mov	r1, r7
 80055ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fe28 	bl	8005244 <run_classifier>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

	          if(++print_results >= (EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW >> 1)){
 80055fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055fe:	3301      	adds	r3, #1
 8005600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005604:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005608:	2b01      	cmp	r3, #1
 800560a:	bfcc      	ite	gt
 800560c:	2301      	movgt	r3, #1
 800560e:	2300      	movle	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d038      	beq.n	8005688 <main+0x1bc>
	          ei_printf("Predictions (DSP: %d ms., Classification: %d ms.",result.timing.dsp, result.timing.classification);
 8005616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800561a:	4619      	mov	r1, r3
 800561c:	4844      	ldr	r0, [pc, #272]	; (8005730 <main+0x264>)
 800561e:	f000 fb43 	bl	8005ca8 <_Z9ei_printfPKcz>

	          // Print output predictions (once every 4 predictions)

	                for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++)
 8005622:	2300      	movs	r3, #0
 8005624:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005628:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800562c:	2b04      	cmp	r3, #4
 800562e:	d828      	bhi.n	8005682 <main+0x1b6>
	                {

	                	ei_printf("    %s: %.5f\r\n", result.classification[ix].label, result.classification[ix].value);
 8005630:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	3388      	adds	r3, #136	; 0x88
 8005638:	443b      	add	r3, r7
 800563a:	f853 4c88 	ldr.w	r4, [r3, #-136]
 800563e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	3388      	adds	r3, #136	; 0x88
 8005646:	443b      	add	r3, r7
 8005648:	3b84      	subs	r3, #132	; 0x84
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4618      	mov	r0, r3
 800564e:	f7fa ffa5 	bl	800059c <__aeabi_f2d>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4621      	mov	r1, r4
 8005658:	4836      	ldr	r0, [pc, #216]	; (8005734 <main+0x268>)
 800565a:	f000 fb25 	bl	8005ca8 <_Z9ei_printfPKcz>
	                	ei_printf_float(result.classification[ix].value);
 800565e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	3388      	adds	r3, #136	; 0x88
 8005666:	443b      	add	r3, r7
 8005668:	3b84      	subs	r3, #132	; 0x84
 800566a:	edd3 7a00 	vldr	s15, [r3]
 800566e:	eeb0 0a67 	vmov.f32	s0, s15
 8005672:	f018 ffe1 	bl	801e638 <_Z15ei_printf_floatf>
	                for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++)
 8005676:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800567a:	3301      	adds	r3, #1
 800567c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005680:	e7d2      	b.n	8005628 <main+0x15c>
	                }
	                print_results=0;
 8005682:	2300      	movs	r3, #0
 8005684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	          }

				#if EI_CLASSIFIER_HAS_MODEL_VARIABLES == 1

	                	ei_printf("Pass");
 8005688:	482b      	ldr	r0, [pc, #172]	; (8005738 <main+0x26c>)
 800568a:	f000 fb0d 	bl	8005ca8 <_Z9ei_printfPKcz>
					#else
	            		   ei_printf("fail");
					#endif


	                 if (result.classification[2].value>0.5)
 800568e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005692:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800569a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569e:	dd04      	ble.n	80056aa <main+0x1de>
	                 {
	                   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_SET);
 80056a0:	2201      	movs	r2, #1
 80056a2:	2101      	movs	r1, #1
 80056a4:	4825      	ldr	r0, [pc, #148]	; (800573c <main+0x270>)
 80056a6:	f003 f95d 	bl	8008964 <HAL_GPIO_WritePin>

	                 }
	                 if (result.classification[3].value>0.5)
 80056aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80056ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80056b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ba:	dd04      	ble.n	80056c6 <main+0x1fa>
	                {

	                	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);
 80056bc:	2201      	movs	r2, #1
 80056be:	2180      	movs	r1, #128	; 0x80
 80056c0:	481f      	ldr	r0, [pc, #124]	; (8005740 <main+0x274>)
 80056c2:	f003 f94f 	bl	8008964 <HAL_GPIO_WritePin>

	                  }
	                 if (result.classification[4].value>0.5)
 80056c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80056ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80056ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d6:	dd04      	ble.n	80056e2 <main+0x216>
	                 {
	                	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,GPIO_PIN_SET);
 80056d8:	2201      	movs	r2, #1
 80056da:	2140      	movs	r1, #64	; 0x40
 80056dc:	4818      	ldr	r0, [pc, #96]	; (8005740 <main+0x274>)
 80056de:	f003 f941 	bl	8008964 <HAL_GPIO_WritePin>
	          signal_t signal;
 80056e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fd8b 	bl	8004202 <_ZN2ei11ei_signal_tD1Ev>
	                	               }



    /* USER CODE BEGIN 3 */
  }
 80056ec:	e762      	b.n	80055b4 <main+0xe8>
 80056ee:	bf00      	nop
 80056f0:	2000697c 	.word	0x2000697c
 80056f4:	200003d4 	.word	0x200003d4
 80056f8:	0802df90 	.word	0x0802df90
 80056fc:	3fb00000 	.word	0x3fb00000
 8005700:	0802dfa8 	.word	0x0802dfa8
 8005704:	0802dfc0 	.word	0x0802dfc0
 8005708:	0802dfd4 	.word	0x0802dfd4
 800570c:	0802dff0 	.word	0x0802dff0
 8005710:	20006964 	.word	0x20006964
 8005714:	0802e008 	.word	0x0802e008
 8005718:	0802e04c 	.word	0x0802e04c
 800571c:	20000564 	.word	0x20000564
 8005720:	0802e090 	.word	0x0802e090
 8005724:	20006978 	.word	0x20006978
 8005728:	08005c1d 	.word	0x08005c1d
 800572c:	20000560 	.word	0x20000560
 8005730:	0802e0c0 	.word	0x0802e0c0
 8005734:	0802e0f4 	.word	0x0802e0f4
 8005738:	0802e104 	.word	0x0802e104
 800573c:	40020000 	.word	0x40020000
 8005740:	40020400 	.word	0x40020400

08005744 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b0ac      	sub	sp, #176	; 0xb0
 8005748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800574a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800574e:	2234      	movs	r2, #52	; 0x34
 8005750:	2100      	movs	r1, #0
 8005752:	4618      	mov	r0, r3
 8005754:	f026 fdc4 	bl	802c2e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005758:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	605a      	str	r2, [r3, #4]
 8005762:	609a      	str	r2, [r3, #8]
 8005764:	60da      	str	r2, [r3, #12]
 8005766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005768:	f107 030c 	add.w	r3, r7, #12
 800576c:	225c      	movs	r2, #92	; 0x5c
 800576e:	2100      	movs	r1, #0
 8005770:	4618      	mov	r0, r3
 8005772:	f026 fdb5 	bl	802c2e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005776:	2300      	movs	r3, #0
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	4b49      	ldr	r3, [pc, #292]	; (80058a0 <_Z18SystemClock_Configv+0x15c>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	4a48      	ldr	r2, [pc, #288]	; (80058a0 <_Z18SystemClock_Configv+0x15c>)
 8005780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005784:	6413      	str	r3, [r2, #64]	; 0x40
 8005786:	4b46      	ldr	r3, [pc, #280]	; (80058a0 <_Z18SystemClock_Configv+0x15c>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578e:	60bb      	str	r3, [r7, #8]
 8005790:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005792:	2300      	movs	r3, #0
 8005794:	607b      	str	r3, [r7, #4]
 8005796:	4b43      	ldr	r3, [pc, #268]	; (80058a4 <_Z18SystemClock_Configv+0x160>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800579e:	4a41      	ldr	r2, [pc, #260]	; (80058a4 <_Z18SystemClock_Configv+0x160>)
 80057a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	4b3f      	ldr	r3, [pc, #252]	; (80058a4 <_Z18SystemClock_Configv+0x160>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057ae:	607b      	str	r3, [r7, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80057b2:	2302      	movs	r3, #2
 80057b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80057bc:	2310      	movs	r3, #16
 80057be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057c2:	2302      	movs	r3, #2
 80057c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80057c8:	2300      	movs	r3, #0
 80057ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 80057ce:	2308      	movs	r3, #8
 80057d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80057d4:	2350      	movs	r3, #80	; 0x50
 80057d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80057da:	2302      	movs	r3, #2
 80057dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80057e0:	2302      	movs	r3, #2
 80057e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80057e6:	2302      	movs	r3, #2
 80057e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80057f0:	4618      	mov	r0, r3
 80057f2:	f004 fb8b 	bl	8009f0c <HAL_RCC_OscConfig>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	bf14      	ite	ne
 80057fc:	2301      	movne	r3, #1
 80057fe:	2300      	moveq	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 8005806:	f000 fabf 	bl	8005d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800580a:	230f      	movs	r3, #15
 800580c:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800580e:	2302      	movs	r3, #2
 8005810:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005812:	2300      	movs	r3, #0
 8005814:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800581a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800581c:	2300      	movs	r3, #0
 800581e:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005820:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005824:	2102      	movs	r1, #2
 8005826:	4618      	mov	r0, r3
 8005828:	f003 fab4 	bl	8008d94 <HAL_RCC_ClockConfig>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	bf14      	ite	ne
 8005832:	2301      	movne	r3, #1
 8005834:	2300      	moveq	r3, #0
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 800583c:	f000 faa4 	bl	8005d88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_SAI1;
 8005840:	2305      	movs	r3, #5
 8005842:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8005844:	23c0      	movs	r3, #192	; 0xc0
 8005846:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8005848:	2302      	movs	r3, #2
 800584a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 800584c:	2310      	movs	r3, #16
 800584e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8005850:	2302      	movs	r3, #2
 8005852:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8005854:	2302      	movs	r3, #2
 8005856:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 8005858:	2308      	movs	r3, #8
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800585c:	2332      	movs	r3, #50	; 0x32
 800585e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8005860:	2302      	movs	r3, #2
 8005862:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8005864:	2302      	movs	r3, #2
 8005866:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8005868:	2301      	movs	r3, #1
 800586a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800586c:	2301      	movs	r3, #1
 800586e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8005870:	2300      	movs	r3, #0
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8005874:	2300      	movs	r3, #0
 8005876:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005878:	f107 030c 	add.w	r3, r7, #12
 800587c:	4618      	mov	r0, r3
 800587e:	f003 fba3 	bl	8008fc8 <HAL_RCCEx_PeriphCLKConfig>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	bf14      	ite	ne
 8005888:	2301      	movne	r3, #1
 800588a:	2300      	moveq	r3, #0
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <_Z18SystemClock_Configv+0x152>
  {
    Error_Handler();
 8005892:	f000 fa79 	bl	8005d88 <Error_Handler>
  }
}
 8005896:	bf00      	nop
 8005898:	37b0      	adds	r7, #176	; 0xb0
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40023800 	.word	0x40023800
 80058a4:	40007000 	.word	0x40007000

080058a8 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80058ac:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <_ZL11MX_CRC_Initv+0x28>)
 80058ae:	4a09      	ldr	r2, [pc, #36]	; (80058d4 <_ZL11MX_CRC_Initv+0x2c>)
 80058b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80058b2:	4807      	ldr	r0, [pc, #28]	; (80058d0 <_ZL11MX_CRC_Initv+0x28>)
 80058b4:	f002 fb35 	bl	8007f22 <HAL_CRC_Init>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bf14      	ite	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	2300      	moveq	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 80058c8:	f000 fa5e 	bl	8005d88 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80058cc:	bf00      	nop
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20000324 	.word	0x20000324
 80058d4:	40023000 	.word	0x40023000

080058d8 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80058dc:	4b15      	ldr	r3, [pc, #84]	; (8005934 <_ZL12MX_I2S2_Initv+0x5c>)
 80058de:	4a16      	ldr	r2, [pc, #88]	; (8005938 <_ZL12MX_I2S2_Initv+0x60>)
 80058e0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80058e2:	4b14      	ldr	r3, [pc, #80]	; (8005934 <_ZL12MX_I2S2_Initv+0x5c>)
 80058e4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80058e8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80058ea:	4b12      	ldr	r3, [pc, #72]	; (8005934 <_ZL12MX_I2S2_Initv+0x5c>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80058f0:	4b10      	ldr	r3, [pc, #64]	; (8005934 <_ZL12MX_I2S2_Initv+0x5c>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80058f6:	4b0f      	ldr	r3, [pc, #60]	; (8005934 <_ZL12MX_I2S2_Initv+0x5c>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80058fc:	4b0d      	ldr	r3, [pc, #52]	; (8005934 <_ZL12MX_I2S2_Initv+0x5c>)
 80058fe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005902:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8005904:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <_ZL12MX_I2S2_Initv+0x5c>)
 8005906:	2200      	movs	r2, #0
 8005908:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800590a:	4b0a      	ldr	r3, [pc, #40]	; (8005934 <_ZL12MX_I2S2_Initv+0x5c>)
 800590c:	2200      	movs	r2, #0
 800590e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8005910:	4b08      	ldr	r3, [pc, #32]	; (8005934 <_ZL12MX_I2S2_Initv+0x5c>)
 8005912:	2200      	movs	r2, #0
 8005914:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8005916:	4807      	ldr	r0, [pc, #28]	; (8005934 <_ZL12MX_I2S2_Initv+0x5c>)
 8005918:	f003 f83e 	bl	8008998 <HAL_I2S_Init>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	bf14      	ite	ne
 8005922:	2301      	movne	r3, #1
 8005924:	2300      	moveq	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <_ZL12MX_I2S2_Initv+0x58>
  {
    Error_Handler();
 800592c:	f000 fa2c 	bl	8005d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8005930:	bf00      	nop
 8005932:	bd80      	pop	{r7, pc}
 8005934:	2000032c 	.word	0x2000032c
 8005938:	40003800 	.word	0x40003800

0800593c <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8005940:	4b1a      	ldr	r3, [pc, #104]	; (80059ac <_ZL12MX_SAI1_Initv+0x70>)
 8005942:	4a1b      	ldr	r2, [pc, #108]	; (80059b0 <_ZL12MX_SAI1_Initv+0x74>)
 8005944:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_RX;
 8005946:	4b19      	ldr	r3, [pc, #100]	; (80059ac <_ZL12MX_SAI1_Initv+0x70>)
 8005948:	2201      	movs	r2, #1
 800594a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800594c:	4b17      	ldr	r3, [pc, #92]	; (80059ac <_ZL12MX_SAI1_Initv+0x70>)
 800594e:	2200      	movs	r2, #0
 8005950:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8005952:	4b16      	ldr	r3, [pc, #88]	; (80059ac <_ZL12MX_SAI1_Initv+0x70>)
 8005954:	2200      	movs	r2, #0
 8005956:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8005958:	4b14      	ldr	r3, [pc, #80]	; (80059ac <_ZL12MX_SAI1_Initv+0x70>)
 800595a:	2200      	movs	r2, #0
 800595c:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800595e:	4b13      	ldr	r3, [pc, #76]	; (80059ac <_ZL12MX_SAI1_Initv+0x70>)
 8005960:	2200      	movs	r2, #0
 8005962:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8005964:	4b11      	ldr	r3, [pc, #68]	; (80059ac <_ZL12MX_SAI1_Initv+0x70>)
 8005966:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800596a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_32K;
 800596c:	4b0f      	ldr	r3, [pc, #60]	; (80059ac <_ZL12MX_SAI1_Initv+0x70>)
 800596e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8005972:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8005974:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <_ZL12MX_SAI1_Initv+0x70>)
 8005976:	2200      	movs	r2, #0
 8005978:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800597a:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <_ZL12MX_SAI1_Initv+0x70>)
 800597c:	2200      	movs	r2, #0
 800597e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8005980:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <_ZL12MX_SAI1_Initv+0x70>)
 8005982:	2200      	movs	r2, #0
 8005984:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8005986:	2302      	movs	r3, #2
 8005988:	2202      	movs	r2, #2
 800598a:	2100      	movs	r1, #0
 800598c:	4807      	ldr	r0, [pc, #28]	; (80059ac <_ZL12MX_SAI1_Initv+0x70>)
 800598e:	f004 fd5b 	bl	800a448 <HAL_SAI_InitProtocol>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	bf14      	ite	ne
 8005998:	2301      	movne	r3, #1
 800599a:	2300      	moveq	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <_ZL12MX_SAI1_Initv+0x6a>
  {
    Error_Handler();
 80059a2:	f000 f9f1 	bl	8005d88 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80059a6:	bf00      	nop
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	200003d4 	.word	0x200003d4
 80059b0:	40015824 	.word	0x40015824

080059b4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80059b8:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <_ZL19MX_USART2_UART_Initv+0x54>)
 80059ba:	4a14      	ldr	r2, [pc, #80]	; (8005a0c <_ZL19MX_USART2_UART_Initv+0x58>)
 80059bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80059be:	4b12      	ldr	r3, [pc, #72]	; (8005a08 <_ZL19MX_USART2_UART_Initv+0x54>)
 80059c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80059c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <_ZL19MX_USART2_UART_Initv+0x54>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80059cc:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <_ZL19MX_USART2_UART_Initv+0x54>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80059d2:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <_ZL19MX_USART2_UART_Initv+0x54>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80059d8:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <_ZL19MX_USART2_UART_Initv+0x54>)
 80059da:	220c      	movs	r2, #12
 80059dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059de:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <_ZL19MX_USART2_UART_Initv+0x54>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80059e4:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <_ZL19MX_USART2_UART_Initv+0x54>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80059ea:	4807      	ldr	r0, [pc, #28]	; (8005a08 <_ZL19MX_USART2_UART_Initv+0x54>)
 80059ec:	f005 fa60 	bl	800aeb0 <HAL_UART_Init>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	bf14      	ite	ne
 80059f6:	2301      	movne	r3, #1
 80059f8:	2300      	moveq	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8005a00:	f000 f9c2 	bl	8005d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005a04:	bf00      	nop
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	200004bc 	.word	0x200004bc
 8005a0c:	40004400 	.word	0x40004400

08005a10 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005a16:	2300      	movs	r3, #0
 8005a18:	607b      	str	r3, [r7, #4]
 8005a1a:	4b1b      	ldr	r3, [pc, #108]	; (8005a88 <_ZL11MX_DMA_Initv+0x78>)
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	4a1a      	ldr	r2, [pc, #104]	; (8005a88 <_ZL11MX_DMA_Initv+0x78>)
 8005a20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a24:	6313      	str	r3, [r2, #48]	; 0x30
 8005a26:	4b18      	ldr	r3, [pc, #96]	; (8005a88 <_ZL11MX_DMA_Initv+0x78>)
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a2e:	607b      	str	r3, [r7, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005a32:	2300      	movs	r3, #0
 8005a34:	603b      	str	r3, [r7, #0]
 8005a36:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <_ZL11MX_DMA_Initv+0x78>)
 8005a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3a:	4a13      	ldr	r2, [pc, #76]	; (8005a88 <_ZL11MX_DMA_Initv+0x78>)
 8005a3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a40:	6313      	str	r3, [r2, #48]	; 0x30
 8005a42:	4b11      	ldr	r3, [pc, #68]	; (8005a88 <_ZL11MX_DMA_Initv+0x78>)
 8005a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8005a4e:	2200      	movs	r2, #0
 8005a50:	2100      	movs	r1, #0
 8005a52:	200e      	movs	r0, #14
 8005a54:	f002 fa2f 	bl	8007eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8005a58:	200e      	movs	r0, #14
 8005a5a:	f002 fa48 	bl	8007eee <HAL_NVIC_EnableIRQ>

  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2100      	movs	r1, #0
 8005a62:	2011      	movs	r0, #17
 8005a64:	f002 fa27 	bl	8007eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005a68:	2011      	movs	r0, #17
 8005a6a:	f002 fa40 	bl	8007eee <HAL_NVIC_EnableIRQ>

  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2100      	movs	r1, #0
 8005a72:	203c      	movs	r0, #60	; 0x3c
 8005a74:	f002 fa1f 	bl	8007eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8005a78:	203c      	movs	r0, #60	; 0x3c
 8005a7a:	f002 fa38 	bl	8007eee <HAL_NVIC_EnableIRQ>

}
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	40023800 	.word	0x40023800

08005a8c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08a      	sub	sp, #40	; 0x28
 8005a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a92:	f107 0314 	add.w	r3, r7, #20
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	605a      	str	r2, [r3, #4]
 8005a9c:	609a      	str	r2, [r3, #8]
 8005a9e:	60da      	str	r2, [r3, #12]
 8005aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	4b36      	ldr	r3, [pc, #216]	; (8005b80 <_ZL12MX_GPIO_Initv+0xf4>)
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	4a35      	ldr	r2, [pc, #212]	; (8005b80 <_ZL12MX_GPIO_Initv+0xf4>)
 8005aac:	f043 0304 	orr.w	r3, r3, #4
 8005ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ab2:	4b33      	ldr	r3, [pc, #204]	; (8005b80 <_ZL12MX_GPIO_Initv+0xf4>)
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	613b      	str	r3, [r7, #16]
 8005abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	4b2f      	ldr	r3, [pc, #188]	; (8005b80 <_ZL12MX_GPIO_Initv+0xf4>)
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	4a2e      	ldr	r2, [pc, #184]	; (8005b80 <_ZL12MX_GPIO_Initv+0xf4>)
 8005ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005acc:	6313      	str	r3, [r2, #48]	; 0x30
 8005ace:	4b2c      	ldr	r3, [pc, #176]	; (8005b80 <_ZL12MX_GPIO_Initv+0xf4>)
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ada:	2300      	movs	r3, #0
 8005adc:	60bb      	str	r3, [r7, #8]
 8005ade:	4b28      	ldr	r3, [pc, #160]	; (8005b80 <_ZL12MX_GPIO_Initv+0xf4>)
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae2:	4a27      	ldr	r2, [pc, #156]	; (8005b80 <_ZL12MX_GPIO_Initv+0xf4>)
 8005ae4:	f043 0301 	orr.w	r3, r3, #1
 8005ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8005aea:	4b25      	ldr	r3, [pc, #148]	; (8005b80 <_ZL12MX_GPIO_Initv+0xf4>)
 8005aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	60bb      	str	r3, [r7, #8]
 8005af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005af6:	2300      	movs	r3, #0
 8005af8:	607b      	str	r3, [r7, #4]
 8005afa:	4b21      	ldr	r3, [pc, #132]	; (8005b80 <_ZL12MX_GPIO_Initv+0xf4>)
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	4a20      	ldr	r2, [pc, #128]	; (8005b80 <_ZL12MX_GPIO_Initv+0xf4>)
 8005b00:	f043 0302 	orr.w	r3, r3, #2
 8005b04:	6313      	str	r3, [r2, #48]	; 0x30
 8005b06:	4b1e      	ldr	r3, [pc, #120]	; (8005b80 <_ZL12MX_GPIO_Initv+0xf4>)
 8005b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	607b      	str	r3, [r7, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, bed_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005b12:	2200      	movs	r2, #0
 8005b14:	2121      	movs	r1, #33	; 0x21
 8005b16:	481b      	ldr	r0, [pc, #108]	; (8005b84 <_ZL12MX_GPIO_Initv+0xf8>)
 8005b18:	f002 ff24 	bl	8008964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, On_Pin|Off_Pin, GPIO_PIN_RESET);
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	21c0      	movs	r1, #192	; 0xc0
 8005b20:	4819      	ldr	r0, [pc, #100]	; (8005b88 <_ZL12MX_GPIO_Initv+0xfc>)
 8005b22:	f002 ff1f 	bl	8008964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005b2c:	4b17      	ldr	r3, [pc, #92]	; (8005b8c <_ZL12MX_GPIO_Initv+0x100>)
 8005b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005b34:	f107 0314 	add.w	r3, r7, #20
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4815      	ldr	r0, [pc, #84]	; (8005b90 <_ZL12MX_GPIO_Initv+0x104>)
 8005b3c:	f002 fd7e 	bl	800863c <HAL_GPIO_Init>

  /*Configure GPIO pins : bed_Pin LD2_Pin */
  GPIO_InitStruct.Pin = bed_Pin|LD2_Pin;
 8005b40:	2321      	movs	r3, #33	; 0x21
 8005b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b44:	2301      	movs	r3, #1
 8005b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b50:	f107 0314 	add.w	r3, r7, #20
 8005b54:	4619      	mov	r1, r3
 8005b56:	480b      	ldr	r0, [pc, #44]	; (8005b84 <_ZL12MX_GPIO_Initv+0xf8>)
 8005b58:	f002 fd70 	bl	800863c <HAL_GPIO_Init>

  /*Configure GPIO pins : On_Pin Off_Pin */
  GPIO_InitStruct.Pin = On_Pin|Off_Pin;
 8005b5c:	23c0      	movs	r3, #192	; 0xc0
 8005b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b60:	2301      	movs	r3, #1
 8005b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b6c:	f107 0314 	add.w	r3, r7, #20
 8005b70:	4619      	mov	r1, r3
 8005b72:	4805      	ldr	r0, [pc, #20]	; (8005b88 <_ZL12MX_GPIO_Initv+0xfc>)
 8005b74:	f002 fd62 	bl	800863c <HAL_GPIO_Init>

}
 8005b78:	bf00      	nop
 8005b7a:	3728      	adds	r7, #40	; 0x28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40023800 	.word	0x40023800
 8005b84:	40020000 	.word	0x40020000
 8005b88:	40020400 	.word	0x40020400
 8005b8c:	10210000 	.word	0x10210000
 8005b90:	40020800 	.word	0x40020800

08005b94 <_ZL31audio_buffer_inference_callbackmm>:
 *
 * @param[in]  n_bytes  Number of bytes to copy
 * @param[in]  offset   offset in sampleBuffer
 */
static void audio_buffer_inference_callback(uint32_t n_bytes, uint32_t offset)
{
 8005b94:	b490      	push	{r4, r7}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  // Copy samples from I2S buffer to inference buffer. Convert 24-bit, 32kHz
  // samples to 16-bit, 16kHz
  for (uint32_t i = 0; i < (n_bytes >> 1); i++) {
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d22d      	bcs.n	8005c08 <_ZL31audio_buffer_inference_callbackmm+0x74>
    inference.buffers[inference.buf_select][inference.buf_count++] =
        (int16_t)(i2s_buf[offset + (I2S_BUF_SKIP * i)] >> 8);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	009a      	lsls	r2, r3, #2
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	4a17      	ldr	r2, [pc, #92]	; (8005c14 <_ZL31audio_buffer_inference_callbackmm+0x80>)
 8005bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bba:	0a1c      	lsrs	r4, r3, #8
    inference.buffers[inference.buf_select][inference.buf_count++] =
 8005bbc:	4b16      	ldr	r3, [pc, #88]	; (8005c18 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005bbe:	7a1b      	ldrb	r3, [r3, #8]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4b15      	ldr	r3, [pc, #84]	; (8005c18 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005bc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005bc8:	4b13      	ldr	r3, [pc, #76]	; (8005c18 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	1c59      	adds	r1, r3, #1
 8005bce:	4812      	ldr	r0, [pc, #72]	; (8005c18 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005bd0:	60c1      	str	r1, [r0, #12]
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	4413      	add	r3, r2
 8005bd6:	b222      	sxth	r2, r4
 8005bd8:	801a      	strh	r2, [r3, #0]
    if (inference.buf_count >= inference.n_samples) {
 8005bda:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	4b0e      	ldr	r3, [pc, #56]	; (8005c18 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d30c      	bcc.n	8005c00 <_ZL31audio_buffer_inference_callbackmm+0x6c>
      inference.buf_select ^= 1;
 8005be6:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005be8:	7a1b      	ldrb	r3, [r3, #8]
 8005bea:	f083 0301 	eor.w	r3, r3, #1
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005bf2:	721a      	strb	r2, [r3, #8]
      inference.buf_count = 0;
 8005bf4:	4b08      	ldr	r3, [pc, #32]	; (8005c18 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	60da      	str	r2, [r3, #12]
      inference.buf_ready = 1;
 8005bfa:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	725a      	strb	r2, [r3, #9]
  for (uint32_t i = 0; i < (n_bytes >> 1); i++) {
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3301      	adds	r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	e7cc      	b.n	8005ba2 <_ZL31audio_buffer_inference_callbackmm+0xe>
    }
  }
}
 8005c08:	bf00      	nop
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc90      	pop	{r4, r7}
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20000564 	.word	0x20000564
 8005c18:	20006964 	.word	0x20006964

08005c1c <_ZL21get_audio_signal_datajjPf>:
/**
 * Get raw audio signal data
 */
static int get_audio_signal_data(size_t offset, size_t length, float *out_ptr)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  numpy::int16_to_float(&inference.buffers[inference.buf_select ^ 1][offset], out_ptr, length);
 8005c28:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <_ZL21get_audio_signal_datajjPf+0x38>)
 8005c2a:	7a1b      	ldrb	r3, [r3, #8]
 8005c2c:	f083 0301 	eor.w	r3, r3, #1
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <_ZL21get_audio_signal_datajjPf+0x38>)
 8005c36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	4413      	add	r3, r2
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fc fad3 	bl	80021f0 <_ZN2ei5numpy14int16_to_floatEPKsPfj>
  return 0;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20006964 	.word	0x20006964

08005c58 <_Z6vprintPKcSt9__va_list>:
/**
 * Low-level print function that uses UART to print status messages.
 */
void vprint(const char *fmt, va_list argp)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b0b4      	sub	sp, #208	; 0xd0
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  char string[200];
  if(0 < vsprintf(string, fmt, argp)) // build string
 8005c62:	f107 0308 	add.w	r3, r7, #8
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f027 f81c 	bl	802cca8 <vsiprintf>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	bfcc      	ite	gt
 8005c76:	2301      	movgt	r3, #1
 8005c78:	2300      	movle	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00d      	beq.n	8005c9c <_Z6vprintPKcSt9__va_list+0x44>
  {
      HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff);
 8005c80:	f107 0308 	add.w	r3, r7, #8
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fa fb1d 	bl	80002c4 <strlen>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	f107 0108 	add.w	r1, r7, #8
 8005c92:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8005c96:	4803      	ldr	r0, [pc, #12]	; (8005ca4 <_Z6vprintPKcSt9__va_list+0x4c>)
 8005c98:	f005 f957 	bl	800af4a <HAL_UART_Transmit>
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	37d0      	adds	r7, #208	; 0xd0
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	200004bc 	.word	0x200004bc

08005ca8 <_Z9ei_printfPKcz>:
/**
 * Wrapper for vprint. Use this like you would printf to print messages to the serial console.
 */
void ei_printf(const char *format, ...)
{
 8005ca8:	b40f      	push	{r0, r1, r2, r3}
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
  va_list myargs;
  va_start(myargs, format);
 8005cb0:	f107 0314 	add.w	r3, r7, #20
 8005cb4:	607b      	str	r3, [r7, #4]
  vprint(format, myargs);
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	6938      	ldr	r0, [r7, #16]
 8005cba:	f7ff ffcd 	bl	8005c58 <_Z6vprintPKcSt9__va_list>
  va_end(myargs);
}
 8005cbe:	bf00      	nop
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cc8:	b004      	add	sp, #16
 8005cca:	4770      	bx	lr

08005ccc <HAL_SAI_RxHalfCpltCallback>:
/**
 * Called when the first half of the receive buffer is full
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
                //restore signed 24 bit sample from 16-bit buffers
                int lSample = (int) (rxBuf[0]<<16) | rxBuf[1];
 8005cd4:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <HAL_SAI_RxHalfCpltCallback+0x54>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	041b      	lsls	r3, r3, #16
 8005cda:	4a11      	ldr	r2, [pc, #68]	; (8005d20 <HAL_SAI_RxHalfCpltCallback+0x54>)
 8005cdc:	7852      	ldrb	r2, [r2, #1]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
                int rSample = (int) (rxBuf[2]<<16) | rxBuf[3];
 8005ce2:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <HAL_SAI_RxHalfCpltCallback+0x54>)
 8005ce4:	789b      	ldrb	r3, [r3, #2]
 8005ce6:	041b      	lsls	r3, r3, #16
 8005ce8:	4a0d      	ldr	r2, [pc, #52]	; (8005d20 <HAL_SAI_RxHalfCpltCallback+0x54>)
 8005cea:	78d2      	ldrb	r2, [r2, #3]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60bb      	str	r3, [r7, #8]
                lSample = lSample << 1; //amplify sound
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
                rSample = lSample; // because there is one mic only
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	60bb      	str	r3, [r7, #8]
                //sum to mono
                lSample = rSample + lSample;
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4413      	add	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]
                rSample = lSample;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	60bb      	str	r3, [r7, #8]
  if (record_ready == true)
 8005d06:	4b07      	ldr	r3, [pc, #28]	; (8005d24 <HAL_SAI_RxHalfCpltCallback+0x58>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d104      	bne.n	8005d18 <HAL_SAI_RxHalfCpltCallback+0x4c>
  {
    audio_buffer_inference_callback(I2S_BUF_LEN / I2S_BUF_SKIP, 0);
 8005d0e:	2100      	movs	r1, #0
 8005d10:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005d14:	f7ff ff3e 	bl	8005b94 <_ZL31audio_buffer_inference_callbackmm>
  }
}
 8005d18:	bf00      	nop
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	2000697c 	.word	0x2000697c
 8005d24:	20006978 	.word	0x20006978

08005d28 <HAL_SAI_RxCpltCallback>:
/**
 * Called when the second half of the receive buffer is full
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
        //restore signed 24 bit sample from 16-bit buffers
                        int lSample = (int) (rxBuf[4]<<16) | rxBuf[5];
 8005d30:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <HAL_SAI_RxCpltCallback+0x58>)
 8005d32:	791b      	ldrb	r3, [r3, #4]
 8005d34:	041b      	lsls	r3, r3, #16
 8005d36:	4a12      	ldr	r2, [pc, #72]	; (8005d80 <HAL_SAI_RxCpltCallback+0x58>)
 8005d38:	7952      	ldrb	r2, [r2, #5]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]
                        int rSample = (int) (rxBuf[6]<<16) | rxBuf[7];
 8005d3e:	4b10      	ldr	r3, [pc, #64]	; (8005d80 <HAL_SAI_RxCpltCallback+0x58>)
 8005d40:	799b      	ldrb	r3, [r3, #6]
 8005d42:	041b      	lsls	r3, r3, #16
 8005d44:	4a0e      	ldr	r2, [pc, #56]	; (8005d80 <HAL_SAI_RxCpltCallback+0x58>)
 8005d46:	79d2      	ldrb	r2, [r2, #7]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60bb      	str	r3, [r7, #8]
                        lSample = lSample << 1; //amplify sound
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]
                    rSample = lSample; // because there is one mic only
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	60bb      	str	r3, [r7, #8]
                        //sum to mono
                        lSample = rSample + lSample;
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
                        rSample = lSample;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	60bb      	str	r3, [r7, #8]
  if (record_ready == true)
 8005d62:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <HAL_SAI_RxCpltCallback+0x5c>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d105      	bne.n	8005d76 <HAL_SAI_RxCpltCallback+0x4e>
  {
    audio_buffer_inference_callback(I2S_BUF_LEN / I2S_BUF_SKIP, I2S_BUF_LEN >> 1);
 8005d6a:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8005d6e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005d72:	f7ff ff0f 	bl	8005b94 <_ZL31audio_buffer_inference_callbackmm>
  }
}
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	2000697c 	.word	0x2000697c
 8005d84:	20006978 	.word	0x20006978

08005d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005d8c:	b672      	cpsid	i
}
 8005d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005d90:	e7fe      	b.n	8005d90 <Error_Handler+0x8>

08005d92 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    sqrt(_Tp __x)
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fa fbec 	bl	8000578 <__aeabi_i2d>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	ec43 2b10 	vmov	d0, r2, r3
 8005da8:	f023 fc94 	bl	80296d4 <sqrt>
 8005dac:	eeb0 7a40 	vmov.f32	s14, s0
 8005db0:	eef0 7a60 	vmov.f32	s15, s1
 8005db4:	eeb0 0a47 	vmov.f32	s0, s14
 8005db8:	eef0 0a67 	vmov.f32	s1, s15
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8005dc2:	b5b0      	push	{r4, r5, r7, lr}
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	ed87 0a01 	vstr	s0, [r7, #4]
 8005dcc:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7fa fbe4 	bl	800059c <__aeabi_f2d>
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	460d      	mov	r5, r1
 8005dd8:	6838      	ldr	r0, [r7, #0]
 8005dda:	f7fa fbcd 	bl	8000578 <__aeabi_i2d>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	ec43 2b11 	vmov	d1, r2, r3
 8005de6:	ec45 4b10 	vmov	d0, r4, r5
 8005dea:	f023 fc03 	bl	80295f4 <pow>
 8005dee:	eeb0 7a40 	vmov.f32	s14, s0
 8005df2:	eef0 7a60 	vmov.f32	s15, s1
    }
 8005df6:	eeb0 0a47 	vmov.f32	s0, s14
 8005dfa:	eef0 0a67 	vmov.f32	s1, s15
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bdb0      	pop	{r4, r5, r7, pc}

08005e04 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8005e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fb f9ab 	bl	8001172 <_ZNKSt14_Function_base8_M_emptyEv>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 8005e22:	f7fb fa7b 	bl	800131c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	68dc      	ldr	r4, [r3, #12]
 8005e2a:	68fd      	ldr	r5, [r7, #12]
 8005e2c:	f107 0308 	add.w	r3, r7, #8
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 f969 	bl	8006108 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005e36:	4606      	mov	r6, r0
 8005e38:	1d3b      	adds	r3, r7, #4
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 f964 	bl	8006108 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005e40:	4680      	mov	r8, r0
 8005e42:	463b      	mov	r3, r7
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 f96a 	bl	800611e <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4628      	mov	r0, r5
 8005e52:	47a0      	blx	r4
 8005e54:	4603      	mov	r3, r0
    }
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e60 <_ZNSt6vectorImSaImEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8005e60:	b5b0      	push	{r4, r5, r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681c      	ldr	r4, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 f95e 	bl	8006134 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8005e78:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f000 f963 	bl	800614a <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 f831 	bl	8005eee <_ZNSt12_Vector_baseImSaImEED1Ev>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bdb0      	pop	{r4, r5, r7, pc}

08005e96 <_ZNKSt8functionIFijjPfEEcvbEv>:
      explicit operator bool() const noexcept
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b082      	sub	sp, #8
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fb f966 	bl	8001172 <_ZNKSt14_Function_base8_M_emptyEv>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f083 0301 	eor.w	r3, r3, #1
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f951 	bl	8006166 <_ZNSaImEC1Ev>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 f959 	bl	800617e <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <_ZNSaImED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f961 	bl	80061a6 <_ZN9__gnu_cxx13new_allocatorImED1Ev>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b082      	sub	sp, #8
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005f06:	461a      	mov	r2, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f957 	bl	80061bc <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fd f899 	bl	8003048 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <_ZNSt6vectorImSaImEE9push_backEOm>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8005f2a:	6838      	ldr	r0, [r7, #0]
 8005f2c:	f000 f959 	bl	80061e2 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8005f30:	4603      	mov	r3, r0
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f95f 	bl	80061f8 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_>
 8005f3a:	bf00      	nop
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <_ZNKSt6vectorImSaImEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	109b      	asrs	r3, r3, #2
 8005f56:	4618      	mov	r0, r3
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <_ZNSt6vectorImSaImEE2atEj>:
      at(size_type __n)
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b082      	sub	sp, #8
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f970 	bl	8006254 <_ZNKSt6vectorImSaImEE14_M_range_checkEj>
	return (*this)[__n];
 8005f74:	6839      	ldr	r1, [r7, #0]
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f98c 	bl	8006294 <_ZNSt6vectorImSaImEEixEj>
 8005f7c:	4603      	mov	r3, r0
      }
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b082      	sub	sp, #8
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fb f8cd 	bl	8001130 <_ZNSt14_Function_baseC1Ev>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8005faa:	6838      	ldr	r0, [r7, #0]
 8005fac:	f000 f982 	bl	80062b4 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	f107 0308 	add.w	r3, r7, #8
 8005fb8:	4611      	mov	r1, r2
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 f986 	bl	80062cc <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8005fc0:	f107 0308 	add.w	r3, r7, #8
 8005fc4:	6879      	ldr	r1, [r7, #4]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 f87d 	bl	80060c6 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8005fcc:	f107 0308 	add.w	r3, r7, #8
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fe f8fc 	bl	80041ce <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8005fd6:	687b      	ldr	r3, [r7, #4]
	}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8005fea:	6838      	ldr	r0, [r7, #0]
 8005fec:	f000 f998 	bl	8006320 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	f107 0308 	add.w	r3, r7, #8
 8005ff6:	6811      	ldr	r1, [r2, #0]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 f99d 	bl	8006338 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8005ffe:	f107 0308 	add.w	r3, r7, #8
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 f85e 	bl	80060c6 <_ZNSt8functionIFijjPfEE4swapERS2_>
 800600a:	f107 0308 	add.w	r3, r7, #8
 800600e:	4618      	mov	r0, r3
 8006010:	f7fe f8dd 	bl	80041ce <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8006014:	687b      	ldr	r3, [r7, #4]
	}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	607a      	str	r2, [r7, #4]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4618      	mov	r0, r3
 8006032:	f000 f9b6 	bl	80063a2 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 8006040:	b590      	push	{r4, r7, lr}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 800604c:	68fc      	ldr	r4, [r7, #12]
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f99c 	bl	800638c <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8006054:	4603      	mov	r3, r0
 8006056:	461a      	mov	r2, r3
 8006058:	68b9      	ldr	r1, [r7, #8]
 800605a:	4620      	mov	r0, r4
 800605c:	f7ff ffdf 	bl	800601e <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	bd90      	pop	{r4, r7, pc}

0800606a <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 800606a:	b590      	push	{r4, r7, lr}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4618      	mov	r0, r3
 8006076:	f000 f9aa 	bl	80063ce <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800607a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00b      	beq.n	800609c <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f9af 	bl	80063e8 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 800608a:	4603      	mov	r3, r0
 800608c:	681c      	ldr	r4, [r3, #0]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f9b7 	bl	8006402 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8006094:	4603      	mov	r3, r0
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4618      	mov	r0, r3
 800609a:	47a0      	blx	r4
	__ptr = pointer();
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]
      }
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd90      	pop	{r4, r7, pc}

080060ac <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
	return get();
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 f9ae 	bl	8006418 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80060bc:	4603      	mov	r3, r0
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	4611      	mov	r1, r2
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 f9b7 	bl	800644a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f103 0208 	add.w	r2, r3, #8
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	3308      	adds	r3, #8
 80060e6:	4619      	mov	r1, r3
 80060e8:	4610      	mov	r0, r2
 80060ea:	f000 f9e0 	bl	80064ae <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f103 020c 	add.w	r2, r3, #12
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	330c      	adds	r3, #12
 80060f8:	4619      	mov	r1, r3
 80060fa:	4610      	mov	r0, r2
 80060fc:	f000 fa01 	bl	8006502 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4618      	mov	r0, r3
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8006156:	68b9      	ldr	r1, [r7, #8]
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 f9f1 	bl	8006540 <_ZSt8_DestroyIPmEvT_S1_>
    }
 800615e:	bf00      	nop
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <_ZNSaImEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f9f3 	bl	800655a <_ZN9__gnu_cxx13new_allocatorImEC1Ev>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	605a      	str	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	609a      	str	r2, [r3, #8]
	{ }
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4618      	mov	r0, r3
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <_ZN9__gnu_cxx13new_allocatorImED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
	if (__p)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 f9cb 	bl	8006570 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 80061f8:	b5b0      	push	{r4, r5, r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	429a      	cmp	r2, r3
 800620c:	d011      	beq.n	8006232 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800620e:	687c      	ldr	r4, [r7, #4]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685d      	ldr	r5, [r3, #4]
 8006214:	6838      	ldr	r0, [r7, #0]
 8006216:	f000 f9ba 	bl	800658e <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800621a:	4603      	mov	r3, r0
 800621c:	461a      	mov	r2, r3
 800621e:	4629      	mov	r1, r5
 8006220:	4620      	mov	r0, r4
 8006222:	f000 f9bf 	bl	80065a4 <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	1d1a      	adds	r2, r3, #4
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8006230:	e00c      	b.n	800624c <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f9c9 	bl	80065ca <_ZNSt6vectorImSaImEE3endEv>
 8006238:	4604      	mov	r4, r0
 800623a:	6838      	ldr	r0, [r7, #0]
 800623c:	f000 f9a7 	bl	800658e <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8006240:	4603      	mov	r3, r0
 8006242:	461a      	mov	r2, r3
 8006244:	4621      	mov	r1, r4
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f9e6 	bl	8006618 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>
      }
 800624c:	bf00      	nop
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bdb0      	pop	{r4, r5, r7, pc}

08006254 <_ZNKSt6vectorImSaImEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff fe6f 	bl	8005f42 <_ZNKSt6vectorImSaImEE4sizeEv>
 8006264:	4602      	mov	r2, r0
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	4293      	cmp	r3, r2
 800626a:	bf2c      	ite	cs
 800626c:	2301      	movcs	r3, #1
 800626e:	2300      	movcc	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d008      	beq.n	8006288 <_ZNKSt6vectorImSaImEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7ff fe63 	bl	8005f42 <_ZNKSt6vectorImSaImEE4sizeEv>
 800627c:	4603      	mov	r3, r0
 800627e:	461a      	mov	r2, r3
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	4803      	ldr	r0, [pc, #12]	; (8006290 <_ZNKSt6vectorImSaImEE14_M_range_checkEj+0x3c>)
 8006284:	f022 fe18 	bl	8028eb8 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8006288:	bf00      	nop
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	0802e128 	.word	0x0802e128

08006294 <_ZNSt6vectorImSaImEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
      }
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
	...

080062cc <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80062cc:	b590      	push	{r4, r7, lr}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fa ff29 	bl	8001130 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fa55 	bl	8006790 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00f      	beq.n	800630c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80062ec:	687c      	ldr	r4, [r7, #4]
 80062ee:	463b      	mov	r3, r7
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fa5d 	bl	80067b0 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 80062f6:	4603      	mov	r3, r0
 80062f8:	4619      	mov	r1, r3
 80062fa:	4620      	mov	r0, r4
 80062fc:	f000 fa63 	bl	80067c6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a05      	ldr	r2, [pc, #20]	; (8006318 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 8006304:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a04      	ldr	r2, [pc, #16]	; (800631c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 800630a:	609a      	str	r2, [r3, #8]
      }
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4618      	mov	r0, r3
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	bd90      	pop	{r4, r7, pc}
 8006316:	bf00      	nop
 8006318:	080067eb 	.word	0x080067eb
 800631c:	0800682d 	.word	0x0800682d

08006320 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4618      	mov	r0, r3
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
	...

08006338 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006338:	b590      	push	{r4, r7, lr}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4618      	mov	r0, r3
 8006346:	f7fa fef3 	bl	8001130 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800634a:	463b      	mov	r3, r7
 800634c:	4618      	mov	r0, r3
 800634e:	f000 fa8c 	bl	800686a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00f      	beq.n	8006378 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8006358:	687c      	ldr	r4, [r7, #4]
 800635a:	463b      	mov	r3, r7
 800635c:	4618      	mov	r0, r3
 800635e:	f000 fa8f 	bl	8006880 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8006362:	4603      	mov	r3, r0
 8006364:	4619      	mov	r1, r3
 8006366:	4620      	mov	r0, r4
 8006368:	f000 fa95 	bl	8006896 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a05      	ldr	r2, [pc, #20]	; (8006384 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8006370:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a04      	ldr	r2, [pc, #16]	; (8006388 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 8006376:	609a      	str	r2, [r3, #8]
      }
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4618      	mov	r0, r3
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	bd90      	pop	{r4, r7, pc}
 8006382:	bf00      	nop
 8006384:	080068bb 	.word	0x080068bb
 8006388:	080068fd 	.word	0x080068fd

0800638c <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 80063a2:	b590      	push	{r4, r7, lr}
 80063a4:	b085      	sub	sp, #20
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 80063ae:	68fc      	ldr	r4, [r7, #12]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fac2 	bl	800693a <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80063b6:	4602      	mov	r2, r0
 80063b8:	f107 0308 	add.w	r3, r7, #8
 80063bc:	4619      	mov	r1, r3
 80063be:	4620      	mov	r0, r4
 80063c0:	f000 fac6 	bl	8006950 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd90      	pop	{r4, r7, pc}

080063ce <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b082      	sub	sp, #8
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 fad2 	bl	8006982 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80063de:	4603      	mov	r3, r0
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fad2 	bl	800699c <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 80063f8:	4603      	mov	r3, r0
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fac7 	bl	80069b6 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 8006428:	4603      	mov	r3, r0
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff ffed 	bl	8006434 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800645a:	4602      	mov	r2, r0
 800645c:	f107 0308 	add.w	r3, r7, #8
 8006460:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006464:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8006468:	6838      	ldr	r0, [r7, #0]
 800646a:	f7ff ffe3 	bl	8006434 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800646e:	4602      	mov	r2, r0
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006476:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800647a:	f107 0308 	add.w	r3, r7, #8
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff ffd8 	bl	8006434 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006484:	4602      	mov	r2, r0
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	e892 0003 	ldmia.w	r2, {r0, r1}
 800648c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006490:	bf00      	nop
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4618      	mov	r0, r3
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b084      	sub	sp, #16
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff ffed 	bl	8006498 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80064be:	4603      	mov	r3, r0
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80064c4:	6838      	ldr	r0, [r7, #0]
 80064c6:	f7ff ffe7 	bl	8006498 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80064ca:	4603      	mov	r3, r0
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80064d2:	f107 030c 	add.w	r3, r7, #12
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff ffde 	bl	8006498 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80064dc:	4603      	mov	r3, r0
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	601a      	str	r2, [r3, #0]
    }
 80064e4:	bf00      	nop
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4618      	mov	r0, r3
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff ffed 	bl	80064ec <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8006512:	4603      	mov	r3, r0
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006518:	6838      	ldr	r0, [r7, #0]
 800651a:	f7ff ffe7 	bl	80064ec <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800651e:	4603      	mov	r3, r0
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8006526:	f107 030c 	add.w	r3, r7, #12
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff ffde 	bl	80064ec <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8006530:	4603      	mov	r3, r0
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	601a      	str	r2, [r3, #0]
    }
 8006538:	bf00      	nop
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <_ZSt8_DestroyIPmEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fa53 	bl	80069f8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 8006552:	bf00      	nop
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <_ZN9__gnu_cxx13new_allocatorImEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4618      	mov	r0, r3
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	68b9      	ldr	r1, [r7, #8]
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fa44 	bl	8006a0e <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>
 8006586:	bf00      	nop
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff ffec 	bl	800658e <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80065b6:	4603      	mov	r3, r0
 80065b8:	461a      	mov	r2, r3
 80065ba:	68b9      	ldr	r1, [r7, #8]
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 fa36 	bl	8006a2e <_ZN9__gnu_cxx13new_allocatorImE9constructImJmEEEvPT_DpOT0_>
	}
 80065c2:	bf00      	nop
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <_ZNSt6vectorImSaImEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	1d1a      	adds	r2, r3, #4
 80065d6:	f107 030c 	add.w	r3, r7, #12
 80065da:	4611      	mov	r1, r2
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 fa3c 	bl	8006a5a <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <_ZNSt6vectorImSaImEE15_S_use_relocateEv>:
      _S_use_relocate()
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 f805 	bl	8006602 <_ZNSt6vectorImSaImEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80065f8:	4603      	mov	r3, r0
      }
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <_ZNSt6vectorImSaImEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800660a:	2301      	movs	r3, #1
      }
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8006618:	b5b0      	push	{r4, r5, r7, lr}
 800661a:	b08c      	sub	sp, #48	; 0x30
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006624:	4a59      	ldr	r2, [pc, #356]	; (800678c <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x174>)
 8006626:	2101      	movs	r1, #1
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 fa26 	bl	8006a7a <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
 800662e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 fa63 	bl	8006b08 <_ZNSt6vectorImSaImEE5beginEv>
 8006642:	4603      	mov	r3, r0
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	f107 0214 	add.w	r2, r7, #20
 800664a:	f107 0308 	add.w	r3, r7, #8
 800664e:	4611      	mov	r1, r2
 8006650:	4618      	mov	r0, r3
 8006652:	f000 fa69 	bl	8006b28 <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8006656:	4603      	mov	r3, r0
 8006658:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fa77 	bl	8006b52 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 8006664:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800666a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	18d5      	adds	r5, r2, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff ff8a 	bl	800658e <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800667a:	4603      	mov	r3, r0
 800667c:	461a      	mov	r2, r3
 800667e:	4629      	mov	r1, r5
 8006680:	4620      	mov	r0, r4
 8006682:	f7ff ff8f 	bl	80065a4 <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8006686:	2300      	movs	r3, #0
 8006688:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800668a:	f7ff ffaf 	bl	80065ec <_ZNSt6vectorImSaImEE15_S_use_relocateEv>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d027      	beq.n	80066e4 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006694:	f107 0308 	add.w	r3, r7, #8
 8006698:	4618      	mov	r0, r3
 800669a:	f000 fa82 	bl	8006ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 800669e:	4603      	mov	r3, r0
 80066a0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff fd45 	bl	8006134 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80066aa:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	4621      	mov	r1, r4
 80066b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066b2:	f000 fa62 	bl	8006b7a <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 80066b6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80066b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ba:	3304      	adds	r3, #4
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80066be:	f107 0308 	add.w	r3, r7, #8
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fa6d 	bl	8006ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 80066c8:	4603      	mov	r3, r0
 80066ca:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff fd30 	bl	8006134 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80066d4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80066d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d8:	6a39      	ldr	r1, [r7, #32]
 80066da:	4620      	mov	r0, r4
 80066dc:	f000 fa4d 	bl	8006b7a <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 80066e0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80066e2:	e026      	b.n	8006732 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80066e4:	f107 0308 	add.w	r3, r7, #8
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fa5a 	bl	8006ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 80066ee:	4603      	mov	r3, r0
 80066f0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7ff fd1d 	bl	8006134 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80066fa:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	4621      	mov	r1, r4
 8006700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006702:	f000 fa59 	bl	8006bb8 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8006706:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670a:	3304      	adds	r3, #4
 800670c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800670e:	f107 0308 	add.w	r3, r7, #8
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fa45 	bl	8006ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006718:	4603      	mov	r3, r0
 800671a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff fd08 	bl	8006134 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8006724:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8006726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006728:	6a39      	ldr	r1, [r7, #32]
 800672a:	4620      	mov	r0, r4
 800672c:	f000 fa44 	bl	8006bb8 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8006730:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8006732:	f7ff ff5b 	bl	80065ec <_ZNSt6vectorImSaImEE15_S_use_relocateEv>
 8006736:	4603      	mov	r3, r0
 8006738:	f083 0301 	eor.w	r3, r3, #1
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d009      	beq.n	8006756 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4618      	mov	r0, r3
 8006746:	f7ff fcf5 	bl	8006134 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 800674a:	4603      	mov	r3, r0
 800674c:	461a      	mov	r2, r3
 800674e:	6a39      	ldr	r1, [r7, #32]
 8006750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006752:	f7ff fcfa 	bl	800614a <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8006756:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8006762:	461a      	mov	r2, r3
 8006764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006766:	f7ff fd29 	bl	80061bc <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      this->_M_impl._M_start = __new_start;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006774:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	441a      	add	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	609a      	str	r2, [r3, #8]
    }
 8006782:	bf00      	nop
 8006784:	3730      	adds	r7, #48	; 0x30
 8006786:	46bd      	mov	sp, r7
 8006788:	bdb0      	pop	{r4, r5, r7, pc}
 800678a:	bf00      	nop
 800678c:	0802e10c 	.word	0x0802e10c

08006790 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	bf14      	ite	ne
 800679e:	2301      	movne	r3, #1
 80067a0:	2300      	moveq	r3, #0
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80067c6:	b590      	push	{r4, r7, lr}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80067d0:	6838      	ldr	r0, [r7, #0]
 80067d2:	f7ff ffed 	bl	80067b0 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 80067d6:	4603      	mov	r3, r0
 80067d8:	4622      	mov	r2, r4
 80067da:	4619      	mov	r1, r3
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fa04 	bl	8006bea <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd90      	pop	{r4, r7, pc}

080067ea <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80067ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ec:	b085      	sub	sp, #20
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	607a      	str	r2, [r7, #4]
 80067f6:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 fa0f 	bl	8006c1c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 80067fe:	4604      	mov	r4, r0
 8006800:	68b8      	ldr	r0, [r7, #8]
 8006802:	f7ff fc81 	bl	8006108 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006806:	4605      	mov	r5, r0
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7ff fc7d 	bl	8006108 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800680e:	4606      	mov	r6, r0
 8006810:	6838      	ldr	r0, [r7, #0]
 8006812:	f7ff fc84 	bl	800611e <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006816:	4603      	mov	r3, r0
 8006818:	4632      	mov	r2, r6
 800681a:	4629      	mov	r1, r5
 800681c:	4620      	mov	r0, r4
 800681e:	f000 fa0e 	bl	8006c3e <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8006822:	4603      	mov	r3, r0
      }
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800682c <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800682c:	b590      	push	{r4, r7, lr}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	4613      	mov	r3, r2
 8006838:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d109      	bne.n	8006854 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 fa21 	bl	8006c88 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8006846:	4604      	mov	r4, r0
 8006848:	68b8      	ldr	r0, [r7, #8]
 800684a:	f000 f9e7 	bl	8006c1c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800684e:	4603      	mov	r3, r0
 8006850:	6023      	str	r3, [r4, #0]
	    break;
 8006852:	e005      	b.n	8006860 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8006854:	79fb      	ldrb	r3, [r7, #7]
 8006856:	461a      	mov	r2, r3
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 fa20 	bl	8006ca0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8006860:	2300      	movs	r3, #0
      }
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	bd90      	pop	{r4, r7, pc}

0800686a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
	  { return true; }
 8006872:	2301      	movs	r3, #1
 8006874:	4618      	mov	r0, r3
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4618      	mov	r0, r3
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8006896:	b590      	push	{r4, r7, lr}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80068a0:	6838      	ldr	r0, [r7, #0]
 80068a2:	f7ff ffed 	bl	8006880 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 80068a6:	4603      	mov	r3, r0
 80068a8:	4622      	mov	r2, r4
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fa22 	bl	8006cf6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd90      	pop	{r4, r7, pc}

080068ba <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80068ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	607a      	str	r2, [r7, #4]
 80068c6:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 fa2d 	bl	8006d28 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 80068ce:	4604      	mov	r4, r0
 80068d0:	68b8      	ldr	r0, [r7, #8]
 80068d2:	f7ff fc19 	bl	8006108 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80068d6:	4605      	mov	r5, r0
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7ff fc15 	bl	8006108 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80068de:	4606      	mov	r6, r0
 80068e0:	6838      	ldr	r0, [r7, #0]
 80068e2:	f7ff fc1c 	bl	800611e <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80068e6:	4603      	mov	r3, r0
 80068e8:	4632      	mov	r2, r6
 80068ea:	4629      	mov	r1, r5
 80068ec:	4620      	mov	r0, r4
 80068ee:	f000 fa2c 	bl	8006d4a <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 80068f2:	4603      	mov	r3, r0
      }
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068fc <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80068fc:	b590      	push	{r4, r7, lr}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	4613      	mov	r3, r2
 8006908:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800690a:	79fb      	ldrb	r3, [r7, #7]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d109      	bne.n	8006924 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 fa3f 	bl	8006d94 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8006916:	4604      	mov	r4, r0
 8006918:	68b8      	ldr	r0, [r7, #8]
 800691a:	f000 fa05 	bl	8006d28 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800691e:	4603      	mov	r3, r0
 8006920:	6023      	str	r3, [r4, #0]
	    break;
 8006922:	e005      	b.n	8006930 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8006924:	79fb      	ldrb	r3, [r7, #7]
 8006926:	461a      	mov	r2, r3
 8006928:	68b9      	ldr	r1, [r7, #8]
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 fa3e 	bl	8006dac <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8006930:	2300      	movs	r3, #0
      }
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	bd90      	pop	{r4, r7, pc}

0800693a <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 8006950:	b5b0      	push	{r4, r5, r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800695c:	68fc      	ldr	r4, [r7, #12]
 800695e:	68b8      	ldr	r0, [r7, #8]
 8006960:	f000 fa4f 	bl	8006e02 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8006964:	4605      	mov	r5, r0
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff ffe7 	bl	800693a <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800696c:	4603      	mov	r3, r0
 800696e:	461a      	mov	r2, r3
 8006970:	4629      	mov	r1, r5
 8006972:	4620      	mov	r0, r4
 8006974:	f000 fa50 	bl	8006e18 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bdb0      	pop	{r4, r5, r7, pc}

08006982 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8006982:	b580      	push	{r7, lr}
 8006984:	b082      	sub	sp, #8
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fa61 	bl	8006e54 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8006992:	4603      	mov	r3, r0
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fa60 	bl	8006e6c <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80069ac:	4603      	mov	r3, r0
 80069ae:	4618      	mov	r0, r3
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fa60 	bl	8006e86 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80069c6:	4603      	mov	r3, r0
 80069c8:	4618      	mov	r0, r3
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d201      	bcs.n	80069ea <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	e000      	b.n	80069ec <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80069ea:	687b      	ldr	r3, [r7, #4]
    }
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b084      	sub	sp, #16
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4619      	mov	r1, r3
 8006a20:	68b8      	ldr	r0, [r7, #8]
 8006a22:	f022 fa29 	bl	8028e78 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8006a26:	bf00      	nop
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <_ZN9__gnu_cxx13new_allocatorImE9constructImJmEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8006a2e:	b590      	push	{r4, r7, lr}
 8006a30:	b085      	sub	sp, #20
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7ff fda7 	bl	800658e <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8006a40:	4603      	mov	r3, r0
 8006a42:	681c      	ldr	r4, [r3, #0]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	4619      	mov	r1, r3
 8006a48:	2004      	movs	r0, #4
 8006a4a:	f7fa fb4f 	bl	80010ec <_ZnwjPv>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	601c      	str	r4, [r3, #0]
 8006a52:	bf00      	nop
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd90      	pop	{r4, r7, pc}

08006a5a <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8006a7a:	b590      	push	{r4, r7, lr}
 8006a7c:	b087      	sub	sp, #28
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 fa09 	bl	8006e9e <_ZNKSt6vectorImSaImEE8max_sizeEv>
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7ff fa57 	bl	8005f42 <_ZNKSt6vectorImSaImEE4sizeEv>
 8006a94:	4603      	mov	r3, r0
 8006a96:	1ae2      	subs	r2, r4, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	bf34      	ite	cc
 8006a9e:	2301      	movcc	r3, #1
 8006aa0:	2300      	movcs	r3, #0
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f022 fa02 	bl	8028eb2 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f7ff fa47 	bl	8005f42 <_ZNKSt6vectorImSaImEE4sizeEv>
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f7ff fa43 	bl	8005f42 <_ZNKSt6vectorImSaImEE4sizeEv>
 8006abc:	4603      	mov	r3, r0
 8006abe:	613b      	str	r3, [r7, #16]
 8006ac0:	f107 0208 	add.w	r2, r7, #8
 8006ac4:	f107 0310 	add.w	r3, r7, #16
 8006ac8:	4611      	mov	r1, r2
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff ff80 	bl	80069d0 <_ZSt3maxIjERKT_S2_S2_>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4423      	add	r3, r4
 8006ad6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f7ff fa32 	bl	8005f42 <_ZNKSt6vectorImSaImEE4sizeEv>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d306      	bcc.n	8006af4 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x7a>
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 f9d9 	bl	8006e9e <_ZNKSt6vectorImSaImEE8max_sizeEv>
 8006aec:	4602      	mov	r2, r0
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d904      	bls.n	8006afe <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x84>
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 f9d2 	bl	8006e9e <_ZNKSt6vectorImSaImEE8max_sizeEv>
 8006afa:	4603      	mov	r3, r0
 8006afc:	e000      	b.n	8006b00 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x86>
 8006afe:	697b      	ldr	r3, [r7, #20]
      }
 8006b00:	4618      	mov	r0, r3
 8006b02:	371c      	adds	r7, #28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd90      	pop	{r4, r7, pc}

08006b08 <_ZNSt6vectorImSaImEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	f107 030c 	add.w	r3, r7, #12
 8006b16:	4611      	mov	r1, r2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff ff9e 	bl	8006a5a <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006b28:	b590      	push	{r4, r7, lr}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f835 	bl	8006ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	681c      	ldr	r4, [r3, #0]
 8006b3c:	6838      	ldr	r0, [r7, #0]
 8006b3e:	f000 f830 	bl	8006ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006b42:	4603      	mov	r3, r0
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	1ae3      	subs	r3, r4, r3
 8006b48:	109b      	asrs	r3, r3, #2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd90      	pop	{r4, r7, pc}

08006b52 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d006      	beq.n	8006b70 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x1e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 f9aa 	bl	8006ec0 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	e000      	b.n	8006b72 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x20>
 8006b70:	2300      	movs	r3, #0
      }
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8006b7a:	b590      	push	{r4, r7, lr}
 8006b7c:	b087      	sub	sp, #28
 8006b7e:	af02      	add	r7, sp, #8
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	607a      	str	r2, [r7, #4]
 8006b86:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8006b88:	f88d 4000 	strb.w	r4, [sp]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	68b9      	ldr	r1, [r7, #8]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 f9a3 	bl	8006ede <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>
 8006b98:	4603      	mov	r3, r0
      }
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd90      	pop	{r4, r7, pc}

08006ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8006bb8:	b590      	push	{r4, r7, lr}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 f99b 	bl	8006f02 <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>
 8006bcc:	4604      	mov	r4, r0
 8006bce:	68b8      	ldr	r0, [r7, #8]
 8006bd0:	f000 f997 	bl	8006f02 <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>
 8006bd4:	4601      	mov	r1, r0
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 f9a0 	bl	8006f20 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_mET0_T_S4_S3_RSaIT1_E>
 8006be0:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd90      	pop	{r4, r7, pc}

08006bea <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8006bea:	b590      	push	{r4, r7, lr}
 8006bec:	b085      	sub	sp, #20
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	60f8      	str	r0, [r7, #12]
 8006bf2:	60b9      	str	r1, [r7, #8]
 8006bf4:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8006bf6:	68b8      	ldr	r0, [r7, #8]
 8006bf8:	f7ff fdda 	bl	80067b0 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	681c      	ldr	r4, [r3, #0]
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f7fa fa7f 	bl	8001104 <_ZNSt9_Any_data9_M_accessEv>
 8006c06:	4603      	mov	r3, r0
 8006c08:	4619      	mov	r1, r3
 8006c0a:	2004      	movs	r0, #4
 8006c0c:	f7fa fa6e 	bl	80010ec <_ZnwjPv>
 8006c10:	4603      	mov	r3, r0
 8006c12:	601c      	str	r4, [r3, #0]
 8006c14:	bf00      	nop
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd90      	pop	{r4, r7, pc}

08006c1c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f98c 	bl	8006f42 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8006c2a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 f994 	bl	8006f5a <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8006c32:	4603      	mov	r3, r0
 8006c34:	bf00      	nop
	}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8006c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 f98e 	bl	8006f70 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006c54:	4604      	mov	r4, r0
 8006c56:	68b8      	ldr	r0, [r7, #8]
 8006c58:	f7ff fa56 	bl	8006108 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7ff fa52 	bl	8006108 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006c64:	4606      	mov	r6, r0
 8006c66:	6838      	ldr	r0, [r7, #0]
 8006c68:	f7ff fa59 	bl	800611e <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	4633      	mov	r3, r6
 8006c72:	462a      	mov	r2, r5
 8006c74:	4621      	mov	r1, r4
 8006c76:	4640      	mov	r0, r8
 8006c78:	f000 f985 	bl	8006f86 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 8006c7c:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006c88 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7fa fa37 	bl	8001104 <_ZNSt9_Any_data9_M_accessEv>
 8006c96:	4603      	mov	r3, r0
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8006ca0:	b5b0      	push	{r4, r5, r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8006cae:	79fb      	ldrb	r3, [r7, #7]
 8006cb0:	2b03      	cmp	r3, #3
 8006cb2:	d016      	beq.n	8006ce2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8006cb4:	2b03      	cmp	r3, #3
 8006cb6:	dc19      	bgt.n	8006cec <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d002      	beq.n	8006cc2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d00a      	beq.n	8006cd6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8006cc0:	e014      	b.n	8006cec <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f7ff ffe0 	bl	8006c88 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8006cc8:	4604      	mov	r4, r0
 8006cca:	68b8      	ldr	r0, [r7, #8]
 8006ccc:	f7ff ffa6 	bl	8006c1c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	6023      	str	r3, [r4, #0]
	      break;
 8006cd4:	e00a      	b.n	8006cec <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8006cd6:	462a      	mov	r2, r5
 8006cd8:	68b9      	ldr	r1, [r7, #8]
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 f977 	bl	8006fce <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8006ce0:	e004      	b.n	8006cec <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f98b 	bl	8007000 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8006cea:	bf00      	nop
	  return false;
 8006cec:	2300      	movs	r3, #0
	}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bdb0      	pop	{r4, r5, r7, pc}

08006cf6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8006cf6:	b590      	push	{r4, r7, lr}
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8006d02:	68b8      	ldr	r0, [r7, #8]
 8006d04:	f7ff fdbc 	bl	8006880 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8006d08:	4604      	mov	r4, r0
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7fa f9fa 	bl	8001104 <_ZNSt9_Any_data9_M_accessEv>
 8006d10:	4603      	mov	r3, r0
 8006d12:	4619      	mov	r1, r3
 8006d14:	2004      	movs	r0, #4
 8006d16:	f7fa f9e9 	bl	80010ec <_ZnwjPv>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	bf00      	nop
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd90      	pop	{r4, r7, pc}

08006d28 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f971 	bl	8007018 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8006d36:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f979 	bl	8007030 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	bf00      	nop
	}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8006d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 f973 	bl	8007046 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8006d60:	4604      	mov	r4, r0
 8006d62:	68b8      	ldr	r0, [r7, #8]
 8006d64:	f7ff f9d0 	bl	8006108 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006d68:	4605      	mov	r5, r0
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff f9cc 	bl	8006108 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006d70:	4606      	mov	r6, r0
 8006d72:	6838      	ldr	r0, [r7, #0]
 8006d74:	f7ff f9d3 	bl	800611e <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	4633      	mov	r3, r6
 8006d7e:	462a      	mov	r2, r5
 8006d80:	4621      	mov	r1, r4
 8006d82:	4640      	mov	r0, r8
 8006d84:	f000 f96a 	bl	800705c <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 8006d88:	4603      	mov	r3, r0
    }
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d94 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7fa f9b1 	bl	8001104 <_ZNSt9_Any_data9_M_accessEv>
 8006da2:	4603      	mov	r3, r0
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8006dac:	b5b0      	push	{r4, r5, r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	4613      	mov	r3, r2
 8006db8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8006dba:	79fb      	ldrb	r3, [r7, #7]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d016      	beq.n	8006dee <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	dc19      	bgt.n	8006df8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d002      	beq.n	8006dce <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d00a      	beq.n	8006de2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8006dcc:	e014      	b.n	8006df8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f7ff ffe0 	bl	8006d94 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	68b8      	ldr	r0, [r7, #8]
 8006dd8:	f7ff ffa6 	bl	8006d28 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	6023      	str	r3, [r4, #0]
	      break;
 8006de0:	e00a      	b.n	8006df8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8006de2:	462a      	mov	r2, r5
 8006de4:	68b9      	ldr	r1, [r7, #8]
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f95c 	bl	80070a4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8006dec:	e004      	b.n	8006df8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8006dee:	4621      	mov	r1, r4
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 f970 	bl	80070d6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8006df6:	bf00      	nop
	  return false;
 8006df8:	2300      	movs	r3, #0
	}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bdb0      	pop	{r4, r5, r7, pc}

08006e02 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8006e18:	b590      	push	{r4, r7, lr}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8006e24:	68fc      	ldr	r4, [r7, #12]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7ff fd87 	bl	800693a <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4620      	mov	r0, r4
 8006e32:	f000 f95c 	bl	80070ee <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	1d1c      	adds	r4, r3, #4
 8006e3a:	68b8      	ldr	r0, [r7, #8]
 8006e3c:	f7ff ffe1 	bl	8006e02 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8006e40:	4603      	mov	r3, r0
 8006e42:	4619      	mov	r1, r3
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 f965 	bl	8007114 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd90      	pop	{r4, r7, pc}

08006e54 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f96a 	bl	8007136 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 8006e62:	4603      	mov	r3, r0
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 f96b 	bl	8007152 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f96b 	bl	800716a <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 8006e94:	4603      	mov	r3, r0
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <_ZNKSt6vectorImSaImEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b082      	sub	sp, #8
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 f99a 	bl	80071e2 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 f97c 	bl	80071ae <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006eca:	2200      	movs	r2, #0
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f992 	bl	80071f8 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	60b9      	str	r1, [r7, #8]
 8006ee8:	607a      	str	r2, [r7, #4]
 8006eea:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	68b9      	ldr	r1, [r7, #8]
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 f99e 	bl	8007234 <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8006ef8:	4603      	mov	r3, r0
      }
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8006f0a:	f107 030c 	add.w	r3, r7, #12
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 f9ac 	bl	800726e <_ZNSt13move_iteratorIPmEC1ES0_>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_mET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	68b9      	ldr	r1, [r7, #8]
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 f9ad 	bl	8007292 <_ZSt18uninitialized_copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7fa f8e5 	bl	800111a <_ZNKSt9_Any_data9_M_accessEv>
 8006f50:	4603      	mov	r3, r0
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006f5a:	b480      	push	{r7}
 8006f5c:	b083      	sub	sp, #12
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8006f86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f88:	b085      	sub	sp, #20
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	7338      	strb	r0, [r7, #12]
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	607a      	str	r2, [r7, #4]
 8006f92:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8006f94:	68b8      	ldr	r0, [r7, #8]
 8006f96:	f7ff ffeb 	bl	8006f70 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	681c      	ldr	r4, [r3, #0]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff f8b2 	bl	8006108 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	681d      	ldr	r5, [r3, #0]
 8006fa8:	6838      	ldr	r0, [r7, #0]
 8006faa:	f7ff f8ad 	bl	8006108 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	681e      	ldr	r6, [r3, #0]
 8006fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fb4:	f7ff f8b3 	bl	800611e <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	4631      	mov	r1, r6
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	47a0      	blx	r4
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fce <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8006fce:	b590      	push	{r4, r7, lr}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8006fda:	68b8      	ldr	r0, [r7, #8]
 8006fdc:	f7ff ffb1 	bl	8006f42 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	681c      	ldr	r4, [r3, #0]
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f7fa f88d 	bl	8001104 <_ZNSt9_Any_data9_M_accessEv>
 8006fea:	4603      	mov	r3, r0
 8006fec:	4619      	mov	r1, r3
 8006fee:	2004      	movs	r0, #4
 8006ff0:	f7fa f87c 	bl	80010ec <_ZnwjPv>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	601c      	str	r4, [r3, #0]
	}
 8006ff8:	bf00      	nop
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd90      	pop	{r4, r7, pc}

08007000 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f953 	bl	80072b6 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8007010:	bf00      	nop
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7fa f87a 	bl	800111a <_ZNKSt9_Any_data9_M_accessEv>
 8007026:	4603      	mov	r3, r0
 8007028:	4618      	mov	r0, r3
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4618      	mov	r0, r3
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007046:	b480      	push	{r7}
 8007048:	b083      	sub	sp, #12
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800705c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	7338      	strb	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800706a:	68b8      	ldr	r0, [r7, #8]
 800706c:	f7ff ffeb 	bl	8007046 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8007070:	4606      	mov	r6, r0
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff f848 	bl	8006108 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007078:	4603      	mov	r3, r0
 800707a:	681c      	ldr	r4, [r3, #0]
 800707c:	6838      	ldr	r0, [r7, #0]
 800707e:	f7ff f843 	bl	8006108 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007082:	4603      	mov	r3, r0
 8007084:	681d      	ldr	r5, [r3, #0]
 8007086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007088:	f7ff f849 	bl	800611e <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800708c:	4603      	mov	r3, r0
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	462a      	mov	r2, r5
 8007092:	4621      	mov	r1, r4
 8007094:	4630      	mov	r0, r6
 8007096:	f7fd fcb9 	bl	8004a0c <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 800709a:	4603      	mov	r3, r0
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070a4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80070a4:	b590      	push	{r4, r7, lr}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80070b0:	68b8      	ldr	r0, [r7, #8]
 80070b2:	f7ff ffb1 	bl	8007018 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 80070b6:	4604      	mov	r4, r0
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f7fa f823 	bl	8001104 <_ZNSt9_Any_data9_M_accessEv>
 80070be:	4603      	mov	r3, r0
 80070c0:	4619      	mov	r1, r3
 80070c2:	2004      	movs	r0, #4
 80070c4:	f7fa f812 	bl	80010ec <_ZnwjPv>
 80070c8:	4602      	mov	r2, r0
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	6013      	str	r3, [r2, #0]
	}
 80070ce:	bf00      	nop
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd90      	pop	{r4, r7, pc}

080070d6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f8f4 	bl	80072ce <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 80070ee:	b590      	push	{r4, r7, lr}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 80070f8:	687c      	ldr	r4, [r7, #4]
 80070fa:	6838      	ldr	r0, [r7, #0]
 80070fc:	f7ff fc1d 	bl	800693a <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007100:	4603      	mov	r3, r0
 8007102:	4619      	mov	r1, r3
 8007104:	4620      	mov	r0, r4
 8007106:	f000 f8ee 	bl	80072e6 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	bd90      	pop	{r4, r7, pc}

08007114 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800711e:	6838      	ldr	r0, [r7, #0]
 8007120:	f7ff fe6f 	bl	8006e02 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8007124:	4603      	mov	r3, r0
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007136:	b580      	push	{r7, lr}
 8007138:	b082      	sub	sp, #8
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3304      	adds	r3, #4
 8007142:	4618      	mov	r0, r3
 8007144:	f000 f8e0 	bl	8007308 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 8007148:	4603      	mov	r3, r0
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f8df 	bl	800731e <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 8007160:	4603      	mov	r3, r0
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800716a:	b580      	push	{r7, lr}
 800716c:	b082      	sub	sp, #8
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3304      	adds	r3, #4
 8007176:	4618      	mov	r0, r3
 8007178:	f000 f8de 	bl	8007338 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 800717c:	4603      	mov	r3, r0
 800717e:	4618      	mov	r0, r3
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	429a      	cmp	r2, r3
 800719a:	d201      	bcs.n	80071a0 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	e000      	b.n	80071a2 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80071a0:	687b      	ldr	r3, [r7, #4]
    }
 80071a2:	4618      	mov	r0, r3
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80071b6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80071ba:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f8c6 	bl	800734e <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>
 80071c2:	4603      	mov	r3, r0
 80071c4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80071c6:	f107 0208 	add.w	r2, r7, #8
 80071ca:	f107 030c 	add.w	r3, r7, #12
 80071ce:	4611      	mov	r1, r2
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff ffd8 	bl	8007186 <_ZSt3minIjERKT_S2_S2_>
 80071d6:	4603      	mov	r3, r0
 80071d8:	681b      	ldr	r3, [r3, #0]
      }
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4618      	mov	r0, r3
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 f8ae 	bl	8007366 <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>
 800720a:	4602      	mov	r2, r0
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	4293      	cmp	r3, r2
 8007210:	bf8c      	ite	hi
 8007212:	2301      	movhi	r3, #1
 8007214:	2300      	movls	r3, #0
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800721c:	f021 fe43 	bl	8028ea6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4618      	mov	r0, r3
 8007226:	f021 fe2b 	bl	8028e80 <_Znwj>
 800722a:	4603      	mov	r3, r0
      }
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8007234:	b5b0      	push	{r4, r5, r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 f89b 	bl	800737e <_ZSt12__niter_baseIPmET_S1_>
 8007248:	4604      	mov	r4, r0
 800724a:	68b8      	ldr	r0, [r7, #8]
 800724c:	f000 f897 	bl	800737e <_ZSt12__niter_baseIPmET_S1_>
 8007250:	4605      	mov	r5, r0
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f893 	bl	800737e <_ZSt12__niter_baseIPmET_S1_>
 8007258:	4602      	mov	r2, r0
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	4629      	mov	r1, r5
 800725e:	4620      	mov	r0, r4
 8007260:	f000 f898 	bl	8007394 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8007264:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bdb0      	pop	{r4, r5, r7, pc}

0800726e <_ZNSt13move_iteratorIPmEC1ES0_>:
      move_iterator(iterator_type __i)
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8007278:	463b      	mov	r3, r7
 800727a:	4618      	mov	r0, r3
 800727c:	f000 f8a8 	bl	80073d0 <_ZSt4moveIRPmEONSt16remove_referenceIT_E4typeEOS3_>
 8007280:	4603      	mov	r3, r0
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <_ZSt18uninitialized_copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007292:	b580      	push	{r7, lr}
 8007294:	b086      	sub	sp, #24
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	60b9      	str	r1, [r7, #8]
 800729c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800729e:	2301      	movs	r3, #1
 80072a0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 f89d 	bl	80073e6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPmES3_EET0_T_S6_S5_>
 80072ac:	4603      	mov	r3, r0
    }
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7f9 ff20 	bl	8001104 <_ZNSt9_Any_data9_M_accessEv>
 80072c4:	4603      	mov	r3, r0
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7f9 ff14 	bl	8001104 <_ZNSt9_Any_data9_M_accessEv>
 80072dc:	4603      	mov	r3, r0
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80072f0:	6838      	ldr	r0, [r7, #0]
 80072f2:	f7ff fb22 	bl	800693a <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80072f6:	4603      	mov	r3, r0
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4618      	mov	r0, r3
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4618      	mov	r0, r3
 800732a:	f000 f86c 	bl	8007406 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 800732e:	4603      	mov	r3, r0
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4618      	mov	r0, r3
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800734e:	b580      	push	{r7, lr}
 8007350:	b082      	sub	sp, #8
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f860 	bl	800741c <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>
 800735c:	4603      	mov	r3, r0
      }
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800736e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <_ZSt12__niter_baseIPmET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	109b      	asrs	r3, r3, #2
 80073aa:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	dd06      	ble.n	80073c0 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	461a      	mov	r2, r3
 80073b8:	68f9      	ldr	r1, [r7, #12]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f024 ff76 	bl	802c2ac <memmove>
      return __result + __count;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	4413      	add	r3, r2
    }
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <_ZSt4moveIRPmEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPmES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	68b9      	ldr	r1, [r7, #8]
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 f81c 	bl	8007434 <_ZSt4copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>
 80073fc:	4603      	mov	r3, r0
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff ff9e 	bl	8007366 <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>
 800742a:	4603      	mov	r3, r0
 800742c:	4618      	mov	r0, r3
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <_ZSt4copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8007434:	b590      	push	{r4, r7, lr}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 f80f 	bl	8007464 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007446:	4604      	mov	r4, r0
 8007448:	68b8      	ldr	r0, [r7, #8]
 800744a:	f000 f80b 	bl	8007464 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800744e:	4603      	mov	r3, r0
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	4619      	mov	r1, r3
 8007454:	4620      	mov	r0, r4
 8007456:	f000 f816 	bl	8007486 <_ZSt13__copy_move_aILb1EPmS0_ET1_T0_S2_S1_>
 800745a:	4603      	mov	r3, r0
    }
 800745c:	4618      	mov	r0, r3
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	bd90      	pop	{r4, r7, pc}

08007464 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800746c:	1d3b      	adds	r3, r7, #4
 800746e:	4618      	mov	r0, r3
 8007470:	f000 f82c 	bl	80074cc <_ZNKSt13move_iteratorIPmE4baseEv>
 8007474:	4603      	mov	r3, r0
 8007476:	4618      	mov	r0, r3
 8007478:	f000 f834 	bl	80074e4 <_ZSt12__miter_baseIPmET_S1_>
 800747c:	4603      	mov	r3, r0
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <_ZSt13__copy_move_aILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007486:	b5b0      	push	{r4, r5, r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	60f8      	str	r0, [r7, #12]
 800748e:	60b9      	str	r1, [r7, #8]
 8007490:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f7ff ff73 	bl	800737e <_ZSt12__niter_baseIPmET_S1_>
 8007498:	4604      	mov	r4, r0
 800749a:	68b8      	ldr	r0, [r7, #8]
 800749c:	f7ff ff6f 	bl	800737e <_ZSt12__niter_baseIPmET_S1_>
 80074a0:	4605      	mov	r5, r0
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7ff ff6a 	bl	800737e <_ZSt12__niter_baseIPmET_S1_>
 80074aa:	4603      	mov	r3, r0
 80074ac:	461a      	mov	r2, r3
 80074ae:	4629      	mov	r1, r5
 80074b0:	4620      	mov	r0, r4
 80074b2:	f000 f822 	bl	80074fa <_ZSt14__copy_move_a1ILb1EPmS0_ET1_T0_S2_S1_>
 80074b6:	4602      	mov	r2, r0
 80074b8:	1d3b      	adds	r3, r7, #4
 80074ba:	4611      	mov	r1, r2
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 f82c 	bl	800751a <_ZSt12__niter_wrapIPmET_RKS1_S1_>
 80074c2:	4603      	mov	r3, r0
    }
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bdb0      	pop	{r4, r5, r7, pc}

080074cc <_ZNKSt13move_iteratorIPmE4baseEv>:
      base() const
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4618      	mov	r0, r3
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <_ZSt12__miter_baseIPmET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
    { return __it; }
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <_ZSt14__copy_move_a1ILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	60b9      	str	r1, [r7, #8]
 8007504:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	68b9      	ldr	r1, [r7, #8]
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 f811 	bl	8007532 <_ZSt14__copy_move_a2ILb1EPmS0_ET1_T0_S2_S1_>
 8007510:	4603      	mov	r3, r0
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <_ZSt12__niter_wrapIPmET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <_ZSt14__copy_move_a2ILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	68b9      	ldr	r1, [r7, #8]
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 f805 	bl	8007552 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 8007548:	4603      	mov	r3, r0
    }
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007552:	b580      	push	{r7, lr}
 8007554:	b086      	sub	sp, #24
 8007556:	af00      	add	r7, sp, #0
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	109b      	asrs	r3, r3, #2
 8007566:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d006      	beq.n	800757c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	461a      	mov	r2, r3
 8007574:	68f9      	ldr	r1, [r7, #12]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f024 fe98 	bl	802c2ac <memmove>
	  return __result + _Num;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	4413      	add	r3, r2
	}
 8007584:	4618      	mov	r0, r3
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007592:	2300      	movs	r3, #0
 8007594:	607b      	str	r3, [r7, #4]
 8007596:	4b10      	ldr	r3, [pc, #64]	; (80075d8 <HAL_MspInit+0x4c>)
 8007598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759a:	4a0f      	ldr	r2, [pc, #60]	; (80075d8 <HAL_MspInit+0x4c>)
 800759c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075a0:	6453      	str	r3, [r2, #68]	; 0x44
 80075a2:	4b0d      	ldr	r3, [pc, #52]	; (80075d8 <HAL_MspInit+0x4c>)
 80075a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075aa:	607b      	str	r3, [r7, #4]
 80075ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80075ae:	2300      	movs	r3, #0
 80075b0:	603b      	str	r3, [r7, #0]
 80075b2:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <HAL_MspInit+0x4c>)
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	4a08      	ldr	r2, [pc, #32]	; (80075d8 <HAL_MspInit+0x4c>)
 80075b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075bc:	6413      	str	r3, [r2, #64]	; 0x40
 80075be:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <HAL_MspInit+0x4c>)
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075c6:	603b      	str	r3, [r7, #0]
 80075c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80075ca:	2007      	movs	r0, #7
 80075cc:	f000 fc68 	bl	8007ea0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	40023800 	.word	0x40023800

080075dc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a0b      	ldr	r2, [pc, #44]	; (8007618 <HAL_CRC_MspInit+0x3c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d10d      	bne.n	800760a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
 80075f2:	4b0a      	ldr	r3, [pc, #40]	; (800761c <HAL_CRC_MspInit+0x40>)
 80075f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f6:	4a09      	ldr	r2, [pc, #36]	; (800761c <HAL_CRC_MspInit+0x40>)
 80075f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80075fc:	6313      	str	r3, [r2, #48]	; 0x30
 80075fe:	4b07      	ldr	r3, [pc, #28]	; (800761c <HAL_CRC_MspInit+0x40>)
 8007600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800760a:	bf00      	nop
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	40023000 	.word	0x40023000
 800761c:	40023800 	.word	0x40023800

08007620 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08a      	sub	sp, #40	; 0x28
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007628:	f107 0314 	add.w	r3, r7, #20
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	605a      	str	r2, [r3, #4]
 8007632:	609a      	str	r2, [r3, #8]
 8007634:	60da      	str	r2, [r3, #12]
 8007636:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a48      	ldr	r2, [pc, #288]	; (8007760 <HAL_I2S_MspInit+0x140>)
 800763e:	4293      	cmp	r3, r2
 8007640:	f040 808a 	bne.w	8007758 <HAL_I2S_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007644:	2300      	movs	r3, #0
 8007646:	613b      	str	r3, [r7, #16]
 8007648:	4b46      	ldr	r3, [pc, #280]	; (8007764 <HAL_I2S_MspInit+0x144>)
 800764a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764c:	4a45      	ldr	r2, [pc, #276]	; (8007764 <HAL_I2S_MspInit+0x144>)
 800764e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007652:	6413      	str	r3, [r2, #64]	; 0x40
 8007654:	4b43      	ldr	r3, [pc, #268]	; (8007764 <HAL_I2S_MspInit+0x144>)
 8007656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800765c:	613b      	str	r3, [r7, #16]
 800765e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007660:	2300      	movs	r3, #0
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	4b3f      	ldr	r3, [pc, #252]	; (8007764 <HAL_I2S_MspInit+0x144>)
 8007666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007668:	4a3e      	ldr	r2, [pc, #248]	; (8007764 <HAL_I2S_MspInit+0x144>)
 800766a:	f043 0304 	orr.w	r3, r3, #4
 800766e:	6313      	str	r3, [r2, #48]	; 0x30
 8007670:	4b3c      	ldr	r3, [pc, #240]	; (8007764 <HAL_I2S_MspInit+0x144>)
 8007672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007674:	f003 0304 	and.w	r3, r3, #4
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800767c:	2300      	movs	r3, #0
 800767e:	60bb      	str	r3, [r7, #8]
 8007680:	4b38      	ldr	r3, [pc, #224]	; (8007764 <HAL_I2S_MspInit+0x144>)
 8007682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007684:	4a37      	ldr	r2, [pc, #220]	; (8007764 <HAL_I2S_MspInit+0x144>)
 8007686:	f043 0302 	orr.w	r3, r3, #2
 800768a:	6313      	str	r3, [r2, #48]	; 0x30
 800768c:	4b35      	ldr	r3, [pc, #212]	; (8007764 <HAL_I2S_MspInit+0x144>)
 800768e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	60bb      	str	r3, [r7, #8]
 8007696:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC1     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB4     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007698:	2302      	movs	r3, #2
 800769a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800769c:	2302      	movs	r3, #2
 800769e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076a0:	2300      	movs	r3, #0
 80076a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076a4:	2300      	movs	r3, #0
 80076a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80076a8:	2307      	movs	r3, #7
 80076aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076ac:	f107 0314 	add.w	r3, r7, #20
 80076b0:	4619      	mov	r1, r3
 80076b2:	482d      	ldr	r0, [pc, #180]	; (8007768 <HAL_I2S_MspInit+0x148>)
 80076b4:	f000 ffc2 	bl	800863c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80076b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076be:	2302      	movs	r3, #2
 80076c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076c6:	2300      	movs	r3, #0
 80076c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80076ca:	2305      	movs	r3, #5
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076ce:	f107 0314 	add.w	r3, r7, #20
 80076d2:	4619      	mov	r1, r3
 80076d4:	4825      	ldr	r0, [pc, #148]	; (800776c <HAL_I2S_MspInit+0x14c>)
 80076d6:	f000 ffb1 	bl	800863c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80076da:	2310      	movs	r3, #16
 80076dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076de:	2302      	movs	r3, #2
 80076e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076e6:	2300      	movs	r3, #0
 80076e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80076ea:	2307      	movs	r3, #7
 80076ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076ee:	f107 0314 	add.w	r3, r7, #20
 80076f2:	4619      	mov	r1, r3
 80076f4:	481d      	ldr	r0, [pc, #116]	; (800776c <HAL_I2S_MspInit+0x14c>)
 80076f6:	f000 ffa1 	bl	800863c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80076fa:	4b1d      	ldr	r3, [pc, #116]	; (8007770 <HAL_I2S_MspInit+0x150>)
 80076fc:	4a1d      	ldr	r2, [pc, #116]	; (8007774 <HAL_I2S_MspInit+0x154>)
 80076fe:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8007700:	4b1b      	ldr	r3, [pc, #108]	; (8007770 <HAL_I2S_MspInit+0x150>)
 8007702:	2200      	movs	r2, #0
 8007704:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007706:	4b1a      	ldr	r3, [pc, #104]	; (8007770 <HAL_I2S_MspInit+0x150>)
 8007708:	2200      	movs	r2, #0
 800770a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800770c:	4b18      	ldr	r3, [pc, #96]	; (8007770 <HAL_I2S_MspInit+0x150>)
 800770e:	2200      	movs	r2, #0
 8007710:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007712:	4b17      	ldr	r3, [pc, #92]	; (8007770 <HAL_I2S_MspInit+0x150>)
 8007714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007718:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800771a:	4b15      	ldr	r3, [pc, #84]	; (8007770 <HAL_I2S_MspInit+0x150>)
 800771c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007720:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007722:	4b13      	ldr	r3, [pc, #76]	; (8007770 <HAL_I2S_MspInit+0x150>)
 8007724:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007728:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800772a:	4b11      	ldr	r3, [pc, #68]	; (8007770 <HAL_I2S_MspInit+0x150>)
 800772c:	2200      	movs	r2, #0
 800772e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007730:	4b0f      	ldr	r3, [pc, #60]	; (8007770 <HAL_I2S_MspInit+0x150>)
 8007732:	2200      	movs	r2, #0
 8007734:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007736:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <HAL_I2S_MspInit+0x150>)
 8007738:	2200      	movs	r2, #0
 800773a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800773c:	480c      	ldr	r0, [pc, #48]	; (8007770 <HAL_I2S_MspInit+0x150>)
 800773e:	f000 fc0d 	bl	8007f5c <HAL_DMA_Init>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <HAL_I2S_MspInit+0x12c>
    {
      Error_Handler();
 8007748:	f7fe fb1e 	bl	8005d88 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a08      	ldr	r2, [pc, #32]	; (8007770 <HAL_I2S_MspInit+0x150>)
 8007750:	63da      	str	r2, [r3, #60]	; 0x3c
 8007752:	4a07      	ldr	r2, [pc, #28]	; (8007770 <HAL_I2S_MspInit+0x150>)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007758:	bf00      	nop
 800775a:	3728      	adds	r7, #40	; 0x28
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	40003800 	.word	0x40003800
 8007764:	40023800 	.word	0x40023800
 8007768:	40020800 	.word	0x40020800
 800776c:	40020400 	.word	0x40020400
 8007770:	20000374 	.word	0x20000374
 8007774:	40026058 	.word	0x40026058

08007778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08a      	sub	sp, #40	; 0x28
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007780:	f107 0314 	add.w	r3, r7, #20
 8007784:	2200      	movs	r2, #0
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	605a      	str	r2, [r3, #4]
 800778a:	609a      	str	r2, [r3, #8]
 800778c:	60da      	str	r2, [r3, #12]
 800778e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a31      	ldr	r2, [pc, #196]	; (800785c <HAL_UART_MspInit+0xe4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d15b      	bne.n	8007852 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800779a:	2300      	movs	r3, #0
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	4b30      	ldr	r3, [pc, #192]	; (8007860 <HAL_UART_MspInit+0xe8>)
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	4a2f      	ldr	r2, [pc, #188]	; (8007860 <HAL_UART_MspInit+0xe8>)
 80077a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077a8:	6413      	str	r3, [r2, #64]	; 0x40
 80077aa:	4b2d      	ldr	r3, [pc, #180]	; (8007860 <HAL_UART_MspInit+0xe8>)
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b2:	613b      	str	r3, [r7, #16]
 80077b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077b6:	2300      	movs	r3, #0
 80077b8:	60fb      	str	r3, [r7, #12]
 80077ba:	4b29      	ldr	r3, [pc, #164]	; (8007860 <HAL_UART_MspInit+0xe8>)
 80077bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077be:	4a28      	ldr	r2, [pc, #160]	; (8007860 <HAL_UART_MspInit+0xe8>)
 80077c0:	f043 0301 	orr.w	r3, r3, #1
 80077c4:	6313      	str	r3, [r2, #48]	; 0x30
 80077c6:	4b26      	ldr	r3, [pc, #152]	; (8007860 <HAL_UART_MspInit+0xe8>)
 80077c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80077d2:	230c      	movs	r3, #12
 80077d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077d6:	2302      	movs	r3, #2
 80077d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077da:	2300      	movs	r3, #0
 80077dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077de:	2303      	movs	r3, #3
 80077e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80077e2:	2307      	movs	r3, #7
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077e6:	f107 0314 	add.w	r3, r7, #20
 80077ea:	4619      	mov	r1, r3
 80077ec:	481d      	ldr	r0, [pc, #116]	; (8007864 <HAL_UART_MspInit+0xec>)
 80077ee:	f000 ff25 	bl	800863c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80077f2:	4b1d      	ldr	r3, [pc, #116]	; (8007868 <HAL_UART_MspInit+0xf0>)
 80077f4:	4a1d      	ldr	r2, [pc, #116]	; (800786c <HAL_UART_MspInit+0xf4>)
 80077f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80077f8:	4b1b      	ldr	r3, [pc, #108]	; (8007868 <HAL_UART_MspInit+0xf0>)
 80077fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80077fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007800:	4b19      	ldr	r3, [pc, #100]	; (8007868 <HAL_UART_MspInit+0xf0>)
 8007802:	2240      	movs	r2, #64	; 0x40
 8007804:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007806:	4b18      	ldr	r3, [pc, #96]	; (8007868 <HAL_UART_MspInit+0xf0>)
 8007808:	2200      	movs	r2, #0
 800780a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800780c:	4b16      	ldr	r3, [pc, #88]	; (8007868 <HAL_UART_MspInit+0xf0>)
 800780e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007812:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007814:	4b14      	ldr	r3, [pc, #80]	; (8007868 <HAL_UART_MspInit+0xf0>)
 8007816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800781a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800781c:	4b12      	ldr	r3, [pc, #72]	; (8007868 <HAL_UART_MspInit+0xf0>)
 800781e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007822:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007824:	4b10      	ldr	r3, [pc, #64]	; (8007868 <HAL_UART_MspInit+0xf0>)
 8007826:	2200      	movs	r2, #0
 8007828:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800782a:	4b0f      	ldr	r3, [pc, #60]	; (8007868 <HAL_UART_MspInit+0xf0>)
 800782c:	2200      	movs	r2, #0
 800782e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007830:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <HAL_UART_MspInit+0xf0>)
 8007832:	2200      	movs	r2, #0
 8007834:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007836:	480c      	ldr	r0, [pc, #48]	; (8007868 <HAL_UART_MspInit+0xf0>)
 8007838:	f000 fb90 	bl	8007f5c <HAL_DMA_Init>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8007842:	f7fe faa1 	bl	8005d88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a07      	ldr	r2, [pc, #28]	; (8007868 <HAL_UART_MspInit+0xf0>)
 800784a:	635a      	str	r2, [r3, #52]	; 0x34
 800784c:	4a06      	ldr	r2, [pc, #24]	; (8007868 <HAL_UART_MspInit+0xf0>)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007852:	bf00      	nop
 8007854:	3728      	adds	r7, #40	; 0x28
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	40004400 	.word	0x40004400
 8007860:	40023800 	.word	0x40023800
 8007864:	40020000 	.word	0x40020000
 8007868:	20000500 	.word	0x20000500
 800786c:	400260a0 	.word	0x400260a0

08007870 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a3b      	ldr	r2, [pc, #236]	; (800796c <HAL_SAI_MspInit+0xfc>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d16f      	bne.n	8007962 <HAL_SAI_MspInit+0xf2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8007882:	4b3b      	ldr	r3, [pc, #236]	; (8007970 <HAL_SAI_MspInit+0x100>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10d      	bne.n	80078a6 <HAL_SAI_MspInit+0x36>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800788a:	2300      	movs	r3, #0
 800788c:	60bb      	str	r3, [r7, #8]
 800788e:	4b39      	ldr	r3, [pc, #228]	; (8007974 <HAL_SAI_MspInit+0x104>)
 8007890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007892:	4a38      	ldr	r2, [pc, #224]	; (8007974 <HAL_SAI_MspInit+0x104>)
 8007894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007898:	6453      	str	r3, [r2, #68]	; 0x44
 800789a:	4b36      	ldr	r3, [pc, #216]	; (8007974 <HAL_SAI_MspInit+0x104>)
 800789c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078a2:	60bb      	str	r3, [r7, #8]
 80078a4:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 80078a6:	4b32      	ldr	r3, [pc, #200]	; (8007970 <HAL_SAI_MspInit+0x100>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3301      	adds	r3, #1
 80078ac:	4a30      	ldr	r2, [pc, #192]	; (8007970 <HAL_SAI_MspInit+0x100>)
 80078ae:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PB12     ------> SAI1_SCK_B
    PA9     ------> SAI1_SD_B
    PB9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9;
 80078b0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80078b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078b6:	2302      	movs	r3, #2
 80078b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ba:	2300      	movs	r3, #0
 80078bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078be:	2300      	movs	r3, #0
 80078c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80078c2:	2306      	movs	r3, #6
 80078c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078c6:	f107 030c 	add.w	r3, r7, #12
 80078ca:	4619      	mov	r1, r3
 80078cc:	482a      	ldr	r0, [pc, #168]	; (8007978 <HAL_SAI_MspInit+0x108>)
 80078ce:	f000 feb5 	bl	800863c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80078d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078d8:	2302      	movs	r3, #2
 80078da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078dc:	2300      	movs	r3, #0
 80078de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80078e4:	2306      	movs	r3, #6
 80078e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078e8:	f107 030c 	add.w	r3, r7, #12
 80078ec:	4619      	mov	r1, r3
 80078ee:	4823      	ldr	r0, [pc, #140]	; (800797c <HAL_SAI_MspInit+0x10c>)
 80078f0:	f000 fea4 	bl	800863c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 80078f4:	4b22      	ldr	r3, [pc, #136]	; (8007980 <HAL_SAI_MspInit+0x110>)
 80078f6:	4a23      	ldr	r2, [pc, #140]	; (8007984 <HAL_SAI_MspInit+0x114>)
 80078f8:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 80078fa:	4b21      	ldr	r3, [pc, #132]	; (8007980 <HAL_SAI_MspInit+0x110>)
 80078fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007900:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007902:	4b1f      	ldr	r3, [pc, #124]	; (8007980 <HAL_SAI_MspInit+0x110>)
 8007904:	2200      	movs	r2, #0
 8007906:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8007908:	4b1d      	ldr	r3, [pc, #116]	; (8007980 <HAL_SAI_MspInit+0x110>)
 800790a:	2200      	movs	r2, #0
 800790c:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800790e:	4b1c      	ldr	r3, [pc, #112]	; (8007980 <HAL_SAI_MspInit+0x110>)
 8007910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007914:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007916:	4b1a      	ldr	r3, [pc, #104]	; (8007980 <HAL_SAI_MspInit+0x110>)
 8007918:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800791c:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800791e:	4b18      	ldr	r3, [pc, #96]	; (8007980 <HAL_SAI_MspInit+0x110>)
 8007920:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007924:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8007926:	4b16      	ldr	r3, [pc, #88]	; (8007980 <HAL_SAI_MspInit+0x110>)
 8007928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800792c:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 800792e:	4b14      	ldr	r3, [pc, #80]	; (8007980 <HAL_SAI_MspInit+0x110>)
 8007930:	2200      	movs	r2, #0
 8007932:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007934:	4b12      	ldr	r3, [pc, #72]	; (8007980 <HAL_SAI_MspInit+0x110>)
 8007936:	2200      	movs	r2, #0
 8007938:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800793a:	4811      	ldr	r0, [pc, #68]	; (8007980 <HAL_SAI_MspInit+0x110>)
 800793c:	f000 fb0e 	bl	8007f5c <HAL_DMA_Init>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <HAL_SAI_MspInit+0xda>
    {
      Error_Handler();
 8007946:	f7fe fa1f 	bl	8005d88 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a0c      	ldr	r2, [pc, #48]	; (8007980 <HAL_SAI_MspInit+0x110>)
 800794e:	675a      	str	r2, [r3, #116]	; 0x74
 8007950:	4a0b      	ldr	r2, [pc, #44]	; (8007980 <HAL_SAI_MspInit+0x110>)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a09      	ldr	r2, [pc, #36]	; (8007980 <HAL_SAI_MspInit+0x110>)
 800795a:	671a      	str	r2, [r3, #112]	; 0x70
 800795c:	4a08      	ldr	r2, [pc, #32]	; (8007980 <HAL_SAI_MspInit+0x110>)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8007962:	bf00      	nop
 8007964:	3720      	adds	r7, #32
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	40015824 	.word	0x40015824
 8007970:	20006984 	.word	0x20006984
 8007974:	40023800 	.word	0x40023800
 8007978:	40020400 	.word	0x40020400
 800797c:	40020000 	.word	0x40020000
 8007980:	2000045c 	.word	0x2000045c
 8007984:	40026470 	.word	0x40026470

08007988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800798c:	e7fe      	b.n	800798c <NMI_Handler+0x4>

0800798e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800798e:	b480      	push	{r7}
 8007990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007992:	e7fe      	b.n	8007992 <HardFault_Handler+0x4>

08007994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007998:	e7fe      	b.n	8007998 <MemManage_Handler+0x4>

0800799a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800799a:	b480      	push	{r7}
 800799c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800799e:	e7fe      	b.n	800799e <BusFault_Handler+0x4>

080079a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079a4:	e7fe      	b.n	80079a4 <UsageFault_Handler+0x4>

080079a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079a6:	b480      	push	{r7}
 80079a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079aa:	bf00      	nop
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079b8:	bf00      	nop
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079c2:	b480      	push	{r7}
 80079c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079c6:	bf00      	nop
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079d4:	f000 f974 	bl	8007cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80079d8:	bf00      	nop
 80079da:	bd80      	pop	{r7, pc}

080079dc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80079e0:	4802      	ldr	r0, [pc, #8]	; (80079ec <DMA1_Stream3_IRQHandler+0x10>)
 80079e2:	f000 fbc1 	bl	8008168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80079e6:	bf00      	nop
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	20000374 	.word	0x20000374

080079f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80079f4:	4802      	ldr	r0, [pc, #8]	; (8007a00 <DMA1_Stream6_IRQHandler+0x10>)
 80079f6:	f000 fbb7 	bl	8008168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80079fa:	bf00      	nop
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000500 	.word	0x20000500

08007a04 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8007a08:	4802      	ldr	r0, [pc, #8]	; (8007a14 <DMA2_Stream4_IRQHandler+0x10>)
 8007a0a:	f000 fbad 	bl	8008168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8007a0e:	bf00      	nop
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	2000045c 	.word	0x2000045c

08007a18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	af00      	add	r7, sp, #0
	return 1;
 8007a1c:	2301      	movs	r3, #1
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <_kill>:

int _kill(int pid, int sig)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007a32:	f024 fbdd 	bl	802c1f0 <__errno>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2216      	movs	r2, #22
 8007a3a:	601a      	str	r2, [r3, #0]
	return -1;
 8007a3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <_exit>:

void _exit (int status)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007a50:	f04f 31ff 	mov.w	r1, #4294967295
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7ff ffe7 	bl	8007a28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007a5a:	e7fe      	b.n	8007a5a <_exit+0x12>

08007a5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a68:	2300      	movs	r3, #0
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	e00a      	b.n	8007a84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007a6e:	f3af 8000 	nop.w
 8007a72:	4601      	mov	r1, r0
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	60ba      	str	r2, [r7, #8]
 8007a7a:	b2ca      	uxtb	r2, r1
 8007a7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	3301      	adds	r3, #1
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	dbf0      	blt.n	8007a6e <_read+0x12>
	}

return len;
 8007a8c:	687b      	ldr	r3, [r7, #4]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b086      	sub	sp, #24
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	60b9      	str	r1, [r7, #8]
 8007aa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	617b      	str	r3, [r7, #20]
 8007aa6:	e009      	b.n	8007abc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	60ba      	str	r2, [r7, #8]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	617b      	str	r3, [r7, #20]
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	dbf1      	blt.n	8007aa8 <_write+0x12>
	}
	return len;
 8007ac4:	687b      	ldr	r3, [r7, #4]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <_close>:

int _close(int file)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
	return -1;
 8007ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007af6:	605a      	str	r2, [r3, #4]
	return 0;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <_isatty>:

int _isatty(int file)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
	return 1;
 8007b0e:	2301      	movs	r3, #1
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
	return 0;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
	...

08007b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007b40:	4a14      	ldr	r2, [pc, #80]	; (8007b94 <_sbrk+0x5c>)
 8007b42:	4b15      	ldr	r3, [pc, #84]	; (8007b98 <_sbrk+0x60>)
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007b4c:	4b13      	ldr	r3, [pc, #76]	; (8007b9c <_sbrk+0x64>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d102      	bne.n	8007b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007b54:	4b11      	ldr	r3, [pc, #68]	; (8007b9c <_sbrk+0x64>)
 8007b56:	4a12      	ldr	r2, [pc, #72]	; (8007ba0 <_sbrk+0x68>)
 8007b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007b5a:	4b10      	ldr	r3, [pc, #64]	; (8007b9c <_sbrk+0x64>)
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4413      	add	r3, r2
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d207      	bcs.n	8007b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007b68:	f024 fb42 	bl	802c1f0 <__errno>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	220c      	movs	r2, #12
 8007b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007b72:	f04f 33ff 	mov.w	r3, #4294967295
 8007b76:	e009      	b.n	8007b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007b78:	4b08      	ldr	r3, [pc, #32]	; (8007b9c <_sbrk+0x64>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007b7e:	4b07      	ldr	r3, [pc, #28]	; (8007b9c <_sbrk+0x64>)
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4413      	add	r3, r2
 8007b86:	4a05      	ldr	r2, [pc, #20]	; (8007b9c <_sbrk+0x64>)
 8007b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	20020000 	.word	0x20020000
 8007b98:	00000400 	.word	0x00000400
 8007b9c:	20006988 	.word	0x20006988
 8007ba0:	20007340 	.word	0x20007340

08007ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007ba8:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <SystemInit+0x20>)
 8007baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bae:	4a05      	ldr	r2, [pc, #20]	; (8007bc4 <SystemInit+0x20>)
 8007bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007bb8:	bf00      	nop
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	e000ed00 	.word	0xe000ed00

08007bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007c00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007bcc:	480d      	ldr	r0, [pc, #52]	; (8007c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007bce:	490e      	ldr	r1, [pc, #56]	; (8007c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007bd0:	4a0e      	ldr	r2, [pc, #56]	; (8007c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007bd4:	e002      	b.n	8007bdc <LoopCopyDataInit>

08007bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007bda:	3304      	adds	r3, #4

08007bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007be0:	d3f9      	bcc.n	8007bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007be2:	4a0b      	ldr	r2, [pc, #44]	; (8007c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007be4:	4c0b      	ldr	r4, [pc, #44]	; (8007c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007be8:	e001      	b.n	8007bee <LoopFillZerobss>

08007bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007bec:	3204      	adds	r2, #4

08007bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007bf0:	d3fb      	bcc.n	8007bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007bf2:	f7ff ffd7 	bl	8007ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007bf6:	f024 fb13 	bl	802c220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007bfa:	f7fd fc67 	bl	80054cc <main>
  bx  lr    
 8007bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007c08:	20000300 	.word	0x20000300
  ldr r2, =_sidata
 8007c0c:	0803216c 	.word	0x0803216c
  ldr r2, =_sbss
 8007c10:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 8007c14:	20007340 	.word	0x20007340

08007c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c18:	e7fe      	b.n	8007c18 <ADC_IRQHandler>
	...

08007c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007c20:	4b0e      	ldr	r3, [pc, #56]	; (8007c5c <HAL_Init+0x40>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a0d      	ldr	r2, [pc, #52]	; (8007c5c <HAL_Init+0x40>)
 8007c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007c2c:	4b0b      	ldr	r3, [pc, #44]	; (8007c5c <HAL_Init+0x40>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a0a      	ldr	r2, [pc, #40]	; (8007c5c <HAL_Init+0x40>)
 8007c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c38:	4b08      	ldr	r3, [pc, #32]	; (8007c5c <HAL_Init+0x40>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a07      	ldr	r2, [pc, #28]	; (8007c5c <HAL_Init+0x40>)
 8007c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c44:	2003      	movs	r0, #3
 8007c46:	f000 f92b 	bl	8007ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	f000 f808 	bl	8007c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007c50:	f7ff fc9c 	bl	800758c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	40023c00 	.word	0x40023c00

08007c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007c68:	4b12      	ldr	r3, [pc, #72]	; (8007cb4 <HAL_InitTick+0x54>)
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	4b12      	ldr	r3, [pc, #72]	; (8007cb8 <HAL_InitTick+0x58>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	4619      	mov	r1, r3
 8007c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 f943 	bl	8007f0a <HAL_SYSTICK_Config>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e00e      	b.n	8007cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b0f      	cmp	r3, #15
 8007c92:	d80a      	bhi.n	8007caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007c94:	2200      	movs	r2, #0
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9c:	f000 f90b 	bl	8007eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007ca0:	4a06      	ldr	r2, [pc, #24]	; (8007cbc <HAL_InitTick+0x5c>)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	e000      	b.n	8007cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	2000005c 	.word	0x2000005c
 8007cb8:	20000064 	.word	0x20000064
 8007cbc:	20000060 	.word	0x20000060

08007cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007cc4:	4b06      	ldr	r3, [pc, #24]	; (8007ce0 <HAL_IncTick+0x20>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	4b06      	ldr	r3, [pc, #24]	; (8007ce4 <HAL_IncTick+0x24>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4413      	add	r3, r2
 8007cd0:	4a04      	ldr	r2, [pc, #16]	; (8007ce4 <HAL_IncTick+0x24>)
 8007cd2:	6013      	str	r3, [r2, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	20000064 	.word	0x20000064
 8007ce4:	2000698c 	.word	0x2000698c

08007ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	af00      	add	r7, sp, #0
  return uwTick;
 8007cec:	4b03      	ldr	r3, [pc, #12]	; (8007cfc <HAL_GetTick+0x14>)
 8007cee:	681b      	ldr	r3, [r3, #0]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	2000698c 	.word	0x2000698c

08007d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f003 0307 	and.w	r3, r3, #7
 8007d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d10:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <__NVIC_SetPriorityGrouping+0x44>)
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007d32:	4a04      	ldr	r2, [pc, #16]	; (8007d44 <__NVIC_SetPriorityGrouping+0x44>)
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	60d3      	str	r3, [r2, #12]
}
 8007d38:	bf00      	nop
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	e000ed00 	.word	0xe000ed00

08007d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d4c:	4b04      	ldr	r3, [pc, #16]	; (8007d60 <__NVIC_GetPriorityGrouping+0x18>)
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	0a1b      	lsrs	r3, r3, #8
 8007d52:	f003 0307 	and.w	r3, r3, #7
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	e000ed00 	.word	0xe000ed00

08007d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	db0b      	blt.n	8007d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d76:	79fb      	ldrb	r3, [r7, #7]
 8007d78:	f003 021f 	and.w	r2, r3, #31
 8007d7c:	4907      	ldr	r1, [pc, #28]	; (8007d9c <__NVIC_EnableIRQ+0x38>)
 8007d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d82:	095b      	lsrs	r3, r3, #5
 8007d84:	2001      	movs	r0, #1
 8007d86:	fa00 f202 	lsl.w	r2, r0, r2
 8007d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	e000e100 	.word	0xe000e100

08007da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	4603      	mov	r3, r0
 8007da8:	6039      	str	r1, [r7, #0]
 8007daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	db0a      	blt.n	8007dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	490c      	ldr	r1, [pc, #48]	; (8007dec <__NVIC_SetPriority+0x4c>)
 8007dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dbe:	0112      	lsls	r2, r2, #4
 8007dc0:	b2d2      	uxtb	r2, r2
 8007dc2:	440b      	add	r3, r1
 8007dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007dc8:	e00a      	b.n	8007de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	4908      	ldr	r1, [pc, #32]	; (8007df0 <__NVIC_SetPriority+0x50>)
 8007dd0:	79fb      	ldrb	r3, [r7, #7]
 8007dd2:	f003 030f 	and.w	r3, r3, #15
 8007dd6:	3b04      	subs	r3, #4
 8007dd8:	0112      	lsls	r2, r2, #4
 8007dda:	b2d2      	uxtb	r2, r2
 8007ddc:	440b      	add	r3, r1
 8007dde:	761a      	strb	r2, [r3, #24]
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	e000e100 	.word	0xe000e100
 8007df0:	e000ed00 	.word	0xe000ed00

08007df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b089      	sub	sp, #36	; 0x24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f003 0307 	and.w	r3, r3, #7
 8007e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	f1c3 0307 	rsb	r3, r3, #7
 8007e0e:	2b04      	cmp	r3, #4
 8007e10:	bf28      	it	cs
 8007e12:	2304      	movcs	r3, #4
 8007e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	3304      	adds	r3, #4
 8007e1a:	2b06      	cmp	r3, #6
 8007e1c:	d902      	bls.n	8007e24 <NVIC_EncodePriority+0x30>
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	3b03      	subs	r3, #3
 8007e22:	e000      	b.n	8007e26 <NVIC_EncodePriority+0x32>
 8007e24:	2300      	movs	r3, #0
 8007e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e28:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e32:	43da      	mvns	r2, r3
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	401a      	ands	r2, r3
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	fa01 f303 	lsl.w	r3, r1, r3
 8007e46:	43d9      	mvns	r1, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e4c:	4313      	orrs	r3, r2
         );
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3724      	adds	r7, #36	; 0x24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
	...

08007e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3b01      	subs	r3, #1
 8007e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e6c:	d301      	bcc.n	8007e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e00f      	b.n	8007e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007e72:	4a0a      	ldr	r2, [pc, #40]	; (8007e9c <SysTick_Config+0x40>)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3b01      	subs	r3, #1
 8007e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007e7a:	210f      	movs	r1, #15
 8007e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e80:	f7ff ff8e 	bl	8007da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007e84:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <SysTick_Config+0x40>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007e8a:	4b04      	ldr	r3, [pc, #16]	; (8007e9c <SysTick_Config+0x40>)
 8007e8c:	2207      	movs	r2, #7
 8007e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	e000e010 	.word	0xe000e010

08007ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff ff29 	bl	8007d00 <__NVIC_SetPriorityGrouping>
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b086      	sub	sp, #24
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	60b9      	str	r1, [r7, #8]
 8007ec0:	607a      	str	r2, [r7, #4]
 8007ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ec8:	f7ff ff3e 	bl	8007d48 <__NVIC_GetPriorityGrouping>
 8007ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	68b9      	ldr	r1, [r7, #8]
 8007ed2:	6978      	ldr	r0, [r7, #20]
 8007ed4:	f7ff ff8e 	bl	8007df4 <NVIC_EncodePriority>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ede:	4611      	mov	r1, r2
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7ff ff5d 	bl	8007da0 <__NVIC_SetPriority>
}
 8007ee6:	bf00      	nop
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff ff31 	bl	8007d64 <__NVIC_EnableIRQ>
}
 8007f02:	bf00      	nop
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7ff ffa2 	bl	8007e5c <SysTick_Config>
 8007f18:	4603      	mov	r3, r0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e00e      	b.n	8007f52 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	795b      	ldrb	r3, [r3, #5]
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d105      	bne.n	8007f4a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff fb49 	bl	80075dc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007f68:	f7ff febe 	bl	8007ce8 <HAL_GetTick>
 8007f6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e099      	b.n	80080ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2202      	movs	r2, #2
 8007f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0201 	bic.w	r2, r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f98:	e00f      	b.n	8007fba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f9a:	f7ff fea5 	bl	8007ce8 <HAL_GetTick>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	2b05      	cmp	r3, #5
 8007fa6:	d908      	bls.n	8007fba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2220      	movs	r2, #32
 8007fac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2203      	movs	r2, #3
 8007fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e078      	b.n	80080ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e8      	bne.n	8007f9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	4b38      	ldr	r3, [pc, #224]	; (80080b4 <HAL_DMA_Init+0x158>)
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ffe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	4313      	orrs	r3, r2
 800800a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	2b04      	cmp	r3, #4
 8008012:	d107      	bne.n	8008024 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801c:	4313      	orrs	r3, r2
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f023 0307 	bic.w	r3, r3, #7
 800803a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	4313      	orrs	r3, r2
 8008044:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804a:	2b04      	cmp	r3, #4
 800804c:	d117      	bne.n	800807e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	4313      	orrs	r3, r2
 8008056:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00e      	beq.n	800807e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fa6f 	bl	8008544 <DMA_CheckFifoParam>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d008      	beq.n	800807e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2240      	movs	r2, #64	; 0x40
 8008070:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800807a:	2301      	movs	r3, #1
 800807c:	e016      	b.n	80080ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fa26 	bl	80084d8 <DMA_CalcBaseAndBitshift>
 800808c:	4603      	mov	r3, r0
 800808e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008094:	223f      	movs	r2, #63	; 0x3f
 8008096:	409a      	lsls	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3718      	adds	r7, #24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	f010803f 	.word	0xf010803f

080080b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d101      	bne.n	80080de <HAL_DMA_Start_IT+0x26>
 80080da:	2302      	movs	r3, #2
 80080dc:	e040      	b.n	8008160 <HAL_DMA_Start_IT+0xa8>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d12f      	bne.n	8008152 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2202      	movs	r2, #2
 80080f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	68b9      	ldr	r1, [r7, #8]
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 f9b8 	bl	800847c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008110:	223f      	movs	r2, #63	; 0x3f
 8008112:	409a      	lsls	r2, r3
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f042 0216 	orr.w	r2, r2, #22
 8008126:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812c:	2b00      	cmp	r3, #0
 800812e:	d007      	beq.n	8008140 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f042 0208 	orr.w	r2, r2, #8
 800813e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0201 	orr.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	e005      	b.n	800815e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800815a:	2302      	movs	r3, #2
 800815c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800815e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008170:	2300      	movs	r3, #0
 8008172:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008174:	4b8e      	ldr	r3, [pc, #568]	; (80083b0 <HAL_DMA_IRQHandler+0x248>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a8e      	ldr	r2, [pc, #568]	; (80083b4 <HAL_DMA_IRQHandler+0x24c>)
 800817a:	fba2 2303 	umull	r2, r3, r2, r3
 800817e:	0a9b      	lsrs	r3, r3, #10
 8008180:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008186:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008192:	2208      	movs	r2, #8
 8008194:	409a      	lsls	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	4013      	ands	r3, r2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d01a      	beq.n	80081d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0304 	and.w	r3, r3, #4
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d013      	beq.n	80081d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f022 0204 	bic.w	r2, r2, #4
 80081ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c0:	2208      	movs	r2, #8
 80081c2:	409a      	lsls	r2, r3
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081cc:	f043 0201 	orr.w	r2, r3, #1
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d8:	2201      	movs	r2, #1
 80081da:	409a      	lsls	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4013      	ands	r3, r2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d012      	beq.n	800820a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00b      	beq.n	800820a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081f6:	2201      	movs	r2, #1
 80081f8:	409a      	lsls	r2, r3
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008202:	f043 0202 	orr.w	r2, r3, #2
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800820e:	2204      	movs	r2, #4
 8008210:	409a      	lsls	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	4013      	ands	r3, r2
 8008216:	2b00      	cmp	r3, #0
 8008218:	d012      	beq.n	8008240 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0302 	and.w	r3, r3, #2
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00b      	beq.n	8008240 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800822c:	2204      	movs	r2, #4
 800822e:	409a      	lsls	r2, r3
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008238:	f043 0204 	orr.w	r2, r3, #4
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008244:	2210      	movs	r2, #16
 8008246:	409a      	lsls	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	4013      	ands	r3, r2
 800824c:	2b00      	cmp	r3, #0
 800824e:	d043      	beq.n	80082d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0308 	and.w	r3, r3, #8
 800825a:	2b00      	cmp	r3, #0
 800825c:	d03c      	beq.n	80082d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008262:	2210      	movs	r2, #16
 8008264:	409a      	lsls	r2, r3
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d018      	beq.n	80082aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d108      	bne.n	8008298 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	d024      	beq.n	80082d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	4798      	blx	r3
 8008296:	e01f      	b.n	80082d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800829c:	2b00      	cmp	r3, #0
 800829e:	d01b      	beq.n	80082d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	4798      	blx	r3
 80082a8:	e016      	b.n	80082d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d107      	bne.n	80082c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 0208 	bic.w	r2, r2, #8
 80082c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082dc:	2220      	movs	r2, #32
 80082de:	409a      	lsls	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	4013      	ands	r3, r2
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 808f 	beq.w	8008408 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0310 	and.w	r3, r3, #16
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 8087 	beq.w	8008408 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082fe:	2220      	movs	r2, #32
 8008300:	409a      	lsls	r2, r3
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b05      	cmp	r3, #5
 8008310:	d136      	bne.n	8008380 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 0216 	bic.w	r2, r2, #22
 8008320:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	695a      	ldr	r2, [r3, #20]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008330:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008336:	2b00      	cmp	r3, #0
 8008338:	d103      	bne.n	8008342 <HAL_DMA_IRQHandler+0x1da>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800833e:	2b00      	cmp	r3, #0
 8008340:	d007      	beq.n	8008352 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 0208 	bic.w	r2, r2, #8
 8008350:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008356:	223f      	movs	r2, #63	; 0x3f
 8008358:	409a      	lsls	r2, r3
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008372:	2b00      	cmp	r3, #0
 8008374:	d07e      	beq.n	8008474 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	4798      	blx	r3
        }
        return;
 800837e:	e079      	b.n	8008474 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d01d      	beq.n	80083ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10d      	bne.n	80083b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d031      	beq.n	8008408 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	4798      	blx	r3
 80083ac:	e02c      	b.n	8008408 <HAL_DMA_IRQHandler+0x2a0>
 80083ae:	bf00      	nop
 80083b0:	2000005c 	.word	0x2000005c
 80083b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d023      	beq.n	8008408 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	4798      	blx	r3
 80083c8:	e01e      	b.n	8008408 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10f      	bne.n	80083f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 0210 	bic.w	r2, r2, #16
 80083e6:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d003      	beq.n	8008408 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800840c:	2b00      	cmp	r3, #0
 800840e:	d032      	beq.n	8008476 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	d022      	beq.n	8008462 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2205      	movs	r2, #5
 8008420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 0201 	bic.w	r2, r2, #1
 8008432:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	3301      	adds	r3, #1
 8008438:	60bb      	str	r3, [r7, #8]
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	429a      	cmp	r2, r3
 800843e:	d307      	bcc.n	8008450 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1f2      	bne.n	8008434 <HAL_DMA_IRQHandler+0x2cc>
 800844e:	e000      	b.n	8008452 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008450:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008466:	2b00      	cmp	r3, #0
 8008468:	d005      	beq.n	8008476 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	4798      	blx	r3
 8008472:	e000      	b.n	8008476 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008474:	bf00      	nop
    }
  }
}
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008498:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	2b40      	cmp	r3, #64	; 0x40
 80084a8:	d108      	bne.n	80084bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80084ba:	e007      	b.n	80084cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	60da      	str	r2, [r3, #12]
}
 80084cc:	bf00      	nop
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	3b10      	subs	r3, #16
 80084e8:	4a14      	ldr	r2, [pc, #80]	; (800853c <DMA_CalcBaseAndBitshift+0x64>)
 80084ea:	fba2 2303 	umull	r2, r3, r2, r3
 80084ee:	091b      	lsrs	r3, r3, #4
 80084f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80084f2:	4a13      	ldr	r2, [pc, #76]	; (8008540 <DMA_CalcBaseAndBitshift+0x68>)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4413      	add	r3, r2
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b03      	cmp	r3, #3
 8008504:	d909      	bls.n	800851a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800850e:	f023 0303 	bic.w	r3, r3, #3
 8008512:	1d1a      	adds	r2, r3, #4
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	659a      	str	r2, [r3, #88]	; 0x58
 8008518:	e007      	b.n	800852a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008522:	f023 0303 	bic.w	r3, r3, #3
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800852e:	4618      	mov	r0, r3
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	aaaaaaab 	.word	0xaaaaaaab
 8008540:	0802fee8 	.word	0x0802fee8

08008544 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d11f      	bne.n	800859e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2b03      	cmp	r3, #3
 8008562:	d856      	bhi.n	8008612 <DMA_CheckFifoParam+0xce>
 8008564:	a201      	add	r2, pc, #4	; (adr r2, 800856c <DMA_CheckFifoParam+0x28>)
 8008566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856a:	bf00      	nop
 800856c:	0800857d 	.word	0x0800857d
 8008570:	0800858f 	.word	0x0800858f
 8008574:	0800857d 	.word	0x0800857d
 8008578:	08008613 	.word	0x08008613
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008584:	2b00      	cmp	r3, #0
 8008586:	d046      	beq.n	8008616 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800858c:	e043      	b.n	8008616 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008592:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008596:	d140      	bne.n	800861a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800859c:	e03d      	b.n	800861a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085a6:	d121      	bne.n	80085ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d837      	bhi.n	800861e <DMA_CheckFifoParam+0xda>
 80085ae:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <DMA_CheckFifoParam+0x70>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	080085c5 	.word	0x080085c5
 80085b8:	080085cb 	.word	0x080085cb
 80085bc:	080085c5 	.word	0x080085c5
 80085c0:	080085dd 	.word	0x080085dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	73fb      	strb	r3, [r7, #15]
      break;
 80085c8:	e030      	b.n	800862c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d025      	beq.n	8008622 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085da:	e022      	b.n	8008622 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80085e4:	d11f      	bne.n	8008626 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80085ea:	e01c      	b.n	8008626 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d903      	bls.n	80085fa <DMA_CheckFifoParam+0xb6>
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d003      	beq.n	8008600 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80085f8:	e018      	b.n	800862c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	73fb      	strb	r3, [r7, #15]
      break;
 80085fe:	e015      	b.n	800862c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00e      	beq.n	800862a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	73fb      	strb	r3, [r7, #15]
      break;
 8008610:	e00b      	b.n	800862a <DMA_CheckFifoParam+0xe6>
      break;
 8008612:	bf00      	nop
 8008614:	e00a      	b.n	800862c <DMA_CheckFifoParam+0xe8>
      break;
 8008616:	bf00      	nop
 8008618:	e008      	b.n	800862c <DMA_CheckFifoParam+0xe8>
      break;
 800861a:	bf00      	nop
 800861c:	e006      	b.n	800862c <DMA_CheckFifoParam+0xe8>
      break;
 800861e:	bf00      	nop
 8008620:	e004      	b.n	800862c <DMA_CheckFifoParam+0xe8>
      break;
 8008622:	bf00      	nop
 8008624:	e002      	b.n	800862c <DMA_CheckFifoParam+0xe8>
      break;   
 8008626:	bf00      	nop
 8008628:	e000      	b.n	800862c <DMA_CheckFifoParam+0xe8>
      break;
 800862a:	bf00      	nop
    }
  } 
  
  return status; 
 800862c:	7bfb      	ldrb	r3, [r7, #15]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop

0800863c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800863c:	b480      	push	{r7}
 800863e:	b089      	sub	sp, #36	; 0x24
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008646:	2300      	movs	r3, #0
 8008648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800864a:	2300      	movs	r3, #0
 800864c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800864e:	2300      	movs	r3, #0
 8008650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008652:	2300      	movs	r3, #0
 8008654:	61fb      	str	r3, [r7, #28]
 8008656:	e165      	b.n	8008924 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008658:	2201      	movs	r2, #1
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	fa02 f303 	lsl.w	r3, r2, r3
 8008660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	4013      	ands	r3, r2
 800866a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	429a      	cmp	r2, r3
 8008672:	f040 8154 	bne.w	800891e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f003 0303 	and.w	r3, r3, #3
 800867e:	2b01      	cmp	r3, #1
 8008680:	d005      	beq.n	800868e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800868a:	2b02      	cmp	r3, #2
 800868c:	d130      	bne.n	80086f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	005b      	lsls	r3, r3, #1
 8008698:	2203      	movs	r2, #3
 800869a:	fa02 f303 	lsl.w	r3, r2, r3
 800869e:	43db      	mvns	r3, r3
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	4013      	ands	r3, r2
 80086a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	fa02 f303 	lsl.w	r3, r2, r3
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80086c4:	2201      	movs	r2, #1
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	fa02 f303 	lsl.w	r3, r2, r3
 80086cc:	43db      	mvns	r3, r3
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	4013      	ands	r3, r2
 80086d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	091b      	lsrs	r3, r3, #4
 80086da:	f003 0201 	and.w	r2, r3, #1
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	fa02 f303 	lsl.w	r3, r2, r3
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f003 0303 	and.w	r3, r3, #3
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d017      	beq.n	800872c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	2203      	movs	r2, #3
 8008708:	fa02 f303 	lsl.w	r3, r2, r3
 800870c:	43db      	mvns	r3, r3
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	4013      	ands	r3, r2
 8008712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	689a      	ldr	r2, [r3, #8]
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	fa02 f303 	lsl.w	r3, r2, r3
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	4313      	orrs	r3, r2
 8008724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f003 0303 	and.w	r3, r3, #3
 8008734:	2b02      	cmp	r3, #2
 8008736:	d123      	bne.n	8008780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	08da      	lsrs	r2, r3, #3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	3208      	adds	r2, #8
 8008740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	f003 0307 	and.w	r3, r3, #7
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	220f      	movs	r2, #15
 8008750:	fa02 f303 	lsl.w	r3, r2, r3
 8008754:	43db      	mvns	r3, r3
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	4013      	ands	r3, r2
 800875a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	691a      	ldr	r2, [r3, #16]
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	f003 0307 	and.w	r3, r3, #7
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	fa02 f303 	lsl.w	r3, r2, r3
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	4313      	orrs	r3, r2
 8008770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	08da      	lsrs	r2, r3, #3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	3208      	adds	r2, #8
 800877a:	69b9      	ldr	r1, [r7, #24]
 800877c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	005b      	lsls	r3, r3, #1
 800878a:	2203      	movs	r2, #3
 800878c:	fa02 f303 	lsl.w	r3, r2, r3
 8008790:	43db      	mvns	r3, r3
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	4013      	ands	r3, r2
 8008796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f003 0203 	and.w	r2, r3, #3
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	005b      	lsls	r3, r3, #1
 80087a4:	fa02 f303 	lsl.w	r3, r2, r3
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 80ae 	beq.w	800891e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087c2:	2300      	movs	r3, #0
 80087c4:	60fb      	str	r3, [r7, #12]
 80087c6:	4b5d      	ldr	r3, [pc, #372]	; (800893c <HAL_GPIO_Init+0x300>)
 80087c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ca:	4a5c      	ldr	r2, [pc, #368]	; (800893c <HAL_GPIO_Init+0x300>)
 80087cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087d0:	6453      	str	r3, [r2, #68]	; 0x44
 80087d2:	4b5a      	ldr	r3, [pc, #360]	; (800893c <HAL_GPIO_Init+0x300>)
 80087d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80087de:	4a58      	ldr	r2, [pc, #352]	; (8008940 <HAL_GPIO_Init+0x304>)
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	089b      	lsrs	r3, r3, #2
 80087e4:	3302      	adds	r3, #2
 80087e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	f003 0303 	and.w	r3, r3, #3
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	220f      	movs	r2, #15
 80087f6:	fa02 f303 	lsl.w	r3, r2, r3
 80087fa:	43db      	mvns	r3, r3
 80087fc:	69ba      	ldr	r2, [r7, #24]
 80087fe:	4013      	ands	r3, r2
 8008800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a4f      	ldr	r2, [pc, #316]	; (8008944 <HAL_GPIO_Init+0x308>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d025      	beq.n	8008856 <HAL_GPIO_Init+0x21a>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a4e      	ldr	r2, [pc, #312]	; (8008948 <HAL_GPIO_Init+0x30c>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d01f      	beq.n	8008852 <HAL_GPIO_Init+0x216>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a4d      	ldr	r2, [pc, #308]	; (800894c <HAL_GPIO_Init+0x310>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d019      	beq.n	800884e <HAL_GPIO_Init+0x212>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a4c      	ldr	r2, [pc, #304]	; (8008950 <HAL_GPIO_Init+0x314>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d013      	beq.n	800884a <HAL_GPIO_Init+0x20e>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a4b      	ldr	r2, [pc, #300]	; (8008954 <HAL_GPIO_Init+0x318>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00d      	beq.n	8008846 <HAL_GPIO_Init+0x20a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a4a      	ldr	r2, [pc, #296]	; (8008958 <HAL_GPIO_Init+0x31c>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d007      	beq.n	8008842 <HAL_GPIO_Init+0x206>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a49      	ldr	r2, [pc, #292]	; (800895c <HAL_GPIO_Init+0x320>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d101      	bne.n	800883e <HAL_GPIO_Init+0x202>
 800883a:	2306      	movs	r3, #6
 800883c:	e00c      	b.n	8008858 <HAL_GPIO_Init+0x21c>
 800883e:	2307      	movs	r3, #7
 8008840:	e00a      	b.n	8008858 <HAL_GPIO_Init+0x21c>
 8008842:	2305      	movs	r3, #5
 8008844:	e008      	b.n	8008858 <HAL_GPIO_Init+0x21c>
 8008846:	2304      	movs	r3, #4
 8008848:	e006      	b.n	8008858 <HAL_GPIO_Init+0x21c>
 800884a:	2303      	movs	r3, #3
 800884c:	e004      	b.n	8008858 <HAL_GPIO_Init+0x21c>
 800884e:	2302      	movs	r3, #2
 8008850:	e002      	b.n	8008858 <HAL_GPIO_Init+0x21c>
 8008852:	2301      	movs	r3, #1
 8008854:	e000      	b.n	8008858 <HAL_GPIO_Init+0x21c>
 8008856:	2300      	movs	r3, #0
 8008858:	69fa      	ldr	r2, [r7, #28]
 800885a:	f002 0203 	and.w	r2, r2, #3
 800885e:	0092      	lsls	r2, r2, #2
 8008860:	4093      	lsls	r3, r2
 8008862:	69ba      	ldr	r2, [r7, #24]
 8008864:	4313      	orrs	r3, r2
 8008866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008868:	4935      	ldr	r1, [pc, #212]	; (8008940 <HAL_GPIO_Init+0x304>)
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	089b      	lsrs	r3, r3, #2
 800886e:	3302      	adds	r3, #2
 8008870:	69ba      	ldr	r2, [r7, #24]
 8008872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008876:	4b3a      	ldr	r3, [pc, #232]	; (8008960 <HAL_GPIO_Init+0x324>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	43db      	mvns	r3, r3
 8008880:	69ba      	ldr	r2, [r7, #24]
 8008882:	4013      	ands	r3, r2
 8008884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d003      	beq.n	800889a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008892:	69ba      	ldr	r2, [r7, #24]
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	4313      	orrs	r3, r2
 8008898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800889a:	4a31      	ldr	r2, [pc, #196]	; (8008960 <HAL_GPIO_Init+0x324>)
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80088a0:	4b2f      	ldr	r3, [pc, #188]	; (8008960 <HAL_GPIO_Init+0x324>)
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	43db      	mvns	r3, r3
 80088aa:	69ba      	ldr	r2, [r7, #24]
 80088ac:	4013      	ands	r3, r2
 80088ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d003      	beq.n	80088c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80088bc:	69ba      	ldr	r2, [r7, #24]
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80088c4:	4a26      	ldr	r2, [pc, #152]	; (8008960 <HAL_GPIO_Init+0x324>)
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80088ca:	4b25      	ldr	r3, [pc, #148]	; (8008960 <HAL_GPIO_Init+0x324>)
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	43db      	mvns	r3, r3
 80088d4:	69ba      	ldr	r2, [r7, #24]
 80088d6:	4013      	ands	r3, r2
 80088d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d003      	beq.n	80088ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80088ee:	4a1c      	ldr	r2, [pc, #112]	; (8008960 <HAL_GPIO_Init+0x324>)
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80088f4:	4b1a      	ldr	r3, [pc, #104]	; (8008960 <HAL_GPIO_Init+0x324>)
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	43db      	mvns	r3, r3
 80088fe:	69ba      	ldr	r2, [r7, #24]
 8008900:	4013      	ands	r3, r2
 8008902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d003      	beq.n	8008918 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008910:	69ba      	ldr	r2, [r7, #24]
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	4313      	orrs	r3, r2
 8008916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008918:	4a11      	ldr	r2, [pc, #68]	; (8008960 <HAL_GPIO_Init+0x324>)
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	3301      	adds	r3, #1
 8008922:	61fb      	str	r3, [r7, #28]
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	2b0f      	cmp	r3, #15
 8008928:	f67f ae96 	bls.w	8008658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	3724      	adds	r7, #36	; 0x24
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	40023800 	.word	0x40023800
 8008940:	40013800 	.word	0x40013800
 8008944:	40020000 	.word	0x40020000
 8008948:	40020400 	.word	0x40020400
 800894c:	40020800 	.word	0x40020800
 8008950:	40020c00 	.word	0x40020c00
 8008954:	40021000 	.word	0x40021000
 8008958:	40021400 	.word	0x40021400
 800895c:	40021800 	.word	0x40021800
 8008960:	40013c00 	.word	0x40013c00

08008964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	807b      	strh	r3, [r7, #2]
 8008970:	4613      	mov	r3, r2
 8008972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008974:	787b      	ldrb	r3, [r7, #1]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d003      	beq.n	8008982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800897a:	887a      	ldrh	r2, [r7, #2]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008980:	e003      	b.n	800898a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008982:	887b      	ldrh	r3, [r7, #2]
 8008984:	041a      	lsls	r2, r3, #16
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	619a      	str	r2, [r3, #24]
}
 800898a:	bf00      	nop
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
	...

08008998 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b088      	sub	sp, #32
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e0e1      	b.n	8008b6e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d109      	bne.n	80089ca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a6d      	ldr	r2, [pc, #436]	; (8008b78 <HAL_I2S_Init+0x1e0>)
 80089c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7fe fe2b 	bl	8007620 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2202      	movs	r2, #2
 80089ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	69db      	ldr	r3, [r3, #28]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	6812      	ldr	r2, [r2, #0]
 80089dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80089e0:	f023 030f 	bic.w	r3, r3, #15
 80089e4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2202      	movs	r2, #2
 80089ec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d06f      	beq.n	8008ad6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d102      	bne.n	8008a04 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80089fe:	2310      	movs	r3, #16
 8008a00:	617b      	str	r3, [r7, #20]
 8008a02:	e001      	b.n	8008a08 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008a04:	2320      	movs	r3, #32
 8008a06:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	2b20      	cmp	r3, #32
 8008a0e:	d802      	bhi.n	8008a16 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	005b      	lsls	r3, r3, #1
 8008a14:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a58      	ldr	r2, [pc, #352]	; (8008b7c <HAL_I2S_Init+0x1e4>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d004      	beq.n	8008a2a <HAL_I2S_Init+0x92>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a56      	ldr	r2, [pc, #344]	; (8008b80 <HAL_I2S_Init+0x1e8>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d104      	bne.n	8008a34 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8008a2a:	2001      	movs	r0, #1
 8008a2c:	f000 fdf6 	bl	800961c <HAL_RCCEx_GetPeriphCLKFreq>
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	e003      	b.n	8008a3c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8008a34:	2002      	movs	r0, #2
 8008a36:	f000 fdf1 	bl	800961c <HAL_RCCEx_GetPeriphCLKFreq>
 8008a3a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a44:	d125      	bne.n	8008a92 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d010      	beq.n	8008a70 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a58:	4613      	mov	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	005b      	lsls	r3, r3, #1
 8008a60:	461a      	mov	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a6a:	3305      	adds	r3, #5
 8008a6c:	613b      	str	r3, [r7, #16]
 8008a6e:	e01f      	b.n	8008ab0 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	00db      	lsls	r3, r3, #3
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	461a      	mov	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a8c:	3305      	adds	r3, #5
 8008a8e:	613b      	str	r3, [r7, #16]
 8008a90:	e00e      	b.n	8008ab0 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	005b      	lsls	r3, r3, #1
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aac:	3305      	adds	r3, #5
 8008aae:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	4a34      	ldr	r2, [pc, #208]	; (8008b84 <HAL_I2S_Init+0x1ec>)
 8008ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab8:	08db      	lsrs	r3, r3, #3
 8008aba:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	085b      	lsrs	r3, r3, #1
 8008acc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	021b      	lsls	r3, r3, #8
 8008ad2:	61bb      	str	r3, [r7, #24]
 8008ad4:	e003      	b.n	8008ade <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d902      	bls.n	8008aea <HAL_I2S_Init+0x152>
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	2bff      	cmp	r3, #255	; 0xff
 8008ae8:	d907      	bls.n	8008afa <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aee:	f043 0210 	orr.w	r2, r3, #16
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e039      	b.n	8008b6e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691a      	ldr	r2, [r3, #16]
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	ea42 0103 	orr.w	r1, r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	69fa      	ldr	r2, [r7, #28]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008b18:	f023 030f 	bic.w	r3, r3, #15
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	6851      	ldr	r1, [r2, #4]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	6892      	ldr	r2, [r2, #8]
 8008b24:	4311      	orrs	r1, r2
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	68d2      	ldr	r2, [r2, #12]
 8008b2a:	4311      	orrs	r1, r2
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	6992      	ldr	r2, [r2, #24]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	431a      	orrs	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b3c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	2b30      	cmp	r3, #48	; 0x30
 8008b44:	d003      	beq.n	8008b4e <HAL_I2S_Init+0x1b6>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	2bb0      	cmp	r3, #176	; 0xb0
 8008b4c:	d107      	bne.n	8008b5e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	69da      	ldr	r2, [r3, #28]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b5c:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3720      	adds	r7, #32
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	08008c7f 	.word	0x08008c7f
 8008b7c:	40003800 	.word	0x40003800
 8008b80:	40003c00 	.word	0x40003c00
 8008b84:	cccccccd 	.word	0xcccccccd

08008b88 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	881a      	ldrh	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	1c9a      	adds	r2, r3, #2
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	3b01      	subs	r3, #1
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10e      	bne.n	8008c18 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	685a      	ldr	r2, [r3, #4]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008c08:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7ff ffb8 	bl	8008b88 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008c18:	bf00      	nop
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c32:	b292      	uxth	r2, r2
 8008c34:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3a:	1c9a      	adds	r2, r3, #2
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	3b01      	subs	r3, #1
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10e      	bne.n	8008c76 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008c66:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7ff ff93 	bl	8008b9c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008c76:	bf00      	nop
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b086      	sub	sp, #24
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	d13a      	bne.n	8008d10 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f003 0301 	and.w	r3, r3, #1
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d109      	bne.n	8008cb8 <I2S_IRQHandler+0x3a>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cae:	2b40      	cmp	r3, #64	; 0x40
 8008cb0:	d102      	bne.n	8008cb8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7ff ffb4 	bl	8008c20 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cbe:	2b40      	cmp	r3, #64	; 0x40
 8008cc0:	d126      	bne.n	8008d10 <I2S_IRQHandler+0x92>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f003 0320 	and.w	r3, r3, #32
 8008ccc:	2b20      	cmp	r3, #32
 8008cce:	d11f      	bne.n	8008d10 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008cde:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	613b      	str	r3, [r7, #16]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	613b      	str	r3, [r7, #16]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	613b      	str	r3, [r7, #16]
 8008cf4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d02:	f043 0202 	orr.w	r2, r3, #2
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff ff50 	bl	8008bb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	2b03      	cmp	r3, #3
 8008d1a:	d136      	bne.n	8008d8a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d109      	bne.n	8008d3a <I2S_IRQHandler+0xbc>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d30:	2b80      	cmp	r3, #128	; 0x80
 8008d32:	d102      	bne.n	8008d3a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7ff ff45 	bl	8008bc4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f003 0308 	and.w	r3, r3, #8
 8008d40:	2b08      	cmp	r3, #8
 8008d42:	d122      	bne.n	8008d8a <I2S_IRQHandler+0x10c>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	f003 0320 	and.w	r3, r3, #32
 8008d4e:	2b20      	cmp	r3, #32
 8008d50:	d11b      	bne.n	8008d8a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d60:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d7c:	f043 0204 	orr.w	r2, r3, #4
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7ff ff13 	bl	8008bb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008d8a:	bf00      	nop
 8008d8c:	3718      	adds	r7, #24
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e0cc      	b.n	8008f42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008da8:	4b68      	ldr	r3, [pc, #416]	; (8008f4c <HAL_RCC_ClockConfig+0x1b8>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 030f 	and.w	r3, r3, #15
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d90c      	bls.n	8008dd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008db6:	4b65      	ldr	r3, [pc, #404]	; (8008f4c <HAL_RCC_ClockConfig+0x1b8>)
 8008db8:	683a      	ldr	r2, [r7, #0]
 8008dba:	b2d2      	uxtb	r2, r2
 8008dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dbe:	4b63      	ldr	r3, [pc, #396]	; (8008f4c <HAL_RCC_ClockConfig+0x1b8>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 030f 	and.w	r3, r3, #15
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d001      	beq.n	8008dd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e0b8      	b.n	8008f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0302 	and.w	r3, r3, #2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d020      	beq.n	8008e1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d005      	beq.n	8008df4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008de8:	4b59      	ldr	r3, [pc, #356]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	4a58      	ldr	r2, [pc, #352]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008dee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008df2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0308 	and.w	r3, r3, #8
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d005      	beq.n	8008e0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e00:	4b53      	ldr	r3, [pc, #332]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	4a52      	ldr	r2, [pc, #328]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008e06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008e0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e0c:	4b50      	ldr	r3, [pc, #320]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	494d      	ldr	r1, [pc, #308]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d044      	beq.n	8008eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d107      	bne.n	8008e42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e32:	4b47      	ldr	r3, [pc, #284]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d119      	bne.n	8008e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e07f      	b.n	8008f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d003      	beq.n	8008e52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	d107      	bne.n	8008e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e52:	4b3f      	ldr	r3, [pc, #252]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d109      	bne.n	8008e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e06f      	b.n	8008f42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e62:	4b3b      	ldr	r3, [pc, #236]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 0302 	and.w	r3, r3, #2
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e067      	b.n	8008f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e72:	4b37      	ldr	r3, [pc, #220]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f023 0203 	bic.w	r2, r3, #3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	4934      	ldr	r1, [pc, #208]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008e80:	4313      	orrs	r3, r2
 8008e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e84:	f7fe ff30 	bl	8007ce8 <HAL_GetTick>
 8008e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e8a:	e00a      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e8c:	f7fe ff2c 	bl	8007ce8 <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d901      	bls.n	8008ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e04f      	b.n	8008f42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ea2:	4b2b      	ldr	r3, [pc, #172]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f003 020c 	and.w	r2, r3, #12
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d1eb      	bne.n	8008e8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008eb4:	4b25      	ldr	r3, [pc, #148]	; (8008f4c <HAL_RCC_ClockConfig+0x1b8>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 030f 	and.w	r3, r3, #15
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d20c      	bcs.n	8008edc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ec2:	4b22      	ldr	r3, [pc, #136]	; (8008f4c <HAL_RCC_ClockConfig+0x1b8>)
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	b2d2      	uxtb	r2, r2
 8008ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eca:	4b20      	ldr	r3, [pc, #128]	; (8008f4c <HAL_RCC_ClockConfig+0x1b8>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 030f 	and.w	r3, r3, #15
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d001      	beq.n	8008edc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e032      	b.n	8008f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0304 	and.w	r3, r3, #4
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d008      	beq.n	8008efa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ee8:	4b19      	ldr	r3, [pc, #100]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	4916      	ldr	r1, [pc, #88]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0308 	and.w	r3, r3, #8
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d009      	beq.n	8008f1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f06:	4b12      	ldr	r3, [pc, #72]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	490e      	ldr	r1, [pc, #56]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008f16:	4313      	orrs	r3, r2
 8008f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008f1a:	f000 fdc7 	bl	8009aac <HAL_RCC_GetSysClockFreq>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	4b0b      	ldr	r3, [pc, #44]	; (8008f50 <HAL_RCC_ClockConfig+0x1bc>)
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	091b      	lsrs	r3, r3, #4
 8008f26:	f003 030f 	and.w	r3, r3, #15
 8008f2a:	490a      	ldr	r1, [pc, #40]	; (8008f54 <HAL_RCC_ClockConfig+0x1c0>)
 8008f2c:	5ccb      	ldrb	r3, [r1, r3]
 8008f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f32:	4a09      	ldr	r2, [pc, #36]	; (8008f58 <HAL_RCC_ClockConfig+0x1c4>)
 8008f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008f36:	4b09      	ldr	r3, [pc, #36]	; (8008f5c <HAL_RCC_ClockConfig+0x1c8>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fe fe90 	bl	8007c60 <HAL_InitTick>

  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	40023c00 	.word	0x40023c00
 8008f50:	40023800 	.word	0x40023800
 8008f54:	0802fed0 	.word	0x0802fed0
 8008f58:	2000005c 	.word	0x2000005c
 8008f5c:	20000060 	.word	0x20000060

08008f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f60:	b480      	push	{r7}
 8008f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f64:	4b03      	ldr	r3, [pc, #12]	; (8008f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f66:	681b      	ldr	r3, [r3, #0]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	2000005c 	.word	0x2000005c

08008f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f7c:	f7ff fff0 	bl	8008f60 <HAL_RCC_GetHCLKFreq>
 8008f80:	4602      	mov	r2, r0
 8008f82:	4b05      	ldr	r3, [pc, #20]	; (8008f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	0a9b      	lsrs	r3, r3, #10
 8008f88:	f003 0307 	and.w	r3, r3, #7
 8008f8c:	4903      	ldr	r1, [pc, #12]	; (8008f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f8e:	5ccb      	ldrb	r3, [r1, r3]
 8008f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	40023800 	.word	0x40023800
 8008f9c:	0802fee0 	.word	0x0802fee0

08008fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008fa4:	f7ff ffdc 	bl	8008f60 <HAL_RCC_GetHCLKFreq>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	0b5b      	lsrs	r3, r3, #13
 8008fb0:	f003 0307 	and.w	r3, r3, #7
 8008fb4:	4903      	ldr	r1, [pc, #12]	; (8008fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fb6:	5ccb      	ldrb	r3, [r1, r3]
 8008fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	40023800 	.word	0x40023800
 8008fc4:	0802fee0 	.word	0x0802fee0

08008fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08c      	sub	sp, #48	; 0x30
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d010      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8009000:	4b6f      	ldr	r3, [pc, #444]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009006:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900e:	496c      	ldr	r1, [pc, #432]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009010:	4313      	orrs	r3, r2
 8009012:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901a:	2b00      	cmp	r3, #0
 800901c:	d101      	bne.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800901e:	2301      	movs	r3, #1
 8009020:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0302 	and.w	r3, r3, #2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d010      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800902e:	4b64      	ldr	r3, [pc, #400]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009034:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903c:	4960      	ldr	r1, [pc, #384]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800903e:	4313      	orrs	r3, r2
 8009040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009048:	2b00      	cmp	r3, #0
 800904a:	d101      	bne.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800904c:	2301      	movs	r3, #1
 800904e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0304 	and.w	r3, r3, #4
 8009058:	2b00      	cmp	r3, #0
 800905a:	d017      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800905c:	4b58      	ldr	r3, [pc, #352]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800905e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906a:	4955      	ldr	r1, [pc, #340]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800906c:	4313      	orrs	r3, r2
 800906e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800907a:	d101      	bne.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800907c:	2301      	movs	r3, #1
 800907e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009084:	2b00      	cmp	r3, #0
 8009086:	d101      	bne.n	800908c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8009088:	2301      	movs	r3, #1
 800908a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0308 	and.w	r3, r3, #8
 8009094:	2b00      	cmp	r3, #0
 8009096:	d017      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009098:	4b49      	ldr	r3, [pc, #292]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800909a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800909e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a6:	4946      	ldr	r1, [pc, #280]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80090a8:	4313      	orrs	r3, r2
 80090aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090b6:	d101      	bne.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80090b8:	2301      	movs	r3, #1
 80090ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80090c4:	2301      	movs	r3, #1
 80090c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0320 	and.w	r3, r3, #32
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 808a 	beq.w	80091ea <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80090d6:	2300      	movs	r3, #0
 80090d8:	60bb      	str	r3, [r7, #8]
 80090da:	4b39      	ldr	r3, [pc, #228]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80090dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090de:	4a38      	ldr	r2, [pc, #224]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80090e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090e4:	6413      	str	r3, [r2, #64]	; 0x40
 80090e6:	4b36      	ldr	r3, [pc, #216]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80090e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090ee:	60bb      	str	r3, [r7, #8]
 80090f0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80090f2:	4b34      	ldr	r3, [pc, #208]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a33      	ldr	r2, [pc, #204]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80090f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090fe:	f7fe fdf3 	bl	8007ce8 <HAL_GetTick>
 8009102:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009104:	e008      	b.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009106:	f7fe fdef 	bl	8007ce8 <HAL_GetTick>
 800910a:	4602      	mov	r2, r0
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	2b02      	cmp	r3, #2
 8009112:	d901      	bls.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e278      	b.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009118:	4b2a      	ldr	r3, [pc, #168]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009120:	2b00      	cmp	r3, #0
 8009122:	d0f0      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009124:	4b26      	ldr	r3, [pc, #152]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800912c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d02f      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800913c:	6a3a      	ldr	r2, [r7, #32]
 800913e:	429a      	cmp	r2, r3
 8009140:	d028      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009142:	4b1f      	ldr	r3, [pc, #124]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800914a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800914c:	4b1e      	ldr	r3, [pc, #120]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800914e:	2201      	movs	r2, #1
 8009150:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009152:	4b1d      	ldr	r3, [pc, #116]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8009154:	2200      	movs	r2, #0
 8009156:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009158:	4a19      	ldr	r2, [pc, #100]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800915e:	4b18      	ldr	r3, [pc, #96]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b01      	cmp	r3, #1
 8009168:	d114      	bne.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800916a:	f7fe fdbd 	bl	8007ce8 <HAL_GetTick>
 800916e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009170:	e00a      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009172:	f7fe fdb9 	bl	8007ce8 <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009180:	4293      	cmp	r3, r2
 8009182:	d901      	bls.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e240      	b.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009188:	4b0d      	ldr	r3, [pc, #52]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800918a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918c:	f003 0302 	and.w	r3, r3, #2
 8009190:	2b00      	cmp	r3, #0
 8009192:	d0ee      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800919c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091a0:	d114      	bne.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80091a2:	4b07      	ldr	r3, [pc, #28]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80091b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091b6:	4902      	ldr	r1, [pc, #8]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80091b8:	4313      	orrs	r3, r2
 80091ba:	608b      	str	r3, [r1, #8]
 80091bc:	e00c      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80091be:	bf00      	nop
 80091c0:	40023800 	.word	0x40023800
 80091c4:	40007000 	.word	0x40007000
 80091c8:	42470e40 	.word	0x42470e40
 80091cc:	4b4a      	ldr	r3, [pc, #296]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	4a49      	ldr	r2, [pc, #292]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80091d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80091d6:	6093      	str	r3, [r2, #8]
 80091d8:	4b47      	ldr	r3, [pc, #284]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80091da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091e4:	4944      	ldr	r1, [pc, #272]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80091e6:	4313      	orrs	r3, r2
 80091e8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0310 	and.w	r3, r3, #16
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d004      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80091fc:	4b3f      	ldr	r3, [pc, #252]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80091fe:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00a      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800920c:	4b3a      	ldr	r3, [pc, #232]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800920e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009212:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800921a:	4937      	ldr	r1, [pc, #220]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800921c:	4313      	orrs	r3, r2
 800921e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00a      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800922e:	4b32      	ldr	r3, [pc, #200]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009234:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800923c:	492e      	ldr	r1, [pc, #184]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800923e:	4313      	orrs	r3, r2
 8009240:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800924c:	2b00      	cmp	r3, #0
 800924e:	d011      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009250:	4b29      	ldr	r3, [pc, #164]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009256:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800925e:	4926      	ldr	r1, [pc, #152]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009260:	4313      	orrs	r3, r2
 8009262:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800926a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800926e:	d101      	bne.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8009270:	2301      	movs	r3, #1
 8009272:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00a      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009280:	4b1d      	ldr	r3, [pc, #116]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009286:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800928e:	491a      	ldr	r1, [pc, #104]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009290:	4313      	orrs	r3, r2
 8009292:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d011      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80092a2:	4b15      	ldr	r3, [pc, #84]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80092a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092a8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b0:	4911      	ldr	r1, [pc, #68]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092c0:	d101      	bne.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80092c2:	2301      	movs	r3, #1
 80092c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80092c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d005      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092d4:	f040 80ff 	bne.w	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80092d8:	4b09      	ldr	r3, [pc, #36]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092da:	2200      	movs	r2, #0
 80092dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80092de:	f7fe fd03 	bl	8007ce8 <HAL_GetTick>
 80092e2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80092e4:	e00e      	b.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80092e6:	f7fe fcff 	bl	8007ce8 <HAL_GetTick>
 80092ea:	4602      	mov	r2, r0
 80092ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d907      	bls.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e188      	b.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x642>
 80092f8:	40023800 	.word	0x40023800
 80092fc:	424711e0 	.word	0x424711e0
 8009300:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009304:	4b7e      	ldr	r3, [pc, #504]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1ea      	bne.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	2b00      	cmp	r3, #0
 800931a:	d003      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009320:	2b00      	cmp	r3, #0
 8009322:	d009      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800932c:	2b00      	cmp	r3, #0
 800932e:	d028      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009334:	2b00      	cmp	r3, #0
 8009336:	d124      	bne.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009338:	4b71      	ldr	r3, [pc, #452]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800933a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800933e:	0c1b      	lsrs	r3, r3, #16
 8009340:	f003 0303 	and.w	r3, r3, #3
 8009344:	3301      	adds	r3, #1
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800934a:	4b6d      	ldr	r3, [pc, #436]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800934c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009350:	0e1b      	lsrs	r3, r3, #24
 8009352:	f003 030f 	and.w	r3, r3, #15
 8009356:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	019b      	lsls	r3, r3, #6
 8009362:	431a      	orrs	r2, r3
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	085b      	lsrs	r3, r3, #1
 8009368:	3b01      	subs	r3, #1
 800936a:	041b      	lsls	r3, r3, #16
 800936c:	431a      	orrs	r2, r3
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	061b      	lsls	r3, r3, #24
 8009372:	431a      	orrs	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	071b      	lsls	r3, r3, #28
 800937a:	4961      	ldr	r1, [pc, #388]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800937c:	4313      	orrs	r3, r2
 800937e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0304 	and.w	r3, r3, #4
 800938a:	2b00      	cmp	r3, #0
 800938c:	d004      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009396:	d00a      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d035      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093ac:	d130      	bne.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80093ae:	4b54      	ldr	r3, [pc, #336]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80093b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093b4:	0c1b      	lsrs	r3, r3, #16
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	3301      	adds	r3, #1
 80093bc:	005b      	lsls	r3, r3, #1
 80093be:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80093c0:	4b4f      	ldr	r3, [pc, #316]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80093c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093c6:	0f1b      	lsrs	r3, r3, #28
 80093c8:	f003 0307 	and.w	r3, r3, #7
 80093cc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	019b      	lsls	r3, r3, #6
 80093d8:	431a      	orrs	r2, r3
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	085b      	lsrs	r3, r3, #1
 80093de:	3b01      	subs	r3, #1
 80093e0:	041b      	lsls	r3, r3, #16
 80093e2:	431a      	orrs	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	061b      	lsls	r3, r3, #24
 80093ea:	431a      	orrs	r2, r3
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	071b      	lsls	r3, r3, #28
 80093f0:	4943      	ldr	r1, [pc, #268]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80093f2:	4313      	orrs	r3, r2
 80093f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80093f8:	4b41      	ldr	r3, [pc, #260]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80093fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093fe:	f023 021f 	bic.w	r2, r3, #31
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009406:	3b01      	subs	r3, #1
 8009408:	493d      	ldr	r1, [pc, #244]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800940a:	4313      	orrs	r3, r2
 800940c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009418:	2b00      	cmp	r3, #0
 800941a:	d029      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009424:	d124      	bne.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009426:	4b36      	ldr	r3, [pc, #216]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800942c:	0c1b      	lsrs	r3, r3, #16
 800942e:	f003 0303 	and.w	r3, r3, #3
 8009432:	3301      	adds	r3, #1
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009438:	4b31      	ldr	r3, [pc, #196]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800943a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800943e:	0f1b      	lsrs	r3, r3, #28
 8009440:	f003 0307 	and.w	r3, r3, #7
 8009444:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	019b      	lsls	r3, r3, #6
 8009450:	431a      	orrs	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	085b      	lsrs	r3, r3, #1
 8009458:	3b01      	subs	r3, #1
 800945a:	041b      	lsls	r3, r3, #16
 800945c:	431a      	orrs	r2, r3
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	061b      	lsls	r3, r3, #24
 8009462:	431a      	orrs	r2, r3
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	071b      	lsls	r3, r3, #28
 8009468:	4925      	ldr	r1, [pc, #148]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800946a:	4313      	orrs	r3, r2
 800946c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009478:	2b00      	cmp	r3, #0
 800947a:	d016      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	019b      	lsls	r3, r3, #6
 8009486:	431a      	orrs	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	085b      	lsrs	r3, r3, #1
 800948e:	3b01      	subs	r3, #1
 8009490:	041b      	lsls	r3, r3, #16
 8009492:	431a      	orrs	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	061b      	lsls	r3, r3, #24
 800949a:	431a      	orrs	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	071b      	lsls	r3, r3, #28
 80094a2:	4917      	ldr	r1, [pc, #92]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80094a4:	4313      	orrs	r3, r2
 80094a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80094aa:	4b16      	ldr	r3, [pc, #88]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80094ac:	2201      	movs	r2, #1
 80094ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80094b0:	f7fe fc1a 	bl	8007ce8 <HAL_GetTick>
 80094b4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80094b6:	e008      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80094b8:	f7fe fc16 	bl	8007ce8 <HAL_GetTick>
 80094bc:	4602      	mov	r2, r0
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d901      	bls.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094c6:	2303      	movs	r3, #3
 80094c8:	e09f      	b.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80094ca:	4b0d      	ldr	r3, [pc, #52]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0f0      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80094d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d8:	2b01      	cmp	r3, #1
 80094da:	f040 8095 	bne.w	8009608 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80094de:	4b0a      	ldr	r3, [pc, #40]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80094e4:	f7fe fc00 	bl	8007ce8 <HAL_GetTick>
 80094e8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80094ea:	e00f      	b.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80094ec:	f7fe fbfc 	bl	8007ce8 <HAL_GetTick>
 80094f0:	4602      	mov	r2, r0
 80094f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d908      	bls.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e085      	b.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x642>
 80094fe:	bf00      	nop
 8009500:	40023800 	.word	0x40023800
 8009504:	42470068 	.word	0x42470068
 8009508:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800950c:	4b41      	ldr	r3, [pc, #260]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009518:	d0e8      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0304 	and.w	r3, r3, #4
 8009522:	2b00      	cmp	r3, #0
 8009524:	d003      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952a:	2b00      	cmp	r3, #0
 800952c:	d009      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8009536:	2b00      	cmp	r3, #0
 8009538:	d02b      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800953e:	2b00      	cmp	r3, #0
 8009540:	d127      	bne.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009542:	4b34      	ldr	r3, [pc, #208]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009548:	0c1b      	lsrs	r3, r3, #16
 800954a:	f003 0303 	and.w	r3, r3, #3
 800954e:	3301      	adds	r3, #1
 8009550:	005b      	lsls	r3, r3, #1
 8009552:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	699a      	ldr	r2, [r3, #24]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	69db      	ldr	r3, [r3, #28]
 800955c:	019b      	lsls	r3, r3, #6
 800955e:	431a      	orrs	r2, r3
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	085b      	lsrs	r3, r3, #1
 8009564:	3b01      	subs	r3, #1
 8009566:	041b      	lsls	r3, r3, #16
 8009568:	431a      	orrs	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956e:	061b      	lsls	r3, r3, #24
 8009570:	4928      	ldr	r1, [pc, #160]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009572:	4313      	orrs	r3, r2
 8009574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009578:	4b26      	ldr	r3, [pc, #152]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800957a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800957e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009586:	3b01      	subs	r3, #1
 8009588:	021b      	lsls	r3, r3, #8
 800958a:	4922      	ldr	r1, [pc, #136]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800958c:	4313      	orrs	r3, r2
 800958e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800959a:	2b00      	cmp	r3, #0
 800959c:	d01d      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x612>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095a6:	d118      	bne.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80095a8:	4b1a      	ldr	r3, [pc, #104]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80095aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ae:	0e1b      	lsrs	r3, r3, #24
 80095b0:	f003 030f 	and.w	r3, r3, #15
 80095b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699a      	ldr	r2, [r3, #24]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	019b      	lsls	r3, r3, #6
 80095c0:	431a      	orrs	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	085b      	lsrs	r3, r3, #1
 80095c8:	3b01      	subs	r3, #1
 80095ca:	041b      	lsls	r3, r3, #16
 80095cc:	431a      	orrs	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	061b      	lsls	r3, r3, #24
 80095d2:	4910      	ldr	r1, [pc, #64]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80095da:	4b0f      	ldr	r3, [pc, #60]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80095dc:	2201      	movs	r2, #1
 80095de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80095e0:	f7fe fb82 	bl	8007ce8 <HAL_GetTick>
 80095e4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80095e6:	e008      	b.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80095e8:	f7fe fb7e 	bl	8007ce8 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d901      	bls.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095f6:	2303      	movs	r3, #3
 80095f8:	e007      	b.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80095fa:	4b06      	ldr	r3, [pc, #24]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009606:	d1ef      	bne.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3730      	adds	r7, #48	; 0x30
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	40023800 	.word	0x40023800
 8009618:	42470070 	.word	0x42470070

0800961c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800961c:	b480      	push	{r7}
 800961e:	b089      	sub	sp, #36	; 0x24
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8009628:	2300      	movs	r3, #0
 800962a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800962c:	2300      	movs	r3, #0
 800962e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8009630:	2300      	movs	r3, #0
 8009632:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8009634:	2300      	movs	r3, #0
 8009636:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009638:	2300      	movs	r3, #0
 800963a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	3b01      	subs	r3, #1
 8009640:	2b07      	cmp	r3, #7
 8009642:	f200 8224 	bhi.w	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009646:	a201      	add	r2, pc, #4	; (adr r2, 800964c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964c:	0800984f 	.word	0x0800984f
 8009650:	08009979 	.word	0x08009979
 8009654:	08009a8f 	.word	0x08009a8f
 8009658:	0800966d 	.word	0x0800966d
 800965c:	08009a8f 	.word	0x08009a8f
 8009660:	08009a8f 	.word	0x08009a8f
 8009664:	08009a8f 	.word	0x08009a8f
 8009668:	0800966d 	.word	0x0800966d
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 800966c:	4ba8      	ldr	r3, [pc, #672]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800966e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009672:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800967a:	613b      	str	r3, [r7, #16]
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009682:	f000 80d6 	beq.w	8009832 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800968c:	f200 80dd 	bhi.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009696:	f000 809f 	beq.w	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096a0:	f200 80d3 	bhi.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096aa:	d05b      	beq.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096b2:	f200 80ca 	bhi.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096bc:	f000 80b6 	beq.w	800982c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096c6:	f200 80c0 	bhi.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096d0:	f000 8082 	beq.w	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096da:	f200 80b6 	bhi.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d004      	beq.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096ea:	d03b      	beq.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 80096ec:	e0ad      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80096ee:	4b88      	ldr	r3, [pc, #544]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d109      	bne.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 80096fa:	4b85      	ldr	r3, [pc, #532]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80096fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009704:	4a83      	ldr	r2, [pc, #524]	; (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009706:	fbb2 f3f3 	udiv	r3, r2, r3
 800970a:	61bb      	str	r3, [r7, #24]
 800970c:	e008      	b.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800970e:	4b80      	ldr	r3, [pc, #512]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8009710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009718:	4a7f      	ldr	r2, [pc, #508]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800971a:	fbb2 f3f3 	udiv	r3, r2, r3
 800971e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8009720:	4b7b      	ldr	r3, [pc, #492]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8009722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009726:	0e1b      	lsrs	r3, r3, #24
 8009728:	f003 030f 	and.w	r3, r3, #15
 800972c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800972e:	4b78      	ldr	r3, [pc, #480]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8009730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009734:	099b      	lsrs	r3, r3, #6
 8009736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800973a:	69ba      	ldr	r2, [r7, #24]
 800973c:	fb03 f202 	mul.w	r2, r3, r2
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	fbb2 f3f3 	udiv	r3, r2, r3
 8009746:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8009748:	4b71      	ldr	r3, [pc, #452]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800974a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800974e:	0a1b      	lsrs	r3, r3, #8
 8009750:	f003 031f 	and.w	r3, r3, #31
 8009754:	3301      	adds	r3, #1
 8009756:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8009758:	69fa      	ldr	r2, [r7, #28]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009760:	61fb      	str	r3, [r7, #28]
          break;
 8009762:	e073      	b.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009764:	4b6a      	ldr	r3, [pc, #424]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d109      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009770:	4b67      	ldr	r3, [pc, #412]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8009772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800977a:	4a66      	ldr	r2, [pc, #408]	; (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800977c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009780:	61bb      	str	r3, [r7, #24]
 8009782:	e008      	b.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8009784:	4b62      	ldr	r3, [pc, #392]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8009786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800978a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800978e:	4a62      	ldr	r2, [pc, #392]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8009790:	fbb2 f3f3 	udiv	r3, r2, r3
 8009794:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8009796:	4b5e      	ldr	r3, [pc, #376]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8009798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800979c:	0e1b      	lsrs	r3, r3, #24
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80097a4:	4b5a      	ldr	r3, [pc, #360]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80097a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097aa:	099b      	lsrs	r3, r3, #6
 80097ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b0:	69ba      	ldr	r2, [r7, #24]
 80097b2:	fb03 f202 	mul.w	r2, r3, r2
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80097bc:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80097be:	4b54      	ldr	r3, [pc, #336]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80097c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097c4:	f003 031f 	and.w	r3, r3, #31
 80097c8:	3301      	adds	r3, #1
 80097ca:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80097cc:	69fa      	ldr	r2, [r7, #28]
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097d4:	61fb      	str	r3, [r7, #28]
          break;
 80097d6:	e039      	b.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80097d8:	4b4d      	ldr	r3, [pc, #308]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d108      	bne.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80097e4:	4b4a      	ldr	r3, [pc, #296]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097ec:	4a49      	ldr	r2, [pc, #292]	; (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80097ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80097f2:	61bb      	str	r3, [r7, #24]
 80097f4:	e007      	b.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80097f6:	4b46      	ldr	r3, [pc, #280]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097fe:	4a46      	ldr	r2, [pc, #280]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8009800:	fbb2 f3f3 	udiv	r3, r2, r3
 8009804:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8009806:	4b42      	ldr	r3, [pc, #264]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	0f1b      	lsrs	r3, r3, #28
 800980c:	f003 0307 	and.w	r3, r3, #7
 8009810:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8009812:	4b3f      	ldr	r3, [pc, #252]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	099b      	lsrs	r3, r3, #6
 8009818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800981c:	69ba      	ldr	r2, [r7, #24]
 800981e:	fb03 f202 	mul.w	r2, r3, r2
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	fbb2 f3f3 	udiv	r3, r2, r3
 8009828:	61fb      	str	r3, [r7, #28]
          break;
 800982a:	e00f      	b.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 800982c:	4b3b      	ldr	r3, [pc, #236]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800982e:	61fb      	str	r3, [r7, #28]
          break;
 8009830:	e00c      	b.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009832:	4b37      	ldr	r3, [pc, #220]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800983a:	2b00      	cmp	r3, #0
 800983c:	d102      	bne.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 800983e:	4b35      	ldr	r3, [pc, #212]	; (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009840:	61fb      	str	r3, [r7, #28]
          break;
 8009842:	e003      	b.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8009844:	4b34      	ldr	r3, [pc, #208]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8009846:	61fb      	str	r3, [r7, #28]
          break;
 8009848:	e000      	b.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 800984a:	bf00      	nop
        }
      }
      break;
 800984c:	e11f      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800984e:	4b30      	ldr	r3, [pc, #192]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8009850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009854:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009858:	60fb      	str	r3, [r7, #12]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009860:	d079      	beq.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009868:	f200 8082 	bhi.w	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009872:	d03c      	beq.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800987a:	d879      	bhi.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d006      	beq.n	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009888:	d172      	bne.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800988a:	4b24      	ldr	r3, [pc, #144]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800988c:	61fb      	str	r3, [r7, #28]
          break;
 800988e:	e072      	b.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009890:	4b1f      	ldr	r3, [pc, #124]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800989c:	d109      	bne.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800989e:	4b1c      	ldr	r3, [pc, #112]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80098a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098a8:	4a1b      	ldr	r2, [pc, #108]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80098aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ae:	61bb      	str	r3, [r7, #24]
 80098b0:	e008      	b.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80098b2:	4b17      	ldr	r3, [pc, #92]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80098b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098bc:	4a15      	ldr	r2, [pc, #84]	; (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80098be:	fbb2 f3f3 	udiv	r3, r2, r3
 80098c2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80098c4:	4b12      	ldr	r3, [pc, #72]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80098c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098ca:	099b      	lsrs	r3, r3, #6
 80098cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	fb02 f303 	mul.w	r3, r2, r3
 80098d6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80098d8:	4b0d      	ldr	r3, [pc, #52]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80098da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098de:	0f1b      	lsrs	r3, r3, #28
 80098e0:	f003 0307 	and.w	r3, r3, #7
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ea:	61fb      	str	r3, [r7, #28]
          break;
 80098ec:	e043      	b.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80098ee:	4b08      	ldr	r3, [pc, #32]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098fa:	d111      	bne.n	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80098fc:	4b04      	ldr	r3, [pc, #16]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009904:	4a04      	ldr	r2, [pc, #16]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8009906:	fbb2 f3f3 	udiv	r3, r2, r3
 800990a:	61bb      	str	r3, [r7, #24]
 800990c:	e010      	b.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800990e:	bf00      	nop
 8009910:	40023800 	.word	0x40023800
 8009914:	00f42400 	.word	0x00f42400
 8009918:	007a1200 	.word	0x007a1200
 800991c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009920:	4b5e      	ldr	r3, [pc, #376]	; (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009928:	4a5d      	ldr	r2, [pc, #372]	; (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800992a:	fbb2 f3f3 	udiv	r3, r2, r3
 800992e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8009930:	4b5a      	ldr	r3, [pc, #360]	; (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	099b      	lsrs	r3, r3, #6
 8009936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	fb02 f303 	mul.w	r3, r2, r3
 8009940:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8009942:	4b56      	ldr	r3, [pc, #344]	; (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	0f1b      	lsrs	r3, r3, #28
 8009948:	f003 0307 	and.w	r3, r3, #7
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009952:	61fb      	str	r3, [r7, #28]
          break;
 8009954:	e00f      	b.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009956:	4b51      	ldr	r3, [pc, #324]	; (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800995e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009962:	d102      	bne.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8009964:	4b4f      	ldr	r3, [pc, #316]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8009966:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8009968:	e005      	b.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 800996a:	4b4d      	ldr	r3, [pc, #308]	; (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800996c:	61fb      	str	r3, [r7, #28]
          break;
 800996e:	e002      	b.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8009970:	2300      	movs	r3, #0
 8009972:	61fb      	str	r3, [r7, #28]
          break;
 8009974:	bf00      	nop
        }
      }
      break;
 8009976:	e08a      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8009978:	4b48      	ldr	r3, [pc, #288]	; (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800997a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800997e:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8009982:	60fb      	str	r3, [r7, #12]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800998a:	d06f      	beq.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8009992:	d878      	bhi.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800999a:	d03c      	beq.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099a2:	d870      	bhi.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d006      	beq.n	80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099b0:	d169      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80099b2:	4b3d      	ldr	r3, [pc, #244]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80099b4:	61fb      	str	r3, [r7, #28]
          break;
 80099b6:	e069      	b.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80099b8:	4b38      	ldr	r3, [pc, #224]	; (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099c4:	d109      	bne.n	80099da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80099c6:	4b35      	ldr	r3, [pc, #212]	; (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80099c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099d0:	4a34      	ldr	r2, [pc, #208]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80099d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d6:	61bb      	str	r3, [r7, #24]
 80099d8:	e008      	b.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80099da:	4b30      	ldr	r3, [pc, #192]	; (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80099dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099e4:	4a2e      	ldr	r2, [pc, #184]	; (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80099e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ea:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80099ec:	4b2b      	ldr	r3, [pc, #172]	; (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80099ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099f2:	099b      	lsrs	r3, r3, #6
 80099f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	fb02 f303 	mul.w	r3, r2, r3
 80099fe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8009a00:	4b26      	ldr	r3, [pc, #152]	; (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8009a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a06:	0f1b      	lsrs	r3, r3, #28
 8009a08:	f003 0307 	and.w	r3, r3, #7
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a12:	61fb      	str	r3, [r7, #28]
          break;
 8009a14:	e03a      	b.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009a16:	4b21      	ldr	r3, [pc, #132]	; (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a22:	d108      	bne.n	8009a36 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009a24:	4b1d      	ldr	r3, [pc, #116]	; (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a2c:	4a1d      	ldr	r2, [pc, #116]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8009a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a32:	61bb      	str	r3, [r7, #24]
 8009a34:	e007      	b.n	8009a46 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009a36:	4b19      	ldr	r3, [pc, #100]	; (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a3e:	4a18      	ldr	r2, [pc, #96]	; (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8009a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a44:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8009a46:	4b15      	ldr	r3, [pc, #84]	; (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	099b      	lsrs	r3, r3, #6
 8009a4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	fb02 f303 	mul.w	r3, r2, r3
 8009a56:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8009a58:	4b10      	ldr	r3, [pc, #64]	; (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	0f1b      	lsrs	r3, r3, #28
 8009a5e:	f003 0307 	and.w	r3, r3, #7
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a68:	61fb      	str	r3, [r7, #28]
          break;
 8009a6a:	e00f      	b.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009a6c:	4b0b      	ldr	r3, [pc, #44]	; (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a78:	d102      	bne.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8009a7a:	4b0a      	ldr	r3, [pc, #40]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8009a7c:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8009a7e:	e005      	b.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8009a80:	4b07      	ldr	r3, [pc, #28]	; (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8009a82:	61fb      	str	r3, [r7, #28]
          break;
 8009a84:	e002      	b.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	61fb      	str	r3, [r7, #28]
          break;
 8009a8a:	bf00      	nop
        }
      }
      break;
 8009a8c:	bf00      	nop
    }
  }
  return frequency;
 8009a8e:	69fb      	ldr	r3, [r7, #28]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3724      	adds	r7, #36	; 0x24
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	40023800 	.word	0x40023800
 8009aa0:	00f42400 	.word	0x00f42400
 8009aa4:	007a1200 	.word	0x007a1200
 8009aa8:	00bb8000 	.word	0x00bb8000

08009aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ab0:	b0ae      	sub	sp, #184	; 0xb8
 8009ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8009acc:	2300      	movs	r3, #0
 8009ace:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ad2:	4bcb      	ldr	r3, [pc, #812]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f003 030c 	and.w	r3, r3, #12
 8009ada:	2b0c      	cmp	r3, #12
 8009adc:	f200 8206 	bhi.w	8009eec <HAL_RCC_GetSysClockFreq+0x440>
 8009ae0:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8009ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae6:	bf00      	nop
 8009ae8:	08009b1d 	.word	0x08009b1d
 8009aec:	08009eed 	.word	0x08009eed
 8009af0:	08009eed 	.word	0x08009eed
 8009af4:	08009eed 	.word	0x08009eed
 8009af8:	08009b25 	.word	0x08009b25
 8009afc:	08009eed 	.word	0x08009eed
 8009b00:	08009eed 	.word	0x08009eed
 8009b04:	08009eed 	.word	0x08009eed
 8009b08:	08009b2d 	.word	0x08009b2d
 8009b0c:	08009eed 	.word	0x08009eed
 8009b10:	08009eed 	.word	0x08009eed
 8009b14:	08009eed 	.word	0x08009eed
 8009b18:	08009d1d 	.word	0x08009d1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009b1c:	4bb9      	ldr	r3, [pc, #740]	; (8009e04 <HAL_RCC_GetSysClockFreq+0x358>)
 8009b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8009b22:	e1e7      	b.n	8009ef4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009b24:	4bb8      	ldr	r3, [pc, #736]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009b26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009b2a:	e1e3      	b.n	8009ef4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009b2c:	4bb4      	ldr	r3, [pc, #720]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009b38:	4bb1      	ldr	r3, [pc, #708]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d071      	beq.n	8009c28 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b44:	4bae      	ldr	r3, [pc, #696]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	099b      	lsrs	r3, r3, #6
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009b50:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b60:	2300      	movs	r3, #0
 8009b62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009b66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009b6a:	4622      	mov	r2, r4
 8009b6c:	462b      	mov	r3, r5
 8009b6e:	f04f 0000 	mov.w	r0, #0
 8009b72:	f04f 0100 	mov.w	r1, #0
 8009b76:	0159      	lsls	r1, r3, #5
 8009b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009b7c:	0150      	lsls	r0, r2, #5
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	4621      	mov	r1, r4
 8009b84:	1a51      	subs	r1, r2, r1
 8009b86:	6439      	str	r1, [r7, #64]	; 0x40
 8009b88:	4629      	mov	r1, r5
 8009b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8009b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8009b90:	f04f 0200 	mov.w	r2, #0
 8009b94:	f04f 0300 	mov.w	r3, #0
 8009b98:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8009b9c:	4649      	mov	r1, r9
 8009b9e:	018b      	lsls	r3, r1, #6
 8009ba0:	4641      	mov	r1, r8
 8009ba2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009ba6:	4641      	mov	r1, r8
 8009ba8:	018a      	lsls	r2, r1, #6
 8009baa:	4641      	mov	r1, r8
 8009bac:	1a51      	subs	r1, r2, r1
 8009bae:	63b9      	str	r1, [r7, #56]	; 0x38
 8009bb0:	4649      	mov	r1, r9
 8009bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8009bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bb8:	f04f 0200 	mov.w	r2, #0
 8009bbc:	f04f 0300 	mov.w	r3, #0
 8009bc0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8009bc4:	4649      	mov	r1, r9
 8009bc6:	00cb      	lsls	r3, r1, #3
 8009bc8:	4641      	mov	r1, r8
 8009bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bce:	4641      	mov	r1, r8
 8009bd0:	00ca      	lsls	r2, r1, #3
 8009bd2:	4610      	mov	r0, r2
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	4622      	mov	r2, r4
 8009bda:	189b      	adds	r3, r3, r2
 8009bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8009bde:	462b      	mov	r3, r5
 8009be0:	460a      	mov	r2, r1
 8009be2:	eb42 0303 	adc.w	r3, r2, r3
 8009be6:	637b      	str	r3, [r7, #52]	; 0x34
 8009be8:	f04f 0200 	mov.w	r2, #0
 8009bec:	f04f 0300 	mov.w	r3, #0
 8009bf0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	024b      	lsls	r3, r1, #9
 8009bf8:	4621      	mov	r1, r4
 8009bfa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009bfe:	4621      	mov	r1, r4
 8009c00:	024a      	lsls	r2, r1, #9
 8009c02:	4610      	mov	r0, r2
 8009c04:	4619      	mov	r1, r3
 8009c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009c10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009c14:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009c18:	f7f7 f8b0 	bl	8000d7c <__aeabi_uldivmod>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	4613      	mov	r3, r2
 8009c22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c26:	e067      	b.n	8009cf8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c28:	4b75      	ldr	r3, [pc, #468]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	099b      	lsrs	r3, r3, #6
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c34:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8009c38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c40:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c42:	2300      	movs	r3, #0
 8009c44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8009c4a:	4622      	mov	r2, r4
 8009c4c:	462b      	mov	r3, r5
 8009c4e:	f04f 0000 	mov.w	r0, #0
 8009c52:	f04f 0100 	mov.w	r1, #0
 8009c56:	0159      	lsls	r1, r3, #5
 8009c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c5c:	0150      	lsls	r0, r2, #5
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	4621      	mov	r1, r4
 8009c64:	1a51      	subs	r1, r2, r1
 8009c66:	62b9      	str	r1, [r7, #40]	; 0x28
 8009c68:	4629      	mov	r1, r5
 8009c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8009c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c70:	f04f 0200 	mov.w	r2, #0
 8009c74:	f04f 0300 	mov.w	r3, #0
 8009c78:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	018b      	lsls	r3, r1, #6
 8009c80:	4641      	mov	r1, r8
 8009c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009c86:	4641      	mov	r1, r8
 8009c88:	018a      	lsls	r2, r1, #6
 8009c8a:	4641      	mov	r1, r8
 8009c8c:	ebb2 0a01 	subs.w	sl, r2, r1
 8009c90:	4649      	mov	r1, r9
 8009c92:	eb63 0b01 	sbc.w	fp, r3, r1
 8009c96:	f04f 0200 	mov.w	r2, #0
 8009c9a:	f04f 0300 	mov.w	r3, #0
 8009c9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009ca2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009ca6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009caa:	4692      	mov	sl, r2
 8009cac:	469b      	mov	fp, r3
 8009cae:	4623      	mov	r3, r4
 8009cb0:	eb1a 0303 	adds.w	r3, sl, r3
 8009cb4:	623b      	str	r3, [r7, #32]
 8009cb6:	462b      	mov	r3, r5
 8009cb8:	eb4b 0303 	adc.w	r3, fp, r3
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8009cbe:	f04f 0200 	mov.w	r2, #0
 8009cc2:	f04f 0300 	mov.w	r3, #0
 8009cc6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009cca:	4629      	mov	r1, r5
 8009ccc:	028b      	lsls	r3, r1, #10
 8009cce:	4621      	mov	r1, r4
 8009cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	028a      	lsls	r2, r1, #10
 8009cd8:	4610      	mov	r0, r2
 8009cda:	4619      	mov	r1, r3
 8009cdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	673b      	str	r3, [r7, #112]	; 0x70
 8009ce4:	677a      	str	r2, [r7, #116]	; 0x74
 8009ce6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009cea:	f7f7 f847 	bl	8000d7c <__aeabi_uldivmod>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009cf8:	4b41      	ldr	r3, [pc, #260]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	0c1b      	lsrs	r3, r3, #16
 8009cfe:	f003 0303 	and.w	r3, r3, #3
 8009d02:	3301      	adds	r3, #1
 8009d04:	005b      	lsls	r3, r3, #1
 8009d06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8009d0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009d1a:	e0eb      	b.n	8009ef4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d1c:	4b38      	ldr	r3, [pc, #224]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d28:	4b35      	ldr	r3, [pc, #212]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d06b      	beq.n	8009e0c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d34:	4b32      	ldr	r3, [pc, #200]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x354>)
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	099b      	lsrs	r3, r3, #6
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d46:	663b      	str	r3, [r7, #96]	; 0x60
 8009d48:	2300      	movs	r3, #0
 8009d4a:	667b      	str	r3, [r7, #100]	; 0x64
 8009d4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8009d50:	4622      	mov	r2, r4
 8009d52:	462b      	mov	r3, r5
 8009d54:	f04f 0000 	mov.w	r0, #0
 8009d58:	f04f 0100 	mov.w	r1, #0
 8009d5c:	0159      	lsls	r1, r3, #5
 8009d5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009d62:	0150      	lsls	r0, r2, #5
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	4621      	mov	r1, r4
 8009d6a:	1a51      	subs	r1, r2, r1
 8009d6c:	61b9      	str	r1, [r7, #24]
 8009d6e:	4629      	mov	r1, r5
 8009d70:	eb63 0301 	sbc.w	r3, r3, r1
 8009d74:	61fb      	str	r3, [r7, #28]
 8009d76:	f04f 0200 	mov.w	r2, #0
 8009d7a:	f04f 0300 	mov.w	r3, #0
 8009d7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8009d82:	4659      	mov	r1, fp
 8009d84:	018b      	lsls	r3, r1, #6
 8009d86:	4651      	mov	r1, sl
 8009d88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009d8c:	4651      	mov	r1, sl
 8009d8e:	018a      	lsls	r2, r1, #6
 8009d90:	4651      	mov	r1, sl
 8009d92:	ebb2 0801 	subs.w	r8, r2, r1
 8009d96:	4659      	mov	r1, fp
 8009d98:	eb63 0901 	sbc.w	r9, r3, r1
 8009d9c:	f04f 0200 	mov.w	r2, #0
 8009da0:	f04f 0300 	mov.w	r3, #0
 8009da4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009da8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009dac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009db0:	4690      	mov	r8, r2
 8009db2:	4699      	mov	r9, r3
 8009db4:	4623      	mov	r3, r4
 8009db6:	eb18 0303 	adds.w	r3, r8, r3
 8009dba:	613b      	str	r3, [r7, #16]
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	eb49 0303 	adc.w	r3, r9, r3
 8009dc2:	617b      	str	r3, [r7, #20]
 8009dc4:	f04f 0200 	mov.w	r2, #0
 8009dc8:	f04f 0300 	mov.w	r3, #0
 8009dcc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	024b      	lsls	r3, r1, #9
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009dda:	4621      	mov	r1, r4
 8009ddc:	024a      	lsls	r2, r1, #9
 8009dde:	4610      	mov	r0, r2
 8009de0:	4619      	mov	r1, r3
 8009de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009de6:	2200      	movs	r2, #0
 8009de8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009dea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009dec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009df0:	f7f6 ffc4 	bl	8000d7c <__aeabi_uldivmod>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	4613      	mov	r3, r2
 8009dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009dfe:	e065      	b.n	8009ecc <HAL_RCC_GetSysClockFreq+0x420>
 8009e00:	40023800 	.word	0x40023800
 8009e04:	00f42400 	.word	0x00f42400
 8009e08:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e0c:	4b3d      	ldr	r3, [pc, #244]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x458>)
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	099b      	lsrs	r3, r3, #6
 8009e12:	2200      	movs	r2, #0
 8009e14:	4618      	mov	r0, r3
 8009e16:	4611      	mov	r1, r2
 8009e18:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009e1c:	653b      	str	r3, [r7, #80]	; 0x50
 8009e1e:	2300      	movs	r3, #0
 8009e20:	657b      	str	r3, [r7, #84]	; 0x54
 8009e22:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8009e26:	4642      	mov	r2, r8
 8009e28:	464b      	mov	r3, r9
 8009e2a:	f04f 0000 	mov.w	r0, #0
 8009e2e:	f04f 0100 	mov.w	r1, #0
 8009e32:	0159      	lsls	r1, r3, #5
 8009e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e38:	0150      	lsls	r0, r2, #5
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4641      	mov	r1, r8
 8009e40:	1a51      	subs	r1, r2, r1
 8009e42:	60b9      	str	r1, [r7, #8]
 8009e44:	4649      	mov	r1, r9
 8009e46:	eb63 0301 	sbc.w	r3, r3, r1
 8009e4a:	60fb      	str	r3, [r7, #12]
 8009e4c:	f04f 0200 	mov.w	r2, #0
 8009e50:	f04f 0300 	mov.w	r3, #0
 8009e54:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009e58:	4659      	mov	r1, fp
 8009e5a:	018b      	lsls	r3, r1, #6
 8009e5c:	4651      	mov	r1, sl
 8009e5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009e62:	4651      	mov	r1, sl
 8009e64:	018a      	lsls	r2, r1, #6
 8009e66:	4651      	mov	r1, sl
 8009e68:	1a54      	subs	r4, r2, r1
 8009e6a:	4659      	mov	r1, fp
 8009e6c:	eb63 0501 	sbc.w	r5, r3, r1
 8009e70:	f04f 0200 	mov.w	r2, #0
 8009e74:	f04f 0300 	mov.w	r3, #0
 8009e78:	00eb      	lsls	r3, r5, #3
 8009e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e7e:	00e2      	lsls	r2, r4, #3
 8009e80:	4614      	mov	r4, r2
 8009e82:	461d      	mov	r5, r3
 8009e84:	4643      	mov	r3, r8
 8009e86:	18e3      	adds	r3, r4, r3
 8009e88:	603b      	str	r3, [r7, #0]
 8009e8a:	464b      	mov	r3, r9
 8009e8c:	eb45 0303 	adc.w	r3, r5, r3
 8009e90:	607b      	str	r3, [r7, #4]
 8009e92:	f04f 0200 	mov.w	r2, #0
 8009e96:	f04f 0300 	mov.w	r3, #0
 8009e9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	028b      	lsls	r3, r1, #10
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009ea8:	4621      	mov	r1, r4
 8009eaa:	028a      	lsls	r2, r1, #10
 8009eac:	4610      	mov	r0, r2
 8009eae:	4619      	mov	r1, r3
 8009eb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009eb8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009eba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009ebe:	f7f6 ff5d 	bl	8000d7c <__aeabi_uldivmod>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009ecc:	4b0d      	ldr	r3, [pc, #52]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x458>)
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	0f1b      	lsrs	r3, r3, #28
 8009ed2:	f003 0307 	and.w	r3, r3, #7
 8009ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8009eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009eea:	e003      	b.n	8009ef4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009eec:	4b06      	ldr	r3, [pc, #24]	; (8009f08 <HAL_RCC_GetSysClockFreq+0x45c>)
 8009eee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009ef2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009ef4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	37b8      	adds	r7, #184	; 0xb8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f02:	bf00      	nop
 8009f04:	40023800 	.word	0x40023800
 8009f08:	00f42400 	.word	0x00f42400

08009f0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e28d      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f000 8083 	beq.w	800a032 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009f2c:	4b94      	ldr	r3, [pc, #592]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	f003 030c 	and.w	r3, r3, #12
 8009f34:	2b04      	cmp	r3, #4
 8009f36:	d019      	beq.n	8009f6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009f38:	4b91      	ldr	r3, [pc, #580]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d106      	bne.n	8009f52 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009f44:	4b8e      	ldr	r3, [pc, #568]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f50:	d00c      	beq.n	8009f6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f52:	4b8b      	ldr	r3, [pc, #556]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009f5a:	2b0c      	cmp	r3, #12
 8009f5c:	d112      	bne.n	8009f84 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f5e:	4b88      	ldr	r3, [pc, #544]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f6a:	d10b      	bne.n	8009f84 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f6c:	4b84      	ldr	r3, [pc, #528]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d05b      	beq.n	800a030 <HAL_RCC_OscConfig+0x124>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d157      	bne.n	800a030 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e25a      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f8c:	d106      	bne.n	8009f9c <HAL_RCC_OscConfig+0x90>
 8009f8e:	4b7c      	ldr	r3, [pc, #496]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a7b      	ldr	r2, [pc, #492]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f98:	6013      	str	r3, [r2, #0]
 8009f9a:	e01d      	b.n	8009fd8 <HAL_RCC_OscConfig+0xcc>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fa4:	d10c      	bne.n	8009fc0 <HAL_RCC_OscConfig+0xb4>
 8009fa6:	4b76      	ldr	r3, [pc, #472]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a75      	ldr	r2, [pc, #468]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009fb0:	6013      	str	r3, [r2, #0]
 8009fb2:	4b73      	ldr	r3, [pc, #460]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a72      	ldr	r2, [pc, #456]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fbc:	6013      	str	r3, [r2, #0]
 8009fbe:	e00b      	b.n	8009fd8 <HAL_RCC_OscConfig+0xcc>
 8009fc0:	4b6f      	ldr	r3, [pc, #444]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a6e      	ldr	r2, [pc, #440]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fca:	6013      	str	r3, [r2, #0]
 8009fcc:	4b6c      	ldr	r3, [pc, #432]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a6b      	ldr	r2, [pc, #428]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d013      	beq.n	800a008 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe0:	f7fd fe82 	bl	8007ce8 <HAL_GetTick>
 8009fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fe6:	e008      	b.n	8009ffa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009fe8:	f7fd fe7e 	bl	8007ce8 <HAL_GetTick>
 8009fec:	4602      	mov	r2, r0
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	2b64      	cmp	r3, #100	; 0x64
 8009ff4:	d901      	bls.n	8009ffa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009ff6:	2303      	movs	r3, #3
 8009ff8:	e21f      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ffa:	4b61      	ldr	r3, [pc, #388]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a002:	2b00      	cmp	r3, #0
 800a004:	d0f0      	beq.n	8009fe8 <HAL_RCC_OscConfig+0xdc>
 800a006:	e014      	b.n	800a032 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a008:	f7fd fe6e 	bl	8007ce8 <HAL_GetTick>
 800a00c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a00e:	e008      	b.n	800a022 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a010:	f7fd fe6a 	bl	8007ce8 <HAL_GetTick>
 800a014:	4602      	mov	r2, r0
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	2b64      	cmp	r3, #100	; 0x64
 800a01c:	d901      	bls.n	800a022 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e20b      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a022:	4b57      	ldr	r3, [pc, #348]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1f0      	bne.n	800a010 <HAL_RCC_OscConfig+0x104>
 800a02e:	e000      	b.n	800a032 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f003 0302 	and.w	r3, r3, #2
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d06f      	beq.n	800a11e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a03e:	4b50      	ldr	r3, [pc, #320]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	f003 030c 	and.w	r3, r3, #12
 800a046:	2b00      	cmp	r3, #0
 800a048:	d017      	beq.n	800a07a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a04a:	4b4d      	ldr	r3, [pc, #308]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a052:	2b08      	cmp	r3, #8
 800a054:	d105      	bne.n	800a062 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a056:	4b4a      	ldr	r3, [pc, #296]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00b      	beq.n	800a07a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a062:	4b47      	ldr	r3, [pc, #284]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a06a:	2b0c      	cmp	r3, #12
 800a06c:	d11c      	bne.n	800a0a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a06e:	4b44      	ldr	r3, [pc, #272]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a076:	2b00      	cmp	r3, #0
 800a078:	d116      	bne.n	800a0a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a07a:	4b41      	ldr	r3, [pc, #260]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 0302 	and.w	r3, r3, #2
 800a082:	2b00      	cmp	r3, #0
 800a084:	d005      	beq.n	800a092 <HAL_RCC_OscConfig+0x186>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d001      	beq.n	800a092 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e1d3      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a092:	4b3b      	ldr	r3, [pc, #236]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	4937      	ldr	r1, [pc, #220]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0a6:	e03a      	b.n	800a11e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d020      	beq.n	800a0f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a0b0:	4b34      	ldr	r3, [pc, #208]	; (800a184 <HAL_RCC_OscConfig+0x278>)
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0b6:	f7fd fe17 	bl	8007ce8 <HAL_GetTick>
 800a0ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0bc:	e008      	b.n	800a0d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a0be:	f7fd fe13 	bl	8007ce8 <HAL_GetTick>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d901      	bls.n	800a0d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a0cc:	2303      	movs	r3, #3
 800a0ce:	e1b4      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0d0:	4b2b      	ldr	r3, [pc, #172]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 0302 	and.w	r3, r3, #2
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d0f0      	beq.n	800a0be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0dc:	4b28      	ldr	r3, [pc, #160]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	00db      	lsls	r3, r3, #3
 800a0ea:	4925      	ldr	r1, [pc, #148]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	600b      	str	r3, [r1, #0]
 800a0f0:	e015      	b.n	800a11e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a0f2:	4b24      	ldr	r3, [pc, #144]	; (800a184 <HAL_RCC_OscConfig+0x278>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0f8:	f7fd fdf6 	bl	8007ce8 <HAL_GetTick>
 800a0fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a0fe:	e008      	b.n	800a112 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a100:	f7fd fdf2 	bl	8007ce8 <HAL_GetTick>
 800a104:	4602      	mov	r2, r0
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d901      	bls.n	800a112 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a10e:	2303      	movs	r3, #3
 800a110:	e193      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a112:	4b1b      	ldr	r3, [pc, #108]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0302 	and.w	r3, r3, #2
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1f0      	bne.n	800a100 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 0308 	and.w	r3, r3, #8
 800a126:	2b00      	cmp	r3, #0
 800a128:	d036      	beq.n	800a198 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d016      	beq.n	800a160 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a132:	4b15      	ldr	r3, [pc, #84]	; (800a188 <HAL_RCC_OscConfig+0x27c>)
 800a134:	2201      	movs	r2, #1
 800a136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a138:	f7fd fdd6 	bl	8007ce8 <HAL_GetTick>
 800a13c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a13e:	e008      	b.n	800a152 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a140:	f7fd fdd2 	bl	8007ce8 <HAL_GetTick>
 800a144:	4602      	mov	r2, r0
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d901      	bls.n	800a152 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a14e:	2303      	movs	r3, #3
 800a150:	e173      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a152:	4b0b      	ldr	r3, [pc, #44]	; (800a180 <HAL_RCC_OscConfig+0x274>)
 800a154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a156:	f003 0302 	and.w	r3, r3, #2
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0f0      	beq.n	800a140 <HAL_RCC_OscConfig+0x234>
 800a15e:	e01b      	b.n	800a198 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a160:	4b09      	ldr	r3, [pc, #36]	; (800a188 <HAL_RCC_OscConfig+0x27c>)
 800a162:	2200      	movs	r2, #0
 800a164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a166:	f7fd fdbf 	bl	8007ce8 <HAL_GetTick>
 800a16a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a16c:	e00e      	b.n	800a18c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a16e:	f7fd fdbb 	bl	8007ce8 <HAL_GetTick>
 800a172:	4602      	mov	r2, r0
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d907      	bls.n	800a18c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a17c:	2303      	movs	r3, #3
 800a17e:	e15c      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
 800a180:	40023800 	.word	0x40023800
 800a184:	42470000 	.word	0x42470000
 800a188:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a18c:	4b8a      	ldr	r3, [pc, #552]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a18e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a190:	f003 0302 	and.w	r3, r3, #2
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1ea      	bne.n	800a16e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 0304 	and.w	r3, r3, #4
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 8097 	beq.w	800a2d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1aa:	4b83      	ldr	r3, [pc, #524]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10f      	bne.n	800a1d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	60bb      	str	r3, [r7, #8]
 800a1ba:	4b7f      	ldr	r3, [pc, #508]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1be:	4a7e      	ldr	r2, [pc, #504]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a1c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1c4:	6413      	str	r3, [r2, #64]	; 0x40
 800a1c6:	4b7c      	ldr	r3, [pc, #496]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1ce:	60bb      	str	r3, [r7, #8]
 800a1d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a1d6:	4b79      	ldr	r3, [pc, #484]	; (800a3bc <HAL_RCC_OscConfig+0x4b0>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d118      	bne.n	800a214 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a1e2:	4b76      	ldr	r3, [pc, #472]	; (800a3bc <HAL_RCC_OscConfig+0x4b0>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a75      	ldr	r2, [pc, #468]	; (800a3bc <HAL_RCC_OscConfig+0x4b0>)
 800a1e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a1ee:	f7fd fd7b 	bl	8007ce8 <HAL_GetTick>
 800a1f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a1f4:	e008      	b.n	800a208 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1f6:	f7fd fd77 	bl	8007ce8 <HAL_GetTick>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	2b02      	cmp	r3, #2
 800a202:	d901      	bls.n	800a208 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a204:	2303      	movs	r3, #3
 800a206:	e118      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a208:	4b6c      	ldr	r3, [pc, #432]	; (800a3bc <HAL_RCC_OscConfig+0x4b0>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a210:	2b00      	cmp	r3, #0
 800a212:	d0f0      	beq.n	800a1f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d106      	bne.n	800a22a <HAL_RCC_OscConfig+0x31e>
 800a21c:	4b66      	ldr	r3, [pc, #408]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a21e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a220:	4a65      	ldr	r2, [pc, #404]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a222:	f043 0301 	orr.w	r3, r3, #1
 800a226:	6713      	str	r3, [r2, #112]	; 0x70
 800a228:	e01c      	b.n	800a264 <HAL_RCC_OscConfig+0x358>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	2b05      	cmp	r3, #5
 800a230:	d10c      	bne.n	800a24c <HAL_RCC_OscConfig+0x340>
 800a232:	4b61      	ldr	r3, [pc, #388]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a236:	4a60      	ldr	r2, [pc, #384]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a238:	f043 0304 	orr.w	r3, r3, #4
 800a23c:	6713      	str	r3, [r2, #112]	; 0x70
 800a23e:	4b5e      	ldr	r3, [pc, #376]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a242:	4a5d      	ldr	r2, [pc, #372]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a244:	f043 0301 	orr.w	r3, r3, #1
 800a248:	6713      	str	r3, [r2, #112]	; 0x70
 800a24a:	e00b      	b.n	800a264 <HAL_RCC_OscConfig+0x358>
 800a24c:	4b5a      	ldr	r3, [pc, #360]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a24e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a250:	4a59      	ldr	r2, [pc, #356]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a252:	f023 0301 	bic.w	r3, r3, #1
 800a256:	6713      	str	r3, [r2, #112]	; 0x70
 800a258:	4b57      	ldr	r3, [pc, #348]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a25a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a25c:	4a56      	ldr	r2, [pc, #344]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a25e:	f023 0304 	bic.w	r3, r3, #4
 800a262:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d015      	beq.n	800a298 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a26c:	f7fd fd3c 	bl	8007ce8 <HAL_GetTick>
 800a270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a272:	e00a      	b.n	800a28a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a274:	f7fd fd38 	bl	8007ce8 <HAL_GetTick>
 800a278:	4602      	mov	r2, r0
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a282:	4293      	cmp	r3, r2
 800a284:	d901      	bls.n	800a28a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e0d7      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a28a:	4b4b      	ldr	r3, [pc, #300]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a28c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a28e:	f003 0302 	and.w	r3, r3, #2
 800a292:	2b00      	cmp	r3, #0
 800a294:	d0ee      	beq.n	800a274 <HAL_RCC_OscConfig+0x368>
 800a296:	e014      	b.n	800a2c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a298:	f7fd fd26 	bl	8007ce8 <HAL_GetTick>
 800a29c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a29e:	e00a      	b.n	800a2b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2a0:	f7fd fd22 	bl	8007ce8 <HAL_GetTick>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d901      	bls.n	800a2b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a2b2:	2303      	movs	r3, #3
 800a2b4:	e0c1      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2b6:	4b40      	ldr	r3, [pc, #256]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ba:	f003 0302 	and.w	r3, r3, #2
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1ee      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d105      	bne.n	800a2d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2c8:	4b3b      	ldr	r3, [pc, #236]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2cc:	4a3a      	ldr	r2, [pc, #232]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a2ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f000 80ad 	beq.w	800a438 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a2de:	4b36      	ldr	r3, [pc, #216]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f003 030c 	and.w	r3, r3, #12
 800a2e6:	2b08      	cmp	r3, #8
 800a2e8:	d060      	beq.n	800a3ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d145      	bne.n	800a37e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2f2:	4b33      	ldr	r3, [pc, #204]	; (800a3c0 <HAL_RCC_OscConfig+0x4b4>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2f8:	f7fd fcf6 	bl	8007ce8 <HAL_GetTick>
 800a2fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2fe:	e008      	b.n	800a312 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a300:	f7fd fcf2 	bl	8007ce8 <HAL_GetTick>
 800a304:	4602      	mov	r2, r0
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d901      	bls.n	800a312 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a30e:	2303      	movs	r3, #3
 800a310:	e093      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a312:	4b29      	ldr	r3, [pc, #164]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1f0      	bne.n	800a300 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	69da      	ldr	r2, [r3, #28]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	431a      	orrs	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32c:	019b      	lsls	r3, r3, #6
 800a32e:	431a      	orrs	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a334:	085b      	lsrs	r3, r3, #1
 800a336:	3b01      	subs	r3, #1
 800a338:	041b      	lsls	r3, r3, #16
 800a33a:	431a      	orrs	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a340:	061b      	lsls	r3, r3, #24
 800a342:	431a      	orrs	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a348:	071b      	lsls	r3, r3, #28
 800a34a:	491b      	ldr	r1, [pc, #108]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a34c:	4313      	orrs	r3, r2
 800a34e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a350:	4b1b      	ldr	r3, [pc, #108]	; (800a3c0 <HAL_RCC_OscConfig+0x4b4>)
 800a352:	2201      	movs	r2, #1
 800a354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a356:	f7fd fcc7 	bl	8007ce8 <HAL_GetTick>
 800a35a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a35c:	e008      	b.n	800a370 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a35e:	f7fd fcc3 	bl	8007ce8 <HAL_GetTick>
 800a362:	4602      	mov	r2, r0
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d901      	bls.n	800a370 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e064      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a370:	4b11      	ldr	r3, [pc, #68]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d0f0      	beq.n	800a35e <HAL_RCC_OscConfig+0x452>
 800a37c:	e05c      	b.n	800a438 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a37e:	4b10      	ldr	r3, [pc, #64]	; (800a3c0 <HAL_RCC_OscConfig+0x4b4>)
 800a380:	2200      	movs	r2, #0
 800a382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a384:	f7fd fcb0 	bl	8007ce8 <HAL_GetTick>
 800a388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a38a:	e008      	b.n	800a39e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a38c:	f7fd fcac 	bl	8007ce8 <HAL_GetTick>
 800a390:	4602      	mov	r2, r0
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	2b02      	cmp	r3, #2
 800a398:	d901      	bls.n	800a39e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e04d      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a39e:	4b06      	ldr	r3, [pc, #24]	; (800a3b8 <HAL_RCC_OscConfig+0x4ac>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1f0      	bne.n	800a38c <HAL_RCC_OscConfig+0x480>
 800a3aa:	e045      	b.n	800a438 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d107      	bne.n	800a3c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e040      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
 800a3b8:	40023800 	.word	0x40023800
 800a3bc:	40007000 	.word	0x40007000
 800a3c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a3c4:	4b1f      	ldr	r3, [pc, #124]	; (800a444 <HAL_RCC_OscConfig+0x538>)
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	699b      	ldr	r3, [r3, #24]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d030      	beq.n	800a434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d129      	bne.n	800a434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d122      	bne.n	800a434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a3fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d119      	bne.n	800a434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a40a:	085b      	lsrs	r3, r3, #1
 800a40c:	3b01      	subs	r3, #1
 800a40e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a410:	429a      	cmp	r2, r3
 800a412:	d10f      	bne.n	800a434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a420:	429a      	cmp	r2, r3
 800a422:	d107      	bne.n	800a434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a430:	429a      	cmp	r2, r3
 800a432:	d001      	beq.n	800a438 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	e000      	b.n	800a43a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3718      	adds	r7, #24
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	40023800 	.word	0x40023800

0800a448 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
 800a454:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a456:	2300      	movs	r3, #0
 800a458:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d904      	bls.n	800a46a <HAL_SAI_InitProtocol+0x22>
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	3b03      	subs	r3, #3
 800a464:	2b01      	cmp	r3, #1
 800a466:	d812      	bhi.n	800a48e <HAL_SAI_InitProtocol+0x46>
 800a468:	e008      	b.n	800a47c <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	68b9      	ldr	r1, [r7, #8]
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f000 faa9 	bl	800a9c8 <SAI_InitI2S>
 800a476:	4603      	mov	r3, r0
 800a478:	75fb      	strb	r3, [r7, #23]
      break;
 800a47a:	e00b      	b.n	800a494 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	68b9      	ldr	r1, [r7, #8]
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 fb4e 	bl	800ab24 <SAI_InitPCM>
 800a488:	4603      	mov	r3, r0
 800a48a:	75fb      	strb	r3, [r7, #23]
      break;
 800a48c:	e002      	b.n	800a494 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	75fb      	strb	r3, [r7, #23]
      break;
 800a492:	bf00      	nop
  }

  if (status == HAL_OK)
 800a494:	7dfb      	ldrb	r3, [r7, #23]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d104      	bne.n	800a4a4 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 800a49a:	68f8      	ldr	r0, [r7, #12]
 800a49c:	f000 f808 	bl	800a4b0 <HAL_SAI_Init>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3718      	adds	r7, #24
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
	...

0800a4b0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d101      	bne.n	800a4d2 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e10c      	b.n	800a6ec <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d106      	bne.n	800a4ec <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7fd f9c2 	bl	8007870 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2202      	movs	r2, #2
 800a4f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fbcb 	bl	800ac90 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fc72 	bl	800ade4 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a1b      	ldr	r3, [r3, #32]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d030      	beq.n	800a56a <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 fcaf 	bl	800ae6c <SAI_GetInputClock>
 800a50e:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	4613      	mov	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4413      	add	r3, r2
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	461a      	mov	r2, r3
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a1b      	ldr	r3, [r3, #32]
 800a520:	025b      	lsls	r3, r3, #9
 800a522:	fbb2 f3f3 	udiv	r3, r2, r3
 800a526:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	4a72      	ldr	r2, [pc, #456]	; (800a6f4 <HAL_SAI_Init+0x244>)
 800a52c:	fba2 2303 	umull	r2, r3, r2, r3
 800a530:	08da      	lsrs	r2, r3, #3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 800a536:	68f9      	ldr	r1, [r7, #12]
 800a538:	4b6e      	ldr	r3, [pc, #440]	; (800a6f4 <HAL_SAI_Init+0x244>)
 800a53a:	fba3 2301 	umull	r2, r3, r3, r1
 800a53e:	08da      	lsrs	r2, r3, #3
 800a540:	4613      	mov	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4413      	add	r3, r2
 800a546:	005b      	lsls	r3, r3, #1
 800a548:	1aca      	subs	r2, r1, r3
 800a54a:	2a08      	cmp	r2, #8
 800a54c:	d904      	bls.n	800a558 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a552:	1c5a      	adds	r2, r3, #1
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a55c:	2b04      	cmp	r3, #4
 800a55e:	d104      	bne.n	800a56a <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	085a      	lsrs	r2, r3, #1
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d003      	beq.n	800a57a <HAL_SAI_Init+0xca>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	2b02      	cmp	r3, #2
 800a578:	d109      	bne.n	800a58e <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d101      	bne.n	800a586 <HAL_SAI_Init+0xd6>
 800a582:	2300      	movs	r3, #0
 800a584:	e001      	b.n	800a58a <HAL_SAI_Init+0xda>
 800a586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a58a:	617b      	str	r3, [r7, #20]
 800a58c:	e008      	b.n	800a5a0 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a592:	2b01      	cmp	r3, #1
 800a594:	d102      	bne.n	800a59c <HAL_SAI_Init+0xec>
 800a596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a59a:	e000      	b.n	800a59e <HAL_SAI_Init+0xee>
 800a59c:	2300      	movs	r3, #0
 800a59e:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	2b03      	cmp	r3, #3
 800a5a6:	d811      	bhi.n	800a5cc <HAL_SAI_Init+0x11c>
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d20b      	bcs.n	800a5c4 <HAL_SAI_Init+0x114>
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d002      	beq.n	800a5b6 <HAL_SAI_Init+0x106>
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d003      	beq.n	800a5bc <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 800a5b4:	e00a      	b.n	800a5cc <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	613b      	str	r3, [r7, #16]
    break;
 800a5ba:	e008      	b.n	800a5ce <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a5bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5c0:	613b      	str	r3, [r7, #16]
    break;
 800a5c2:	e004      	b.n	800a5ce <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a5c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5c8:	613b      	str	r3, [r7, #16]
    break;
 800a5ca:	e000      	b.n	800a5ce <HAL_SAI_Init+0x11e>
      break;
 800a5cc:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	6819      	ldr	r1, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	4b47      	ldr	r3, [pc, #284]	; (800a6f8 <HAL_SAI_Init+0x248>)
 800a5da:	400b      	ands	r3, r1
 800a5dc:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	6819      	ldr	r1, [r3, #0]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ec:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a5f2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f8:	431a      	orrs	r2, r3
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800a606:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a612:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a618:	051b      	lsls	r3, r3, #20
 800a61a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	430a      	orrs	r2, r1
 800a622:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	6812      	ldr	r2, [r2, #0]
 800a62e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a632:	f023 030f 	bic.w	r3, r3, #15
 800a636:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6859      	ldr	r1, [r3, #4]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	699a      	ldr	r2, [r3, #24]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a646:	431a      	orrs	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64c:	431a      	orrs	r2, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	430a      	orrs	r2, r1
 800a654:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6899      	ldr	r1, [r3, #8]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	4b26      	ldr	r3, [pc, #152]	; (800a6fc <HAL_SAI_Init+0x24c>)
 800a662:	400b      	ands	r3, r1
 800a664:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	6899      	ldr	r1, [r3, #8]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a670:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a676:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 800a67c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 800a682:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a688:	3b01      	subs	r3, #1
 800a68a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a68c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	430a      	orrs	r2, r1
 800a694:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	68d9      	ldr	r1, [r3, #12]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a6a4:	400b      	ands	r3, r1
 800a6a6:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68d9      	ldr	r1, [r3, #12]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6b6:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6bc:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800a6be:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	021b      	lsls	r3, r3, #8
 800a6c8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3718      	adds	r7, #24
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	cccccccd 	.word	0xcccccccd
 800a6f8:	ff05c010 	.word	0xff05c010
 800a6fc:	fff88000 	.word	0xfff88000

0800a700 <HAL_SAI_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	603b      	str	r3, [r7, #0]
 800a70c:	4613      	mov	r3, r2
 800a70e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800a710:	f7fd faea 	bl	8007ce8 <HAL_GetTick>
 800a714:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <HAL_SAI_Receive+0x22>
 800a71c:	88fb      	ldrh	r3, [r7, #6]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d101      	bne.n	800a726 <HAL_SAI_Receive+0x26>
  {
    return  HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	e0b4      	b.n	800a890 <HAL_SAI_Receive+0x190>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b01      	cmp	r3, #1
 800a730:	f040 80ad 	bne.w	800a88e <HAL_SAI_Receive+0x18e>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d101      	bne.n	800a742 <HAL_SAI_Receive+0x42>
 800a73e:	2302      	movs	r3, #2
 800a740:	e0a6      	b.n	800a890 <HAL_SAI_Receive+0x190>
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hsai->pBuffPtr = pData;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	669a      	str	r2, [r3, #104]	; 0x68
    hsai->XferSize = Size;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	88fa      	ldrh	r2, [r7, #6]
 800a754:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    hsai->XferCount = Size;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	88fa      	ldrh	r2, [r7, #6]
 800a75c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2222      	movs	r2, #34	; 0x22
 800a764:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d178      	bne.n	800a870 <HAL_SAI_Receive+0x170>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a78c:	601a      	str	r2, [r3, #0]
    }

    /* Receive data */
    while (hsai->XferCount > 0U)
 800a78e:	e06f      	b.n	800a870 <HAL_SAI_Receive+0x170>
    {
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_EMPTY)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	695b      	ldr	r3, [r3, #20]
 800a796:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d037      	beq.n	800a80e <HAL_SAI_Receive+0x10e>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a2:	2b40      	cmp	r3, #64	; 0x40
 800a7a4:	d10e      	bne.n	800a7c4 <HAL_SAI_Receive+0xc4>
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d10a      	bne.n	800a7c4 <HAL_SAI_Receive+0xc4>
        {
          (*hsai->pBuffPtr++) = hsai->Instance->DR;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	69d8      	ldr	r0, [r3, #28]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7b8:	1c59      	adds	r1, r3, #1
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	6691      	str	r1, [r2, #104]	; 0x68
 800a7be:	b2c2      	uxtb	r2, r0
 800a7c0:	701a      	strb	r2, [r3, #0]
 800a7c2:	e01b      	b.n	800a7fc <HAL_SAI_Receive+0xfc>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c8:	2b80      	cmp	r3, #128	; 0x80
 800a7ca:	d80c      	bhi.n	800a7e6 <HAL_SAI_Receive+0xe6>
        {
          *((uint16_t *)hsai->pBuffPtr) = hsai->Instance->DR;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	69da      	ldr	r2, [r3, #28]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7d6:	b292      	uxth	r2, r2
 800a7d8:	801a      	strh	r2, [r3, #0]
          hsai->pBuffPtr += 2U;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7de:	1c9a      	adds	r2, r3, #2
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	669a      	str	r2, [r3, #104]	; 0x68
 800a7e4:	e00a      	b.n	800a7fc <HAL_SAI_Receive+0xfc>
        }
        else
        {
          *((uint32_t *)hsai->pBuffPtr) = hsai->Instance->DR;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7ee:	69d2      	ldr	r2, [r2, #28]
 800a7f0:	601a      	str	r2, [r3, #0]
          hsai->pBuffPtr += 4U;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7f6:	1d1a      	adds	r2, r3, #4
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	669a      	str	r2, [r3, #104]	; 0x68
        }
        hsai->XferCount--;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800a802:	3b01      	subs	r3, #1
 800a804:	b29a      	uxth	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 800a80c:	e030      	b.n	800a870 <HAL_SAI_Receive+0x170>
      }
      else
      {
        /* Check for the Timeout */
        if ((Timeout != HAL_MAX_DELAY) && ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout)))
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a814:	d02c      	beq.n	800a870 <HAL_SAI_Receive+0x170>
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d007      	beq.n	800a82c <HAL_SAI_Receive+0x12c>
 800a81c:	f7fd fa64 	bl	8007ce8 <HAL_GetTick>
 800a820:	4602      	mov	r2, r0
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	683a      	ldr	r2, [r7, #0]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d221      	bcs.n	800a870 <HAL_SAI_Receive+0x170>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a832:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f04f 32ff 	mov.w	r2, #4294967295
 800a844:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          SAI_Disable(hsai);
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f000 fa22 	bl	800ac90 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	685a      	ldr	r2, [r3, #4]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f042 0208 	orr.w	r2, r2, #8
 800a85a:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e00f      	b.n	800a890 <HAL_SAI_Receive+0x190>
    while (hsai->XferCount > 0U)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800a876:	2b00      	cmp	r3, #0
 800a878:	d18a      	bne.n	800a790 <HAL_SAI_Receive+0x90>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2200      	movs	r2, #0
 800a886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800a88a:	2300      	movs	r3, #0
 800a88c:	e000      	b.n	800a890 <HAL_SAI_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800a88e:	2302      	movs	r3, #2
  }
}
 800a890:	4618      	mov	r0, r3
 800a892:	3718      	adds	r7, #24
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <HAL_SAI_Receive_DMA+0x1a>
 800a8ac:	88fb      	ldrh	r3, [r7, #6]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e074      	b.n	800a9a0 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d16d      	bne.n	800a99e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d101      	bne.n	800a8d0 <HAL_SAI_Receive_DMA+0x38>
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	e067      	b.n	800a9a0 <HAL_SAI_Receive_DMA+0x108>
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hsai->pBuffPtr = pData;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	669a      	str	r2, [r3, #104]	; 0x68
    hsai->XferSize = Size;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	88fa      	ldrh	r2, [r7, #6]
 800a8e2:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    hsai->XferCount = Size;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	88fa      	ldrh	r2, [r7, #6]
 800a8ea:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2222      	movs	r2, #34	; 0x22
 800a8fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a902:	4a29      	ldr	r2, [pc, #164]	; (800a9a8 <HAL_SAI_Receive_DMA+0x110>)
 800a904:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a90a:	4a28      	ldr	r2, [pc, #160]	; (800a9ac <HAL_SAI_Receive_DMA+0x114>)
 800a90c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a912:	4a27      	ldr	r2, [pc, #156]	; (800a9b0 <HAL_SAI_Receive_DMA+0x118>)
 800a914:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a91a:	2200      	movs	r2, #0
 800a91c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	331c      	adds	r3, #28
 800a928:	4619      	mov	r1, r3
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a92e:	461a      	mov	r2, r3
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800a936:	f7fd fbbf 	bl	80080b8 <HAL_DMA_Start_IT>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d005      	beq.n	800a94c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return  HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e029      	b.n	800a9a0 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a94c:	2100      	movs	r1, #0
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f000 f968 	bl	800ac24 <SAI_InterruptFlag>
 800a954:	4601      	mov	r1, r0
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	691a      	ldr	r2, [r3, #16]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	430a      	orrs	r2, r1
 800a962:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a972:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d107      	bne.n	800a992 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a990:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	e000      	b.n	800a9a0 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800a99e:	2302      	movs	r3, #2
  }
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	0800ad61 	.word	0x0800ad61
 800a9ac:	0800ad01 	.word	0x0800ad01
 800a9b0:	0800ad7d 	.word	0x0800ad7d

0800a9b4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d003      	beq.n	800a9f2 <SAI_InitI2S+0x2a>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d103      	bne.n	800a9fa <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	641a      	str	r2, [r3, #64]	; 0x40
 800a9f8:	e002      	b.n	800aa00 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aa06:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa0e:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2200      	movs	r2, #0
 800aa14:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	683a      	ldr	r2, [r7, #0]
 800aa1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	f003 0301 	and.w	r3, r3, #1
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e076      	b.n	800ab18 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d107      	bne.n	800aa40 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800aa3c:	655a      	str	r2, [r3, #84]	; 0x54
 800aa3e:	e006      	b.n	800aa4e <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800aa46:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Frame definition */
  switch (datasize)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2b03      	cmp	r3, #3
 800aa52:	d84f      	bhi.n	800aaf4 <SAI_InitI2S+0x12c>
 800aa54:	a201      	add	r2, pc, #4	; (adr r2, 800aa5c <SAI_InitI2S+0x94>)
 800aa56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5a:	bf00      	nop
 800aa5c:	0800aa6d 	.word	0x0800aa6d
 800aa60:	0800aa8f 	.word	0x0800aa8f
 800aa64:	0800aab1 	.word	0x0800aab1
 800aa68:	0800aad3 	.word	0x0800aad3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2280      	movs	r2, #128	; 0x80
 800aa70:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	085b      	lsrs	r3, r3, #1
 800aa76:	015a      	lsls	r2, r3, #5
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	085b      	lsrs	r3, r3, #1
 800aa80:	011a      	lsls	r2, r3, #4
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2240      	movs	r2, #64	; 0x40
 800aa8a:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800aa8c:	e034      	b.n	800aaf8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2280      	movs	r2, #128	; 0x80
 800aa92:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	085b      	lsrs	r3, r3, #1
 800aa98:	019a      	lsls	r2, r3, #6
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	085b      	lsrs	r3, r3, #1
 800aaa2:	015a      	lsls	r2, r3, #5
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2280      	movs	r2, #128	; 0x80
 800aaac:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800aaae:	e023      	b.n	800aaf8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	22c0      	movs	r2, #192	; 0xc0
 800aab4:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	085b      	lsrs	r3, r3, #1
 800aaba:	019a      	lsls	r2, r3, #6
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	085b      	lsrs	r3, r3, #1
 800aac4:	015a      	lsls	r2, r3, #5
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2280      	movs	r2, #128	; 0x80
 800aace:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800aad0:	e012      	b.n	800aaf8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	22e0      	movs	r2, #224	; 0xe0
 800aad6:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	085b      	lsrs	r3, r3, #1
 800aadc:	019a      	lsls	r2, r3, #6
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	085b      	lsrs	r3, r3, #1
 800aae6:	015a      	lsls	r2, r3, #5
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2280      	movs	r2, #128	; 0x80
 800aaf0:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800aaf2:	e001      	b.n	800aaf8 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e00f      	b.n	800ab18 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d10b      	bne.n	800ab16 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d102      	bne.n	800ab0a <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2210      	movs	r2, #16
 800ab08:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d102      	bne.n	800ab16 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2208      	movs	r2, #8
 800ab14:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 800ab16:	2300      	movs	r3, #0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3714      	adds	r7, #20
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
 800ab30:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d003      	beq.n	800ab4e <SAI_InitPCM+0x2a>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d103      	bne.n	800ab56 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2201      	movs	r2, #1
 800ab52:	641a      	str	r2, [r3, #64]	; 0x40
 800ab54:	e002      	b.n	800ab5c <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ab68:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ab70:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2200      	movs	r2, #0
 800ab76:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	683a      	ldr	r2, [r7, #0]
 800ab7c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab84:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2b04      	cmp	r3, #4
 800ab8a:	d103      	bne.n	800ab94 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	649a      	str	r2, [r3, #72]	; 0x48
 800ab92:	e002      	b.n	800ab9a <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	220d      	movs	r2, #13
 800ab98:	649a      	str	r2, [r3, #72]	; 0x48
  }

  switch (datasize)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2b03      	cmp	r3, #3
 800ab9e:	d837      	bhi.n	800ac10 <SAI_InitPCM+0xec>
 800aba0:	a201      	add	r2, pc, #4	; (adr r2, 800aba8 <SAI_InitPCM+0x84>)
 800aba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba6:	bf00      	nop
 800aba8:	0800abb9 	.word	0x0800abb9
 800abac:	0800abcf 	.word	0x0800abcf
 800abb0:	0800abe5 	.word	0x0800abe5
 800abb4:	0800abfb 	.word	0x0800abfb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2280      	movs	r2, #128	; 0x80
 800abbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	011a      	lsls	r2, r3, #4
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2240      	movs	r2, #64	; 0x40
 800abca:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800abcc:	e022      	b.n	800ac14 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2280      	movs	r2, #128	; 0x80
 800abd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	015a      	lsls	r2, r3, #5
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2280      	movs	r2, #128	; 0x80
 800abe0:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800abe2:	e017      	b.n	800ac14 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	22c0      	movs	r2, #192	; 0xc0
 800abe8:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	015a      	lsls	r2, r3, #5
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2280      	movs	r2, #128	; 0x80
 800abf6:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800abf8:	e00c      	b.n	800ac14 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	22e0      	movs	r2, #224	; 0xe0
 800abfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	015a      	lsls	r2, r3, #5
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2280      	movs	r2, #128	; 0x80
 800ac0c:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800ac0e:	e001      	b.n	800ac14 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e000      	b.n	800ac16 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop

0800ac24 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d103      	bne.n	800ac40 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f043 0308 	orr.w	r3, r3, #8
 800ac3e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac44:	2b08      	cmp	r3, #8
 800ac46:	d10b      	bne.n	800ac60 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ac4c:	2b03      	cmp	r3, #3
 800ac4e:	d003      	beq.n	800ac58 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d103      	bne.n	800ac60 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f043 0310 	orr.w	r3, r3, #16
 800ac5e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	2b03      	cmp	r3, #3
 800ac66:	d003      	beq.n	800ac70 <SAI_InterruptFlag+0x4c>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	d104      	bne.n	800ac7a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ac76:	60fb      	str	r3, [r7, #12]
 800ac78:	e003      	b.n	800ac82 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f043 0304 	orr.w	r3, r3, #4
 800ac80:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ac82:	68fb      	ldr	r3, [r7, #12]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ac98:	4b17      	ldr	r3, [pc, #92]	; (800acf8 <SAI_Disable+0x68>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a17      	ldr	r2, [pc, #92]	; (800acfc <SAI_Disable+0x6c>)
 800ac9e:	fba2 2303 	umull	r2, r3, r2, r3
 800aca2:	0b1b      	lsrs	r3, r3, #12
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800aca8:	2300      	movs	r3, #0
 800acaa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800acba:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	1e5a      	subs	r2, r3, #1
 800acc0:	60fa      	str	r2, [r7, #12]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d10a      	bne.n	800acdc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800accc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 800acd6:	2303      	movs	r3, #3
 800acd8:	72fb      	strb	r3, [r7, #11]
      break;
 800acda:	e006      	b.n	800acea <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1e8      	bne.n	800acbc <SAI_Disable+0x2c>

  return status;
 800acea:	7afb      	ldrb	r3, [r7, #11]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3714      	adds	r7, #20
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr
 800acf8:	2000005c 	.word	0x2000005c
 800acfc:	95cbec1b 	.word	0x95cbec1b

0800ad00 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	69db      	ldr	r3, [r3, #28]
 800ad12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad16:	d01c      	beq.n	800ad52 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ad26:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0U;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ad30:	2100      	movs	r1, #0
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f7ff ff76 	bl	800ac24 <SAI_InterruptFlag>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	43d9      	mvns	r1, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	691a      	ldr	r2, [r3, #16]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	400a      	ands	r2, r1
 800ad48:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800ad52:	68f8      	ldr	r0, [r7, #12]
 800ad54:	f7fa ffe8 	bl	8005d28 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ad58:	bf00      	nop
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad6c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f7fa ffac 	bl	8005ccc <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ad74:	bf00      	nop
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad88:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d004      	beq.n	800adae <SAI_DMAError+0x32>
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ada8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d112      	bne.n	800add4 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800adbc:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f7ff ff66 	bl	800ac90 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2200      	movs	r2, #0
 800add0:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f7ff fded 	bl	800a9b4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800adda:	bf00      	nop
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
	...

0800ade4 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d00c      	beq.n	800ae0e <SAI_BlockSynchroConfig+0x2a>
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d80d      	bhi.n	800ae14 <SAI_BlockSynchroConfig+0x30>
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d002      	beq.n	800ae02 <SAI_BlockSynchroConfig+0x1e>
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d003      	beq.n	800ae08 <SAI_BlockSynchroConfig+0x24>
 800ae00:	e008      	b.n	800ae14 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 800ae02:	2300      	movs	r3, #0
 800ae04:	60fb      	str	r3, [r7, #12]
      break;
 800ae06:	e008      	b.n	800ae1a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ae08:	2310      	movs	r3, #16
 800ae0a:	60fb      	str	r3, [r7, #12]
      break;
 800ae0c:	e005      	b.n	800ae1a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ae0e:	2320      	movs	r3, #32
 800ae10:	60fb      	str	r3, [r7, #12]
      break;
 800ae12:	e002      	b.n	800ae1a <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 800ae14:	2300      	movs	r3, #0
 800ae16:	60fb      	str	r3, [r7, #12]
      break;
 800ae18:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	2b03      	cmp	r3, #3
 800ae20:	d103      	bne.n	800ae2a <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f043 0301 	orr.w	r3, r3, #1
 800ae28:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a0b      	ldr	r2, [pc, #44]	; (800ae5c <SAI_BlockSynchroConfig+0x78>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d004      	beq.n	800ae3e <SAI_BlockSynchroConfig+0x5a>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a09      	ldr	r2, [pc, #36]	; (800ae60 <SAI_BlockSynchroConfig+0x7c>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d103      	bne.n	800ae46 <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 800ae3e:	4a09      	ldr	r2, [pc, #36]	; (800ae64 <SAI_BlockSynchroConfig+0x80>)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6013      	str	r3, [r2, #0]
 800ae44:	e003      	b.n	800ae4e <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ae46:	4a08      	ldr	r2, [pc, #32]	; (800ae68 <SAI_BlockSynchroConfig+0x84>)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 800ae4c:	bf00      	nop
 800ae4e:	bf00      	nop
 800ae50:	3714      	adds	r7, #20
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	40015804 	.word	0x40015804
 800ae60:	40015824 	.word	0x40015824
 800ae64:	40015800 	.word	0x40015800
 800ae68:	40015c00 	.word	0x40015c00

0800ae6c <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 800ae74:	2300      	movs	r3, #0
 800ae76:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a0a      	ldr	r2, [pc, #40]	; (800aea8 <SAI_GetInputClock+0x3c>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d004      	beq.n	800ae8c <SAI_GetInputClock+0x20>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a09      	ldr	r2, [pc, #36]	; (800aeac <SAI_GetInputClock+0x40>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d104      	bne.n	800ae96 <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ae8c:	2004      	movs	r0, #4
 800ae8e:	f7fe fbc5 	bl	800961c <HAL_RCCEx_GetPeriphCLKFreq>
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	e003      	b.n	800ae9e <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ae96:	2008      	movs	r0, #8
 800ae98:	f7fe fbc0 	bl	800961c <HAL_RCCEx_GetPeriphCLKFreq>
 800ae9c:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	40015804 	.word	0x40015804
 800aeac:	40015824 	.word	0x40015824

0800aeb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d101      	bne.n	800aec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
 800aec0:	e03f      	b.n	800af42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d106      	bne.n	800aedc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7fc fc4e 	bl	8007778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2224      	movs	r2, #36	; 0x24
 800aee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68da      	ldr	r2, [r3, #12]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aef2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f905 	bl	800b104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	691a      	ldr	r2, [r3, #16]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	695a      	ldr	r2, [r3, #20]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68da      	ldr	r2, [r3, #12]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2220      	movs	r2, #32
 800af34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2220      	movs	r2, #32
 800af3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b08a      	sub	sp, #40	; 0x28
 800af4e:	af02      	add	r7, sp, #8
 800af50:	60f8      	str	r0, [r7, #12]
 800af52:	60b9      	str	r1, [r7, #8]
 800af54:	603b      	str	r3, [r7, #0]
 800af56:	4613      	mov	r3, r2
 800af58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800af5a:	2300      	movs	r3, #0
 800af5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b20      	cmp	r3, #32
 800af68:	d17c      	bne.n	800b064 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <HAL_UART_Transmit+0x2c>
 800af70:	88fb      	ldrh	r3, [r7, #6]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d101      	bne.n	800af7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e075      	b.n	800b066 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af80:	2b01      	cmp	r3, #1
 800af82:	d101      	bne.n	800af88 <HAL_UART_Transmit+0x3e>
 800af84:	2302      	movs	r3, #2
 800af86:	e06e      	b.n	800b066 <HAL_UART_Transmit+0x11c>
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2200      	movs	r2, #0
 800af94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2221      	movs	r2, #33	; 0x21
 800af9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af9e:	f7fc fea3 	bl	8007ce8 <HAL_GetTick>
 800afa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	88fa      	ldrh	r2, [r7, #6]
 800afa8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	88fa      	ldrh	r2, [r7, #6]
 800afae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afb8:	d108      	bne.n	800afcc <HAL_UART_Transmit+0x82>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	691b      	ldr	r3, [r3, #16]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d104      	bne.n	800afcc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800afc2:	2300      	movs	r3, #0
 800afc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	61bb      	str	r3, [r7, #24]
 800afca:	e003      	b.n	800afd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800afd0:	2300      	movs	r3, #0
 800afd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800afdc:	e02a      	b.n	800b034 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	2200      	movs	r2, #0
 800afe6:	2180      	movs	r1, #128	; 0x80
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f000 f840 	bl	800b06e <UART_WaitOnFlagUntilTimeout>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d001      	beq.n	800aff8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800aff4:	2303      	movs	r3, #3
 800aff6:	e036      	b.n	800b066 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d10b      	bne.n	800b016 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	881b      	ldrh	r3, [r3, #0]
 800b002:	461a      	mov	r2, r3
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b00c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	3302      	adds	r3, #2
 800b012:	61bb      	str	r3, [r7, #24]
 800b014:	e007      	b.n	800b026 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	781a      	ldrb	r2, [r3, #0]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	3301      	adds	r3, #1
 800b024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	3b01      	subs	r3, #1
 800b02e:	b29a      	uxth	r2, r3
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b038:	b29b      	uxth	r3, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1cf      	bne.n	800afde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2200      	movs	r2, #0
 800b046:	2140      	movs	r1, #64	; 0x40
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f000 f810 	bl	800b06e <UART_WaitOnFlagUntilTimeout>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d001      	beq.n	800b058 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b054:	2303      	movs	r3, #3
 800b056:	e006      	b.n	800b066 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2220      	movs	r2, #32
 800b05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b060:	2300      	movs	r3, #0
 800b062:	e000      	b.n	800b066 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b064:	2302      	movs	r3, #2
  }
}
 800b066:	4618      	mov	r0, r3
 800b068:	3720      	adds	r7, #32
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b084      	sub	sp, #16
 800b072:	af00      	add	r7, sp, #0
 800b074:	60f8      	str	r0, [r7, #12]
 800b076:	60b9      	str	r1, [r7, #8]
 800b078:	603b      	str	r3, [r7, #0]
 800b07a:	4613      	mov	r3, r2
 800b07c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b07e:	e02c      	b.n	800b0da <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b086:	d028      	beq.n	800b0da <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d007      	beq.n	800b09e <UART_WaitOnFlagUntilTimeout+0x30>
 800b08e:	f7fc fe2b 	bl	8007ce8 <HAL_GetTick>
 800b092:	4602      	mov	r2, r0
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	1ad3      	subs	r3, r2, r3
 800b098:	69ba      	ldr	r2, [r7, #24]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d21d      	bcs.n	800b0da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	68da      	ldr	r2, [r3, #12]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b0ac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	695a      	ldr	r2, [r3, #20]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f022 0201 	bic.w	r2, r2, #1
 800b0bc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2220      	movs	r2, #32
 800b0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2220      	movs	r2, #32
 800b0ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	e00f      	b.n	800b0fa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	68ba      	ldr	r2, [r7, #8]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	bf0c      	ite	eq
 800b0ea:	2301      	moveq	r3, #1
 800b0ec:	2300      	movne	r3, #0
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	79fb      	ldrb	r3, [r7, #7]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d0c3      	beq.n	800b080 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
	...

0800b104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b108:	b0c0      	sub	sp, #256	; 0x100
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b120:	68d9      	ldr	r1, [r3, #12]
 800b122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	ea40 0301 	orr.w	r3, r0, r1
 800b12c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b132:	689a      	ldr	r2, [r3, #8]
 800b134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	431a      	orrs	r2, r3
 800b13c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b140:	695b      	ldr	r3, [r3, #20]
 800b142:	431a      	orrs	r2, r3
 800b144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b148:	69db      	ldr	r3, [r3, #28]
 800b14a:	4313      	orrs	r3, r2
 800b14c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b15c:	f021 010c 	bic.w	r1, r1, #12
 800b160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b16a:	430b      	orrs	r3, r1
 800b16c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b16e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	695b      	ldr	r3, [r3, #20]
 800b176:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b17a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b17e:	6999      	ldr	r1, [r3, #24]
 800b180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	ea40 0301 	orr.w	r3, r0, r1
 800b18a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b18c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	4b8f      	ldr	r3, [pc, #572]	; (800b3d0 <UART_SetConfig+0x2cc>)
 800b194:	429a      	cmp	r2, r3
 800b196:	d005      	beq.n	800b1a4 <UART_SetConfig+0xa0>
 800b198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	4b8d      	ldr	r3, [pc, #564]	; (800b3d4 <UART_SetConfig+0x2d0>)
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d104      	bne.n	800b1ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b1a4:	f7fd fefc 	bl	8008fa0 <HAL_RCC_GetPCLK2Freq>
 800b1a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b1ac:	e003      	b.n	800b1b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b1ae:	f7fd fee3 	bl	8008f78 <HAL_RCC_GetPCLK1Freq>
 800b1b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ba:	69db      	ldr	r3, [r3, #28]
 800b1bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1c0:	f040 810c 	bne.w	800b3dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b1c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b1ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b1d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b1d6:	4622      	mov	r2, r4
 800b1d8:	462b      	mov	r3, r5
 800b1da:	1891      	adds	r1, r2, r2
 800b1dc:	65b9      	str	r1, [r7, #88]	; 0x58
 800b1de:	415b      	adcs	r3, r3
 800b1e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	eb12 0801 	adds.w	r8, r2, r1
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	eb43 0901 	adc.w	r9, r3, r1
 800b1f2:	f04f 0200 	mov.w	r2, #0
 800b1f6:	f04f 0300 	mov.w	r3, #0
 800b1fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b1fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b206:	4690      	mov	r8, r2
 800b208:	4699      	mov	r9, r3
 800b20a:	4623      	mov	r3, r4
 800b20c:	eb18 0303 	adds.w	r3, r8, r3
 800b210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b214:	462b      	mov	r3, r5
 800b216:	eb49 0303 	adc.w	r3, r9, r3
 800b21a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b21e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b22a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b22e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b232:	460b      	mov	r3, r1
 800b234:	18db      	adds	r3, r3, r3
 800b236:	653b      	str	r3, [r7, #80]	; 0x50
 800b238:	4613      	mov	r3, r2
 800b23a:	eb42 0303 	adc.w	r3, r2, r3
 800b23e:	657b      	str	r3, [r7, #84]	; 0x54
 800b240:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b244:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b248:	f7f5 fd98 	bl	8000d7c <__aeabi_uldivmod>
 800b24c:	4602      	mov	r2, r0
 800b24e:	460b      	mov	r3, r1
 800b250:	4b61      	ldr	r3, [pc, #388]	; (800b3d8 <UART_SetConfig+0x2d4>)
 800b252:	fba3 2302 	umull	r2, r3, r3, r2
 800b256:	095b      	lsrs	r3, r3, #5
 800b258:	011c      	lsls	r4, r3, #4
 800b25a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b25e:	2200      	movs	r2, #0
 800b260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b264:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b268:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b26c:	4642      	mov	r2, r8
 800b26e:	464b      	mov	r3, r9
 800b270:	1891      	adds	r1, r2, r2
 800b272:	64b9      	str	r1, [r7, #72]	; 0x48
 800b274:	415b      	adcs	r3, r3
 800b276:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b278:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b27c:	4641      	mov	r1, r8
 800b27e:	eb12 0a01 	adds.w	sl, r2, r1
 800b282:	4649      	mov	r1, r9
 800b284:	eb43 0b01 	adc.w	fp, r3, r1
 800b288:	f04f 0200 	mov.w	r2, #0
 800b28c:	f04f 0300 	mov.w	r3, #0
 800b290:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b294:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b29c:	4692      	mov	sl, r2
 800b29e:	469b      	mov	fp, r3
 800b2a0:	4643      	mov	r3, r8
 800b2a2:	eb1a 0303 	adds.w	r3, sl, r3
 800b2a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b2aa:	464b      	mov	r3, r9
 800b2ac:	eb4b 0303 	adc.w	r3, fp, r3
 800b2b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b2b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b2c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	18db      	adds	r3, r3, r3
 800b2cc:	643b      	str	r3, [r7, #64]	; 0x40
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	eb42 0303 	adc.w	r3, r2, r3
 800b2d4:	647b      	str	r3, [r7, #68]	; 0x44
 800b2d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b2da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b2de:	f7f5 fd4d 	bl	8000d7c <__aeabi_uldivmod>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	4b3b      	ldr	r3, [pc, #236]	; (800b3d8 <UART_SetConfig+0x2d4>)
 800b2ea:	fba3 2301 	umull	r2, r3, r3, r1
 800b2ee:	095b      	lsrs	r3, r3, #5
 800b2f0:	2264      	movs	r2, #100	; 0x64
 800b2f2:	fb02 f303 	mul.w	r3, r2, r3
 800b2f6:	1acb      	subs	r3, r1, r3
 800b2f8:	00db      	lsls	r3, r3, #3
 800b2fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b2fe:	4b36      	ldr	r3, [pc, #216]	; (800b3d8 <UART_SetConfig+0x2d4>)
 800b300:	fba3 2302 	umull	r2, r3, r3, r2
 800b304:	095b      	lsrs	r3, r3, #5
 800b306:	005b      	lsls	r3, r3, #1
 800b308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b30c:	441c      	add	r4, r3
 800b30e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b312:	2200      	movs	r2, #0
 800b314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b318:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b31c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b320:	4642      	mov	r2, r8
 800b322:	464b      	mov	r3, r9
 800b324:	1891      	adds	r1, r2, r2
 800b326:	63b9      	str	r1, [r7, #56]	; 0x38
 800b328:	415b      	adcs	r3, r3
 800b32a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b32c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b330:	4641      	mov	r1, r8
 800b332:	1851      	adds	r1, r2, r1
 800b334:	6339      	str	r1, [r7, #48]	; 0x30
 800b336:	4649      	mov	r1, r9
 800b338:	414b      	adcs	r3, r1
 800b33a:	637b      	str	r3, [r7, #52]	; 0x34
 800b33c:	f04f 0200 	mov.w	r2, #0
 800b340:	f04f 0300 	mov.w	r3, #0
 800b344:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b348:	4659      	mov	r1, fp
 800b34a:	00cb      	lsls	r3, r1, #3
 800b34c:	4651      	mov	r1, sl
 800b34e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b352:	4651      	mov	r1, sl
 800b354:	00ca      	lsls	r2, r1, #3
 800b356:	4610      	mov	r0, r2
 800b358:	4619      	mov	r1, r3
 800b35a:	4603      	mov	r3, r0
 800b35c:	4642      	mov	r2, r8
 800b35e:	189b      	adds	r3, r3, r2
 800b360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b364:	464b      	mov	r3, r9
 800b366:	460a      	mov	r2, r1
 800b368:	eb42 0303 	adc.w	r3, r2, r3
 800b36c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b37c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b380:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b384:	460b      	mov	r3, r1
 800b386:	18db      	adds	r3, r3, r3
 800b388:	62bb      	str	r3, [r7, #40]	; 0x28
 800b38a:	4613      	mov	r3, r2
 800b38c:	eb42 0303 	adc.w	r3, r2, r3
 800b390:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b396:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b39a:	f7f5 fcef 	bl	8000d7c <__aeabi_uldivmod>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	4b0d      	ldr	r3, [pc, #52]	; (800b3d8 <UART_SetConfig+0x2d4>)
 800b3a4:	fba3 1302 	umull	r1, r3, r3, r2
 800b3a8:	095b      	lsrs	r3, r3, #5
 800b3aa:	2164      	movs	r1, #100	; 0x64
 800b3ac:	fb01 f303 	mul.w	r3, r1, r3
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	00db      	lsls	r3, r3, #3
 800b3b4:	3332      	adds	r3, #50	; 0x32
 800b3b6:	4a08      	ldr	r2, [pc, #32]	; (800b3d8 <UART_SetConfig+0x2d4>)
 800b3b8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3bc:	095b      	lsrs	r3, r3, #5
 800b3be:	f003 0207 	and.w	r2, r3, #7
 800b3c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4422      	add	r2, r4
 800b3ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b3cc:	e105      	b.n	800b5da <UART_SetConfig+0x4d6>
 800b3ce:	bf00      	nop
 800b3d0:	40011000 	.word	0x40011000
 800b3d4:	40011400 	.word	0x40011400
 800b3d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b3dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b3e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b3ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b3ee:	4642      	mov	r2, r8
 800b3f0:	464b      	mov	r3, r9
 800b3f2:	1891      	adds	r1, r2, r2
 800b3f4:	6239      	str	r1, [r7, #32]
 800b3f6:	415b      	adcs	r3, r3
 800b3f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b3fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b3fe:	4641      	mov	r1, r8
 800b400:	1854      	adds	r4, r2, r1
 800b402:	4649      	mov	r1, r9
 800b404:	eb43 0501 	adc.w	r5, r3, r1
 800b408:	f04f 0200 	mov.w	r2, #0
 800b40c:	f04f 0300 	mov.w	r3, #0
 800b410:	00eb      	lsls	r3, r5, #3
 800b412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b416:	00e2      	lsls	r2, r4, #3
 800b418:	4614      	mov	r4, r2
 800b41a:	461d      	mov	r5, r3
 800b41c:	4643      	mov	r3, r8
 800b41e:	18e3      	adds	r3, r4, r3
 800b420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b424:	464b      	mov	r3, r9
 800b426:	eb45 0303 	adc.w	r3, r5, r3
 800b42a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b42e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b43a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b43e:	f04f 0200 	mov.w	r2, #0
 800b442:	f04f 0300 	mov.w	r3, #0
 800b446:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b44a:	4629      	mov	r1, r5
 800b44c:	008b      	lsls	r3, r1, #2
 800b44e:	4621      	mov	r1, r4
 800b450:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b454:	4621      	mov	r1, r4
 800b456:	008a      	lsls	r2, r1, #2
 800b458:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b45c:	f7f5 fc8e 	bl	8000d7c <__aeabi_uldivmod>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	4b60      	ldr	r3, [pc, #384]	; (800b5e8 <UART_SetConfig+0x4e4>)
 800b466:	fba3 2302 	umull	r2, r3, r3, r2
 800b46a:	095b      	lsrs	r3, r3, #5
 800b46c:	011c      	lsls	r4, r3, #4
 800b46e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b472:	2200      	movs	r2, #0
 800b474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b478:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b47c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b480:	4642      	mov	r2, r8
 800b482:	464b      	mov	r3, r9
 800b484:	1891      	adds	r1, r2, r2
 800b486:	61b9      	str	r1, [r7, #24]
 800b488:	415b      	adcs	r3, r3
 800b48a:	61fb      	str	r3, [r7, #28]
 800b48c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b490:	4641      	mov	r1, r8
 800b492:	1851      	adds	r1, r2, r1
 800b494:	6139      	str	r1, [r7, #16]
 800b496:	4649      	mov	r1, r9
 800b498:	414b      	adcs	r3, r1
 800b49a:	617b      	str	r3, [r7, #20]
 800b49c:	f04f 0200 	mov.w	r2, #0
 800b4a0:	f04f 0300 	mov.w	r3, #0
 800b4a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b4a8:	4659      	mov	r1, fp
 800b4aa:	00cb      	lsls	r3, r1, #3
 800b4ac:	4651      	mov	r1, sl
 800b4ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4b2:	4651      	mov	r1, sl
 800b4b4:	00ca      	lsls	r2, r1, #3
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	4642      	mov	r2, r8
 800b4be:	189b      	adds	r3, r3, r2
 800b4c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b4c4:	464b      	mov	r3, r9
 800b4c6:	460a      	mov	r2, r1
 800b4c8:	eb42 0303 	adc.w	r3, r2, r3
 800b4cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b4da:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b4dc:	f04f 0200 	mov.w	r2, #0
 800b4e0:	f04f 0300 	mov.w	r3, #0
 800b4e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b4e8:	4649      	mov	r1, r9
 800b4ea:	008b      	lsls	r3, r1, #2
 800b4ec:	4641      	mov	r1, r8
 800b4ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4f2:	4641      	mov	r1, r8
 800b4f4:	008a      	lsls	r2, r1, #2
 800b4f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b4fa:	f7f5 fc3f 	bl	8000d7c <__aeabi_uldivmod>
 800b4fe:	4602      	mov	r2, r0
 800b500:	460b      	mov	r3, r1
 800b502:	4b39      	ldr	r3, [pc, #228]	; (800b5e8 <UART_SetConfig+0x4e4>)
 800b504:	fba3 1302 	umull	r1, r3, r3, r2
 800b508:	095b      	lsrs	r3, r3, #5
 800b50a:	2164      	movs	r1, #100	; 0x64
 800b50c:	fb01 f303 	mul.w	r3, r1, r3
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	011b      	lsls	r3, r3, #4
 800b514:	3332      	adds	r3, #50	; 0x32
 800b516:	4a34      	ldr	r2, [pc, #208]	; (800b5e8 <UART_SetConfig+0x4e4>)
 800b518:	fba2 2303 	umull	r2, r3, r2, r3
 800b51c:	095b      	lsrs	r3, r3, #5
 800b51e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b522:	441c      	add	r4, r3
 800b524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b528:	2200      	movs	r2, #0
 800b52a:	673b      	str	r3, [r7, #112]	; 0x70
 800b52c:	677a      	str	r2, [r7, #116]	; 0x74
 800b52e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b532:	4642      	mov	r2, r8
 800b534:	464b      	mov	r3, r9
 800b536:	1891      	adds	r1, r2, r2
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	415b      	adcs	r3, r3
 800b53c:	60fb      	str	r3, [r7, #12]
 800b53e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b542:	4641      	mov	r1, r8
 800b544:	1851      	adds	r1, r2, r1
 800b546:	6039      	str	r1, [r7, #0]
 800b548:	4649      	mov	r1, r9
 800b54a:	414b      	adcs	r3, r1
 800b54c:	607b      	str	r3, [r7, #4]
 800b54e:	f04f 0200 	mov.w	r2, #0
 800b552:	f04f 0300 	mov.w	r3, #0
 800b556:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b55a:	4659      	mov	r1, fp
 800b55c:	00cb      	lsls	r3, r1, #3
 800b55e:	4651      	mov	r1, sl
 800b560:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b564:	4651      	mov	r1, sl
 800b566:	00ca      	lsls	r2, r1, #3
 800b568:	4610      	mov	r0, r2
 800b56a:	4619      	mov	r1, r3
 800b56c:	4603      	mov	r3, r0
 800b56e:	4642      	mov	r2, r8
 800b570:	189b      	adds	r3, r3, r2
 800b572:	66bb      	str	r3, [r7, #104]	; 0x68
 800b574:	464b      	mov	r3, r9
 800b576:	460a      	mov	r2, r1
 800b578:	eb42 0303 	adc.w	r3, r2, r3
 800b57c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b57e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	663b      	str	r3, [r7, #96]	; 0x60
 800b588:	667a      	str	r2, [r7, #100]	; 0x64
 800b58a:	f04f 0200 	mov.w	r2, #0
 800b58e:	f04f 0300 	mov.w	r3, #0
 800b592:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b596:	4649      	mov	r1, r9
 800b598:	008b      	lsls	r3, r1, #2
 800b59a:	4641      	mov	r1, r8
 800b59c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5a0:	4641      	mov	r1, r8
 800b5a2:	008a      	lsls	r2, r1, #2
 800b5a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b5a8:	f7f5 fbe8 	bl	8000d7c <__aeabi_uldivmod>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	4b0d      	ldr	r3, [pc, #52]	; (800b5e8 <UART_SetConfig+0x4e4>)
 800b5b2:	fba3 1302 	umull	r1, r3, r3, r2
 800b5b6:	095b      	lsrs	r3, r3, #5
 800b5b8:	2164      	movs	r1, #100	; 0x64
 800b5ba:	fb01 f303 	mul.w	r3, r1, r3
 800b5be:	1ad3      	subs	r3, r2, r3
 800b5c0:	011b      	lsls	r3, r3, #4
 800b5c2:	3332      	adds	r3, #50	; 0x32
 800b5c4:	4a08      	ldr	r2, [pc, #32]	; (800b5e8 <UART_SetConfig+0x4e4>)
 800b5c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ca:	095b      	lsrs	r3, r3, #5
 800b5cc:	f003 020f 	and.w	r2, r3, #15
 800b5d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4422      	add	r2, r4
 800b5d8:	609a      	str	r2, [r3, #8]
}
 800b5da:	bf00      	nop
 800b5dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5e6:	bf00      	nop
 800b5e8:	51eb851f 	.word	0x51eb851f

0800b5ec <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b08b      	sub	sp, #44	; 0x2c
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	ed87 0a02 	vstr	s0, [r7, #8]
 800b5f8:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	881b      	ldrh	r3, [r3, #0]
 800b60a:	461a      	mov	r2, r3
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	885b      	ldrh	r3, [r3, #2]
 800b610:	fb02 f303 	mul.w	r3, r2, r3
 800b614:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800b61a:	e010      	b.n	800b63e <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800b61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61e:	1d1a      	adds	r2, r3, #4
 800b620:	627a      	str	r2, [r7, #36]	; 0x24
 800b622:	ed93 7a00 	vldr	s14, [r3]
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	1d1a      	adds	r2, r3, #4
 800b62a:	623a      	str	r2, [r7, #32]
 800b62c:	edd7 7a02 	vldr	s15, [r7, #8]
 800b630:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b634:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	3b01      	subs	r3, #1
 800b63c:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d1eb      	bne.n	800b61c <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800b644:	2300      	movs	r3, #0
 800b646:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800b648:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	372c      	adds	r7, #44	; 0x2c
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800b658:	b480      	push	{r7}
 800b65a:	b08b      	sub	sp, #44	; 0x2c
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	881b      	ldrh	r3, [r3, #0]
 800b672:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	885b      	ldrh	r3, [r3, #2]
 800b678:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800b67a:	89fb      	ldrh	r3, [r7, #14]
 800b67c:	61bb      	str	r3, [r7, #24]
 800b67e:	2300      	movs	r3, #0
 800b680:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	4413      	add	r3, r2
 800b68a:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800b68c:	89bb      	ldrh	r3, [r7, #12]
 800b68e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800b690:	e00d      	b.n	800b6ae <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800b692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b694:	1d1a      	adds	r2, r3, #4
 800b696:	627a      	str	r2, [r7, #36]	; 0x24
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	6a3b      	ldr	r3, [r7, #32]
 800b69c:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800b69e:	89fb      	ldrh	r3, [r7, #14]
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	6a3a      	ldr	r2, [r7, #32]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1ee      	bne.n	800b692 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1dd      	bne.n	800b682 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800b6ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	372c      	adds	r7, #44	; 0x2c
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr

0800b6da <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 800b6da:	b480      	push	{r7}
 800b6dc:	b089      	sub	sp, #36	; 0x24
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	60f8      	str	r0, [r7, #12]
 800b6e2:	60b9      	str	r1, [r7, #8]
 800b6e4:	607a      	str	r2, [r7, #4]
 800b6e6:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	1d1a      	adds	r2, r3, #4
 800b6f0:	60fa      	str	r2, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800b6fc:	e016      	b.n	800b72c <arm_max_f32+0x52>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	1d1a      	adds	r2, r3, #4
 800b702:	60fa      	str	r2, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal)
 800b708:	ed97 7a07 	vldr	s14, [r7, #28]
 800b70c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b718:	d505      	bpl.n	800b726 <arm_max_f32+0x4c>
    {
      /* Update the maximum value and it's index */
      out = maxVal;
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	3b01      	subs	r3, #1
 800b72a:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d1e5      	bne.n	800b6fe <arm_max_f32+0x24>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	69fa      	ldr	r2, [r7, #28]
 800b736:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	601a      	str	r2, [r3, #0]
}
 800b73e:	bf00      	nop
 800b740:	3724      	adds	r7, #36	; 0x24
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr

0800b74a <arm_min_f32>:
void arm_min_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b089      	sub	sp, #36	; 0x24
 800b74e:	af00      	add	r7, sp, #0
 800b750:	60f8      	str	r0, [r7, #12]
 800b752:	60b9      	str	r1, [r7, #8]
 800b754:	607a      	str	r2, [r7, #4]
 800b756:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 800b758:	2300      	movs	r3, #0
 800b75a:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	1d1a      	adds	r2, r3, #4
 800b760:	60fa      	str	r2, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	3b01      	subs	r3, #1
 800b76a:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800b76c:	e016      	b.n	800b79c <arm_min_f32+0x52>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal = *pSrc++;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	1d1a      	adds	r2, r3, #4
 800b772:	60fa      	str	r2, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if (out > minVal)
 800b778:	ed97 7a07 	vldr	s14, [r7, #28]
 800b77c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b788:	dd05      	ble.n	800b796 <arm_min_f32+0x4c>
    {
      /* Update the minimum value and it's index */
      out = minVal;
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	3b01      	subs	r3, #1
 800b79a:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1e5      	bne.n	800b76e <arm_min_f32+0x24>
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	69fa      	ldr	r2, [r7, #28]
 800b7a6:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	697a      	ldr	r2, [r7, #20]
 800b7ac:	601a      	str	r2, [r3, #0]
}
 800b7ae:	bf00      	nop
 800b7b0:	3724      	adds	r7, #36	; 0x24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b08a      	sub	sp, #40	; 0x28
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	60f8      	str	r0, [r7, #12]
 800b7c2:	60b9      	str	r1, [r7, #8]
 800b7c4:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800b7c6:	f04f 0300 	mov.w	r3, #0
 800b7ca:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800b7d0:	e011      	b.n	800b7f6 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	1d1a      	adds	r2, r3, #4
 800b7d6:	60fa      	str	r2, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 800b7dc:	edd7 7a07 	vldr	s15, [r7, #28]
 800b7e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b7e4:	ed97 7a08 	vldr	s14, [r7, #32]
 800b7e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7ec:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 800b7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1ea      	bne.n	800b7d2 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	ee07 3a90 	vmov	s15, r3
 800b802:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b806:	edd7 6a08 	vldr	s13, [r7, #32]
 800b80a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b80e:	edc7 7a06 	vstr	s15, [r7, #24]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 800b816:	edd7 7a06 	vldr	s15, [r7, #24]
 800b81a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b822:	db09      	blt.n	800b838 <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 800b824:	ed97 0a06 	vldr	s0, [r7, #24]
 800b828:	f01d ffe4 	bl	80297f4 <sqrtf>
 800b82c:	eef0 7a40 	vmov.f32	s15, s0
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800b836:	e004      	b.n	800b842 <arm_rms_f32+0x88>
      *pOut = 0.0f;
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	f04f 0200 	mov.w	r2, #0
 800b83e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800b840:	bf00      	nop
}
 800b842:	bf00      	nop
 800b844:	3728      	adds	r7, #40	; 0x28
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
	...

0800b84c <arm_q15_to_float>:
#else
void arm_q15_to_float(
  const q15_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b087      	sub	sp, #28
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
  const q15_t *pIn = pSrc;                             /* Source pointer */
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800b860:	e014      	b.n	800b88c <arm_q15_to_float+0x40>
  {
    /* C = (float32_t) A / 32768 */

    /* Convert from q15 to float and store result in destination buffer */
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	1c9a      	adds	r2, r3, #2
 800b866:	613a      	str	r2, [r7, #16]
 800b868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b86c:	ee07 3a90 	vmov	s15, r3
 800b870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	1d1a      	adds	r2, r3, #4
 800b878:	60ba      	str	r2, [r7, #8]
 800b87a:	eddf 6a09 	vldr	s13, [pc, #36]	; 800b8a0 <arm_q15_to_float+0x54>
 800b87e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b882:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	3b01      	subs	r3, #1
 800b88a:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d1e7      	bne.n	800b862 <arm_q15_to_float+0x16>
  }

}
 800b892:	bf00      	nop
 800b894:	bf00      	nop
 800b896:	371c      	adds	r7, #28
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr
 800b8a0:	47000000 	.word	0x47000000

0800b8a4 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b089      	sub	sp, #36	; 0x24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	607a      	str	r2, [r7, #4]
 800b8b0:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	61fb      	str	r3, [r7, #28]
 800b8b6:	e043      	b.n	800b940 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	005b      	lsls	r3, r3, #1
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	4413      	add	r3, r2
 800b8c0:	881b      	ldrh	r3, [r3, #0]
 800b8c2:	089b      	lsrs	r3, r3, #2
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	005b      	lsls	r3, r3, #1
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	089b      	lsrs	r3, r3, #2
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	441a      	add	r2, r3
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	68f9      	ldr	r1, [r7, #12]
 800b8f4:	440b      	add	r3, r1
 800b8f6:	6812      	ldr	r2, [r2, #0]
 800b8f8:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	4413      	add	r3, r2
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	3301      	adds	r3, #1
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	4413      	add	r3, r2
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	3301      	adds	r3, #1
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	441a      	add	r2, r3
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	3301      	adds	r3, #1
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	68f9      	ldr	r1, [r7, #12]
 800b926:	440b      	add	r3, r1
 800b928:	6812      	ldr	r2, [r2, #0]
 800b92a:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	3301      	adds	r3, #1
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	68fa      	ldr	r2, [r7, #12]
 800b934:	4413      	add	r3, r2
 800b936:	693a      	ldr	r2, [r7, #16]
 800b938:	601a      	str	r2, [r3, #0]

    i += 2;
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	3302      	adds	r3, #2
 800b93e:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 800b940:	897b      	ldrh	r3, [r7, #10]
 800b942:	69fa      	ldr	r2, [r7, #28]
 800b944:	429a      	cmp	r2, r3
 800b946:	d3b7      	bcc.n	800b8b8 <arm_bitreversal_32+0x14>
  }
}
 800b948:	bf00      	nop
 800b94a:	bf00      	nop
 800b94c:	3724      	adds	r7, #36	; 0x24
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr

0800b956 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b0a0      	sub	sp, #128	; 0x80
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	881b      	ldrh	r3, [r3, #0]
 800b964:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 800b966:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	683a      	ldr	r2, [r7, #0]
 800b96c:	4413      	add	r3, r2
 800b96e:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 800b97a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b97c:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 800b97e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b980:	085b      	lsrs	r3, r3, #1
 800b982:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 800b984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b986:	009b      	lsls	r3, r3, #2
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	4413      	add	r3, r2
 800b98c:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 800b98e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b994:	4413      	add	r3, r2
 800b996:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 800b998:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b99a:	089b      	lsrs	r3, r3, #2
 800b99c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b99e:	e1b6      	b.n	800bd0e <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 800b9b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 800b9be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 800b9c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 800b9ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 800b9d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 800b9d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 800b9dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 800b9e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 800b9e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 800b9ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 800b9f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 800b9fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 800ba00:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ba04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	1d1a      	adds	r2, r3, #4
 800ba0c:	603a      	str	r2, [r7, #0]
 800ba0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba12:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 800ba16:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800ba1a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	1d1a      	adds	r2, r3, #4
 800ba22:	603a      	str	r2, [r7, #0]
 800ba24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba28:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 800ba2c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ba30:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	1d1a      	adds	r2, r3, #4
 800ba38:	603a      	str	r2, [r7, #0]
 800ba3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba3e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800ba42:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800ba46:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	1d1a      	adds	r2, r3, #4
 800ba4e:	603a      	str	r2, [r7, #0]
 800ba50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba54:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 800ba58:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ba5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba64:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 800ba68:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800ba6c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ba70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba74:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 800ba78:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ba7c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ba80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba84:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 800ba88:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800ba8c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ba90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba94:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 800ba98:	ed97 7a06 	vldr	s14, [r7, #24]
 800ba9c:	edd7 7a02 	vldr	s15, [r7, #8]
 800baa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800baa2:	1d1a      	adds	r2, r3, #4
 800baa4:	67fa      	str	r2, [r7, #124]	; 0x7c
 800baa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800baaa:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 800baae:	ed97 7a07 	vldr	s14, [r7, #28]
 800bab2:	edd7 7a03 	vldr	s15, [r7, #12]
 800bab6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bab8:	1d1a      	adds	r2, r3, #4
 800baba:	67fa      	str	r2, [r7, #124]	; 0x7c
 800babc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bac0:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 800bac4:	ed97 7a08 	vldr	s14, [r7, #32]
 800bac8:	edd7 7a04 	vldr	s15, [r7, #16]
 800bacc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bace:	1d1a      	adds	r2, r3, #4
 800bad0:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bad6:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800bada:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bade:	edd7 7a05 	vldr	s15, [r7, #20]
 800bae2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bae4:	1d1a      	adds	r2, r3, #4
 800bae6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800baec:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 800baf0:	ed97 7a02 	vldr	s14, [r7, #8]
 800baf4:	edd7 7a06 	vldr	s15, [r7, #24]
 800baf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bafc:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 800bb00:	ed97 7a03 	vldr	s14, [r7, #12]
 800bb04:	edd7 7a07 	vldr	s15, [r7, #28]
 800bb08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb0c:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 800bb10:	ed97 7a04 	vldr	s14, [r7, #16]
 800bb14:	edd7 7a08 	vldr	s15, [r7, #32]
 800bb18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb1c:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 800bb20:	ed97 7a05 	vldr	s14, [r7, #20]
 800bb24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bb28:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb2c:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 800bb30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb32:	1d1a      	adds	r2, r3, #4
 800bb34:	673a      	str	r2, [r7, #112]	; 0x70
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800bb3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb3c:	1d1a      	adds	r2, r3, #4
 800bb3e:	673a      	str	r2, [r7, #112]	; 0x70
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 800bb44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb48:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800bb4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb50:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 800bb54:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bb58:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800bb5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb60:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 800bb64:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bb68:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800bb6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb70:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 800bb74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb78:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800bb7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb80:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 800bb84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb86:	1d1a      	adds	r2, r3, #4
 800bb88:	677a      	str	r2, [r7, #116]	; 0x74
 800bb8a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800bb8e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800bb92:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb96:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 800bb9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb9c:	1d1a      	adds	r2, r3, #4
 800bb9e:	677a      	str	r2, [r7, #116]	; 0x74
 800bba0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800bba4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbac:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 800bbb0:	edd7 7a02 	vldr	s15, [r7, #8]
 800bbb4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800bbb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbbc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 800bbc0:	edd7 7a03 	vldr	s15, [r7, #12]
 800bbc4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800bbc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbcc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 800bbd0:	edd7 7a03 	vldr	s15, [r7, #12]
 800bbd4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800bbd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbdc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 800bbe0:	edd7 7a02 	vldr	s15, [r7, #8]
 800bbe4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800bbe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbec:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800bbf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbf2:	1d1a      	adds	r2, r3, #4
 800bbf4:	67ba      	str	r2, [r7, #120]	; 0x78
 800bbf6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800bbfa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800bbfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc02:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800bc06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc08:	1d1a      	adds	r2, r3, #4
 800bc0a:	67ba      	str	r2, [r7, #120]	; 0x78
 800bc0c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800bc10:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bc14:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc18:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 800bc1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc1e:	1d1a      	adds	r2, r3, #4
 800bc20:	673a      	str	r2, [r7, #112]	; 0x70
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800bc26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc28:	1d1a      	adds	r2, r3, #4
 800bc2a:	673a      	str	r2, [r7, #112]	; 0x70
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 800bc30:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800bc34:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800bc38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc3c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 800bc40:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bc44:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800bc48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc4c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 800bc50:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bc54:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800bc58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc5c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 800bc60:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800bc64:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800bc68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc6c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 800bc70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc72:	1d1a      	adds	r2, r3, #4
 800bc74:	677a      	str	r2, [r7, #116]	; 0x74
 800bc76:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800bc7a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800bc7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc82:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800bc86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc88:	1d1a      	adds	r2, r3, #4
 800bc8a:	677a      	str	r2, [r7, #116]	; 0x74
 800bc8c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800bc90:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bc94:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc98:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 800bc9c:	edd7 7a04 	vldr	s15, [r7, #16]
 800bca0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800bca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bca8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 800bcac:	edd7 7a05 	vldr	s15, [r7, #20]
 800bcb0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800bcb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcb8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 800bcbc:	edd7 7a05 	vldr	s15, [r7, #20]
 800bcc0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800bcc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcc8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 800bccc:	edd7 7a04 	vldr	s15, [r7, #16]
 800bcd0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800bcd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcd8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800bcdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcde:	1d1a      	adds	r2, r3, #4
 800bce0:	67ba      	str	r2, [r7, #120]	; 0x78
 800bce2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800bce6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800bcea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcee:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800bcf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcf4:	1d1a      	adds	r2, r3, #4
 800bcf6:	67ba      	str	r2, [r7, #120]	; 0x78
 800bcf8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800bcfc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bd00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd04:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 800bd08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f47f ae45 	bne.w	800b9a0 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 800bd16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd18:	b299      	uxth	r1, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	685a      	ldr	r2, [r3, #4]
 800bd1e:	2302      	movs	r3, #2
 800bd20:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bd22:	f000 fef1 	bl	800cb08 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 800bd26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd28:	b299      	uxth	r1, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	685a      	ldr	r2, [r3, #4]
 800bd2e:	2302      	movs	r3, #2
 800bd30:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800bd32:	f000 fee9 	bl	800cb08 <arm_radix8_butterfly_f32>
}
 800bd36:	bf00      	nop
 800bd38:	3780      	adds	r7, #128	; 0x80
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b0ac      	sub	sp, #176	; 0xb0
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
 800bd46:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	881b      	ldrh	r3, [r3, #0]
 800bd4c:	085b      	lsrs	r3, r3, #1
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800bd54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	683a      	ldr	r2, [r7, #0]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800bd62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bd6c:	4413      	add	r3, r2
 800bd6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800bd72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800bd86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd8a:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 800bd8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd90:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800bd92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd96:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 800bd98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd9c:	3b04      	subs	r3, #4
 800bd9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800bda2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bda6:	3b04      	subs	r3, #4
 800bda8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800bdac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdb0:	3b04      	subs	r3, #4
 800bdb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800bdb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800bdc0:	4413      	add	r3, r2
 800bdc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bdce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bdd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bdd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bdda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 800bdde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bde2:	085b      	lsrs	r3, r3, #1
 800bde4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 800bde8:	2302      	movs	r3, #2
 800bdea:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 800bdec:	2304      	movs	r3, #4
 800bdee:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800bdf0:	2306      	movs	r3, #6
 800bdf2:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	ed93 7a00 	vldr	s14, [r3]
 800bdfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdfe:	edd3 7a00 	vldr	s15, [r3]
 800be02:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be06:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	ed93 7a00 	vldr	s14, [r3]
 800be10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be14:	edd3 7a00 	vldr	s15, [r3]
 800be18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be1c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	3304      	adds	r3, #4
 800be24:	ed93 7a00 	vldr	s14, [r3]
 800be28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be2c:	3304      	adds	r3, #4
 800be2e:	edd3 7a00 	vldr	s15, [r3]
 800be32:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be36:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	3304      	adds	r3, #4
 800be3e:	ed93 7a00 	vldr	s14, [r3]
 800be42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be46:	3304      	adds	r3, #4
 800be48:	edd3 7a00 	vldr	s15, [r3]
 800be4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be50:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800be54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be58:	3304      	adds	r3, #4
 800be5a:	ed93 7a00 	vldr	s14, [r3]
 800be5e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800be62:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800be6a:	3304      	adds	r3, #4
 800be6c:	edd3 7a00 	vldr	s15, [r3]
 800be70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be74:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800be78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be7c:	edd3 7a00 	vldr	s15, [r3]
 800be80:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800be84:	ee37 7a67 	vsub.f32	s14, s14, s15
 800be88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800be8c:	edd3 7a00 	vldr	s15, [r3]
 800be90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be94:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800be98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be9c:	edd3 7a00 	vldr	s15, [r3]
 800bea0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800bea4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800beac:	edd3 7a00 	vldr	s15, [r3]
 800beb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beb4:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800beb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bebc:	3304      	adds	r3, #4
 800bebe:	edd3 7a00 	vldr	s15, [r3]
 800bec2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800bec6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800beca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bece:	3304      	adds	r3, #4
 800bed0:	edd3 7a00 	vldr	s15, [r3]
 800bed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bed8:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800bedc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bee0:	3304      	adds	r3, #4
 800bee2:	edd3 7a00 	vldr	s15, [r3]
 800bee6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800beea:	ee37 7a67 	vsub.f32	s14, s14, s15
 800beee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bef2:	3304      	adds	r3, #4
 800bef4:	edd3 7a00 	vldr	s15, [r3]
 800bef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800befc:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800bf00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf04:	ed93 7a00 	vldr	s14, [r3]
 800bf08:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800bf0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bf10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf14:	edd3 7a00 	vldr	s15, [r3]
 800bf18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf1c:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800bf20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf24:	ed93 7a00 	vldr	s14, [r3]
 800bf28:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800bf2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bf30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf34:	edd3 7a00 	vldr	s15, [r3]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	1d1a      	adds	r2, r3, #4
 800bf3c:	603a      	str	r2, [r7, #0]
 800bf3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf42:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800bf46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf4a:	3304      	adds	r3, #4
 800bf4c:	ed93 7a00 	vldr	s14, [r3]
 800bf50:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800bf54:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bf58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf5c:	3304      	adds	r3, #4
 800bf5e:	edd3 7a00 	vldr	s15, [r3]
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	1d1a      	adds	r2, r3, #4
 800bf66:	603a      	str	r2, [r7, #0]
 800bf68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf6c:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 800bf70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf74:	1d1a      	adds	r2, r3, #4
 800bf76:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800bf7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf7c:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800bf7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf82:	1d1a      	adds	r2, r3, #4
 800bf84:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800bf88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf8a:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800bf8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf90:	1d1a      	adds	r2, r3, #4
 800bf92:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bf96:	69fa      	ldr	r2, [r7, #28]
 800bf98:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 800bf9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf9e:	1d1a      	adds	r2, r3, #4
 800bfa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bfa4:	6a3a      	ldr	r2, [r7, #32]
 800bfa6:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800bfa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bfac:	1d1a      	adds	r2, r3, #4
 800bfae:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800bfb2:	68fa      	ldr	r2, [r7, #12]
 800bfb4:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800bfb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bfba:	1d1a      	adds	r2, r3, #4
 800bfbc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800bfc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800bfcc:	4413      	add	r3, r2
 800bfce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800bfd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800bfda:	4413      	add	r3, r2
 800bfdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800bfe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bfe8:	4413      	add	r3, r2
 800bfea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 800bfee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bff2:	3b02      	subs	r3, #2
 800bff4:	085b      	lsrs	r3, r3, #1
 800bff6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bffa:	e31a      	b.n	800c632 <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	ed93 7a00 	vldr	s14, [r3]
 800c002:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c006:	edd3 7a00 	vldr	s15, [r3]
 800c00a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c00e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	ed93 7a00 	vldr	s14, [r3]
 800c018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c01c:	edd3 7a00 	vldr	s15, [r3]
 800c020:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c024:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	3304      	adds	r3, #4
 800c02c:	ed93 7a00 	vldr	s14, [r3]
 800c030:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c034:	3304      	adds	r3, #4
 800c036:	edd3 7a00 	vldr	s15, [r3]
 800c03a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c03e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	3304      	adds	r3, #4
 800c046:	ed93 7a00 	vldr	s14, [r3]
 800c04a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c04e:	3304      	adds	r3, #4
 800c050:	edd3 7a00 	vldr	s15, [r3]
 800c054:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c058:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 800c05c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c060:	3304      	adds	r3, #4
 800c062:	ed93 7a00 	vldr	s14, [r3]
 800c066:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800c06a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c06e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c072:	3304      	adds	r3, #4
 800c074:	edd3 7a00 	vldr	s15, [r3]
 800c078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c07c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 800c080:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c084:	edd3 7a00 	vldr	s15, [r3]
 800c088:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800c08c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c094:	edd3 7a00 	vldr	s15, [r3]
 800c098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c09c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 800c0a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c0a4:	edd3 7a00 	vldr	s15, [r3]
 800c0a8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800c0ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c0b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0b4:	edd3 7a00 	vldr	s15, [r3]
 800c0b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0bc:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 800c0c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	edd3 7a00 	vldr	s15, [r3]
 800c0ca:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800c0ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c0d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0d6:	3304      	adds	r3, #4
 800c0d8:	edd3 7a00 	vldr	s15, [r3]
 800c0dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0e0:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 800c0e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c0e8:	3304      	adds	r3, #4
 800c0ea:	edd3 7a00 	vldr	s15, [r3]
 800c0ee:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800c0f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c0f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0fa:	3304      	adds	r3, #4
 800c0fc:	edd3 7a00 	vldr	s15, [r3]
 800c100:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c104:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 800c108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c10c:	ed93 7a00 	vldr	s14, [r3]
 800c110:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c114:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c118:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c11c:	edd3 7a00 	vldr	s15, [r3]
 800c120:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c124:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 800c128:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c12c:	ed93 7a00 	vldr	s14, [r3]
 800c130:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800c134:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c138:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c13c:	edd3 7a00 	vldr	s15, [r3]
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	1d1a      	adds	r2, r3, #4
 800c144:	603a      	str	r2, [r7, #0]
 800c146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c14a:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 800c14e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c152:	3304      	adds	r3, #4
 800c154:	ed93 7a00 	vldr	s14, [r3]
 800c158:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800c15c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c160:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c164:	3304      	adds	r3, #4
 800c166:	edd3 7a00 	vldr	s15, [r3]
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	1d1a      	adds	r2, r3, #4
 800c16e:	603a      	str	r2, [r7, #0]
 800c170:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c174:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800c178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c17c:	3b04      	subs	r3, #4
 800c17e:	ed93 7a00 	vldr	s14, [r3]
 800c182:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c186:	3b04      	subs	r3, #4
 800c188:	edd3 7a00 	vldr	s15, [r3]
 800c18c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c190:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800c194:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c198:	3b04      	subs	r3, #4
 800c19a:	ed93 7a00 	vldr	s14, [r3]
 800c19e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c1a2:	3b04      	subs	r3, #4
 800c1a4:	edd3 7a00 	vldr	s15, [r3]
 800c1a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1ac:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 800c1b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1b4:	ed93 7a00 	vldr	s14, [r3]
 800c1b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c1bc:	edd3 7a00 	vldr	s15, [r3]
 800c1c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1c4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 800c1c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1cc:	ed93 7a00 	vldr	s14, [r3]
 800c1d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c1d4:	edd3 7a00 	vldr	s15, [r3]
 800c1d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1dc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800c1e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c1e4:	ed93 7a00 	vldr	s14, [r3]
 800c1e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1ec:	edd3 7a00 	vldr	s15, [r3]
 800c1f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c1f4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c1f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1fc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800c200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c204:	ed93 7a00 	vldr	s14, [r3]
 800c208:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c20c:	edd3 7a00 	vldr	s15, [r3]
 800c210:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c214:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c218:	3b04      	subs	r3, #4
 800c21a:	edd3 7a00 	vldr	s15, [r3]
 800c21e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c226:	3b04      	subs	r3, #4
 800c228:	edd3 7a00 	vldr	s15, [r3]
 800c22c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c230:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800c234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c238:	3b04      	subs	r3, #4
 800c23a:	edd3 7a00 	vldr	s15, [r3]
 800c23e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800c242:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c24a:	3b04      	subs	r3, #4
 800c24c:	edd3 7a00 	vldr	s15, [r3]
 800c250:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c254:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 800c258:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c25c:	edd3 7a00 	vldr	s15, [r3]
 800c260:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800c264:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c268:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c26c:	edd3 7a00 	vldr	s15, [r3]
 800c270:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c274:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 800c278:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c27c:	ed93 7a00 	vldr	s14, [r3]
 800c280:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c284:	edd3 7a00 	vldr	s15, [r3]
 800c288:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c28c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c290:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c294:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800c298:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c29c:	3b04      	subs	r3, #4
 800c29e:	ed93 7a00 	vldr	s14, [r3]
 800c2a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2a6:	3b04      	subs	r3, #4
 800c2a8:	edd3 7a00 	vldr	s15, [r3]
 800c2ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c2b0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800c2b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2b8:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 800c2bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2c0:	ed93 7a00 	vldr	s14, [r3]
 800c2c4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800c2c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c2cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2d0:	edd3 7a00 	vldr	s15, [r3]
 800c2d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2d8:	1f1a      	subs	r2, r3, #4
 800c2da:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c2de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2e2:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 800c2e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2ea:	3b04      	subs	r3, #4
 800c2ec:	ed93 7a00 	vldr	s14, [r3]
 800c2f0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800c2f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c2f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2fc:	3b04      	subs	r3, #4
 800c2fe:	edd3 7a00 	vldr	s15, [r3]
 800c302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c306:	1f1a      	subs	r2, r3, #4
 800c308:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c30c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c310:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 800c314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c318:	1d1a      	adds	r2, r3, #4
 800c31a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800c322:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c326:	1d1a      	adds	r2, r3, #4
 800c328:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 800c330:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c334:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c33c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 800c340:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c344:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c34c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 800c350:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c354:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c35c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 800c360:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c364:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c36c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 800c370:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c374:	1d1a      	adds	r2, r3, #4
 800c376:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800c37a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c37e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c382:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c386:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 800c38a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c38e:	1d1a      	adds	r2, r3, #4
 800c390:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800c394:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800c398:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c39c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3a0:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 800c3a4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c3a8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c3ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3b0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 800c3b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c3b8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c3bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3c0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 800c3c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c3c8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c3cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 800c3d4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c3d8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c3dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3e0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 800c3e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3e8:	1f1a      	subs	r2, r3, #4
 800c3ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c3ee:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c3f2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c3f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3fa:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 800c3fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c402:	1f1a      	subs	r2, r3, #4
 800c404:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c408:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800c40c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c410:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c414:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 800c418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 800c420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 800c428:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c430:	4413      	add	r3, r2
 800c432:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 800c436:	edd7 7a07 	vldr	s15, [r7, #28]
 800c43a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c43e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c442:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 800c446:	edd7 7a08 	vldr	s15, [r7, #32]
 800c44a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c44e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c452:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 800c456:	edd7 7a08 	vldr	s15, [r7, #32]
 800c45a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c462:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 800c466:	edd7 7a07 	vldr	s15, [r7, #28]
 800c46a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c472:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 800c476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c47a:	1d1a      	adds	r2, r3, #4
 800c47c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c480:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c484:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c48c:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 800c490:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c494:	1d1a      	adds	r2, r3, #4
 800c496:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c49a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800c49e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c4a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4a6:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 800c4aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4ae:	eef1 7a67 	vneg.f32	s15, s15
 800c4b2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4ba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 800c4be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c4c2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c4c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4ca:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 800c4ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c4d2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c4d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4da:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 800c4de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4e2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4ea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 800c4ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c4f2:	1f1a      	subs	r2, r3, #4
 800c4f4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c4f8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c4fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c500:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c504:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 800c508:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c50c:	1f1a      	subs	r2, r3, #4
 800c50e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c512:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c516:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800c51a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c51e:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 800c522:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 800c52a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 800c532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c53a:	4413      	add	r3, r2
 800c53c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 800c540:	edd7 7a03 	vldr	s15, [r7, #12]
 800c544:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c54c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 800c550:	edd7 7a04 	vldr	s15, [r7, #16]
 800c554:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c55c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 800c560:	edd7 7a04 	vldr	s15, [r7, #16]
 800c564:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c56c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 800c570:	edd7 7a03 	vldr	s15, [r7, #12]
 800c574:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c57c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 800c580:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c584:	1d1a      	adds	r2, r3, #4
 800c586:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c58a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c58e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c592:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c596:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 800c59a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c59e:	1d1a      	adds	r2, r3, #4
 800c5a0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c5a4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800c5a8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c5ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5b0:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 800c5b4:	edd7 7a06 	vldr	s15, [r7, #24]
 800c5b8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c5bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5c0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 800c5c4:	edd7 7a05 	vldr	s15, [r7, #20]
 800c5c8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c5cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5d0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 800c5d4:	edd7 7a05 	vldr	s15, [r7, #20]
 800c5d8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c5dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5e0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 800c5e4:	edd7 7a06 	vldr	s15, [r7, #24]
 800c5e8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c5ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5f0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 800c5f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5f8:	1f1a      	subs	r2, r3, #4
 800c5fa:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800c5fe:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c602:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c60a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 800c60e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c612:	1f1a      	subs	r2, r3, #4
 800c614:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800c618:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800c61c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c620:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c624:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 800c628:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c62c:	3b01      	subs	r3, #1
 800c62e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c632:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c636:	2b00      	cmp	r3, #0
 800c638:	f47f ace0 	bne.w	800bffc <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	ed93 7a00 	vldr	s14, [r3]
 800c642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c646:	edd3 7a00 	vldr	s15, [r3]
 800c64a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c64e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	ed93 7a00 	vldr	s14, [r3]
 800c658:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c65c:	edd3 7a00 	vldr	s15, [r3]
 800c660:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c664:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	3304      	adds	r3, #4
 800c66c:	ed93 7a00 	vldr	s14, [r3]
 800c670:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c674:	3304      	adds	r3, #4
 800c676:	edd3 7a00 	vldr	s15, [r3]
 800c67a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c67e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	3304      	adds	r3, #4
 800c686:	ed93 7a00 	vldr	s14, [r3]
 800c68a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c68e:	3304      	adds	r3, #4
 800c690:	edd3 7a00 	vldr	s15, [r3]
 800c694:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c698:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800c69c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c6a0:	3304      	adds	r3, #4
 800c6a2:	ed93 7a00 	vldr	s14, [r3]
 800c6a6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800c6aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c6ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c6b2:	3304      	adds	r3, #4
 800c6b4:	edd3 7a00 	vldr	s15, [r3]
 800c6b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6bc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800c6c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c6c4:	edd3 7a00 	vldr	s15, [r3]
 800c6c8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800c6cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c6d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c6d4:	edd3 7a00 	vldr	s15, [r3]
 800c6d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6dc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800c6e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c6e4:	edd3 7a00 	vldr	s15, [r3]
 800c6e8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800c6ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c6f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c6f4:	edd3 7a00 	vldr	s15, [r3]
 800c6f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6fc:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800c700:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c704:	3304      	adds	r3, #4
 800c706:	edd3 7a00 	vldr	s15, [r3]
 800c70a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800c70e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c712:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c716:	3304      	adds	r3, #4
 800c718:	edd3 7a00 	vldr	s15, [r3]
 800c71c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c720:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800c724:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c728:	3304      	adds	r3, #4
 800c72a:	edd3 7a00 	vldr	s15, [r3]
 800c72e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800c732:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c736:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c73a:	3304      	adds	r3, #4
 800c73c:	edd3 7a00 	vldr	s15, [r3]
 800c740:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c744:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800c748:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c74c:	ed93 7a00 	vldr	s14, [r3]
 800c750:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c754:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c758:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c75c:	edd3 7a00 	vldr	s15, [r3]
 800c760:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c764:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800c768:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c76c:	ed93 7a00 	vldr	s14, [r3]
 800c770:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800c774:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c778:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c77c:	edd3 7a00 	vldr	s15, [r3]
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	1d1a      	adds	r2, r3, #4
 800c784:	603a      	str	r2, [r7, #0]
 800c786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c78a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800c78e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c792:	3304      	adds	r3, #4
 800c794:	ed93 7a00 	vldr	s14, [r3]
 800c798:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800c79c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c7a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	edd3 7a00 	vldr	s15, [r3]
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	1d1a      	adds	r2, r3, #4
 800c7ae:	603a      	str	r2, [r7, #0]
 800c7b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7b4:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 800c7b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 800c7c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 800c7c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c7cc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c7d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7d4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 800c7d8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c7dc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c7e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7e4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 800c7e8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c7ec:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c7f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7f4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 800c7f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c7fc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c800:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c804:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 800c808:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c80c:	1d1a      	adds	r2, r3, #4
 800c80e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800c812:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c816:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c81a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c81e:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800c822:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c826:	1d1a      	adds	r2, r3, #4
 800c828:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800c82c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800c830:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c834:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c838:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 800c83c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 800c844:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 800c84c:	edd7 7a07 	vldr	s15, [r7, #28]
 800c850:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c854:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c858:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 800c85c:	edd7 7a08 	vldr	s15, [r7, #32]
 800c860:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c864:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c868:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 800c86c:	edd7 7a08 	vldr	s15, [r7, #32]
 800c870:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c874:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c878:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 800c87c:	edd7 7a07 	vldr	s15, [r7, #28]
 800c880:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c884:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c888:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 800c88c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c890:	1d1a      	adds	r2, r3, #4
 800c892:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c896:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c89a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c89e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8a2:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 800c8a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c8aa:	1d1a      	adds	r2, r3, #4
 800c8ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c8b0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800c8b4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c8b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8bc:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 800c8c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 800c8c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 800c8d0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c8d4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c8d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8dc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 800c8e0:	edd7 7a04 	vldr	s15, [r7, #16]
 800c8e4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c8e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ec:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 800c8f0:	edd7 7a04 	vldr	s15, [r7, #16]
 800c8f4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c8f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8fc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 800c900:	edd7 7a03 	vldr	s15, [r7, #12]
 800c904:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c90c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 800c910:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c914:	1d1a      	adds	r2, r3, #4
 800c916:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c91a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c91e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c922:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c926:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800c92a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c92e:	1d1a      	adds	r2, r3, #4
 800c930:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c934:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800c938:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c93c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c940:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 800c944:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c948:	b299      	uxth	r1, r3
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	685a      	ldr	r2, [r3, #4]
 800c94e:	2304      	movs	r3, #4
 800c950:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800c952:	f000 f8d9 	bl	800cb08 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 800c956:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c95a:	b299      	uxth	r1, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	685a      	ldr	r2, [r3, #4]
 800c960:	2304      	movs	r3, #4
 800c962:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800c964:	f000 f8d0 	bl	800cb08 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 800c968:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c96c:	b299      	uxth	r1, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	685a      	ldr	r2, [r3, #4]
 800c972:	2304      	movs	r3, #4
 800c974:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c976:	f000 f8c7 	bl	800cb08 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 800c97a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c97e:	b299      	uxth	r1, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	685a      	ldr	r2, [r3, #4]
 800c984:	2304      	movs	r3, #4
 800c986:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c988:	f000 f8be 	bl	800cb08 <arm_radix8_butterfly_f32>
}
 800c98c:	bf00      	nop
 800c98e:	37b0      	adds	r7, #176	; 0xb0
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b088      	sub	sp, #32
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	4611      	mov	r1, r2
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	71fb      	strb	r3, [r7, #7]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	881b      	ldrh	r3, [r3, #0]
 800c9ae:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 800c9b0:	79fb      	ldrb	r3, [r7, #7]
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d117      	bne.n	800c9e6 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	3304      	adds	r3, #4
 800c9ba:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800c9bc:	2300      	movs	r3, #0
 800c9be:	61fb      	str	r3, [r7, #28]
 800c9c0:	e00d      	b.n	800c9de <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	edd3 7a00 	vldr	s15, [r3]
 800c9c8:	eef1 7a67 	vneg.f32	s15, s15
 800c9cc:	69bb      	ldr	r3, [r7, #24]
 800c9ce:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	3308      	adds	r3, #8
 800c9d6:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	61fb      	str	r3, [r7, #28]
 800c9de:	69fa      	ldr	r2, [r7, #28]
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d3ed      	bcc.n	800c9c2 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9ec:	d040      	beq.n	800ca70 <arm_cfft_f32+0xdc>
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9f4:	d845      	bhi.n	800ca82 <arm_cfft_f32+0xee>
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9fc:	d033      	beq.n	800ca66 <arm_cfft_f32+0xd2>
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca04:	d83d      	bhi.n	800ca82 <arm_cfft_f32+0xee>
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca0c:	d026      	beq.n	800ca5c <arm_cfft_f32+0xc8>
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca14:	d835      	bhi.n	800ca82 <arm_cfft_f32+0xee>
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca1c:	d028      	beq.n	800ca70 <arm_cfft_f32+0xdc>
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca24:	d82d      	bhi.n	800ca82 <arm_cfft_f32+0xee>
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca2c:	d01b      	beq.n	800ca66 <arm_cfft_f32+0xd2>
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca34:	d825      	bhi.n	800ca82 <arm_cfft_f32+0xee>
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	2b80      	cmp	r3, #128	; 0x80
 800ca3a:	d00f      	beq.n	800ca5c <arm_cfft_f32+0xc8>
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	2b80      	cmp	r3, #128	; 0x80
 800ca40:	d81f      	bhi.n	800ca82 <arm_cfft_f32+0xee>
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	2b40      	cmp	r3, #64	; 0x40
 800ca46:	d013      	beq.n	800ca70 <arm_cfft_f32+0xdc>
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	2b40      	cmp	r3, #64	; 0x40
 800ca4c:	d819      	bhi.n	800ca82 <arm_cfft_f32+0xee>
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	2b10      	cmp	r3, #16
 800ca52:	d003      	beq.n	800ca5c <arm_cfft_f32+0xc8>
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	2b20      	cmp	r3, #32
 800ca58:	d005      	beq.n	800ca66 <arm_cfft_f32+0xd2>
 800ca5a:	e012      	b.n	800ca82 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800ca5c:	68b9      	ldr	r1, [r7, #8]
 800ca5e:	68f8      	ldr	r0, [r7, #12]
 800ca60:	f7fe ff79 	bl	800b956 <arm_cfft_radix8by2_f32>
    break;
 800ca64:	e00d      	b.n	800ca82 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800ca66:	68b9      	ldr	r1, [r7, #8]
 800ca68:	68f8      	ldr	r0, [r7, #12]
 800ca6a:	f7ff f968 	bl	800bd3e <arm_cfft_radix8by4_f32>
    break;
 800ca6e:	e008      	b.n	800ca82 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	b299      	uxth	r1, r3
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	685a      	ldr	r2, [r3, #4]
 800ca78:	2301      	movs	r3, #1
 800ca7a:	68b8      	ldr	r0, [r7, #8]
 800ca7c:	f000 f844 	bl	800cb08 <arm_radix8_butterfly_f32>
    break;
 800ca80:	bf00      	nop
  }

  if ( bitReverseFlag )
 800ca82:	79bb      	ldrb	r3, [r7, #6]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d007      	beq.n	800ca98 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	8999      	ldrh	r1, [r3, #12]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	461a      	mov	r2, r3
 800ca92:	68b8      	ldr	r0, [r7, #8]
 800ca94:	f7fe ff06 	bl	800b8a4 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 800ca98:	79fb      	ldrb	r3, [r7, #7]
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d130      	bne.n	800cb00 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	ee07 3a90 	vmov	s15, r3
 800caa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800caa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cab0:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800cab8:	2300      	movs	r3, #0
 800caba:	61fb      	str	r3, [r7, #28]
 800cabc:	e01c      	b.n	800caf8 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	1d1a      	adds	r2, r3, #4
 800cac2:	61ba      	str	r2, [r7, #24]
 800cac4:	ed93 7a00 	vldr	s14, [r3]
 800cac8:	edd7 7a04 	vldr	s15, [r7, #16]
 800cacc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cad0:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	edd3 7a00 	vldr	s15, [r3]
 800cada:	eeb1 7a67 	vneg.f32	s14, s15
 800cade:	edd7 7a04 	vldr	s15, [r7, #16]
 800cae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 800caec:	69bb      	ldr	r3, [r7, #24]
 800caee:	3304      	adds	r3, #4
 800caf0:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	3301      	adds	r3, #1
 800caf6:	61fb      	str	r3, [r7, #28]
 800caf8:	69fa      	ldr	r2, [r7, #28]
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d3de      	bcc.n	800cabe <arm_cfft_f32+0x12a>
    }
  }
}
 800cb00:	bf00      	nop
 800cb02:	3720      	adds	r7, #32
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b0bd      	sub	sp, #244	; 0xf4
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	607a      	str	r2, [r7, #4]
 800cb12:	461a      	mov	r2, r3
 800cb14:	460b      	mov	r3, r1
 800cb16:	817b      	strh	r3, [r7, #10]
 800cb18:	4613      	mov	r3, r2
 800cb1a:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800cb1c:	4b09      	ldr	r3, [pc, #36]	; (800cb44 <arm_radix8_butterfly_f32+0x3c>)
 800cb1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800cb22:	897b      	ldrh	r3, [r7, #10]
 800cb24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 800cb28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800cb30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb34:	08db      	lsrs	r3, r3, #3
 800cb36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cb40:	e002      	b.n	800cb48 <arm_radix8_butterfly_f32+0x40>
 800cb42:	bf00      	nop
 800cb44:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 800cb48:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800cb4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb50:	4413      	add	r3, r2
 800cb52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800cb56:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800cb5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb5e:	4413      	add	r3, r2
 800cb60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800cb64:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cb68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800cb72:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800cb76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb7a:	4413      	add	r3, r2
 800cb7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800cb80:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cb84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb88:	4413      	add	r3, r2
 800cb8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800cb8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cb92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb96:	4413      	add	r3, r2
 800cb98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800cb9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cba4:	4413      	add	r3, r2
 800cba6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800cbaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cbae:	00db      	lsls	r3, r3, #3
 800cbb0:	68fa      	ldr	r2, [r7, #12]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	ed93 7a00 	vldr	s14, [r3]
 800cbb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	68fa      	ldr	r2, [r7, #12]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	edd3 7a00 	vldr	s15, [r3]
 800cbc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cbca:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800cbce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cbd2:	00db      	lsls	r3, r3, #3
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	ed93 7a00 	vldr	s14, [r3]
 800cbdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cbe0:	00db      	lsls	r3, r3, #3
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	edd3 7a00 	vldr	s15, [r3]
 800cbea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbee:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800cbf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cbf6:	00db      	lsls	r3, r3, #3
 800cbf8:	68fa      	ldr	r2, [r7, #12]
 800cbfa:	4413      	add	r3, r2
 800cbfc:	ed93 7a00 	vldr	s14, [r3]
 800cc00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cc04:	00db      	lsls	r3, r3, #3
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	4413      	add	r3, r2
 800cc0a:	edd3 7a00 	vldr	s15, [r3]
 800cc0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc12:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800cc16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc1a:	00db      	lsls	r3, r3, #3
 800cc1c:	68fa      	ldr	r2, [r7, #12]
 800cc1e:	4413      	add	r3, r2
 800cc20:	ed93 7a00 	vldr	s14, [r3]
 800cc24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cc28:	00db      	lsls	r3, r3, #3
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	edd3 7a00 	vldr	s15, [r3]
 800cc32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc36:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800cc3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800cc3e:	00db      	lsls	r3, r3, #3
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	4413      	add	r3, r2
 800cc44:	ed93 7a00 	vldr	s14, [r3]
 800cc48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cc4c:	00db      	lsls	r3, r3, #3
 800cc4e:	68fa      	ldr	r2, [r7, #12]
 800cc50:	4413      	add	r3, r2
 800cc52:	edd3 7a00 	vldr	s15, [r3]
 800cc56:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc5a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800cc5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800cc62:	00db      	lsls	r3, r3, #3
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	4413      	add	r3, r2
 800cc68:	ed93 7a00 	vldr	s14, [r3]
 800cc6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cc70:	00db      	lsls	r3, r3, #3
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	4413      	add	r3, r2
 800cc76:	edd3 7a00 	vldr	s15, [r3]
 800cc7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc7e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800cc82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800cc86:	00db      	lsls	r3, r3, #3
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	ed93 7a00 	vldr	s14, [r3]
 800cc90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cc94:	00db      	lsls	r3, r3, #3
 800cc96:	68fa      	ldr	r2, [r7, #12]
 800cc98:	4413      	add	r3, r2
 800cc9a:	edd3 7a00 	vldr	s15, [r3]
 800cc9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cca2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800cca6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ccaa:	00db      	lsls	r3, r3, #3
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	4413      	add	r3, r2
 800ccb0:	ed93 7a00 	vldr	s14, [r3]
 800ccb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ccb8:	00db      	lsls	r3, r3, #3
 800ccba:	68fa      	ldr	r2, [r7, #12]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	edd3 7a00 	vldr	s15, [r3]
 800ccc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccc6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800ccca:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800ccce:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800ccd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccd6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800ccda:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800ccde:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800cce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cce6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800ccea:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800ccee:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800ccf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccf6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800ccfa:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800ccfe:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800cd02:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd06:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 800cd0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd0e:	00db      	lsls	r3, r3, #3
 800cd10:	68fa      	ldr	r2, [r7, #12]
 800cd12:	4413      	add	r3, r2
 800cd14:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800cd18:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800cd1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd20:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800cd24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cd28:	00db      	lsls	r3, r3, #3
 800cd2a:	68fa      	ldr	r2, [r7, #12]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800cd32:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800cd36:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd3a:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800cd3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd42:	00db      	lsls	r3, r3, #3
 800cd44:	3304      	adds	r3, #4
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	4413      	add	r3, r2
 800cd4a:	ed93 7a00 	vldr	s14, [r3]
 800cd4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cd52:	00db      	lsls	r3, r3, #3
 800cd54:	3304      	adds	r3, #4
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	4413      	add	r3, r2
 800cd5a:	edd3 7a00 	vldr	s15, [r3]
 800cd5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd62:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800cd66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd6a:	00db      	lsls	r3, r3, #3
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	4413      	add	r3, r2
 800cd72:	ed93 7a00 	vldr	s14, [r3]
 800cd76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cd7a:	00db      	lsls	r3, r3, #3
 800cd7c:	3304      	adds	r3, #4
 800cd7e:	68fa      	ldr	r2, [r7, #12]
 800cd80:	4413      	add	r3, r2
 800cd82:	edd3 7a00 	vldr	s15, [r3]
 800cd86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd8a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800cd8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd92:	00db      	lsls	r3, r3, #3
 800cd94:	3304      	adds	r3, #4
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	4413      	add	r3, r2
 800cd9a:	ed93 7a00 	vldr	s14, [r3]
 800cd9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cda2:	00db      	lsls	r3, r3, #3
 800cda4:	3304      	adds	r3, #4
 800cda6:	68fa      	ldr	r2, [r7, #12]
 800cda8:	4413      	add	r3, r2
 800cdaa:	edd3 7a00 	vldr	s15, [r3]
 800cdae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cdb2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800cdb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cdba:	00db      	lsls	r3, r3, #3
 800cdbc:	3304      	adds	r3, #4
 800cdbe:	68fa      	ldr	r2, [r7, #12]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	ed93 7a00 	vldr	s14, [r3]
 800cdc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cdca:	00db      	lsls	r3, r3, #3
 800cdcc:	3304      	adds	r3, #4
 800cdce:	68fa      	ldr	r2, [r7, #12]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	edd3 7a00 	vldr	s15, [r3]
 800cdd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdda:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800cdde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800cde2:	00db      	lsls	r3, r3, #3
 800cde4:	3304      	adds	r3, #4
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	4413      	add	r3, r2
 800cdea:	ed93 7a00 	vldr	s14, [r3]
 800cdee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	edd3 7a00 	vldr	s15, [r3]
 800cdfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce02:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800ce06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ce0a:	00db      	lsls	r3, r3, #3
 800ce0c:	3304      	adds	r3, #4
 800ce0e:	68fa      	ldr	r2, [r7, #12]
 800ce10:	4413      	add	r3, r2
 800ce12:	ed93 7a00 	vldr	s14, [r3]
 800ce16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	3304      	adds	r3, #4
 800ce1e:	68fa      	ldr	r2, [r7, #12]
 800ce20:	4413      	add	r3, r2
 800ce22:	edd3 7a00 	vldr	s15, [r3]
 800ce26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce2a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800ce2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ce32:	00db      	lsls	r3, r3, #3
 800ce34:	3304      	adds	r3, #4
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	4413      	add	r3, r2
 800ce3a:	ed93 7a00 	vldr	s14, [r3]
 800ce3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ce42:	00db      	lsls	r3, r3, #3
 800ce44:	3304      	adds	r3, #4
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	4413      	add	r3, r2
 800ce4a:	edd3 7a00 	vldr	s15, [r3]
 800ce4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce52:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800ce56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ce5a:	00db      	lsls	r3, r3, #3
 800ce5c:	3304      	adds	r3, #4
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	4413      	add	r3, r2
 800ce62:	ed93 7a00 	vldr	s14, [r3]
 800ce66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ce6a:	00db      	lsls	r3, r3, #3
 800ce6c:	3304      	adds	r3, #4
 800ce6e:	68fa      	ldr	r2, [r7, #12]
 800ce70:	4413      	add	r3, r2
 800ce72:	edd3 7a00 	vldr	s15, [r3]
 800ce76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce7a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800ce7e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800ce82:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ce86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce8a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800ce8e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800ce92:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ce96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce9a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800ce9e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800cea2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800cea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ceaa:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800ceae:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800ceb2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800ceb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ceba:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800cebe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cec2:	00db      	lsls	r3, r3, #3
 800cec4:	3304      	adds	r3, #4
 800cec6:	68fa      	ldr	r2, [r7, #12]
 800cec8:	4413      	add	r3, r2
 800ceca:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800cece:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ced2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ced6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800ceda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cede:	00db      	lsls	r3, r3, #3
 800cee0:	3304      	adds	r3, #4
 800cee2:	68fa      	ldr	r2, [r7, #12]
 800cee4:	4413      	add	r3, r2
 800cee6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800ceea:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ceee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cef2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800cef6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800cefa:	00db      	lsls	r3, r3, #3
 800cefc:	68fa      	ldr	r2, [r7, #12]
 800cefe:	4413      	add	r3, r2
 800cf00:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800cf04:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800cf08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf0c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800cf10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cf14:	00db      	lsls	r3, r3, #3
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	4413      	add	r3, r2
 800cf1a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800cf1e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800cf22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf26:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800cf2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800cf2e:	00db      	lsls	r3, r3, #3
 800cf30:	3304      	adds	r3, #4
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	4413      	add	r3, r2
 800cf36:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800cf3a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800cf3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf42:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800cf46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cf4a:	00db      	lsls	r3, r3, #3
 800cf4c:	3304      	adds	r3, #4
 800cf4e:	68fa      	ldr	r2, [r7, #12]
 800cf50:	4413      	add	r3, r2
 800cf52:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800cf56:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800cf5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf5e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800cf62:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800cf66:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800cf6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf6e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800cf72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf76:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800cf7a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800cf7e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800cf82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf86:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800cf8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf8e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800cf92:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800cf96:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800cf9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf9e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800cfa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfa6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800cfaa:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800cfae:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800cfb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfb6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800cfba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfbe:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800cfc2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800cfc6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800cfca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfce:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800cfd2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800cfd6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800cfda:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfde:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800cfe2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800cfe6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800cfea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfee:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800cff2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800cff6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800cffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cffe:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800d002:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800d006:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800d00a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d00e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800d012:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800d016:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800d01a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d01e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800d022:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800d026:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800d02a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d02e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800d032:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800d036:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800d03a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d03e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800d042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d046:	00db      	lsls	r3, r3, #3
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	4413      	add	r3, r2
 800d04c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800d050:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800d054:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d058:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800d05c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d060:	00db      	lsls	r3, r3, #3
 800d062:	68fa      	ldr	r2, [r7, #12]
 800d064:	4413      	add	r3, r2
 800d066:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800d06a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800d06e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d072:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800d076:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d07a:	00db      	lsls	r3, r3, #3
 800d07c:	68fa      	ldr	r2, [r7, #12]
 800d07e:	4413      	add	r3, r2
 800d080:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800d084:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800d088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d08c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800d090:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d094:	00db      	lsls	r3, r3, #3
 800d096:	68fa      	ldr	r2, [r7, #12]
 800d098:	4413      	add	r3, r2
 800d09a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800d09e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800d0a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0a6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800d0aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d0ae:	00db      	lsls	r3, r3, #3
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	68fa      	ldr	r2, [r7, #12]
 800d0b4:	4413      	add	r3, r2
 800d0b6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800d0ba:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800d0be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0c2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800d0c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d0ca:	00db      	lsls	r3, r3, #3
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800d0d6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800d0da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0de:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800d0e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d0e6:	00db      	lsls	r3, r3, #3
 800d0e8:	3304      	adds	r3, #4
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800d0f2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800d0f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0fa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800d0fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d102:	00db      	lsls	r3, r3, #3
 800d104:	3304      	adds	r3, #4
 800d106:	68fa      	ldr	r2, [r7, #12]
 800d108:	4413      	add	r3, r2
 800d10a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800d10e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800d112:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d116:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 800d11a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800d11e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d122:	4413      	add	r3, r2
 800d124:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 800d128:	897b      	ldrh	r3, [r7, #10]
 800d12a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800d12e:	429a      	cmp	r2, r3
 800d130:	f4ff ad0a 	bcc.w	800cb48 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 800d134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d138:	2b07      	cmp	r3, #7
 800d13a:	f240 84e3 	bls.w	800db04 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 800d144:	2301      	movs	r3, #1
 800d146:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800d14a:	893b      	ldrh	r3, [r7, #8]
 800d14c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800d150:	4413      	add	r3, r2
 800d152:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 800d154:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d156:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800d15a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800d15e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d160:	4413      	add	r3, r2
 800d162:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 800d164:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d166:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d168:	4413      	add	r3, r2
 800d16a:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800d16c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d16e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d170:	4413      	add	r3, r2
 800d172:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800d174:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d176:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d178:	4413      	add	r3, r2
 800d17a:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800d17c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d17e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d180:	4413      	add	r3, r2
 800d182:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800d184:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d186:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d188:	4413      	add	r3, r2
 800d18a:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 800d18c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d190:	00db      	lsls	r3, r3, #3
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	4413      	add	r3, r2
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800d19a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d19c:	00db      	lsls	r3, r3, #3
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800d1a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1a8:	00db      	lsls	r3, r3, #3
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800d1b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1b4:	00db      	lsls	r3, r3, #3
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800d1be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1c0:	00db      	lsls	r3, r3, #3
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 800d1ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1cc:	00db      	lsls	r3, r3, #3
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800d1d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1d8:	00db      	lsls	r3, r3, #3
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	4413      	add	r3, r2
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800d1e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d1e6:	00db      	lsls	r3, r3, #3
 800d1e8:	3304      	adds	r3, #4
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800d1f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1f4:	00db      	lsls	r3, r3, #3
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800d200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d202:	00db      	lsls	r3, r3, #3
 800d204:	3304      	adds	r3, #4
 800d206:	687a      	ldr	r2, [r7, #4]
 800d208:	4413      	add	r3, r2
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800d20e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d210:	00db      	lsls	r3, r3, #3
 800d212:	3304      	adds	r3, #4
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	4413      	add	r3, r2
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800d21c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d21e:	00db      	lsls	r3, r3, #3
 800d220:	3304      	adds	r3, #4
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	4413      	add	r3, r2
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800d22a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d22c:	00db      	lsls	r3, r3, #3
 800d22e:	3304      	adds	r3, #4
 800d230:	687a      	ldr	r2, [r7, #4]
 800d232:	4413      	add	r3, r2
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 800d238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d23a:	00db      	lsls	r3, r3, #3
 800d23c:	3304      	adds	r3, #4
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	4413      	add	r3, r2
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 800d246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d24a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800d24e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800d252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d256:	4413      	add	r3, r2
 800d258:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800d25c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800d260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d264:	4413      	add	r3, r2
 800d266:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800d26a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d26e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d272:	4413      	add	r3, r2
 800d274:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 800d278:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800d27c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d280:	4413      	add	r3, r2
 800d282:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800d286:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d28a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d28e:	4413      	add	r3, r2
 800d290:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800d294:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d29c:	4413      	add	r3, r2
 800d29e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800d2a2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d2a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2aa:	4413      	add	r3, r2
 800d2ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800d2b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d2b4:	00db      	lsls	r3, r3, #3
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	ed93 7a00 	vldr	s14, [r3]
 800d2be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d2c2:	00db      	lsls	r3, r3, #3
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	edd3 7a00 	vldr	s15, [r3]
 800d2cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2d0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800d2d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d2d8:	00db      	lsls	r3, r3, #3
 800d2da:	68fa      	ldr	r2, [r7, #12]
 800d2dc:	4413      	add	r3, r2
 800d2de:	ed93 7a00 	vldr	s14, [r3]
 800d2e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d2e6:	00db      	lsls	r3, r3, #3
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	edd3 7a00 	vldr	s15, [r3]
 800d2f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2f4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800d2f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d2fc:	00db      	lsls	r3, r3, #3
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	4413      	add	r3, r2
 800d302:	ed93 7a00 	vldr	s14, [r3]
 800d306:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d30a:	00db      	lsls	r3, r3, #3
 800d30c:	68fa      	ldr	r2, [r7, #12]
 800d30e:	4413      	add	r3, r2
 800d310:	edd3 7a00 	vldr	s15, [r3]
 800d314:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d318:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800d31c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d320:	00db      	lsls	r3, r3, #3
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	4413      	add	r3, r2
 800d326:	ed93 7a00 	vldr	s14, [r3]
 800d32a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d32e:	00db      	lsls	r3, r3, #3
 800d330:	68fa      	ldr	r2, [r7, #12]
 800d332:	4413      	add	r3, r2
 800d334:	edd3 7a00 	vldr	s15, [r3]
 800d338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d33c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800d340:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d344:	00db      	lsls	r3, r3, #3
 800d346:	68fa      	ldr	r2, [r7, #12]
 800d348:	4413      	add	r3, r2
 800d34a:	ed93 7a00 	vldr	s14, [r3]
 800d34e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d352:	00db      	lsls	r3, r3, #3
 800d354:	68fa      	ldr	r2, [r7, #12]
 800d356:	4413      	add	r3, r2
 800d358:	edd3 7a00 	vldr	s15, [r3]
 800d35c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d360:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800d364:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d368:	00db      	lsls	r3, r3, #3
 800d36a:	68fa      	ldr	r2, [r7, #12]
 800d36c:	4413      	add	r3, r2
 800d36e:	ed93 7a00 	vldr	s14, [r3]
 800d372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d376:	00db      	lsls	r3, r3, #3
 800d378:	68fa      	ldr	r2, [r7, #12]
 800d37a:	4413      	add	r3, r2
 800d37c:	edd3 7a00 	vldr	s15, [r3]
 800d380:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d384:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800d388:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d38c:	00db      	lsls	r3, r3, #3
 800d38e:	68fa      	ldr	r2, [r7, #12]
 800d390:	4413      	add	r3, r2
 800d392:	ed93 7a00 	vldr	s14, [r3]
 800d396:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d39a:	00db      	lsls	r3, r3, #3
 800d39c:	68fa      	ldr	r2, [r7, #12]
 800d39e:	4413      	add	r3, r2
 800d3a0:	edd3 7a00 	vldr	s15, [r3]
 800d3a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3a8:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800d3ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d3b0:	00db      	lsls	r3, r3, #3
 800d3b2:	68fa      	ldr	r2, [r7, #12]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	ed93 7a00 	vldr	s14, [r3]
 800d3ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d3be:	00db      	lsls	r3, r3, #3
 800d3c0:	68fa      	ldr	r2, [r7, #12]
 800d3c2:	4413      	add	r3, r2
 800d3c4:	edd3 7a00 	vldr	s15, [r3]
 800d3c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3cc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800d3d0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800d3d4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800d3d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3dc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800d3e0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800d3e4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800d3e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3ec:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800d3f0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800d3f4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800d3f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3fc:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 800d400:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800d404:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800d408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d40c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 800d410:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d414:	00db      	lsls	r3, r3, #3
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	4413      	add	r3, r2
 800d41a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800d41e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800d422:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d426:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800d42a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800d42e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800d432:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d436:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800d43a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d43e:	00db      	lsls	r3, r3, #3
 800d440:	3304      	adds	r3, #4
 800d442:	68fa      	ldr	r2, [r7, #12]
 800d444:	4413      	add	r3, r2
 800d446:	ed93 7a00 	vldr	s14, [r3]
 800d44a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d44e:	00db      	lsls	r3, r3, #3
 800d450:	3304      	adds	r3, #4
 800d452:	68fa      	ldr	r2, [r7, #12]
 800d454:	4413      	add	r3, r2
 800d456:	edd3 7a00 	vldr	s15, [r3]
 800d45a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d45e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800d462:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d466:	00db      	lsls	r3, r3, #3
 800d468:	3304      	adds	r3, #4
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	4413      	add	r3, r2
 800d46e:	ed93 7a00 	vldr	s14, [r3]
 800d472:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d476:	00db      	lsls	r3, r3, #3
 800d478:	3304      	adds	r3, #4
 800d47a:	68fa      	ldr	r2, [r7, #12]
 800d47c:	4413      	add	r3, r2
 800d47e:	edd3 7a00 	vldr	s15, [r3]
 800d482:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d486:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800d48a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d48e:	00db      	lsls	r3, r3, #3
 800d490:	3304      	adds	r3, #4
 800d492:	68fa      	ldr	r2, [r7, #12]
 800d494:	4413      	add	r3, r2
 800d496:	ed93 7a00 	vldr	s14, [r3]
 800d49a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d49e:	00db      	lsls	r3, r3, #3
 800d4a0:	3304      	adds	r3, #4
 800d4a2:	68fa      	ldr	r2, [r7, #12]
 800d4a4:	4413      	add	r3, r2
 800d4a6:	edd3 7a00 	vldr	s15, [r3]
 800d4aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800d4b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d4b6:	00db      	lsls	r3, r3, #3
 800d4b8:	3304      	adds	r3, #4
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	4413      	add	r3, r2
 800d4be:	ed93 7a00 	vldr	s14, [r3]
 800d4c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d4c6:	00db      	lsls	r3, r3, #3
 800d4c8:	3304      	adds	r3, #4
 800d4ca:	68fa      	ldr	r2, [r7, #12]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	edd3 7a00 	vldr	s15, [r3]
 800d4d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4d6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800d4da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d4de:	00db      	lsls	r3, r3, #3
 800d4e0:	3304      	adds	r3, #4
 800d4e2:	68fa      	ldr	r2, [r7, #12]
 800d4e4:	4413      	add	r3, r2
 800d4e6:	ed93 7a00 	vldr	s14, [r3]
 800d4ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d4ee:	00db      	lsls	r3, r3, #3
 800d4f0:	3304      	adds	r3, #4
 800d4f2:	68fa      	ldr	r2, [r7, #12]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	edd3 7a00 	vldr	s15, [r3]
 800d4fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4fe:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800d502:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d506:	00db      	lsls	r3, r3, #3
 800d508:	3304      	adds	r3, #4
 800d50a:	68fa      	ldr	r2, [r7, #12]
 800d50c:	4413      	add	r3, r2
 800d50e:	ed93 7a00 	vldr	s14, [r3]
 800d512:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	3304      	adds	r3, #4
 800d51a:	68fa      	ldr	r2, [r7, #12]
 800d51c:	4413      	add	r3, r2
 800d51e:	edd3 7a00 	vldr	s15, [r3]
 800d522:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d526:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800d52a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d52e:	00db      	lsls	r3, r3, #3
 800d530:	3304      	adds	r3, #4
 800d532:	68fa      	ldr	r2, [r7, #12]
 800d534:	4413      	add	r3, r2
 800d536:	ed93 7a00 	vldr	s14, [r3]
 800d53a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d53e:	00db      	lsls	r3, r3, #3
 800d540:	3304      	adds	r3, #4
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	4413      	add	r3, r2
 800d546:	edd3 7a00 	vldr	s15, [r3]
 800d54a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d54e:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800d552:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d556:	00db      	lsls	r3, r3, #3
 800d558:	3304      	adds	r3, #4
 800d55a:	68fa      	ldr	r2, [r7, #12]
 800d55c:	4413      	add	r3, r2
 800d55e:	ed93 7a00 	vldr	s14, [r3]
 800d562:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d566:	00db      	lsls	r3, r3, #3
 800d568:	3304      	adds	r3, #4
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	4413      	add	r3, r2
 800d56e:	edd3 7a00 	vldr	s15, [r3]
 800d572:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d576:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800d57a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d57e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800d582:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d586:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800d58a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d58e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800d592:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d596:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800d59a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d59e:	edd7 7a08 	vldr	s15, [r7, #32]
 800d5a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5a6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800d5aa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d5ae:	edd7 7a08 	vldr	s15, [r7, #32]
 800d5b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5b6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800d5ba:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800d5be:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800d5c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5c6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800d5ca:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800d5ce:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800d5d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5d6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800d5da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d5de:	00db      	lsls	r3, r3, #3
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	4413      	add	r3, r2
 800d5e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d5ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5f2:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800d5f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d5fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d602:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800d606:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800d60a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800d60e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d612:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800d616:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800d61a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800d61e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d622:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800d626:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d62a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800d62e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d632:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800d636:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d63a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d63e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d642:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800d646:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d64a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d64e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d652:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800d656:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d65a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800d65e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d662:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800d666:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d66a:	00db      	lsls	r3, r3, #3
 800d66c:	68fa      	ldr	r2, [r7, #12]
 800d66e:	4413      	add	r3, r2
 800d670:	ed97 7a07 	vldr	s14, [r7, #28]
 800d674:	edd7 7a06 	vldr	s15, [r7, #24]
 800d678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d67c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800d680:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d684:	00db      	lsls	r3, r3, #3
 800d686:	3304      	adds	r3, #4
 800d688:	68fa      	ldr	r2, [r7, #12]
 800d68a:	4413      	add	r3, r2
 800d68c:	ed97 7a05 	vldr	s14, [r7, #20]
 800d690:	edd7 7a04 	vldr	s15, [r7, #16]
 800d694:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d698:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800d69c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d6a0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800d6a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6a8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800d6ac:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800d6b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6b8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800d6bc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d6c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6c8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800d6cc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800d6d0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800d6d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6d8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800d6dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d6e0:	00db      	lsls	r3, r3, #3
 800d6e2:	68fa      	ldr	r2, [r7, #12]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	ed97 7a07 	vldr	s14, [r7, #28]
 800d6ea:	edd7 7a06 	vldr	s15, [r7, #24]
 800d6ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6f2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800d6f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d6fa:	00db      	lsls	r3, r3, #3
 800d6fc:	3304      	adds	r3, #4
 800d6fe:	68fa      	ldr	r2, [r7, #12]
 800d700:	4413      	add	r3, r2
 800d702:	ed97 7a05 	vldr	s14, [r7, #20]
 800d706:	edd7 7a04 	vldr	s15, [r7, #16]
 800d70a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d70e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800d712:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800d716:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800d71a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d71e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800d722:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800d726:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800d72a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d72e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800d732:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800d736:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800d73a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d73e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800d742:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800d746:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800d74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d74e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800d752:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d756:	00db      	lsls	r3, r3, #3
 800d758:	68fa      	ldr	r2, [r7, #12]
 800d75a:	4413      	add	r3, r2
 800d75c:	ed97 7a07 	vldr	s14, [r7, #28]
 800d760:	edd7 7a06 	vldr	s15, [r7, #24]
 800d764:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d768:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800d76c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d770:	00db      	lsls	r3, r3, #3
 800d772:	3304      	adds	r3, #4
 800d774:	68fa      	ldr	r2, [r7, #12]
 800d776:	4413      	add	r3, r2
 800d778:	ed97 7a05 	vldr	s14, [r7, #20]
 800d77c:	edd7 7a04 	vldr	s15, [r7, #16]
 800d780:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d784:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800d788:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800d78c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800d790:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d794:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800d798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d79c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800d7a0:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800d7a4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800d7a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7ac:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800d7b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7b4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800d7b8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800d7bc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800d7c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7c4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800d7c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7cc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800d7d0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800d7d4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800d7d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7dc:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800d7e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7e4:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800d7e8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800d7ec:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800d7f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7f4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800d7f8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800d7fc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800d800:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d804:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800d808:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800d80c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800d810:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d814:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800d818:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800d81c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800d820:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d824:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800d828:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800d82c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d830:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d834:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800d838:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800d83c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d840:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d844:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800d848:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800d84c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800d850:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d854:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800d858:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800d85c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800d860:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d864:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800d868:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800d86c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800d870:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d874:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800d878:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800d87c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800d880:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d884:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 800d888:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800d88c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800d890:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d894:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800d898:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800d89c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800d8a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8a4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800d8a8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800d8ac:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800d8b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800d8b8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800d8bc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800d8c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8c4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800d8c8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800d8cc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800d8d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8d4:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800d8d8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800d8dc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800d8e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8e4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800d8e8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800d8ec:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800d8f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8f4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800d8f8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800d8fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d900:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d904:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800d908:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800d90c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d910:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d914:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800d918:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800d91c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800d920:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d924:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800d928:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d92c:	00db      	lsls	r3, r3, #3
 800d92e:	68fa      	ldr	r2, [r7, #12]
 800d930:	4413      	add	r3, r2
 800d932:	ed97 7a07 	vldr	s14, [r7, #28]
 800d936:	edd7 7a06 	vldr	s15, [r7, #24]
 800d93a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d93e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800d942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d946:	00db      	lsls	r3, r3, #3
 800d948:	3304      	adds	r3, #4
 800d94a:	68fa      	ldr	r2, [r7, #12]
 800d94c:	4413      	add	r3, r2
 800d94e:	ed97 7a05 	vldr	s14, [r7, #20]
 800d952:	edd7 7a04 	vldr	s15, [r7, #16]
 800d956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d95a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800d95e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800d962:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800d966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d96a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800d96e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d972:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800d976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d97a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800d97e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800d982:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800d986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d98a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800d98e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d992:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800d996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d99a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800d99e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d9a2:	00db      	lsls	r3, r3, #3
 800d9a4:	68fa      	ldr	r2, [r7, #12]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	ed97 7a07 	vldr	s14, [r7, #28]
 800d9ac:	edd7 7a06 	vldr	s15, [r7, #24]
 800d9b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9b4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800d9b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d9bc:	00db      	lsls	r3, r3, #3
 800d9be:	3304      	adds	r3, #4
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	4413      	add	r3, r2
 800d9c4:	ed97 7a05 	vldr	s14, [r7, #20]
 800d9c8:	edd7 7a04 	vldr	s15, [r7, #16]
 800d9cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9d0:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800d9d4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800d9d8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800d9dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9e0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800d9e4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d9e8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800d9ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9f0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800d9f4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800d9f8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800d9fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da00:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800da04:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800da08:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800da0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da10:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800da14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800da18:	00db      	lsls	r3, r3, #3
 800da1a:	68fa      	ldr	r2, [r7, #12]
 800da1c:	4413      	add	r3, r2
 800da1e:	ed97 7a07 	vldr	s14, [r7, #28]
 800da22:	edd7 7a06 	vldr	s15, [r7, #24]
 800da26:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da2a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800da2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800da32:	00db      	lsls	r3, r3, #3
 800da34:	3304      	adds	r3, #4
 800da36:	68fa      	ldr	r2, [r7, #12]
 800da38:	4413      	add	r3, r2
 800da3a:	ed97 7a05 	vldr	s14, [r7, #20]
 800da3e:	edd7 7a04 	vldr	s15, [r7, #16]
 800da42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da46:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800da4a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800da4e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800da52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da56:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800da5a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800da5e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800da62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da66:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800da6a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800da6e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800da72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da76:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800da7a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800da7e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800da82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da86:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800da8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800da8e:	00db      	lsls	r3, r3, #3
 800da90:	68fa      	ldr	r2, [r7, #12]
 800da92:	4413      	add	r3, r2
 800da94:	ed97 7a07 	vldr	s14, [r7, #28]
 800da98:	edd7 7a06 	vldr	s15, [r7, #24]
 800da9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800daa0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800daa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800daa8:	00db      	lsls	r3, r3, #3
 800daaa:	3304      	adds	r3, #4
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	4413      	add	r3, r2
 800dab0:	ed97 7a05 	vldr	s14, [r7, #20]
 800dab4:	edd7 7a04 	vldr	s15, [r7, #16]
 800dab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dabc:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 800dac0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800dac4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dac8:	4413      	add	r3, r2
 800daca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 800dace:	897b      	ldrh	r3, [r7, #10]
 800dad0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800dad4:	429a      	cmp	r2, r3
 800dad6:	f4ff abba 	bcc.w	800d24e <arm_radix8_butterfly_f32+0x746>

         j++;
 800dada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dade:	3301      	adds	r3, #1
 800dae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 800dae4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800dae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800daec:	429a      	cmp	r2, r3
 800daee:	f4ff ab2c 	bcc.w	800d14a <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800daf2:	893b      	ldrh	r3, [r7, #8]
 800daf4:	00db      	lsls	r3, r3, #3
 800daf6:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 800daf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dafc:	2b07      	cmp	r3, #7
 800dafe:	f63f a813 	bhi.w	800cb28 <arm_radix8_butterfly_f32+0x20>
}
 800db02:	e000      	b.n	800db06 <arm_radix8_butterfly_f32+0xffe>
         break;
 800db04:	bf00      	nop
}
 800db06:	bf00      	nop
 800db08:	37f4      	adds	r7, #244	; 0xf4
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr
 800db12:	bf00      	nop

0800db14 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800db14:	b480      	push	{r7}
 800db16:	b095      	sub	sp, #84	; 0x54
 800db18:	af00      	add	r7, sp, #0
 800db1a:	60f8      	str	r0, [r7, #12]
 800db1c:	60b9      	str	r1, [r7, #8]
 800db1e:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	3b01      	subs	r3, #1
 800db34:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800db36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800db3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800db42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 800db48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800db4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db50:	1d1a      	adds	r2, r3, #4
 800db52:	64ba      	str	r2, [r7, #72]	; 0x48
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 800db58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db5a:	1d1a      	adds	r2, r3, #4
 800db5c:	64ba      	str	r2, [r7, #72]	; 0x48
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800db62:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800db66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800db6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db6e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800db72:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800db76:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800db7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db7e:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800db82:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800db86:	edd7 7a08 	vldr	s15, [r7, #32]
 800db8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	1d1a      	adds	r2, r3, #4
 800db92:	607a      	str	r2, [r7, #4]
 800db94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800db98:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db9c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 800dba0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800dba4:	edd7 7a08 	vldr	s15, [r7, #32]
 800dba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	1d1a      	adds	r2, r3, #4
 800dbb0:	607a      	str	r2, [r7, #4]
 800dbb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dbb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbba:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800dbbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbc0:	00db      	lsls	r3, r3, #3
 800dbc2:	68ba      	ldr	r2, [r7, #8]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 800dbc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbca:	3308      	adds	r3, #8
 800dbcc:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800dbce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 800dbd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 800dbda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 800dbe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 800dbe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbe8:	1d1a      	adds	r2, r3, #4
 800dbea:	64ba      	str	r2, [r7, #72]	; 0x48
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800dbf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbf2:	1d1a      	adds	r2, r3, #4
 800dbf4:	64ba      	str	r2, [r7, #72]	; 0x48
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 800dbfa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800dbfe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800dc02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc06:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 800dc0a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800dc0e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dc12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc16:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800dc1a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800dc1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800dc22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc26:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800dc2a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dc2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800dc32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc36:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800dc3a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800dc3e:	edd7 7a08 	vldr	s15, [r7, #32]
 800dc42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc46:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800dc4a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dc4e:	edd7 7a08 	vldr	s15, [r7, #32]
 800dc52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc56:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800dc5a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dc5e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800dc62:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc66:	edd7 7a07 	vldr	s15, [r7, #28]
 800dc6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc6e:	edd7 7a04 	vldr	s15, [r7, #16]
 800dc72:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	1d1a      	adds	r2, r3, #4
 800dc7a:	607a      	str	r2, [r7, #4]
 800dc7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dc80:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc84:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800dc88:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800dc8c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800dc90:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dc94:	edd7 7a06 	vldr	s15, [r7, #24]
 800dc98:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc9c:	edd7 7a05 	vldr	s15, [r7, #20]
 800dca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	1d1a      	adds	r2, r3, #4
 800dca8:	607a      	str	r2, [r7, #4]
 800dcaa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dcae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dcb2:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800dcb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcb8:	3308      	adds	r3, #8
 800dcba:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800dcbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcbe:	3b08      	subs	r3, #8
 800dcc0:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800dcc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcc4:	3b01      	subs	r3, #1
 800dcc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 800dcc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	f73f af7f 	bgt.w	800dbce <stage_rfft_f32+0xba>
}
 800dcd0:	bf00      	nop
 800dcd2:	bf00      	nop
 800dcd4:	3754      	adds	r7, #84	; 0x54
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr

0800dcde <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800dcde:	b480      	push	{r7}
 800dce0:	b095      	sub	sp, #84	; 0x54
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	60f8      	str	r0, [r7, #12]
 800dce6:	60b9      	str	r1, [r7, #8]
 800dce8:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	695b      	ldr	r3, [r3, #20]
 800dcee:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	881b      	ldrh	r3, [r3, #0]
 800dcfc:	3b01      	subs	r3, #1
 800dcfe:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800dd00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 800dd06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 800dd0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd0e:	3308      	adds	r3, #8
 800dd10:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800dd12:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800dd16:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800dd1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	1d1a      	adds	r2, r3, #4
 800dd22:	607a      	str	r2, [r7, #4]
 800dd24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dd28:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd2c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800dd30:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800dd34:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800dd38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	1d1a      	adds	r2, r3, #4
 800dd40:	607a      	str	r2, [r7, #4]
 800dd42:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dd46:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd4a:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800dd4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd50:	00db      	lsls	r3, r3, #3
 800dd52:	68ba      	ldr	r2, [r7, #8]
 800dd54:	4413      	add	r3, r2
 800dd56:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 800dd58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd5a:	3308      	adds	r3, #8
 800dd5c:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 800dd5e:	e07c      	b.n	800de5a <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800dd60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 800dd66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800dd6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800dd72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 800dd78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd7a:	1d1a      	adds	r2, r3, #4
 800dd7c:	64ba      	str	r2, [r7, #72]	; 0x48
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800dd82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd84:	1d1a      	adds	r2, r3, #4
 800dd86:	64ba      	str	r2, [r7, #72]	; 0x48
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800dd8c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800dd90:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dd94:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd98:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800dd9c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800dda0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800dda4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dda8:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800ddac:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800ddb0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ddb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddb8:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800ddbc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ddc0:	edd7 7a08 	vldr	s15, [r7, #32]
 800ddc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddc8:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800ddcc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ddd0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ddd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddd8:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 800dddc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800dde0:	edd7 7a08 	vldr	s15, [r7, #32]
 800dde4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dde8:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800ddec:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800ddf0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ddf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ddf8:	edd7 7a07 	vldr	s15, [r7, #28]
 800ddfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800de00:	edd7 7a06 	vldr	s15, [r7, #24]
 800de04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	1d1a      	adds	r2, r3, #4
 800de0c:	607a      	str	r2, [r7, #4]
 800de0e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800de12:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de16:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800de1a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800de1e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800de22:	ee37 7a67 	vsub.f32	s14, s14, s15
 800de26:	edd7 7a05 	vldr	s15, [r7, #20]
 800de2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800de2e:	edd7 7a04 	vldr	s15, [r7, #16]
 800de32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	1d1a      	adds	r2, r3, #4
 800de3a:	607a      	str	r2, [r7, #4]
 800de3c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800de40:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de44:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800de48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de4a:	3308      	adds	r3, #8
 800de4c:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800de4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de50:	3b08      	subs	r3, #8
 800de52:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800de54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de56:	3b01      	subs	r3, #1
 800de58:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 800de5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f73f af7f 	bgt.w	800dd60 <merge_rfft_f32+0x82>
   }

}
 800de62:	bf00      	nop
 800de64:	bf00      	nop
 800de66:	3754      	adds	r7, #84	; 0x54
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b086      	sub	sp, #24
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	60b9      	str	r1, [r7, #8]
 800de7a:	607a      	str	r2, [r7, #4]
 800de7c:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800de82:	78fb      	ldrb	r3, [r7, #3]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d00b      	beq.n	800dea0 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	68b9      	ldr	r1, [r7, #8]
 800de8c:	68f8      	ldr	r0, [r7, #12]
 800de8e:	f7ff ff26 	bl	800dcde <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800de92:	78fa      	ldrb	r2, [r7, #3]
 800de94:	2301      	movs	r3, #1
 800de96:	6879      	ldr	r1, [r7, #4]
 800de98:	6978      	ldr	r0, [r7, #20]
 800de9a:	f7fe fd7b 	bl	800c994 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800de9e:	e00a      	b.n	800deb6 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800dea0:	78fa      	ldrb	r2, [r7, #3]
 800dea2:	2301      	movs	r3, #1
 800dea4:	68b9      	ldr	r1, [r7, #8]
 800dea6:	6978      	ldr	r0, [r7, #20]
 800dea8:	f7fe fd74 	bl	800c994 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 800deac:	687a      	ldr	r2, [r7, #4]
 800deae:	68b9      	ldr	r1, [r7, #8]
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f7ff fe2f 	bl	800db14 <stage_rfft_f32>
}
 800deb6:	bf00      	nop
 800deb8:	3718      	adds	r7, #24
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}

0800debe <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
 800debe:	b580      	push	{r7, lr}
 800dec0:	b08e      	sub	sp, #56	; 0x38
 800dec2:	af08      	add	r7, sp, #32
 800dec4:	60f8      	str	r0, [r7, #12]
 800dec6:	60b9      	str	r1, [r7, #8]
 800dec8:	607a      	str	r2, [r7, #4]
 800deca:	603b      	str	r3, [r7, #0]
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
 800decc:	2300      	movs	r3, #0
 800dece:	75fb      	strb	r3, [r7, #23]
    if (output_dims->w % 4 != 0)
 800ded0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ded2:	689b      	ldr	r3, [r3, #8]
 800ded4:	f003 0303 	and.w	r3, r3, #3
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d002      	beq.n	800dee2 <arm_convolve_1_x_n_s8+0x24>
    {
        status = ARM_MATH_SIZE_MISMATCH;
 800dedc:	23fd      	movs	r3, #253	; 0xfd
 800dede:	75fb      	strb	r3, [r7, #23]
        goto out;
 800dee0:	e015      	b.n	800df0e <arm_convolve_1_x_n_s8+0x50>
        }
        output_data += (3 * output_ch);
    }

#else
    status = arm_convolve_s8(ctx,
 800dee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee4:	9306      	str	r3, [sp, #24]
 800dee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dee8:	9305      	str	r3, [sp, #20]
 800deea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deec:	9304      	str	r3, [sp, #16]
 800deee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def0:	9303      	str	r3, [sp, #12]
 800def2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def4:	9302      	str	r3, [sp, #8]
 800def6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def8:	9301      	str	r3, [sp, #4]
 800defa:	6a3b      	ldr	r3, [r7, #32]
 800defc:	9300      	str	r3, [sp, #0]
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	68b9      	ldr	r1, [r7, #8]
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	f000 f87d 	bl	800e004 <arm_convolve_s8>
 800df0a:	4603      	mov	r3, r0
 800df0c:	75fb      	strb	r3, [r7, #23]
                             output_data);
#endif

out:
    /* Return to application */
    return status;
 800df0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df12:	4618      	mov	r0, r3
 800df14:	3718      	adds	r7, #24
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 800df1a:	b480      	push	{r7}
 800df1c:	b083      	sub	sp, #12
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
 800df22:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	683a      	ldr	r2, [r7, #0]
 800df2a:	6892      	ldr	r2, [r2, #8]
 800df2c:	fb02 f303 	mul.w	r3, r2, r3
 800df30:	683a      	ldr	r2, [r7, #0]
 800df32:	6852      	ldr	r2, [r2, #4]
 800df34:	fb02 f303 	mul.w	r3, r2, r3
 800df38:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	370c      	adds	r7, #12
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr

0800df46 <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
 800df46:	b5b0      	push	{r4, r5, r7, lr}
 800df48:	b092      	sub	sp, #72	; 0x48
 800df4a:	af0a      	add	r7, sp, #40	; 0x28
 800df4c:	60f8      	str	r0, [r7, #12]
 800df4e:	60b9      	str	r1, [r7, #8]
 800df50:	607a      	str	r2, [r7, #4]
 800df52:	603b      	str	r3, [r7, #0]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	68db      	ldr	r3, [r3, #12]
 800df58:	f003 0303 	and.w	r3, r3, #3
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d10f      	bne.n	800df80 <arm_convolve_1x1_s8_fast+0x3a>
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	691b      	ldr	r3, [r3, #16]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d10b      	bne.n	800df80 <arm_convolve_1x1_s8_fast+0x3a>
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	695b      	ldr	r3, [r3, #20]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d107      	bne.n	800df80 <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	689b      	ldr	r3, [r3, #8]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 800df74:	2b01      	cmp	r3, #1
 800df76:	d103      	bne.n	800df80 <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d002      	beq.n	800df86 <arm_convolve_1x1_s8_fast+0x40>
    {
        return ARM_MATH_SIZE_MISMATCH;
 800df80:	f06f 0302 	mvn.w	r3, #2
 800df84:	e02f      	b.n	800dfe6 <arm_convolve_1x1_s8_fast+0xa0>
    }

#else
    /* Run the following code as reference implementation for Cortex-M processors with or without DSP extension */

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	689b      	ldr	r3, [r3, #8]
 800df8a:	683a      	ldr	r2, [r7, #0]
 800df8c:	6852      	ldr	r2, [r2, #4]
 800df8e:	fb02 f303 	mul.w	r3, r2, r3
 800df92:	683a      	ldr	r2, [r7, #0]
 800df94:	6812      	ldr	r2, [r2, #0]
 800df96:	fb02 f303 	mul.w	r3, r2, r3
 800df9a:	61fb      	str	r3, [r7, #28]
    const int32_t rhs_rows = output_dims->c;
 800df9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	61bb      	str	r3, [r7, #24]
    const int32_t rhs_cols = input_dims->c;
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	617b      	str	r3, [r7, #20]

    arm_nn_mat_mult_nt_t_s8(input_data,
                            filter_data,
                            bias_data,
                            output_data,
                            quant_params->multiplier,
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
                            quant_params->shift,
 800dfac:	687a      	ldr	r2, [r7, #4]
 800dfae:	6852      	ldr	r2, [r2, #4]
    arm_nn_mat_mult_nt_t_s8(input_data,
 800dfb0:	68b9      	ldr	r1, [r7, #8]
 800dfb2:	6809      	ldr	r1, [r1, #0]
 800dfb4:	68b8      	ldr	r0, [r7, #8]
 800dfb6:	6840      	ldr	r0, [r0, #4]
 800dfb8:	68bc      	ldr	r4, [r7, #8]
 800dfba:	6a24      	ldr	r4, [r4, #32]
 800dfbc:	68bd      	ldr	r5, [r7, #8]
 800dfbe:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 800dfc0:	9508      	str	r5, [sp, #32]
 800dfc2:	9407      	str	r4, [sp, #28]
 800dfc4:	9006      	str	r0, [sp, #24]
 800dfc6:	9105      	str	r1, [sp, #20]
 800dfc8:	6979      	ldr	r1, [r7, #20]
 800dfca:	9104      	str	r1, [sp, #16]
 800dfcc:	69b9      	ldr	r1, [r7, #24]
 800dfce:	9103      	str	r1, [sp, #12]
 800dfd0:	69f9      	ldr	r1, [r7, #28]
 800dfd2:	9102      	str	r1, [sp, #8]
 800dfd4:	9201      	str	r2, [sp, #4]
 800dfd6:	9300      	str	r3, [sp, #0]
 800dfd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dfdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dfde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfe0:	f002 fcaa 	bl	8010938 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
 800dfe4:	2300      	movs	r3, #0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3720      	adds	r7, #32
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bdb0      	pop	{r4, r5, r7, pc}

0800dfee <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
 800dfee:	b480      	push	{r7}
 800dff0:	b083      	sub	sp, #12
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
    (void)input_dims;
    return 0;
 800dff6:	2300      	movs	r3, #0
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	370c      	adds	r7, #12
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
 800e004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e008:	b0dd      	sub	sp, #372	; 0x174
 800e00a:	af08      	add	r7, sp, #32
 800e00c:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 800e010:	f5a6 769e 	sub.w	r6, r6, #316	; 0x13c
 800e014:	6030      	str	r0, [r6, #0]
 800e016:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 800e01a:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 800e01e:	6001      	str	r1, [r0, #0]
 800e020:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800e024:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 800e028:	600a      	str	r2, [r1, #0]
 800e02a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800e02e:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800e032:	6013      	str	r3, [r2, #0]
    (void)bias_dims;
    q15_t *buffer_a = (q15_t *)ctx->buf;
 800e034:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e038:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

    const uint16_t input_batches = input_dims->n;
 800e044:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e048:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
    const uint16_t input_x = input_dims->w;
 800e054:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e058:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
    const uint16_t input_y = input_dims->h;
 800e064:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e068:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
    const uint16_t input_ch = input_dims->c;
 800e074:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e078:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
    const uint16_t kernel_x = filter_dims->w;
 800e084:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800e088:	689b      	ldr	r3, [r3, #8]
 800e08a:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
    const uint16_t kernel_y = filter_dims->h;
 800e08e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
    const uint16_t output_x = output_dims->w;
 800e098:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800e09c:	689b      	ldr	r3, [r3, #8]
 800e09e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
    const uint16_t output_y = output_dims->h;
 800e0a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800e0a6:	685b      	ldr	r3, [r3, #4]
 800e0a8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
    const uint16_t output_ch = output_dims->c;
 800e0ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

    const uint16_t pad_x = conv_params->padding.w;
 800e0b6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e0ba:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	691b      	ldr	r3, [r3, #16]
 800e0c2:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
    const uint16_t pad_y = conv_params->padding.h;
 800e0c6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e0ca:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	695b      	ldr	r3, [r3, #20]
 800e0d2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    const uint16_t stride_x = conv_params->stride.w;
 800e0d6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e0da:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	689b      	ldr	r3, [r3, #8]
 800e0e2:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    const uint16_t stride_y = conv_params->stride.h;
 800e0e6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e0ea:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    const int32_t input_offset = conv_params->input_offset;
 800e0f6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e0fa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    const int32_t out_offset = conv_params->output_offset;
 800e106:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e10a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    const int32_t out_activation_min = conv_params->activation.min;
 800e116:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e11a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	6a1b      	ldr	r3, [r3, #32]
 800e122:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    const int32_t out_activation_max = conv_params->activation.max;
 800e126:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e12a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e132:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    int32_t *output_mult = quant_params->multiplier;
 800e136:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e13a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    int32_t *output_shift = quant_params->shift;
 800e146:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e14a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 800e156:	2300      	movs	r3, #0
 800e158:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800e15c:	e37f      	b.n	800e85e <arm_convolve_s8+0x85a>

#elif defined(ARM_MATH_DSP)
        int32_t i_out_y, i_out_x, i_ker_y, i_ker_x;

        /* Generate two columns from the input tensor a GEMM computation */
        q15_t *two_column_buf = buffer_a;
 800e15e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e162:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        q7_t *out = output_data;
 800e166:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e16a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

        /* This part implements the im2col function */
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 800e16e:	2300      	movs	r3, #0
 800e170:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800e174:	e0da      	b.n	800e32c <arm_convolve_s8+0x328>
        {
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800e176:	2300      	movs	r3, #0
 800e178:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800e17c:	e0ca      	b.n	800e314 <arm_convolve_s8+0x310>
            {
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 800e17e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800e182:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e186:	fb03 f202 	mul.w	r2, r3, r2
 800e18a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800e18e:	1ad3      	subs	r3, r2, r3
 800e190:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800e194:	e065      	b.n	800e262 <arm_convolve_s8+0x25e>
                {
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 800e196:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 800e19a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800e19e:	fb03 f202 	mul.w	r2, r3, r2
 800e1a2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800e1a6:	1ad3      	subs	r3, r2, r3
 800e1a8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800e1ac:	e044      	b.n	800e238 <arm_convolve_s8+0x234>
                         i_ker_x++)
                    {
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 800e1ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	db0f      	blt.n	800e1d6 <arm_convolve_s8+0x1d2>
 800e1b6:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 800e1ba:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	da09      	bge.n	800e1d6 <arm_convolve_s8+0x1d2>
 800e1c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	db05      	blt.n	800e1d6 <arm_convolve_s8+0x1d2>
 800e1ca:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800e1ce:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	db09      	blt.n	800e1ea <arm_convolve_s8+0x1e6>
                        {
                            /* Filling 0 for out-of-bound paddings */
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800e1d6:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800e1da:	005b      	lsls	r3, r3, #1
 800e1dc:	461a      	mov	r2, r3
 800e1de:	2100      	movs	r1, #0
 800e1e0:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800e1e4:	f01e f87c 	bl	802c2e0 <memset>
 800e1e8:	e019      	b.n	800e21e <arm_convolve_s8+0x21a>
                        }
                        else
                        {
                            /* Copying the pixel data to column */
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
 800e1ea:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800e1ee:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800e1f2:	fb03 f202 	mul.w	r2, r3, r2
 800e1f6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800e1fa:	4413      	add	r3, r2
 800e1fc:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 800e200:	fb02 f303 	mul.w	r3, r2, r3
 800e204:	461a      	mov	r2, r3
 800e206:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800e20a:	1898      	adds	r0, r3, r2
 800e20c:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 800e210:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e214:	b21b      	sxth	r3, r3
 800e216:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800e21a:	f009 ffea 	bl	80181f2 <arm_q7_to_q15_with_offset>
                                                      two_column_buf,
                                                      input_ch,
                                                      input_offset);
                        }
                        two_column_buf += input_ch;
 800e21e:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800e222:	005b      	lsls	r3, r3, #1
 800e224:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800e228:	4413      	add	r3, r2
 800e22a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
                         i_ker_x++)
 800e22e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800e232:	3301      	adds	r3, #1
 800e234:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 800e238:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 800e23c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800e240:	fb03 f202 	mul.w	r2, r3, r2
 800e244:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800e248:	1ad2      	subs	r2, r2, r3
 800e24a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800e24e:	4413      	add	r3, r2
 800e250:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800e254:	429a      	cmp	r2, r3
 800e256:	dbaa      	blt.n	800e1ae <arm_convolve_s8+0x1aa>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 800e258:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e25c:	3301      	adds	r3, #1
 800e25e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800e262:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800e266:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e26a:	fb03 f202 	mul.w	r2, r3, r2
 800e26e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800e272:	1ad2      	subs	r2, r2, r3
 800e274:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800e278:	4413      	add	r3, r2
 800e27a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800e27e:	429a      	cmp	r2, r3
 800e280:	db89      	blt.n	800e196 <arm_convolve_s8+0x192>
                    }
                }

                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 800e282:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800e286:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800e28a:	fb02 f303 	mul.w	r3, r2, r3
 800e28e:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 800e292:	fb02 f303 	mul.w	r3, r2, r3
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800e29c:	4413      	add	r3, r2
 800e29e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d131      	bne.n	800e30a <arm_convolve_s8+0x306>
                {
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 800e2a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e2aa:	b21b      	sxth	r3, r3
 800e2ac:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800e2b0:	b212      	sxth	r2, r2
 800e2b2:	f8b7 0118 	ldrh.w	r0, [r7, #280]	; 0x118
 800e2b6:	f8b7 1114 	ldrh.w	r1, [r7, #276]	; 0x114
 800e2ba:	fb10 f101 	smulbb	r1, r0, r1
 800e2be:	b289      	uxth	r1, r1
 800e2c0:	f8b7 0116 	ldrh.w	r0, [r7, #278]	; 0x116
 800e2c4:	fb10 f101 	smulbb	r1, r0, r1
 800e2c8:	b289      	uxth	r1, r1
 800e2ca:	f8b7 610e 	ldrh.w	r6, [r7, #270]	; 0x10e
 800e2ce:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 800e2d2:	9006      	str	r0, [sp, #24]
 800e2d4:	f8d7 0188 	ldr.w	r0, [r7, #392]	; 0x188
 800e2d8:	9005      	str	r0, [sp, #20]
 800e2da:	9104      	str	r1, [sp, #16]
 800e2dc:	9203      	str	r2, [sp, #12]
 800e2de:	9302      	str	r3, [sp, #8]
 800e2e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e2e4:	9301      	str	r3, [sp, #4]
 800e2e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e2ea:	9300      	str	r3, [sp, #0]
 800e2ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e2f0:	4632      	mov	r2, r6
 800e2f2:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800e2f6:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 800e2fa:	f000 fba3 	bl	800ea44 <arm_nn_mat_mult_kernel_s8_s16>
 800e2fe:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
                                                        input_ch * kernel_y * kernel_x,
                                                        bias_data,
                                                        out);

                    /* counter reset */
                    two_column_buf = buffer_a;
 800e302:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e306:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800e30a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e30e:	3301      	adds	r3, #1
 800e310:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800e314:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 800e318:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800e31c:	429a      	cmp	r2, r3
 800e31e:	f6ff af2e 	blt.w	800e17e <arm_convolve_s8+0x17a>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 800e322:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e326:	3301      	adds	r3, #1
 800e328:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800e32c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 800e330:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e334:	429a      	cmp	r2, r3
 800e336:	f6ff af1e 	blt.w	800e176 <arm_convolve_s8+0x172>
                }
            }
        }

        /* left-over because odd number of output pixels */
        if (two_column_buf != buffer_a)
 800e33a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800e33e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e342:	429a      	cmp	r2, r3
 800e344:	f000 8266 	beq.w	800e814 <arm_convolve_s8+0x810>
        {
            const q7_t *ker_a = filter_data;
 800e348:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800e34c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            int i;

            for (i = 0; i < output_ch; i++)
 800e350:	2300      	movs	r3, #0
 800e352:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800e356:	e256      	b.n	800e806 <arm_convolve_s8+0x802>
            {
                /* Load the accumulator with bias first */
                q31_t sum = 0;
 800e358:	2300      	movs	r3, #0
 800e35a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                if (bias_data)
 800e35e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800e362:	2b00      	cmp	r3, #0
 800e364:	d008      	beq.n	800e378 <arm_convolve_s8+0x374>
                {
                    sum = bias_data[i];
 800e366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800e370:	4413      	add	r3, r2
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                }

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;
 800e378:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e37c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800e380:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800e384:	601a      	str	r2, [r3, #0]

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 800e386:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800e38a:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800e38e:	fb02 f303 	mul.w	r3, r2, r3
 800e392:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 800e396:	fb02 f303 	mul.w	r3, r2, r3
 800e39a:	109b      	asrs	r3, r3, #2
 800e39c:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126

                while (col_count)
 800e3a0:	e102      	b.n	800e5a8 <arm_convolve_s8+0x5a4>
 800e3a2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e3a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e3aa:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800e3ae:	601a      	str	r2, [r3, #0]
 800e3b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e3b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e3b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e3bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e3c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 800e3c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e3d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e3da:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e3dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	1d1a      	adds	r2, r3, #4
 800e3e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3e8:	601a      	str	r2, [r3, #0]

    return (val);
 800e3ea:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e3ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e3f2:	681b      	ldr	r3, [r3, #0]
 * @brief read and expand one q7 word into two q15 words
 */

__STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
{
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 800e3f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 800e3f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e3fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e400:	2308      	movs	r3, #8
 800e402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 800e406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e40a:	f003 031f 	and.w	r3, r3, #31
 800e40e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (op2 == 0U)
 800e412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d102      	bne.n	800e420 <arm_convolve_s8+0x41c>
  {
    return op1;
 800e41a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e41e:	e005      	b.n	800e42c <arm_convolve_s8+0x428>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 800e420:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e424:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e428:	fa62 f303 	ror.w	r3, r2, r3
 800e42c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e430:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e434:	fa2f f383 	sxtb16	r3, r3
 800e438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 800e43c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e440:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    q31_t inAbuf2 = __SXTB16(inA);
 800e444:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e448:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e44c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e450:	fa2f f383 	sxtb16	r3, r3
 800e454:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 800e458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e45c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 800e460:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e46c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e474:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e478:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 800e47c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e47e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e480:	461a      	mov	r2, r3
 800e482:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e486:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 800e488:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e48c:	67bb      	str	r3, [r7, #120]	; 0x78
 800e48e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e492:	677b      	str	r3, [r7, #116]	; 0x74
 800e494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e496:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e498:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 800e49c:	673b      	str	r3, [r7, #112]	; 0x70
 800e49e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e4a6:	601a      	str	r2, [r3, #0]
#else
    *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
    *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
#endif

    return source;
 800e4a8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e4ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e4b0:	681b      	ldr	r3, [r3, #0]
                {
                    q31_t ker_a1, ker_a2;
                    q31_t ip_b1, ip_b2;

                    ker_a = read_and_pad(ker_a, &ker_a1, &ker_a2);
 800e4b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800e4b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e4ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    memcpy(&val, *in_q15, 4);
 800e4be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e4cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e4d0:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800e4d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	1d1a      	adds	r2, r3, #4
 800e4da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e4de:	601a      	str	r2, [r3, #0]
    return (val);
 800e4e0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e4e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e4e8:	681b      	ldr	r3, [r3, #0]

                    ip_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 800e4ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                    sum = __SMLAD(ker_a1, ip_b1, sum);
 800e4ee:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e4f2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e4fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e502:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800e506:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e50a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e50e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e512:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e516:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800e51a:	fb23 1302 	smlad	r3, r3, r2, r1
 800e51e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return(result);
 800e522:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e526:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800e52a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e52e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    memcpy(&val, *in_q15, 4);
 800e532:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	461a      	mov	r2, r3
 800e53c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e540:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e544:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800e546:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	1d1a      	adds	r2, r3, #4
 800e54e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e552:	601a      	str	r2, [r3, #0]
    return (val);
 800e554:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e558:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e55c:	681b      	ldr	r3, [r3, #0]
                    ip_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 800e55e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                    sum = __SMLAD(ker_a2, ip_b2, sum);
 800e562:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e566:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	4619      	mov	r1, r3
 800e56e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e572:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e576:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800e57a:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800e57e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e586:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800e58a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800e58e:	fb23 1302 	smlad	r3, r3, r2, r1
 800e592:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 800e596:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e59a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    col_count--;
 800e59e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 800e5a2:	3b01      	subs	r3, #1
 800e5a4:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 800e5a8:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f47f aef8 	bne.w	800e3a2 <arm_convolve_s8+0x39e>
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 800e5b2:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 800e5b6:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800e5ba:	fb12 f303 	smulbb	r3, r2, r3
 800e5be:	b29b      	uxth	r3, r3
 800e5c0:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 800e5c4:	fb12 f303 	smulbb	r3, r2, r3
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	f003 0303 	and.w	r3, r3, #3
 800e5ce:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 800e5d2:	e025      	b.n	800e620 <arm_convolve_s8+0x61c>
                {
                    q7_t ker_a1 = *ker_a++;
 800e5d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e5d8:	1c5a      	adds	r2, r3, #1
 800e5da:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
                    q15_t ip_b1 = *ip_as_col++;
 800e5e4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e5e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	1c99      	adds	r1, r3, #2
 800e5f0:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800e5f4:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800e5f8:	6011      	str	r1, [r2, #0]
 800e5fa:	881b      	ldrh	r3, [r3, #0]
 800e5fc:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
                    sum += ker_a1 * ip_b1;
 800e600:	f997 30eb 	ldrsb.w	r3, [r7, #235]	; 0xeb
 800e604:	f9b7 20e8 	ldrsh.w	r2, [r7, #232]	; 0xe8
 800e608:	fb02 f303 	mul.w	r3, r2, r3
 800e60c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e610:	4413      	add	r3, r2
 800e612:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    col_count--;
 800e616:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 800e61a:	3b01      	subs	r3, #1
 800e61c:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 800e620:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 800e624:	2b00      	cmp	r3, #0
 800e626:	d1d5      	bne.n	800e5d4 <arm_convolve_s8+0x5d0>
                }

                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 800e628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e62c:	009b      	lsls	r3, r3, #2
 800e62e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800e632:	4413      	add	r3, r2
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e63a:	009b      	lsls	r3, r3, #2
 800e63c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800e640:	440b      	add	r3, r1
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800e648:	66f9      	str	r1, [r7, #108]	; 0x6c
 800e64a:	66ba      	str	r2, [r7, #104]	; 0x68
 800e64c:	667b      	str	r3, [r7, #100]	; 0x64
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e64e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e650:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e654:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e656:	fa02 f303 	lsl.w	r3, r2, r3
 800e65a:	663b      	str	r3, [r7, #96]	; 0x60
 800e65c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e65e:	65fb      	str	r3, [r7, #92]	; 0x5c
    q31_t result = 0;
 800e660:	2300      	movs	r3, #0
 800e662:	65bb      	str	r3, [r7, #88]	; 0x58
    mult.word.low = 1 << 30;
 800e664:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e668:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800e66c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e670:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 800e672:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e676:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800e67a:	2200      	movs	r2, #0
 800e67c:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e67e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e682:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e684:	17c8      	asrs	r0, r1, #31
 800e686:	4688      	mov	r8, r1
 800e688:	4681      	mov	r9, r0
 800e68a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e68c:	17c8      	asrs	r0, r1, #31
 800e68e:	468a      	mov	sl, r1
 800e690:	4683      	mov	fp, r0
 800e692:	fb0a f009 	mul.w	r0, sl, r9
 800e696:	fb08 f10b 	mul.w	r1, r8, fp
 800e69a:	4401      	add	r1, r0
 800e69c:	fba8 450a 	umull	r4, r5, r8, sl
 800e6a0:	4429      	add	r1, r5
 800e6a2:	460d      	mov	r5, r1
 800e6a4:	1911      	adds	r1, r2, r4
 800e6a6:	6039      	str	r1, [r7, #0]
 800e6a8:	416b      	adcs	r3, r5
 800e6aa:	607b      	str	r3, [r7, #4]
 800e6ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 800e6b4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e6b8:	f04f 0200 	mov.w	r2, #0
 800e6bc:	f04f 0300 	mov.w	r3, #0
 800e6c0:	0fc2      	lsrs	r2, r0, #31
 800e6c2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800e6c6:	17cb      	asrs	r3, r1, #31
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	65bb      	str	r3, [r7, #88]	; 0x58
    return result;
 800e6cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e6ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	dc02      	bgt.n	800e6da <arm_convolve_s8+0x6d6>
 800e6d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6d6:	425b      	negs	r3, r3
 800e6d8:	e000      	b.n	800e6dc <arm_convolve_s8+0x6d8>
 800e6da:	2300      	movs	r3, #0
 800e6dc:	657a      	str	r2, [r7, #84]	; 0x54
 800e6de:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800e6e2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800e6e6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800e6e8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e6ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e6f4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e6f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	409a      	lsls	r2, r3
 800e702:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e70a:	3a01      	subs	r2, #1
 800e70c:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800e70e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e712:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e716:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800e71a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800e71e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e720:	6812      	ldr	r2, [r2, #0]
 800e722:	400a      	ands	r2, r1
 800e724:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800e726:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e72a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e72e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800e732:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800e736:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e738:	6812      	ldr	r2, [r2, #0]
 800e73a:	fa41 f202 	asr.w	r2, r1, r2
 800e73e:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 800e740:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e744:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e748:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800e74c:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800e750:	6812      	ldr	r2, [r2, #0]
 800e752:	1052      	asrs	r2, r2, #1
 800e754:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800e756:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e75a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2b00      	cmp	r3, #0
 800e762:	da0a      	bge.n	800e77a <arm_convolve_s8+0x776>
        threshold++;
 800e764:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e768:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e76c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800e770:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800e774:	6812      	ldr	r2, [r2, #0]
 800e776:	3201      	adds	r2, #1
 800e778:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 800e77a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e77e:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800e782:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e786:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e78a:	6812      	ldr	r2, [r2, #0]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	429a      	cmp	r2, r3
 800e790:	dd0a      	ble.n	800e7a8 <arm_convolve_s8+0x7a4>
        result++;
 800e792:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e796:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e79a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800e79e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800e7a2:	6812      	ldr	r2, [r2, #0]
 800e7a4:	3201      	adds	r2, #1
 800e7a6:	601a      	str	r2, [r3, #0]
    return result;
 800e7a8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800e7ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7b0:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e7b2:	bf00      	nop
 800e7b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum += out_offset;
 800e7b8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e7bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e7c0:	4413      	add	r3, r2
 800e7c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum = MAX(sum, out_activation_min);
 800e7c6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e7ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	bfb8      	it	lt
 800e7d2:	4613      	movlt	r3, r2
 800e7d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum = MIN(sum, out_activation_max);
 800e7d8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e7dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	bfa8      	it	ge
 800e7e4:	4613      	movge	r3, r2
 800e7e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                *out++ = (q7_t)sum;
 800e7ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e7ee:	1c5a      	adds	r2, r3, #1
 800e7f0:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800e7f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e7f8:	b252      	sxtb	r2, r2
 800e7fa:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_ch; i++)
 800e7fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e800:	3301      	adds	r3, #1
 800e802:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800e806:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800e80a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800e80e:	429a      	cmp	r2, r3
 800e810:	f6ff ada2 	blt.w	800e358 <arm_convolve_s8+0x354>
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 800e814:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800e818:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 800e81c:	fb02 f303 	mul.w	r3, r2, r3
 800e820:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 800e824:	fb02 f303 	mul.w	r3, r2, r3
 800e828:	461a      	mov	r2, r3
 800e82a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800e82e:	4413      	add	r3, r2
 800e830:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        output_data += (output_x * output_y * output_ch);
 800e834:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 800e838:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 800e83c:	fb02 f303 	mul.w	r3, r2, r3
 800e840:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800e844:	fb02 f303 	mul.w	r3, r2, r3
 800e848:	461a      	mov	r2, r3
 800e84a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e84e:	4413      	add	r3, r2
 800e850:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 800e854:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e858:	3301      	adds	r3, #1
 800e85a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800e85e:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800e862:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800e866:	429a      	cmp	r2, r3
 800e868:	f6ff ac79 	blt.w	800e15e <arm_convolve_s8+0x15a>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 800e86c:	2300      	movs	r3, #0
}
 800e86e:	4618      	mov	r0, r3
 800e870:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 800e874:	46bd      	mov	sp, r7
 800e876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e87a <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 800e87a:	b480      	push	{r7}
 800e87c:	b083      	sub	sp, #12
 800e87e:	af00      	add	r7, sp, #0
 800e880:	6078      	str	r0, [r7, #4]
 800e882:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	68db      	ldr	r3, [r3, #12]
 800e888:	683a      	ldr	r2, [r7, #0]
 800e88a:	6892      	ldr	r2, [r2, #8]
 800e88c:	fb02 f303 	mul.w	r3, r2, r3
 800e890:	683a      	ldr	r2, [r7, #0]
 800e892:	6852      	ldr	r2, [r2, #4]
 800e894:	fb02 f303 	mul.w	r3, r2, r3
 800e898:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	370c      	adds	r7, #12
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a4:	4770      	bx	lr

0800e8a6 <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b08c      	sub	sp, #48	; 0x30
 800e8aa:	af08      	add	r7, sp, #32
 800e8ac:	60f8      	str	r0, [r7, #12]
 800e8ae:	60b9      	str	r1, [r7, #8]
 800e8b0:	607a      	str	r2, [r7, #4]
 800e8b2:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	691b      	ldr	r3, [r3, #16]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d12f      	bne.n	800e91c <arm_convolve_wrapper_s8+0x76>
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	695b      	ldr	r3, [r3, #20]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d12b      	bne.n	800e91c <arm_convolve_wrapper_s8+0x76>
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	f003 0303 	and.w	r3, r3, #3
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d125      	bne.n	800e91c <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d121      	bne.n	800e91c <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d11d      	bne.n	800e91c <arm_convolve_wrapper_s8+0x76>
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d119      	bne.n	800e91c <arm_convolve_wrapper_s8+0x76>
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d115      	bne.n	800e91c <arm_convolve_wrapper_s8+0x76>
    {
        return arm_convolve_1x1_s8_fast(ctx,
 800e8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f2:	9306      	str	r3, [sp, #24]
 800e8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f6:	9305      	str	r3, [sp, #20]
 800e8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fa:	9304      	str	r3, [sp, #16]
 800e8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fe:	9303      	str	r3, [sp, #12]
 800e900:	6a3b      	ldr	r3, [r7, #32]
 800e902:	9302      	str	r3, [sp, #8]
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	9301      	str	r3, [sp, #4]
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	9300      	str	r3, [sp, #0]
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	687a      	ldr	r2, [r7, #4]
 800e910:	68b9      	ldr	r1, [r7, #8]
 800e912:	68f8      	ldr	r0, [r7, #12]
 800e914:	f7ff fb17 	bl	800df46 <arm_convolve_1x1_s8_fast>
 800e918:	4603      	mov	r3, r0
 800e91a:	e040      	b.n	800e99e <arm_convolve_wrapper_s8+0xf8>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 800e91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	2b01      	cmp	r3, #1
 800e922:	d127      	bne.n	800e974 <arm_convolve_wrapper_s8+0xce>
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d123      	bne.n	800e974 <arm_convolve_wrapper_s8+0xce>
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	2b01      	cmp	r3, #1
 800e932:	d11f      	bne.n	800e974 <arm_convolve_wrapper_s8+0xce>
 800e934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	f003 0303 	and.w	r3, r3, #3
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d119      	bne.n	800e974 <arm_convolve_wrapper_s8+0xce>
             (input_dims->n == 1))
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 800e944:	2b01      	cmp	r3, #1
 800e946:	d115      	bne.n	800e974 <arm_convolve_wrapper_s8+0xce>
    {
        return arm_convolve_1_x_n_s8(ctx,
 800e948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94a:	9306      	str	r3, [sp, #24]
 800e94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94e:	9305      	str	r3, [sp, #20]
 800e950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e952:	9304      	str	r3, [sp, #16]
 800e954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e956:	9303      	str	r3, [sp, #12]
 800e958:	6a3b      	ldr	r3, [r7, #32]
 800e95a:	9302      	str	r3, [sp, #8]
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	9301      	str	r3, [sp, #4]
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	9300      	str	r3, [sp, #0]
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	68b9      	ldr	r1, [r7, #8]
 800e96a:	68f8      	ldr	r0, [r7, #12]
 800e96c:	f7ff faa7 	bl	800debe <arm_convolve_1_x_n_s8>
 800e970:	4603      	mov	r3, r0
 800e972:	e014      	b.n	800e99e <arm_convolve_wrapper_s8+0xf8>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
 800e974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e976:	9306      	str	r3, [sp, #24]
 800e978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97a:	9305      	str	r3, [sp, #20]
 800e97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97e:	9304      	str	r3, [sp, #16]
 800e980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e982:	9303      	str	r3, [sp, #12]
 800e984:	6a3b      	ldr	r3, [r7, #32]
 800e986:	9302      	str	r3, [sp, #8]
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	9301      	str	r3, [sp, #4]
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	68b9      	ldr	r1, [r7, #8]
 800e996:	68f8      	ldr	r0, [r7, #12]
 800e998:	f7ff fb34 	bl	800e004 <arm_convolve_s8>
 800e99c:	4603      	mov	r3, r0
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3710      	adds	r7, #16
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
 800e9a6:	b580      	push	{r7, lr}
 800e9a8:	b084      	sub	sp, #16
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	60f8      	str	r0, [r7, #12]
 800e9ae:	60b9      	str	r1, [r7, #8]
 800e9b0:	607a      	str	r2, [r7, #4]
 800e9b2:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	691b      	ldr	r3, [r3, #16]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d11e      	bne.n	800e9fa <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	695b      	ldr	r3, [r3, #20]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d11a      	bne.n	800e9fa <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	f003 0303 	and.w	r3, r3, #3
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d114      	bne.n	800e9fa <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	d110      	bne.n	800e9fa <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d10c      	bne.n	800e9fa <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	689b      	ldr	r3, [r3, #8]
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d108      	bne.n	800e9fa <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d104      	bne.n	800e9fa <arm_convolve_wrapper_s8_get_buffer_size+0x54>
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 800e9f0:	68b8      	ldr	r0, [r7, #8]
 800e9f2:	f7ff fafc 	bl	800dfee <arm_convolve_1x1_s8_fast_get_buffer_size>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	e020      	b.n	800ea3c <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d117      	bne.n	800ea32 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	d113      	bne.n	800ea32 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d10f      	bne.n	800ea32 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	689b      	ldr	r3, [r3, #8]
 800ea16:	f003 0303 	and.w	r3, r3, #3
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d109      	bne.n	800ea32 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
             (input_dims->n == 1))
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 800ea22:	2b01      	cmp	r3, #1
 800ea24:	d105      	bne.n	800ea32 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 800ea26:	6879      	ldr	r1, [r7, #4]
 800ea28:	68b8      	ldr	r0, [r7, #8]
 800ea2a:	f7ff fa76 	bl	800df1a <arm_convolve_1_x_n_s8_get_buffer_size>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	e004      	b.n	800ea3c <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 800ea32:	6879      	ldr	r1, [r7, #4]
 800ea34:	68b8      	ldr	r0, [r7, #8]
 800ea36:	f7ff ff20 	bl	800e87a <arm_convolve_s8_get_buffer_size>
 800ea3a:	4603      	mov	r3, r0
    }
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3710      	adds	r7, #16
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 800ea44:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ea48:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	f507 648e 	add.w	r4, r7, #1136	; 0x470
 800ea52:	f5a4 746f 	sub.w	r4, r4, #956	; 0x3bc
 800ea56:	6020      	str	r0, [r4, #0]
 800ea58:	f507 608e 	add.w	r0, r7, #1136	; 0x470
 800ea5c:	f5a0 7070 	sub.w	r0, r0, #960	; 0x3c0
 800ea60:	6001      	str	r1, [r0, #0]
 800ea62:	4611      	mov	r1, r2
 800ea64:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800ea68:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 800ea6c:	6013      	str	r3, [r2, #0]
 800ea6e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ea72:	f2a3 32c2 	subw	r2, r3, #962	; 0x3c2
 800ea76:	460b      	mov	r3, r1
 800ea78:	8013      	strh	r3, [r2, #0]

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 800ea7a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ea7e:	f2a3 33c2 	subw	r3, r3, #962	; 0x3c2
 800ea82:	881a      	ldrh	r2, [r3, #0]
 800ea84:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 800ea88:	4413      	add	r3, r2
 800ea8a:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
    const int32_t *bias = output_bias;
 800ea8e:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 800ea92:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468

    uint16_t row_count = output_ch / 2;
 800ea96:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ea9a:	f2a3 33c2 	subw	r3, r3, #962	; 0x3c2
 800ea9e:	881b      	ldrh	r3, [r3, #0]
 800eaa0:	085b      	lsrs	r3, r3, #1
 800eaa2:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
    const q7_t *ip_a0 = input_a;
 800eaa6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eaaa:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
    /* this loop over rows in A */
    while (row_count)
 800eab4:	f001 b92e 	b.w	800fd14 <arm_nn_mat_mult_kernel_s8_s16+0x12d0>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 800eab8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eabc:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 800eac0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eac4:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800eacc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ead0:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 800eada:	005b      	lsls	r3, r3, #1
 800eadc:	441a      	add	r2, r3
 800eade:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eae2:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800eae6:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 800eae8:	f8b7 24a0 	ldrh.w	r2, [r7, #1184]	; 0x4a0
 800eaec:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800eaf0:	4413      	add	r3, r2
 800eaf2:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c

        /* Init accumulator with bias for channel N and N + 1 */
        q31_t ch_0_out_0 = *bias;
 800eaf6:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        q31_t ch_0_out_1 = *bias++;
 800eb00:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 800eb04:	1d13      	adds	r3, r2, #4
 800eb06:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800eb0a:	6813      	ldr	r3, [r2, #0]
 800eb0c:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        q31_t ch_1_out_0 = *bias;
 800eb10:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        q31_t ch_1_out_1 = *bias++;
 800eb1a:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 800eb1e:	1d13      	adds	r3, r2, #4
 800eb20:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800eb24:	6813      	ldr	r3, [r2, #0]
 800eb26:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c

        uint16_t col_count = num_col_a / 4;
 800eb2a:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 800eb2e:	089b      	lsrs	r3, r3, #2
 800eb30:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        /* accumulate over the vector */
        while (col_count)
 800eb34:	e35f      	b.n	800f1f6 <arm_nn_mat_mult_kernel_s8_s16+0x7b2>
 800eb36:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eb3a:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 800eb3e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800eb42:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 800eb44:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eb48:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	461a      	mov	r2, r3
 800eb54:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eb58:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800eb5c:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800eb5e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eb62:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	1d1a      	adds	r2, r3, #4
 800eb6c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eb70:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	601a      	str	r2, [r3, #0]
    return (val);
 800eb78:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eb7c:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800eb80:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02, a11, a12;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 800eb82:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800eb86:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eb8a:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 800eb8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb92:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 800eb94:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eb98:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	461a      	mov	r2, r3
 800eba4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eba8:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800ebac:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800ebae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ebb2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	1d1a      	adds	r2, r3, #4
 800ebbc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ebc0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	601a      	str	r2, [r3, #0]
    return (val);
 800ebc8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ebcc:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800ebd0:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 800ebd2:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 800ebd6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ebda:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 800ebde:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800ebe2:	6013      	str	r3, [r2, #0]
 800ebe4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ebe8:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 800ebec:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800ebf0:	6013      	str	r3, [r2, #0]
 800ebf2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ebf6:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 800ebfa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ebfe:	6013      	str	r3, [r2, #0]
 800ec00:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ec04:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 800ec08:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800ec0c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800ec0e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ec12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ec22:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800ec26:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800ec28:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ec2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	1d1a      	adds	r2, r3, #4
 800ec36:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ec3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	601a      	str	r2, [r3, #0]
    return (val);
 800ec42:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ec46:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800ec4a:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 800ec4c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ec50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ec54:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 800ec56:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ec5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ec64:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ec68:	601a      	str	r2, [r3, #0]
 800ec6a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ec6e:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 800ec72:	2308      	movs	r3, #8
 800ec74:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800ec76:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ec7a:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 800ec7e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ec82:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f003 031f 	and.w	r3, r3, #31
 800ec8c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800ec8e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ec92:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d105      	bne.n	800eca8 <arm_nn_mat_mult_kernel_s8_s16+0x264>
    return op1;
 800ec9c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eca0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	e00a      	b.n	800ecbe <arm_nn_mat_mult_kernel_s8_s16+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800eca8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ecac:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 800ecb0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ecb4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ecb8:	6812      	ldr	r2, [r2, #0]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	41da      	rors	r2, r3
 800ecbe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ecc2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ecc6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ecc8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eccc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	fa2f f283 	sxtb16	r2, r3
 800ecd6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ecda:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800ecde:	601a      	str	r2, [r3, #0]
  return(result);
 800ece0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ece4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800ece8:	681a      	ldr	r2, [r3, #0]
 800ecea:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ecee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ecf2:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 800ecf4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ecf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ecfc:	681a      	ldr	r2, [r3, #0]
 800ecfe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ed02:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ed06:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ed08:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ed0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	fa2f f283 	sxtb16	r2, r3
 800ed16:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ed1a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ed1e:	601a      	str	r2, [r3, #0]
  return(result);
 800ed20:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ed24:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ed28:	681a      	ldr	r2, [r3, #0]
 800ed2a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ed2e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800ed32:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 800ed34:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ed38:	f5a3 72aa 	sub.w	r2, r3, #340	; 0x154
 800ed3c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ed40:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	6013      	str	r3, [r2, #0]
 800ed48:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ed4c:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 800ed50:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ed54:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	6013      	str	r3, [r2, #0]
 800ed5c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ed60:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ed6a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 800ed74:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ed78:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ed7c:	601a      	str	r2, [r3, #0]
 800ed7e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ed82:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	461a      	mov	r2, r3
 800ed8a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ed8e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 800ed96:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ed9a:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 800ed9e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eda2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	6013      	str	r3, [r2, #0]
 800edaa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800edae:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800edb2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800edb6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	6013      	str	r3, [r2, #0]
 800edbe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800edc2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800edc6:	681a      	ldr	r2, [r3, #0]
 800edc8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800edcc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 800edd6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800edda:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800edde:	601a      	str	r2, [r3, #0]
 800ede0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ede4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	461a      	mov	r2, r3
 800edec:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800edf0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	601a      	str	r2, [r3, #0]
    return source;
 800edf8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800edfc:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800ee00:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 800ee02:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800ee06:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ee0a:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800ee0e:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800ee12:	6013      	str	r3, [r2, #0]
 800ee14:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800ee18:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800ee1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ee20:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 800ee24:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800ee28:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
    memcpy(&val, *in_q7, 4);
 800ee2c:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	461a      	mov	r2, r3
 800ee36:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ee3a:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 800ee3e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800ee40:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	1d1a      	adds	r2, r3, #4
 800ee48:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 800ee4c:	601a      	str	r2, [r3, #0]
    return (val);
 800ee4e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ee52:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 800ee56:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 800ee58:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 800ee5c:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 800ee60:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800ee64:	2308      	movs	r3, #8
 800ee66:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
  op2 %= 32U;
 800ee6a:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 800ee6e:	f003 031f 	and.w	r3, r3, #31
 800ee72:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
  if (op2 == 0U)
 800ee76:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d102      	bne.n	800ee84 <arm_nn_mat_mult_kernel_s8_s16+0x440>
    return op1;
 800ee7e:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800ee82:	e005      	b.n	800ee90 <arm_nn_mat_mult_kernel_s8_s16+0x44c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ee84:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 800ee88:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 800ee8c:	fa62 f303 	ror.w	r3, r2, r3
 800ee90:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ee94:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 800ee98:	fa2f f383 	sxtb16	r3, r3
 800ee9c:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
  return(result);
 800eea0:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800eea4:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
    q31_t inAbuf2 = __SXTB16(inA);
 800eea8:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 800eeac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eeb0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800eeb4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800eeb6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eeba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	fa2f f283 	sxtb16	r2, r3
 800eec4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eec8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eecc:	601a      	str	r2, [r3, #0]
  return(result);
 800eece:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eed6:	681a      	ldr	r2, [r3, #0]
 800eed8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eedc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eee0:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 800eee2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eee6:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800eeea:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800eeee:	6013      	str	r3, [r2, #0]
 800eef0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eef4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800eef8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800eefc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	6013      	str	r3, [r2, #0]
 800ef04:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ef08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ef0c:	681a      	ldr	r2, [r3, #0]
 800ef0e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ef12:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 800ef1c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ef20:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800ef24:	601a      	str	r2, [r3, #0]
 800ef26:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ef2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	461a      	mov	r2, r3
 800ef32:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800ef36:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 800ef38:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ef3c:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800ef40:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ef44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	6013      	str	r3, [r2, #0]
 800ef4c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ef50:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800ef54:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800ef58:	6013      	str	r3, [r2, #0]
 800ef5a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ef5e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ef68:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 800ef72:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ef76:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800ef7a:	601a      	str	r2, [r3, #0]
 800ef7c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ef80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	461a      	mov	r2, r3
 800ef88:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 800ef8c:	601a      	str	r2, [r3, #0]
    return source;
 800ef8e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ef92:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 800ef96:	681b      	ldr	r3, [r3, #0]
            ip_a1 = read_and_pad(ip_a1, &a11, &a12);
 800ef98:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 800ef9c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800efa0:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	4619      	mov	r1, r3
 800efa8:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800efac:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800efb0:	f8c7 13a4 	str.w	r1, [r7, #932]	; 0x3a4
 800efb4:	f8c7 23a0 	str.w	r2, [r7, #928]	; 0x3a0
 800efb8:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800efbc:	f8d7 13a4 	ldr.w	r1, [r7, #932]	; 0x3a4
 800efc0:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 800efc4:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 800efc8:	fb21 3302 	smlad	r3, r1, r2, r3
 800efcc:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
  return(result);
 800efd0:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800efd4:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 800efd8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800efdc:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	4619      	mov	r1, r3
 800efe4:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 800efe8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800efec:	f8c7 13b4 	str.w	r1, [r7, #948]	; 0x3b4
 800eff0:	f8c7 23b0 	str.w	r2, [r7, #944]	; 0x3b0
 800eff4:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800eff8:	f8d7 13b4 	ldr.w	r1, [r7, #948]	; 0x3b4
 800effc:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 800f000:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800f004:	fb21 3302 	smlad	r3, r1, r2, r3
 800f008:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
  return(result);
 800f00c:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800f010:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
            ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 800f014:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f018:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	4619      	mov	r1, r3
 800f020:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800f024:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800f028:	f8c7 13c4 	str.w	r1, [r7, #964]	; 0x3c4
 800f02c:	f8c7 23c0 	str.w	r2, [r7, #960]	; 0x3c0
 800f030:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f034:	f8d7 13c4 	ldr.w	r1, [r7, #964]	; 0x3c4
 800f038:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 800f03c:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 800f040:	fb21 3302 	smlad	r3, r1, r2, r3
 800f044:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
  return(result);
 800f048:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 800f04c:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
            ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);
 800f050:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f054:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4619      	mov	r1, r3
 800f05c:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 800f060:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800f064:	f8c7 13d4 	str.w	r1, [r7, #980]	; 0x3d4
 800f068:	f8c7 23d0 	str.w	r2, [r7, #976]	; 0x3d0
 800f06c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f070:	f8d7 13d4 	ldr.w	r1, [r7, #980]	; 0x3d4
 800f074:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 800f078:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800f07c:	fb21 3302 	smlad	r3, r1, r2, r3
 800f080:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
  return(result);
 800f084:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800f088:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800f08c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800f090:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
    memcpy(&val, *in_q15, 4);
 800f094:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	461a      	mov	r2, r3
 800f09e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f0a2:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800f0a6:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800f0a8:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	1d1a      	adds	r2, r3, #4
 800f0b0:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 800f0b4:	601a      	str	r2, [r3, #0]
    return (val);
 800f0b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f0ba:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800f0be:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 800f0c0:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800f0c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f0c8:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
    memcpy(&val, *in_q15, 4);
 800f0cc:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f0da:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800f0de:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800f0e0:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	1d1a      	adds	r2, r3, #4
 800f0e8:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 800f0ec:	601a      	str	r2, [r3, #0]
    return (val);
 800f0ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f0f2:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800f0f6:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 800f0f8:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420

            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 800f0fc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f100:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	4619      	mov	r1, r3
 800f108:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800f10c:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800f110:	f8c7 13ec 	str.w	r1, [r7, #1004]	; 0x3ec
 800f114:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 800f118:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f11c:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 800f120:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 800f124:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800f128:	fb21 3302 	smlad	r3, r1, r2, r3
 800f12c:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
  return(result);
 800f130:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 800f134:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 800f138:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f13c:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	4619      	mov	r1, r3
 800f144:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 800f148:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800f14c:	f8c7 13fc 	str.w	r1, [r7, #1020]	; 0x3fc
 800f150:	f8c7 23f8 	str.w	r2, [r7, #1016]	; 0x3f8
 800f154:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f158:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 800f15c:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 800f160:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800f164:	fb21 3302 	smlad	r3, r1, r2, r3
 800f168:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
  return(result);
 800f16c:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 800f170:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
 800f174:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f178:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	4619      	mov	r1, r3
 800f180:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800f184:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800f188:	f8c7 140c 	str.w	r1, [r7, #1036]	; 0x40c
 800f18c:	f8c7 2408 	str.w	r2, [r7, #1032]	; 0x408
 800f190:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f194:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 800f198:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 800f19c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800f1a0:	fb21 3302 	smlad	r3, r1, r2, r3
 800f1a4:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
  return(result);
 800f1a8:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800f1ac:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 800f1b0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f1b4:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	4619      	mov	r1, r3
 800f1bc:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 800f1c0:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800f1c4:	f8c7 141c 	str.w	r1, [r7, #1052]	; 0x41c
 800f1c8:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 800f1cc:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f1d0:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 800f1d4:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 800f1d8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800f1dc:	fb21 3302 	smlad	r3, r1, r2, r3
 800f1e0:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
  return(result);
 800f1e4:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800f1e8:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c

            col_count--;
 800f1ec:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 800f1f0:	3b01      	subs	r3, #1
 800f1f2:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        while (col_count)
 800f1f6:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	f47f ac9b 	bne.w	800eb36 <arm_nn_mat_mult_kernel_s8_s16+0xf2>
        } /* while over col_count */
        col_count = num_col_a & 0x3;
 800f200:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 800f204:	f003 0303 	and.w	r3, r3, #3
 800f208:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        while (col_count)
 800f20c:	e05c      	b.n	800f2c8 <arm_nn_mat_mult_kernel_s8_s16+0x884>
        {
            q7_t a0 = *ip_a0++;
 800f20e:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 800f212:	1c53      	adds	r3, r2, #1
 800f214:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800f218:	7813      	ldrb	r3, [r2, #0]
 800f21a:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
            q15_t b0 = *ip_b0++;
 800f21e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f222:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800f226:	6819      	ldr	r1, [r3, #0]
 800f228:	1c8a      	adds	r2, r1, #2
 800f22a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f22e:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800f232:	601a      	str	r2, [r3, #0]
 800f234:	880b      	ldrh	r3, [r1, #0]
 800f236:	f8a7 342c 	strh.w	r3, [r7, #1068]	; 0x42c
            q7_t a1 = *ip_a1++;
 800f23a:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 800f23e:	1c53      	adds	r3, r2, #1
 800f240:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800f244:	7813      	ldrb	r3, [r2, #0]
 800f246:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
            q15_t b1 = *ip_b1++;
 800f24a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f24e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800f252:	6819      	ldr	r1, [r3, #0]
 800f254:	1c8a      	adds	r2, r1, #2
 800f256:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f25a:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800f25e:	601a      	str	r2, [r3, #0]
 800f260:	880b      	ldrh	r3, [r1, #0]
 800f262:	f8a7 3428 	strh.w	r3, [r7, #1064]	; 0x428

            ch_0_out_0 += a0 * b0;
 800f266:	f997 242f 	ldrsb.w	r2, [r7, #1071]	; 0x42f
 800f26a:	f9b7 342c 	ldrsh.w	r3, [r7, #1068]	; 0x42c
 800f26e:	fb03 f202 	mul.w	r2, r3, r2
 800f272:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800f276:	4413      	add	r3, r2
 800f278:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
            ch_0_out_1 += a0 * b1;
 800f27c:	f997 242f 	ldrsb.w	r2, [r7, #1071]	; 0x42f
 800f280:	f9b7 3428 	ldrsh.w	r3, [r7, #1064]	; 0x428
 800f284:	fb03 f202 	mul.w	r2, r3, r2
 800f288:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800f28c:	4413      	add	r3, r2
 800f28e:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
            ch_1_out_0 += a1 * b0;
 800f292:	f997 242b 	ldrsb.w	r2, [r7, #1067]	; 0x42b
 800f296:	f9b7 342c 	ldrsh.w	r3, [r7, #1068]	; 0x42c
 800f29a:	fb03 f202 	mul.w	r2, r3, r2
 800f29e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800f2a2:	4413      	add	r3, r2
 800f2a4:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
            ch_1_out_1 += a1 * b1;
 800f2a8:	f997 242b 	ldrsb.w	r2, [r7, #1067]	; 0x42b
 800f2ac:	f9b7 3428 	ldrsh.w	r3, [r7, #1064]	; 0x428
 800f2b0:	fb03 f202 	mul.w	r2, r3, r2
 800f2b4:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800f2b8:	4413      	add	r3, r2
 800f2ba:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
            col_count--;
 800f2be:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 800f2c2:	3b01      	subs	r3, #1
 800f2c4:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        while (col_count)
 800f2c8:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d19e      	bne.n	800f20e <arm_nn_mat_mult_kernel_s8_s16+0x7ca>
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 800f2d0:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800f2d4:	6818      	ldr	r0, [r3, #0]
 800f2d6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f2da:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	6819      	ldr	r1, [r3, #0]
 800f2e2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f2e6:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 800f2ea:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800f2ee:	6013      	str	r3, [r2, #0]
 800f2f0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f2f4:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800f2f8:	6018      	str	r0, [r3, #0]
 800f2fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f2fe:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800f302:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f304:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f308:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800f312:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f316:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	fa03 f202 	lsl.w	r2, r3, r2
 800f320:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f324:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800f328:	601a      	str	r2, [r3, #0]
 800f32a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f32e:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 800f332:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f336:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f33e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f342:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 800f346:	2300      	movs	r3, #0
 800f348:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800f34a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f34e:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 800f352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f356:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800f358:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f35c:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 800f360:	2300      	movs	r3, #0
 800f362:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f364:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800f368:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f36c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	17da      	asrs	r2, r3, #31
 800f374:	66bb      	str	r3, [r7, #104]	; 0x68
 800f376:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f378:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f37c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	17da      	asrs	r2, r3, #31
 800f384:	663b      	str	r3, [r7, #96]	; 0x60
 800f386:	667a      	str	r2, [r7, #100]	; 0x64
 800f388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f38a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f38c:	fb02 f203 	mul.w	r2, r2, r3
 800f390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f392:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800f394:	fb04 f303 	mul.w	r3, r4, r3
 800f398:	4413      	add	r3, r2
 800f39a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f39c:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800f39e:	fba2 4204 	umull	r4, r2, r2, r4
 800f3a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f3a6:	4622      	mov	r2, r4
 800f3a8:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800f3ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f3b0:	4413      	add	r3, r2
 800f3b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f3b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f3ba:	18c3      	adds	r3, r0, r3
 800f3bc:	633b      	str	r3, [r7, #48]	; 0x30
 800f3be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f3c2:	eb41 0303 	adc.w	r3, r1, r3
 800f3c6:	637b      	str	r3, [r7, #52]	; 0x34
 800f3c8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800f3cc:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
    result = (int32_t)(mult.long_long >> 31);
 800f3d0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800f3d4:	f04f 0000 	mov.w	r0, #0
 800f3d8:	f04f 0100 	mov.w	r1, #0
 800f3dc:	0fd0      	lsrs	r0, r2, #31
 800f3de:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f3e2:	17d9      	asrs	r1, r3, #31
 800f3e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f3e8:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	6013      	str	r3, [r2, #0]
    return result;
 800f3f0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f3f4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800f3f8:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f3fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f3fe:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	2b00      	cmp	r3, #0
 800f406:	dc06      	bgt.n	800f416 <arm_nn_mat_mult_kernel_s8_s16+0x9d2>
 800f408:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f40c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	425a      	negs	r2, r3
 800f414:	e000      	b.n	800f418 <arm_nn_mat_mult_kernel_s8_s16+0x9d4>
 800f416:	2200      	movs	r2, #0
 800f418:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f41c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800f420:	6019      	str	r1, [r3, #0]
 800f422:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f426:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800f42a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800f42c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f430:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 800f434:	2300      	movs	r3, #0
 800f436:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f438:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f43c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800f440:	2201      	movs	r2, #1
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	fa02 f103 	lsl.w	r1, r2, r3
 800f448:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f44c:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 800f450:	1e4b      	subs	r3, r1, #1
 800f452:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800f454:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f458:	f5a3 710b 	sub.w	r1, r3, #556	; 0x22c
 800f45c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f460:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800f464:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f468:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800f46c:	6812      	ldr	r2, [r2, #0]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	4013      	ands	r3, r2
 800f472:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800f474:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f478:	f5a3 7109 	sub.w	r1, r3, #548	; 0x224
 800f47c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f480:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800f484:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f488:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800f48c:	6812      	ldr	r2, [r2, #0]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	fa42 f303 	asr.w	r3, r2, r3
 800f494:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800f496:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f49a:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 800f49e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f4a2:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	105b      	asrs	r3, r3, #1
 800f4aa:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800f4ac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f4b0:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	da0a      	bge.n	800f4d0 <arm_nn_mat_mult_kernel_s8_s16+0xa8c>
        threshold++;
 800f4ba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f4be:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 800f4c2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f4c6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800f4d0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f4d4:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 800f4d8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f4dc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800f4e0:	6812      	ldr	r2, [r2, #0]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	dd0a      	ble.n	800f4fe <arm_nn_mat_mult_kernel_s8_s16+0xaba>
        result++;
 800f4e8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f4ec:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 800f4f0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f4f4:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	6013      	str	r3, [r2, #0]
    return result;
 800f4fe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f502:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800f506:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f508:	bf00      	nop
 800f50a:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        ch_0_out_0 += out_offset;
 800f50e:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 800f512:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800f516:	4413      	add	r3, r2
 800f518:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 800f51c:	f9b7 2498 	ldrsh.w	r2, [r7, #1176]	; 0x498
 800f520:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800f524:	4293      	cmp	r3, r2
 800f526:	bfb8      	it	lt
 800f528:	4613      	movlt	r3, r2
 800f52a:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 800f52e:	f9b7 249c 	ldrsh.w	r2, [r7, #1180]	; 0x49c
 800f532:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800f536:	4293      	cmp	r3, r2
 800f538:	bfa8      	it	ge
 800f53a:	4613      	movge	r3, r2
 800f53c:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        *out_0++ = (q7_t)ch_0_out_0;
 800f540:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 800f544:	1c53      	adds	r3, r2, #1
 800f546:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 800f54a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800f54e:	b25b      	sxtb	r3, r3
 800f550:	7013      	strb	r3, [r2, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 800f552:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800f556:	6818      	ldr	r0, [r3, #0]
 800f558:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f55c:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	6819      	ldr	r1, [r3, #0]
 800f564:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f568:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 800f56c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800f570:	6013      	str	r3, [r2, #0]
 800f572:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f576:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800f57a:	6018      	str	r0, [r3, #0]
 800f57c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f580:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800f584:	6019      	str	r1, [r3, #0]
 800f586:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f58a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800f594:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f598:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	fa03 f202 	lsl.w	r2, r3, r2
 800f5a2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f5a6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800f5aa:	601a      	str	r2, [r3, #0]
 800f5ac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f5b0:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 800f5b4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f5b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f5c0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f5c4:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800f5cc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f5d0:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 800f5d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f5d8:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800f5da:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f5de:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f5e6:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800f5ea:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f5ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	17da      	asrs	r2, r3, #31
 800f5f6:	67bb      	str	r3, [r7, #120]	; 0x78
 800f5f8:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f5fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f5fe:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	17da      	asrs	r2, r3, #31
 800f606:	673b      	str	r3, [r7, #112]	; 0x70
 800f608:	677a      	str	r2, [r7, #116]	; 0x74
 800f60a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f60c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f60e:	fb02 f203 	mul.w	r2, r2, r3
 800f612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f614:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800f616:	fb04 f303 	mul.w	r3, r4, r3
 800f61a:	4413      	add	r3, r2
 800f61c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f61e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800f620:	fba2 5604 	umull	r5, r6, r2, r4
 800f624:	4433      	add	r3, r6
 800f626:	461e      	mov	r6, r3
 800f628:	1943      	adds	r3, r0, r5
 800f62a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f62c:	eb41 0306 	adc.w	r3, r1, r6
 800f630:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f632:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800f636:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
    result = (int32_t)(mult.long_long >> 31);
 800f63a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800f63e:	f04f 0000 	mov.w	r0, #0
 800f642:	f04f 0100 	mov.w	r1, #0
 800f646:	0fd0      	lsrs	r0, r2, #31
 800f648:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f64c:	17d9      	asrs	r1, r3, #31
 800f64e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f652:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800f656:	4603      	mov	r3, r0
 800f658:	6013      	str	r3, [r2, #0]
    return result;
 800f65a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f65e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800f662:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f664:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f668:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	dc06      	bgt.n	800f680 <arm_nn_mat_mult_kernel_s8_s16+0xc3c>
 800f672:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f676:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	425a      	negs	r2, r3
 800f67e:	e000      	b.n	800f682 <arm_nn_mat_mult_kernel_s8_s16+0xc3e>
 800f680:	2200      	movs	r2, #0
 800f682:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f686:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f68a:	6019      	str	r1, [r3, #0]
 800f68c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f690:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800f694:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800f696:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f69a:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800f69e:	2300      	movs	r3, #0
 800f6a0:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f6a2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f6a6:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800f6aa:	2201      	movs	r2, #1
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	fa02 f103 	lsl.w	r1, r2, r3
 800f6b2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f6b6:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800f6ba:	1e4b      	subs	r3, r1, #1
 800f6bc:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800f6be:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f6c2:	f5a3 71fe 	sub.w	r1, r3, #508	; 0x1fc
 800f6c6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f6ca:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 800f6ce:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f6d2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800f6d6:	6812      	ldr	r2, [r2, #0]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4013      	ands	r3, r2
 800f6dc:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800f6de:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f6e2:	f5a3 71fa 	sub.w	r1, r3, #500	; 0x1f4
 800f6e6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f6ea:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 800f6ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f6f2:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800f6f6:	6812      	ldr	r2, [r2, #0]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	fa42 f303 	asr.w	r3, r2, r3
 800f6fe:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800f700:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f704:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 800f708:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f70c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	105b      	asrs	r3, r3, #1
 800f714:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800f716:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f71a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	2b00      	cmp	r3, #0
 800f722:	da0a      	bge.n	800f73a <arm_nn_mat_mult_kernel_s8_s16+0xcf6>
        threshold++;
 800f724:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f728:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 800f72c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f730:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	3301      	adds	r3, #1
 800f738:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800f73a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f73e:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 800f742:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f746:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800f74a:	6812      	ldr	r2, [r2, #0]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	429a      	cmp	r2, r3
 800f750:	dd0a      	ble.n	800f768 <arm_nn_mat_mult_kernel_s8_s16+0xd24>
        result++;
 800f752:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f756:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800f75a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f75e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	3301      	adds	r3, #1
 800f766:	6013      	str	r3, [r2, #0]
    return result;
 800f768:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f76c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800f770:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f772:	bf00      	nop
 800f774:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        ch_0_out_1 += out_offset;
 800f778:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 800f77c:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800f780:	4413      	add	r3, r2
 800f782:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 800f786:	f9b7 2498 	ldrsh.w	r2, [r7, #1176]	; 0x498
 800f78a:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800f78e:	4293      	cmp	r3, r2
 800f790:	bfb8      	it	lt
 800f792:	4613      	movlt	r3, r2
 800f794:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 800f798:	f9b7 249c 	ldrsh.w	r2, [r7, #1180]	; 0x49c
 800f79c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	bfa8      	it	ge
 800f7a4:	4613      	movge	r3, r2
 800f7a6:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        *out_1++ = (q7_t)ch_0_out_1;
 800f7aa:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 800f7ae:	1c53      	adds	r3, r2, #1
 800f7b0:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 800f7b4:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800f7b8:	b25b      	sxtb	r3, r3
 800f7ba:	7013      	strb	r3, [r2, #0]
        out_mult++;
 800f7bc:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800f7c0:	3304      	adds	r3, #4
 800f7c2:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
        out_shift++;
 800f7c6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f7ca:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 800f7ce:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f7d2:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	3304      	adds	r3, #4
 800f7da:	6013      	str	r3, [r2, #0]

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 800f7dc:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800f7e0:	6818      	ldr	r0, [r3, #0]
 800f7e2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f7e6:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	6819      	ldr	r1, [r3, #0]
 800f7ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f7f2:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 800f7f6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800f7fa:	6013      	str	r3, [r2, #0]
 800f7fc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f800:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800f804:	6018      	str	r0, [r3, #0]
 800f806:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f80a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800f80e:	6019      	str	r1, [r3, #0]
 800f810:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f814:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800f81e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f822:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	fa03 f202 	lsl.w	r2, r3, r2
 800f82c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f830:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800f834:	601a      	str	r2, [r3, #0]
 800f836:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f83a:	f5a3 72da 	sub.w	r2, r3, #436	; 0x1b4
 800f83e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f842:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f84a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f84e:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 800f852:	2300      	movs	r3, #0
 800f854:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800f856:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f85a:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800f85e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f862:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800f864:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f868:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800f86c:	2300      	movs	r3, #0
 800f86e:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f870:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800f874:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f878:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	17da      	asrs	r2, r3, #31
 800f880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f884:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f888:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f88c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	17da      	asrs	r2, r3, #31
 800f894:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f898:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800f89c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f8a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f8a4:	fb02 f203 	mul.w	r2, r2, r3
 800f8a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f8ac:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800f8b0:	fb04 f303 	mul.w	r3, r4, r3
 800f8b4:	4413      	add	r3, r2
 800f8b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f8ba:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800f8be:	fba2 ab04 	umull	sl, fp, r2, r4
 800f8c2:	445b      	add	r3, fp
 800f8c4:	469b      	mov	fp, r3
 800f8c6:	eb10 030a 	adds.w	r3, r0, sl
 800f8ca:	643b      	str	r3, [r7, #64]	; 0x40
 800f8cc:	eb41 030b 	adc.w	r3, r1, fp
 800f8d0:	647b      	str	r3, [r7, #68]	; 0x44
 800f8d2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800f8d6:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
    result = (int32_t)(mult.long_long >> 31);
 800f8da:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800f8de:	f04f 0000 	mov.w	r0, #0
 800f8e2:	f04f 0100 	mov.w	r1, #0
 800f8e6:	0fd0      	lsrs	r0, r2, #31
 800f8e8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f8ec:	17d9      	asrs	r1, r3, #31
 800f8ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f8f2:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	6013      	str	r3, [r2, #0]
    return result;
 800f8fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f8fe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800f902:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f904:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f908:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	dc06      	bgt.n	800f920 <arm_nn_mat_mult_kernel_s8_s16+0xedc>
 800f912:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f916:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	425a      	negs	r2, r3
 800f91e:	e000      	b.n	800f922 <arm_nn_mat_mult_kernel_s8_s16+0xede>
 800f920:	2200      	movs	r2, #0
 800f922:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f926:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f92a:	6019      	str	r1, [r3, #0]
 800f92c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f930:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800f934:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800f936:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f93a:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800f93e:	2300      	movs	r3, #0
 800f940:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f942:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f946:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800f94a:	2201      	movs	r2, #1
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	fa02 f103 	lsl.w	r1, r2, r3
 800f952:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f956:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 800f95a:	1e4b      	subs	r3, r1, #1
 800f95c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800f95e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f962:	f5a3 71e6 	sub.w	r1, r3, #460	; 0x1cc
 800f966:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f96a:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800f96e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f972:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800f976:	6812      	ldr	r2, [r2, #0]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	4013      	ands	r3, r2
 800f97c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800f97e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f982:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 800f986:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f98a:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800f98e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f992:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800f996:	6812      	ldr	r2, [r2, #0]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	fa42 f303 	asr.w	r3, r2, r3
 800f99e:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800f9a0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f9a4:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 800f9a8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f9ac:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	105b      	asrs	r3, r3, #1
 800f9b4:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800f9b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f9ba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	da0a      	bge.n	800f9da <arm_nn_mat_mult_kernel_s8_s16+0xf96>
        threshold++;
 800f9c4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f9c8:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 800f9cc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f9d0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800f9da:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f9de:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 800f9e2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f9e6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800f9ea:	6812      	ldr	r2, [r2, #0]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	dd0a      	ble.n	800fa08 <arm_nn_mat_mult_kernel_s8_s16+0xfc4>
        result++;
 800f9f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f9f6:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800f9fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f9fe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	3301      	adds	r3, #1
 800fa06:	6013      	str	r3, [r2, #0]
    return result;
 800fa08:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fa0c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800fa10:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800fa12:	bf00      	nop
 800fa14:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        ch_1_out_0 += out_offset;
 800fa18:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 800fa1c:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800fa20:	4413      	add	r3, r2
 800fa22:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 800fa26:	f9b7 2498 	ldrsh.w	r2, [r7, #1176]	; 0x498
 800fa2a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	bfb8      	it	lt
 800fa32:	4613      	movlt	r3, r2
 800fa34:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 800fa38:	f9b7 249c 	ldrsh.w	r2, [r7, #1180]	; 0x49c
 800fa3c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800fa40:	4293      	cmp	r3, r2
 800fa42:	bfa8      	it	ge
 800fa44:	4613      	movge	r3, r2
 800fa46:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        *out_0++ = (q7_t)ch_1_out_0;
 800fa4a:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 800fa4e:	1c53      	adds	r3, r2, #1
 800fa50:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 800fa54:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800fa58:	b25b      	sxtb	r3, r3
 800fa5a:	7013      	strb	r3, [r2, #0]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 800fa5c:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800fa60:	6818      	ldr	r0, [r3, #0]
 800fa62:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fa66:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	6819      	ldr	r1, [r3, #0]
 800fa6e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fa72:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 800fa76:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800fa7a:	6013      	str	r3, [r2, #0]
 800fa7c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fa80:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800fa84:	6018      	str	r0, [r3, #0]
 800fa86:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fa8a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800fa8e:	6019      	str	r1, [r3, #0]
 800fa90:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fa94:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800fa9e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800faa2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	fa03 f202 	lsl.w	r2, r3, r2
 800faac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fab0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800fab4:	601a      	str	r2, [r3, #0]
 800fab6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800faba:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 800fabe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fac2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800faca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800face:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 800fad2:	2300      	movs	r3, #0
 800fad4:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800fad6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fada:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800fade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fae2:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800fae4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fae8:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800faec:	2300      	movs	r3, #0
 800faee:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800faf0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800faf4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800faf8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	17da      	asrs	r2, r3, #31
 800fb00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fb04:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800fb08:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fb0c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	17da      	asrs	r2, r3, #31
 800fb14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fb18:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800fb1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fb20:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800fb24:	fb02 f203 	mul.w	r2, r2, r3
 800fb28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fb2c:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 800fb30:	fb04 f303 	mul.w	r3, r4, r3
 800fb34:	4413      	add	r3, r2
 800fb36:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fb3a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800fb3e:	fba2 8904 	umull	r8, r9, r2, r4
 800fb42:	444b      	add	r3, r9
 800fb44:	4699      	mov	r9, r3
 800fb46:	eb10 0308 	adds.w	r3, r0, r8
 800fb4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb4c:	eb41 0309 	adc.w	r3, r1, r9
 800fb50:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb52:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800fb56:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    result = (int32_t)(mult.long_long >> 31);
 800fb5a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800fb5e:	f04f 0000 	mov.w	r0, #0
 800fb62:	f04f 0100 	mov.w	r1, #0
 800fb66:	0fd0      	lsrs	r0, r2, #31
 800fb68:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fb6c:	17d9      	asrs	r1, r3, #31
 800fb6e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fb72:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 800fb76:	4603      	mov	r3, r0
 800fb78:	6013      	str	r3, [r2, #0]
    return result;
 800fb7a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fb7e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800fb82:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800fb84:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fb88:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	dc06      	bgt.n	800fba0 <arm_nn_mat_mult_kernel_s8_s16+0x115c>
 800fb92:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fb96:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	425a      	negs	r2, r3
 800fb9e:	e000      	b.n	800fba2 <arm_nn_mat_mult_kernel_s8_s16+0x115e>
 800fba0:	2200      	movs	r2, #0
 800fba2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fba6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800fbaa:	6019      	str	r1, [r3, #0]
 800fbac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fbb0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800fbb4:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800fbb6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fbba:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800fbc2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fbc6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800fbca:	2201      	movs	r2, #1
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	fa02 f103 	lsl.w	r1, r2, r3
 800fbd2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fbd6:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 800fbda:	1e4b      	subs	r3, r1, #1
 800fbdc:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800fbde:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fbe2:	f5a3 71ce 	sub.w	r1, r3, #412	; 0x19c
 800fbe6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fbea:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800fbee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fbf2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800fbf6:	6812      	ldr	r2, [r2, #0]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	4013      	ands	r3, r2
 800fbfc:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800fbfe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fc02:	f5a3 71ca 	sub.w	r1, r3, #404	; 0x194
 800fc06:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fc0a:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800fc0e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fc12:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800fc16:	6812      	ldr	r2, [r2, #0]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	fa42 f303 	asr.w	r3, r2, r3
 800fc1e:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800fc20:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fc24:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 800fc28:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fc2c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	105b      	asrs	r3, r3, #1
 800fc34:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800fc36:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fc3a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	da0a      	bge.n	800fc5a <arm_nn_mat_mult_kernel_s8_s16+0x1216>
        threshold++;
 800fc44:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fc48:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 800fc4c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fc50:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	3301      	adds	r3, #1
 800fc58:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800fc5a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fc5e:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800fc62:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fc66:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800fc6a:	6812      	ldr	r2, [r2, #0]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	dd0a      	ble.n	800fc88 <arm_nn_mat_mult_kernel_s8_s16+0x1244>
        result++;
 800fc72:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fc76:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 800fc7a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fc7e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	3301      	adds	r3, #1
 800fc86:	6013      	str	r3, [r2, #0]
    return result;
 800fc88:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fc8c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800fc90:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800fc92:	bf00      	nop
 800fc94:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        ch_1_out_1 += out_offset;
 800fc98:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 800fc9c:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800fca0:	4413      	add	r3, r2
 800fca2:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 800fca6:	f9b7 2498 	ldrsh.w	r2, [r7, #1176]	; 0x498
 800fcaa:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	bfb8      	it	lt
 800fcb2:	4613      	movlt	r3, r2
 800fcb4:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 800fcb8:	f9b7 249c 	ldrsh.w	r2, [r7, #1180]	; 0x49c
 800fcbc:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	bfa8      	it	ge
 800fcc4:	4613      	movge	r3, r2
 800fcc6:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        *out_1++ = (q7_t)ch_1_out_1;
 800fcca:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 800fcce:	1c53      	adds	r3, r2, #1
 800fcd0:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 800fcd4:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800fcd8:	b25b      	sxtb	r3, r3
 800fcda:	7013      	strb	r3, [r2, #0]
        out_mult++;
 800fcdc:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800fce0:	3304      	adds	r3, #4
 800fce2:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
        out_shift++;
 800fce6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fcea:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 800fcee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fcf2:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	3304      	adds	r3, #4
 800fcfa:	6013      	str	r3, [r2, #0]

        /* skip row */
        ip_a0 += num_col_a;
 800fcfc:	f8b7 24a0 	ldrh.w	r2, [r7, #1184]	; 0x4a0
 800fd00:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800fd04:	4413      	add	r3, r2
 800fd06:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
        row_count--;
 800fd0a:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 800fd0e:	3b01      	subs	r3, #1
 800fd10:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
    while (row_count)
 800fd14:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	f47e aecd 	bne.w	800eab8 <arm_nn_mat_mult_kernel_s8_s16+0x74>
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 800fd1e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fd22:	f2a3 33c2 	subw	r3, r3, #962	; 0x3c2
 800fd26:	881b      	ldrh	r3, [r3, #0]
 800fd28:	f003 0301 	and.w	r3, r3, #1
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f000 859e 	beq.w	801086e <arm_nn_mat_mult_kernel_s8_s16+0x1e2a>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 800fd32:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fd36:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 800fd3a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fd3e:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800fd46:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fd4a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800fd4e:	681a      	ldr	r2, [r3, #0]
 800fd50:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 800fd54:	005b      	lsls	r3, r3, #1
 800fd56:	441a      	add	r2, r3
 800fd58:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fd5c:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 800fd60:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 800fd62:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        q31_t ch_0_out_1 = *bias++;
 800fd6c:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 800fd70:	1d13      	adds	r3, r2, #4
 800fd72:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800fd76:	6813      	ldr	r3, [r2, #0]
 800fd78:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440

        uint16_t col_count = num_col_a >> 2;
 800fd7c:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 800fd80:	089b      	lsrs	r3, r3, #2
 800fd82:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        while (col_count)
 800fd86:	e294      	b.n	80102b2 <arm_nn_mat_mult_kernel_s8_s16+0x186e>
 800fd88:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fd8c:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 800fd90:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800fd94:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 800fd96:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fd9a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	461a      	mov	r2, r3
 800fda6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fdaa:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800fdae:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800fdb0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fdb4:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	1d1a      	adds	r2, r3, #4
 800fdbe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fdc2:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	601a      	str	r2, [r3, #0]
    return (val);
 800fdca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fdce:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800fdd2:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 800fdd4:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800fdd8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fddc:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 800fde0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800fde4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 800fde6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fdea:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fdfa:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800fdfe:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800fe00:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fe04:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	1d1a      	adds	r2, r3, #4
 800fe0e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fe12:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	601a      	str	r2, [r3, #0]
    return (val);
 800fe1a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fe1e:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800fe22:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 800fe24:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 800fe28:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fe2c:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 800fe30:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800fe34:	6013      	str	r3, [r2, #0]
 800fe36:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fe3a:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 800fe3e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800fe42:	6013      	str	r3, [r2, #0]
 800fe44:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fe48:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 800fe4c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800fe50:	6013      	str	r3, [r2, #0]
 800fe52:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fe56:	f5a3 7221 	sub.w	r2, r3, #644	; 0x284
 800fe5a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800fe5e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800fe60:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fe64:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	461a      	mov	r2, r3
 800fe70:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fe74:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800fe78:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800fe7a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fe7e:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	1d1a      	adds	r2, r3, #4
 800fe88:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fe8c:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	601a      	str	r2, [r3, #0]
    return (val);
 800fe94:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fe98:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800fe9c:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 800fe9e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fea2:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800fea6:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 800fea8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800feac:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800feb0:	681a      	ldr	r2, [r3, #0]
 800feb2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800feb6:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800feba:	601a      	str	r2, [r3, #0]
 800febc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fec0:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 800fec4:	2308      	movs	r3, #8
 800fec6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800fec8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fecc:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 800fed0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fed4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	f003 031f 	and.w	r3, r3, #31
 800fede:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800fee0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fee4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d105      	bne.n	800fefa <arm_nn_mat_mult_kernel_s8_s16+0x14b6>
    return op1;
 800feee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fef2:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800fef6:	681a      	ldr	r2, [r3, #0]
 800fef8:	e00a      	b.n	800ff10 <arm_nn_mat_mult_kernel_s8_s16+0x14cc>
  return (op1 >> op2) | (op1 << (32U - op2));
 800fefa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fefe:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 800ff02:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ff06:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800ff0a:	6812      	ldr	r2, [r2, #0]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	41da      	rors	r2, r3
 800ff10:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ff14:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800ff18:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ff1a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ff1e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	fa2f f283 	sxtb16	r2, r3
 800ff28:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ff2c:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800ff30:	601a      	str	r2, [r3, #0]
  return(result);
 800ff32:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ff36:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800ff3a:	681a      	ldr	r2, [r3, #0]
 800ff3c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ff40:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800ff44:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 800ff46:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ff4a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800ff4e:	681a      	ldr	r2, [r3, #0]
 800ff50:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ff54:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800ff58:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ff5a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ff5e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	fa2f f283 	sxtb16	r2, r3
 800ff68:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ff6c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800ff70:	601a      	str	r2, [r3, #0]
  return(result);
 800ff72:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ff76:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800ff7a:	681a      	ldr	r2, [r3, #0]
 800ff7c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ff80:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800ff84:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 800ff86:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ff8a:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 800ff8e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ff92:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	6013      	str	r3, [r2, #0]
 800ff9a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ff9e:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 800ffa2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ffa6:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	6013      	str	r3, [r2, #0]
 800ffae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ffb2:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800ffb6:	681a      	ldr	r2, [r3, #0]
 800ffb8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ffbc:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 800ffc6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ffca:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800ffce:	601a      	str	r2, [r3, #0]
 800ffd0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ffd4:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	461a      	mov	r2, r3
 800ffdc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ffe0:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 800ffe8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ffec:	f5a3 722e 	sub.w	r2, r3, #696	; 0x2b8
 800fff0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fff4:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	6013      	str	r3, [r2, #0]
 800fffc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010000:	f5a3 722f 	sub.w	r2, r3, #700	; 0x2bc
 8010004:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010008:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	6013      	str	r3, [r2, #0]
 8010010:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010014:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801001e:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 8010028:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801002c:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8010030:	601a      	str	r2, [r3, #0]
 8010032:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010036:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	461a      	mov	r2, r3
 801003e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010042:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	601a      	str	r2, [r3, #0]
    return source;
 801004a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801004e:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8010052:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 8010054:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8010058:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801005c:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	4618      	mov	r0, r3
 8010064:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8010068:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 801006c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010070:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8010074:	6018      	str	r0, [r3, #0]
 8010076:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801007a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801007e:	601a      	str	r2, [r3, #0]
 8010080:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010084:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8010088:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801008a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801008e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8010092:	6819      	ldr	r1, [r3, #0]
 8010094:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010098:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801009c:	681a      	ldr	r2, [r3, #0]
 801009e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80100a2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	fb21 3202 	smlad	r2, r1, r2, r3
 80100ac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80100b0:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80100b4:	601a      	str	r2, [r3, #0]
  return(result);
 80100b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80100ba:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 80100c4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80100c8:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	4618      	mov	r0, r3
 80100d0:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 80100d4:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 80100d8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80100dc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80100e0:	6018      	str	r0, [r3, #0]
 80100e2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80100e6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80100ea:	601a      	str	r2, [r3, #0]
 80100ec:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80100f0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80100f4:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80100f6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80100fa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80100fe:	6819      	ldr	r1, [r3, #0]
 8010100:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010104:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8010108:	681a      	ldr	r2, [r3, #0]
 801010a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801010e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	fb21 3202 	smlad	r2, r1, r2, r3
 8010118:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801011c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8010120:	601a      	str	r2, [r3, #0]
  return(result);
 8010122:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010126:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8010130:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010134:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8010138:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801013c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 801013e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010142:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	461a      	mov	r2, r3
 801014e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010152:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8010156:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8010158:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801015c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	1d1a      	adds	r2, r3, #4
 8010166:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801016a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	601a      	str	r2, [r3, #0]
    return (val);
 8010172:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010176:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 801017a:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801017c:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8010180:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010184:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8010188:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801018c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 801018e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010192:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	461a      	mov	r2, r3
 801019e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80101a2:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 80101a6:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80101a8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80101ac:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	1d1a      	adds	r2, r3, #4
 80101b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80101ba:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	601a      	str	r2, [r3, #0]
    return (val);
 80101c2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80101c6:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 80101ca:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 80101cc:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 80101d0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80101d4:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	4618      	mov	r0, r3
 80101dc:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 80101e0:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 80101e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80101e8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80101ec:	6018      	str	r0, [r3, #0]
 80101ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80101f2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80101f6:	601a      	str	r2, [r3, #0]
 80101f8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80101fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8010200:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8010202:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010206:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801020a:	6819      	ldr	r1, [r3, #0]
 801020c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010210:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8010214:	681a      	ldr	r2, [r3, #0]
 8010216:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801021a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	fb21 3202 	smlad	r2, r1, r2, r3
 8010224:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010228:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801022c:	601a      	str	r2, [r3, #0]
  return(result);
 801022e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010232:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 801023c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010240:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	4618      	mov	r0, r3
 8010248:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 801024c:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 8010250:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010254:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8010258:	6018      	str	r0, [r3, #0]
 801025a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801025e:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8010262:	601a      	str	r2, [r3, #0]
 8010264:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010268:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801026c:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801026e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010272:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8010276:	6819      	ldr	r1, [r3, #0]
 8010278:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801027c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8010280:	681a      	ldr	r2, [r3, #0]
 8010282:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010286:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	fb21 3202 	smlad	r2, r1, r2, r3
 8010290:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010294:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8010298:	601a      	str	r2, [r3, #0]
  return(result);
 801029a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801029e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440

            col_count--;
 80102a8:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 80102ac:	3b01      	subs	r3, #1
 80102ae:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        while (col_count)
 80102b2:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	f47f ad66 	bne.w	800fd88 <arm_nn_mat_mult_kernel_s8_s16+0x1344>
        }
        col_count = num_col_a & 0x3;
 80102bc:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 80102c0:	f003 0303 	and.w	r3, r3, #3
 80102c4:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        while (col_count)
 80102c8:	e03e      	b.n	8010348 <arm_nn_mat_mult_kernel_s8_s16+0x1904>
        {
            q7_t a0 = *ip_a0++;
 80102ca:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 80102ce:	1c53      	adds	r3, r2, #1
 80102d0:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 80102d4:	7813      	ldrb	r3, [r2, #0]
 80102d6:	f887 343d 	strb.w	r3, [r7, #1085]	; 0x43d
            q15_t b0 = *ip_b0++;
 80102da:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80102de:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80102e2:	6819      	ldr	r1, [r3, #0]
 80102e4:	1c8a      	adds	r2, r1, #2
 80102e6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80102ea:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80102ee:	601a      	str	r2, [r3, #0]
 80102f0:	880b      	ldrh	r3, [r1, #0]
 80102f2:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
            q15_t b1 = *ip_b1++;
 80102f6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80102fa:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80102fe:	6819      	ldr	r1, [r3, #0]
 8010300:	1c8a      	adds	r2, r1, #2
 8010302:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010306:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 801030a:	601a      	str	r2, [r3, #0]
 801030c:	880b      	ldrh	r3, [r1, #0]
 801030e:	f8a7 3438 	strh.w	r3, [r7, #1080]	; 0x438

            ch_0_out_0 += a0 * b0;
 8010312:	f997 243d 	ldrsb.w	r2, [r7, #1085]	; 0x43d
 8010316:	f9b7 343a 	ldrsh.w	r3, [r7, #1082]	; 0x43a
 801031a:	fb03 f202 	mul.w	r2, r3, r2
 801031e:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8010322:	4413      	add	r3, r2
 8010324:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
            ch_0_out_1 += a0 * b1;
 8010328:	f997 243d 	ldrsb.w	r2, [r7, #1085]	; 0x43d
 801032c:	f9b7 3438 	ldrsh.w	r3, [r7, #1080]	; 0x438
 8010330:	fb03 f202 	mul.w	r2, r3, r2
 8010334:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8010338:	4413      	add	r3, r2
 801033a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
            col_count--;
 801033e:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 8010342:	3b01      	subs	r3, #1
 8010344:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        while (col_count)
 8010348:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 801034c:	2b00      	cmp	r3, #0
 801034e:	d1bc      	bne.n	80102ca <arm_nn_mat_mult_kernel_s8_s16+0x1886>
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8010350:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8010354:	6818      	ldr	r0, [r3, #0]
 8010356:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801035a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	6819      	ldr	r1, [r3, #0]
 8010362:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010366:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 801036a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 801036e:	6013      	str	r3, [r2, #0]
 8010370:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010374:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8010378:	6018      	str	r0, [r3, #0]
 801037a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801037e:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8010382:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8010384:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010388:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8010392:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010396:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	fa03 f202 	lsl.w	r2, r3, r2
 80103a0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80103a4:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80103a8:	601a      	str	r2, [r3, #0]
 80103aa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80103ae:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 80103b2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80103b6:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80103be:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80103c2:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 80103c6:	2300      	movs	r3, #0
 80103c8:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80103ca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80103ce:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80103d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80103d6:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80103d8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80103dc:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80103e0:	2300      	movs	r3, #0
 80103e2:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80103e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80103e8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80103ec:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	17da      	asrs	r2, r3, #31
 80103f4:	613b      	str	r3, [r7, #16]
 80103f6:	617a      	str	r2, [r7, #20]
 80103f8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80103fc:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	17da      	asrs	r2, r3, #31
 8010404:	60bb      	str	r3, [r7, #8]
 8010406:	60fa      	str	r2, [r7, #12]
 8010408:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 801040c:	4633      	mov	r3, r6
 801040e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8010412:	4642      	mov	r2, r8
 8010414:	fb02 f203 	mul.w	r2, r2, r3
 8010418:	464b      	mov	r3, r9
 801041a:	462c      	mov	r4, r5
 801041c:	fb04 f303 	mul.w	r3, r4, r3
 8010420:	4413      	add	r3, r2
 8010422:	462a      	mov	r2, r5
 8010424:	4644      	mov	r4, r8
 8010426:	fba2 4204 	umull	r4, r2, r2, r4
 801042a:	657a      	str	r2, [r7, #84]	; 0x54
 801042c:	4622      	mov	r2, r4
 801042e:	653a      	str	r2, [r7, #80]	; 0x50
 8010430:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010432:	4413      	add	r3, r2
 8010434:	657b      	str	r3, [r7, #84]	; 0x54
 8010436:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 801043a:	4623      	mov	r3, r4
 801043c:	18c3      	adds	r3, r0, r3
 801043e:	603b      	str	r3, [r7, #0]
 8010440:	462b      	mov	r3, r5
 8010442:	eb41 0303 	adc.w	r3, r1, r3
 8010446:	607b      	str	r3, [r7, #4]
 8010448:	e9d7 3400 	ldrd	r3, r4, [r7]
 801044c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
    result = (int32_t)(mult.long_long >> 31);
 8010450:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8010454:	f04f 0200 	mov.w	r2, #0
 8010458:	f04f 0300 	mov.w	r3, #0
 801045c:	0fc2      	lsrs	r2, r0, #31
 801045e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8010462:	17cb      	asrs	r3, r1, #31
 8010464:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8010468:	f5a1 7144 	sub.w	r1, r1, #784	; 0x310
 801046c:	4613      	mov	r3, r2
 801046e:	600b      	str	r3, [r1, #0]
    return result;
 8010470:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010474:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8010478:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801047a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801047e:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	2b00      	cmp	r3, #0
 8010486:	dc06      	bgt.n	8010496 <arm_nn_mat_mult_kernel_s8_s16+0x1a52>
 8010488:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801048c:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	425b      	negs	r3, r3
 8010494:	e000      	b.n	8010498 <arm_nn_mat_mult_kernel_s8_s16+0x1a54>
 8010496:	2300      	movs	r3, #0
 8010498:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 801049c:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 80104a0:	6011      	str	r1, [r2, #0]
 80104a2:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80104a6:	f5a2 7246 	sub.w	r2, r2, #792	; 0x318
 80104aa:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80104ac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80104b0:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80104b4:	2200      	movs	r2, #0
 80104b6:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80104b8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80104bc:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80104c0:	2201      	movs	r2, #1
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	409a      	lsls	r2, r3
 80104c6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80104ca:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80104ce:	3a01      	subs	r2, #1
 80104d0:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 80104d2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80104d6:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 80104da:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80104de:	f5a2 7145 	sub.w	r1, r2, #788	; 0x314
 80104e2:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80104e6:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
 80104ea:	6809      	ldr	r1, [r1, #0]
 80104ec:	6812      	ldr	r2, [r2, #0]
 80104ee:	400a      	ands	r2, r1
 80104f0:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 80104f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80104f6:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80104fa:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80104fe:	f5a2 7145 	sub.w	r1, r2, #788	; 0x314
 8010502:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8010506:	f5a2 7246 	sub.w	r2, r2, #792	; 0x318
 801050a:	6809      	ldr	r1, [r1, #0]
 801050c:	6812      	ldr	r2, [r2, #0]
 801050e:	fa41 f202 	asr.w	r2, r1, r2
 8010512:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8010514:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010518:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 801051c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8010520:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
 8010524:	6812      	ldr	r2, [r2, #0]
 8010526:	1052      	asrs	r2, r2, #1
 8010528:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801052a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801052e:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	2b00      	cmp	r3, #0
 8010536:	da0a      	bge.n	801054e <arm_nn_mat_mult_kernel_s8_s16+0x1b0a>
        threshold++;
 8010538:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801053c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8010540:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8010544:	f5a2 724a 	sub.w	r2, r2, #808	; 0x328
 8010548:	6812      	ldr	r2, [r2, #0]
 801054a:	3201      	adds	r2, #1
 801054c:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801054e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010552:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8010556:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801055a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 801055e:	6812      	ldr	r2, [r2, #0]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	429a      	cmp	r2, r3
 8010564:	dd0a      	ble.n	801057c <arm_nn_mat_mult_kernel_s8_s16+0x1b38>
        result++;
 8010566:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801056a:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801056e:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8010572:	f5a2 7247 	sub.w	r2, r2, #796	; 0x31c
 8010576:	6812      	ldr	r2, [r2, #0]
 8010578:	3201      	adds	r2, #1
 801057a:	601a      	str	r2, [r3, #0]
    return result;
 801057c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010580:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8010584:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8010586:	bf00      	nop
 8010588:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        ch_0_out_0 += out_offset;
 801058c:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8010590:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8010594:	4413      	add	r3, r2
 8010596:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 801059a:	f9b7 3498 	ldrsh.w	r3, [r7, #1176]	; 0x498
 801059e:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 80105a2:	4293      	cmp	r3, r2
 80105a4:	bfb8      	it	lt
 80105a6:	4613      	movlt	r3, r2
 80105a8:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80105ac:	f9b7 349c 	ldrsh.w	r3, [r7, #1180]	; 0x49c
 80105b0:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 80105b4:	4293      	cmp	r3, r2
 80105b6:	bfa8      	it	ge
 80105b8:	4613      	movge	r3, r2
 80105ba:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        *out_0++ = (q7_t)ch_0_out_0;
 80105be:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 80105c2:	1c5a      	adds	r2, r3, #1
 80105c4:	f8c7 24a8 	str.w	r2, [r7, #1192]	; 0x4a8
 80105c8:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 80105cc:	b252      	sxtb	r2, r2
 80105ce:	701a      	strb	r2, [r3, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 80105d0:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80105d4:	6819      	ldr	r1, [r3, #0]
 80105d6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80105da:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80105e6:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80105ea:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 80105ee:	6018      	str	r0, [r3, #0]
 80105f0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80105f4:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80105f8:	6019      	str	r1, [r3, #0]
 80105fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80105fe:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8010602:	601a      	str	r2, [r3, #0]
 8010604:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010608:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010612:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8010616:	f5a2 7233 	sub.w	r2, r2, #716	; 0x2cc
 801061a:	6812      	ldr	r2, [r2, #0]
 801061c:	409a      	lsls	r2, r3
 801061e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010622:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8010626:	601a      	str	r2, [r3, #0]
 8010628:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801062c:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010630:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8010634:	f5a2 7234 	sub.w	r2, r2, #720	; 0x2d0
 8010638:	6812      	ldr	r2, [r2, #0]
 801063a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801063c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010640:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8010644:	2200      	movs	r2, #0
 8010646:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8010648:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801064c:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8010650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010654:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8010656:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801065a:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 801065e:	2200      	movs	r2, #0
 8010660:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8010662:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8010666:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 801066a:	f5a1 7136 	sub.w	r1, r1, #728	; 0x2d8
 801066e:	6809      	ldr	r1, [r1, #0]
 8010670:	17c8      	asrs	r0, r1, #31
 8010672:	62b9      	str	r1, [r7, #40]	; 0x28
 8010674:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010676:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 801067a:	f5a1 7137 	sub.w	r1, r1, #732	; 0x2dc
 801067e:	6809      	ldr	r1, [r1, #0]
 8010680:	17c8      	asrs	r0, r1, #31
 8010682:	6239      	str	r1, [r7, #32]
 8010684:	6278      	str	r0, [r7, #36]	; 0x24
 8010686:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 801068a:	4631      	mov	r1, r6
 801068c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8010690:	4640      	mov	r0, r8
 8010692:	fb00 f001 	mul.w	r0, r0, r1
 8010696:	4649      	mov	r1, r9
 8010698:	462c      	mov	r4, r5
 801069a:	fb04 f101 	mul.w	r1, r4, r1
 801069e:	4401      	add	r1, r0
 80106a0:	4628      	mov	r0, r5
 80106a2:	4644      	mov	r4, r8
 80106a4:	fba0 4004 	umull	r4, r0, r0, r4
 80106a8:	65f8      	str	r0, [r7, #92]	; 0x5c
 80106aa:	4620      	mov	r0, r4
 80106ac:	65b8      	str	r0, [r7, #88]	; 0x58
 80106ae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80106b0:	4401      	add	r1, r0
 80106b2:	65f9      	str	r1, [r7, #92]	; 0x5c
 80106b4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80106b8:	4621      	mov	r1, r4
 80106ba:	1851      	adds	r1, r2, r1
 80106bc:	61b9      	str	r1, [r7, #24]
 80106be:	4629      	mov	r1, r5
 80106c0:	eb43 0101 	adc.w	r1, r3, r1
 80106c4:	61f9      	str	r1, [r7, #28]
 80106c6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80106ca:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
    result = (int32_t)(mult.long_long >> 31);
 80106ce:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80106d2:	f04f 0200 	mov.w	r2, #0
 80106d6:	f04f 0300 	mov.w	r3, #0
 80106da:	0fc2      	lsrs	r2, r0, #31
 80106dc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80106e0:	17cb      	asrs	r3, r1, #31
 80106e2:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 80106e6:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 80106ea:	4613      	mov	r3, r2
 80106ec:	600b      	str	r3, [r1, #0]
    return result;
 80106ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80106f2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80106f6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80106f8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80106fc:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	dc06      	bgt.n	8010714 <arm_nn_mat_mult_kernel_s8_s16+0x1cd0>
 8010706:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801070a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	425b      	negs	r3, r3
 8010712:	e000      	b.n	8010716 <arm_nn_mat_mult_kernel_s8_s16+0x1cd2>
 8010714:	2300      	movs	r3, #0
 8010716:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 801071a:	f5a2 7239 	sub.w	r2, r2, #740	; 0x2e4
 801071e:	6011      	str	r1, [r2, #0]
 8010720:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8010724:	f5a2 723a 	sub.w	r2, r2, #744	; 0x2e8
 8010728:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801072a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801072e:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8010732:	2200      	movs	r2, #0
 8010734:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8010736:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801073a:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801073e:	2201      	movs	r2, #1
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	409a      	lsls	r2, r3
 8010744:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010748:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801074c:	3a01      	subs	r2, #1
 801074e:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8010750:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010754:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8010758:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 801075c:	f5a2 7139 	sub.w	r1, r2, #740	; 0x2e4
 8010760:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8010764:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 8010768:	6809      	ldr	r1, [r1, #0]
 801076a:	6812      	ldr	r2, [r2, #0]
 801076c:	400a      	ands	r2, r1
 801076e:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8010770:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010774:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8010778:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 801077c:	f5a2 7139 	sub.w	r1, r2, #740	; 0x2e4
 8010780:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8010784:	f5a2 723a 	sub.w	r2, r2, #744	; 0x2e8
 8010788:	6809      	ldr	r1, [r1, #0]
 801078a:	6812      	ldr	r2, [r2, #0]
 801078c:	fa41 f202 	asr.w	r2, r1, r2
 8010790:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8010792:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010796:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 801079a:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 801079e:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 80107a2:	6812      	ldr	r2, [r2, #0]
 80107a4:	1052      	asrs	r2, r2, #1
 80107a6:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80107a8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80107ac:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	da0a      	bge.n	80107cc <arm_nn_mat_mult_kernel_s8_s16+0x1d88>
        threshold++;
 80107b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80107ba:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80107be:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80107c2:	f5a2 723e 	sub.w	r2, r2, #760	; 0x2f8
 80107c6:	6812      	ldr	r2, [r2, #0]
 80107c8:	3201      	adds	r2, #1
 80107ca:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 80107cc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80107d0:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 80107d4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80107d8:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80107dc:	6812      	ldr	r2, [r2, #0]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	429a      	cmp	r2, r3
 80107e2:	dd0a      	ble.n	80107fa <arm_nn_mat_mult_kernel_s8_s16+0x1db6>
        result++;
 80107e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80107e8:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80107ec:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80107f0:	f5a2 723b 	sub.w	r2, r2, #748	; 0x2ec
 80107f4:	6812      	ldr	r2, [r2, #0]
 80107f6:	3201      	adds	r2, #1
 80107f8:	601a      	str	r2, [r3, #0]
    return result;
 80107fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80107fe:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8010802:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8010804:	bf00      	nop
 8010806:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        ch_0_out_1 += out_offset;
 801080a:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 801080e:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8010812:	4413      	add	r3, r2
 8010814:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8010818:	f9b7 3498 	ldrsh.w	r3, [r7, #1176]	; 0x498
 801081c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8010820:	4293      	cmp	r3, r2
 8010822:	bfb8      	it	lt
 8010824:	4613      	movlt	r3, r2
 8010826:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801082a:	f9b7 349c 	ldrsh.w	r3, [r7, #1180]	; 0x49c
 801082e:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8010832:	4293      	cmp	r3, r2
 8010834:	bfa8      	it	ge
 8010836:	4613      	movge	r3, r2
 8010838:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        *out_1++ = (q7_t)ch_0_out_1;
 801083c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8010840:	1c5a      	adds	r2, r3, #1
 8010842:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 8010846:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 801084a:	b252      	sxtb	r2, r2
 801084c:	701a      	strb	r2, [r3, #0]
        out_mult++;
 801084e:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8010852:	3304      	adds	r3, #4
 8010854:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
        out_shift++;
 8010858:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801085c:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8010860:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8010864:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 8010868:	6812      	ldr	r2, [r2, #0]
 801086a:	3204      	adds	r2, #4
 801086c:	601a      	str	r2, [r3, #0]
    }

    out_0 += output_ch;
 801086e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8010872:	f2a3 33c2 	subw	r3, r3, #962	; 0x3c2
 8010876:	881b      	ldrh	r3, [r3, #0]
 8010878:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 801087c:	4413      	add	r3, r2
 801087e:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8

    /* return the new output pointer with offset */
    return out_0;
 8010882:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 8010886:	4618      	mov	r0, r3
 8010888:	f507 678e 	add.w	r7, r7, #1136	; 0x470
 801088c:	46bd      	mov	sp, r7
 801088e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010892:	4770      	bx	lr

08010894 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 8010894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010896:	b093      	sub	sp, #76	; 0x4c
 8010898:	af0a      	add	r7, sp, #40	; 0x28
 801089a:	6178      	str	r0, [r7, #20]
 801089c:	6139      	str	r1, [r7, #16]
 801089e:	60fa      	str	r2, [r7, #12]
 80108a0:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 80108a8:	e033      	b.n	8010912 <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 80108aa:	693b      	ldr	r3, [r7, #16]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	607b      	str	r3, [r7, #4]
 80108b0:	693a      	ldr	r2, [r7, #16]
 80108b2:	6852      	ldr	r2, [r2, #4]
 80108b4:	6939      	ldr	r1, [r7, #16]
 80108b6:	6889      	ldr	r1, [r1, #8]
 80108b8:	68f8      	ldr	r0, [r7, #12]
 80108ba:	6800      	ldr	r0, [r0, #0]
 80108bc:	68fc      	ldr	r4, [r7, #12]
 80108be:	6864      	ldr	r4, [r4, #4]
 80108c0:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 80108c2:	682d      	ldr	r5, [r5, #0]
 80108c4:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 80108c6:	68f6      	ldr	r6, [r6, #12]
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	68db      	ldr	r3, [r3, #12]
 80108cc:	603b      	str	r3, [r7, #0]
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	691b      	ldr	r3, [r3, #16]
 80108d2:	9308      	str	r3, [sp, #32]
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	9307      	str	r3, [sp, #28]
 80108d8:	9606      	str	r6, [sp, #24]
 80108da:	9505      	str	r5, [sp, #20]
 80108dc:	9404      	str	r4, [sp, #16]
 80108de:	9003      	str	r0, [sp, #12]
 80108e0:	9102      	str	r1, [sp, #8]
 80108e2:	9201      	str	r2, [sp, #4]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	9300      	str	r3, [sp, #0]
 80108e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80108ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80108f0:	f004 fe94 	bl	801561c <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 80108f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	461a      	mov	r2, r3
 80108fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108fc:	4413      	add	r3, r2
 80108fe:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 8010900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010902:	68db      	ldr	r3, [r3, #12]
 8010904:	461a      	mov	r2, r3
 8010906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010908:	4413      	add	r3, r2
 801090a:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 801090c:	69fb      	ldr	r3, [r7, #28]
 801090e:	3b01      	subs	r3, #1
 8010910:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d1c8      	bne.n	80108aa <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 8010918:	2300      	movs	r3, #0
}
 801091a:	4618      	mov	r0, r3
 801091c:	3724      	adds	r7, #36	; 0x24
 801091e:	46bd      	mov	sp, r7
 8010920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010922 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 8010922:	b480      	push	{r7}
 8010924:	b083      	sub	sp, #12
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 801092a:	2300      	movs	r3, #0
}
 801092c:	4618      	mov	r0, r3
 801092e:	370c      	adds	r7, #12
 8010930:	46bd      	mov	sp, r7
 8010932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010936:	4770      	bx	lr

08010938 <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
 8010938:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801093c:	f6ad 2dd8 	subw	sp, sp, #2776	; 0xad8
 8010940:	af00      	add	r7, sp, #0
 8010942:	f607 24d8 	addw	r4, r7, #2776	; 0xad8
 8010946:	f6a4 2404 	subw	r4, r4, #2564	; 0xa04
 801094a:	6020      	str	r0, [r4, #0]
 801094c:	f607 20d8 	addw	r0, r7, #2776	; 0xad8
 8010950:	f6a0 2008 	subw	r0, r0, #2568	; 0xa08
 8010954:	6001      	str	r1, [r0, #0]
 8010956:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 801095a:	f6a1 210c 	subw	r1, r1, #2572	; 0xa0c
 801095e:	600a      	str	r2, [r1, #0]
 8010960:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 8010964:	f5a2 6221 	sub.w	r2, r2, #2576	; 0xa10
 8010968:	6013      	str	r3, [r2, #0]
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 801096a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801096e:	3b04      	subs	r3, #4
 8010970:	f8c7 3a84 	str.w	r3, [r7, #2692]	; 0xa84

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8010974:	2300      	movs	r3, #0
 8010976:	f8c7 3ad4 	str.w	r3, [r7, #2772]	; 0xad4
 801097a:	f004 bc7b 	b.w	8015274 <arm_nn_mat_mult_nt_t_s8+0x493c>
    {
        const q7_t *lhs_ptr = &lhs[0];
 801097e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010982:	f6a3 1248 	subw	r2, r3, #2376	; 0x948
 8010986:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801098a:	f6a3 2304 	subw	r3, r3, #2564	; 0xa04
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	6013      	str	r3, [r2, #0]
        q7_t *dst_ptr = &dst[0];
 8010992:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010996:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	f8c7 3ad0 	str.w	r3, [r7, #2768]	; 0xad0

        q31_t lhs_offset_contribution0 = 0;
 80109a0:	2300      	movs	r3, #0
 80109a2:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
        q31_t lhs_offset_contribution1 = 0;
 80109a6:	2300      	movs	r3, #0
 80109a8:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8

        for (int32_t x = 0; x < rhs_cols; ++x)
 80109ac:	2300      	movs	r3, #0
 80109ae:	f8c7 3ac4 	str.w	r3, [r7, #2756]	; 0xac4
 80109b2:	e028      	b.n	8010a06 <arm_nn_mat_mult_nt_t_s8+0xce>
        {
            lhs_offset_contribution0 += rhs[x];
 80109b4:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 80109b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80109bc:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	4413      	add	r3, r2
 80109c4:	f993 3000 	ldrsb.w	r3, [r3]
 80109c8:	461a      	mov	r2, r3
 80109ca:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 80109ce:	4413      	add	r3, r2
 80109d0:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 80109d4:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 80109d8:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 80109dc:	4413      	add	r3, r2
 80109de:	461a      	mov	r2, r3
 80109e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80109e4:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	4413      	add	r3, r2
 80109ec:	f993 3000 	ldrsb.w	r3, [r3]
 80109f0:	461a      	mov	r2, r3
 80109f2:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 80109f6:	4413      	add	r3, r2
 80109f8:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8
        for (int32_t x = 0; x < rhs_cols; ++x)
 80109fc:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8010a00:	3301      	adds	r3, #1
 8010a02:	f8c7 3ac4 	str.w	r3, [r7, #2756]	; 0xac4
 8010a06:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 8010a0a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	dbd0      	blt.n	80109b4 <arm_nn_mat_mult_nt_t_s8+0x7c>
        }

        lhs_offset_contribution0 *= lhs_offset;
 8010a12:	f8d7 2acc 	ldr.w	r2, [r7, #2764]	; 0xacc
 8010a16:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8010a1a:	fb02 f303 	mul.w	r3, r2, r3
 8010a1e:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
        lhs_offset_contribution1 *= lhs_offset;
 8010a22:	f8d7 2ac8 	ldr.w	r2, [r7, #2760]	; 0xac8
 8010a26:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8010a2a:	fb02 f303 	mul.w	r3, r2, r3
 8010a2e:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8
        if (bias)
 8010a32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010a36:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d01e      	beq.n	8010a7e <arm_nn_mat_mult_nt_t_s8+0x146>
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 8010a40:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8010a44:	009a      	lsls	r2, r3, #2
 8010a46:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010a4a:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4413      	add	r3, r2
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8010a58:	4413      	add	r3, r2
 8010a5a:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 8010a5e:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8010a62:	3301      	adds	r3, #1
 8010a64:	009a      	lsls	r2, r3, #2
 8010a66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010a6a:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	4413      	add	r3, r2
 8010a72:	681a      	ldr	r2, [r3, #0]
 8010a74:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8010a78:	4413      	add	r3, r2
 8010a7a:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 8010a7e:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8010a82:	105b      	asrs	r3, r3, #1
 8010a84:	f8c7 3ac0 	str.w	r3, [r7, #2752]	; 0xac0

        while (lhs_rows_idx)
 8010a88:	f002 bdd2 	b.w	8013630 <arm_nn_mat_mult_nt_t_s8+0x2cf8>
        {
            const q7_t *rhs_ptr = &rhs[0];
 8010a8c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010a90:	f6a3 124c 	subw	r2, r3, #2380	; 0x94c
 8010a94:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010a98:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 8010aa0:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8010aa4:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            q31_t res01 = lhs_offset_contribution1;
 8010aa8:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8010aac:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            q31_t res10 = lhs_offset_contribution0;
 8010ab0:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8010ab4:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            q31_t res11 = lhs_offset_contribution1;
 8010ab8:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8010abc:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            int32_t rhs_cols_idx = 0;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac

            q31_t val0, val1, val2, val3, val4, val5;

            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8010ac6:	f001 bfee 	b.w	8012aa6 <arm_nn_mat_mult_nt_t_s8+0x216e>
 8010aca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010ace:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 8010ad2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8010ad6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8010ad8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010adc:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010aec:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 8010af0:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8010af2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010af6:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	1d1a      	adds	r2, r3, #4
 8010b00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010b04:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	601a      	str	r2, [r3, #0]
    return (val);
 8010b0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010b10:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 8010b14:	681b      	ldr	r3, [r3, #0]
            {
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8010b16:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val2 = __SXTB16(val1);
 8010b1a:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8010b1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010b22:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8010b26:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8010b28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010b2c:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	fa2f f283 	sxtb16	r2, r3
 8010b36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010b3a:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 8010b3e:	601a      	str	r2, [r3, #0]
  return(result);
 8010b40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010b44:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 8010b4e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010b52:	f5a3 62a1 	sub.w	r2, r3, #1288	; 0x508
 8010b56:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8010b5a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8010b5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010b60:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	461a      	mov	r2, r3
 8010b6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010b70:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8010b74:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8010b76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010b7a:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	1d1a      	adds	r2, r3, #4
 8010b84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010b88:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	601a      	str	r2, [r3, #0]
    return (val);
 8010b90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010b94:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8010b98:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8010b9a:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 8010b9e:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8010ba2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010ba6:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 8010baa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8010bac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010bb0:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	fa2f f283 	sxtb16	r2, r3
 8010bba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010bbe:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8010bc2:	601a      	str	r2, [r3, #0]
  return(result);
 8010bc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010bc8:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8010bd2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010bd6:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 8010bda:	681a      	ldr	r2, [r3, #0]
 8010bdc:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8010be0:	441a      	add	r2, r3
 8010be2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010be6:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 8010bea:	601a      	str	r2, [r3, #0]
 8010bec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010bf0:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8010bfa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010bfe:	f6a3 137c 	subw	r3, r3, #2428	; 0x97c
 8010c02:	601a      	str	r2, [r3, #0]
    return (val);
 8010c04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010c08:	f6a3 137c 	subw	r3, r3, #2428	; 0x97c
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val1 = __SXTB16_RORn(val1, 8);
 8010c12:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8010c16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010c1a:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8010c1e:	601a      	str	r2, [r3, #0]
 8010c20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010c24:	f2a3 42e4 	subw	r2, r3, #1252	; 0x4e4
 8010c28:	2308      	movs	r3, #8
 8010c2a:	6013      	str	r3, [r2, #0]
 8010c2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010c30:	f5a3 629d 	sub.w	r2, r3, #1256	; 0x4e8
 8010c34:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010c38:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	6013      	str	r3, [r2, #0]
 8010c40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010c44:	f2a3 42ec 	subw	r2, r3, #1260	; 0x4ec
 8010c48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010c4c:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8010c54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010c58:	f2a3 42ec 	subw	r2, r3, #1260	; 0x4ec
 8010c5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010c60:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	f003 031f 	and.w	r3, r3, #31
 8010c6a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8010c6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010c70:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d105      	bne.n	8010c86 <arm_nn_mat_mult_nt_t_s8+0x34e>
    return op1;
 8010c7a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010c7e:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8010c82:	681a      	ldr	r2, [r3, #0]
 8010c84:	e00a      	b.n	8010c9c <arm_nn_mat_mult_nt_t_s8+0x364>
  return (op1 >> op2) | (op1 << (32U - op2));
 8010c86:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010c8a:	f5a3 629d 	sub.w	r2, r3, #1256	; 0x4e8
 8010c8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010c92:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8010c96:	6812      	ldr	r2, [r2, #0]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	41da      	rors	r2, r3
 8010c9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010ca0:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8010ca4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8010ca6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010caa:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	fa2f f283 	sxtb16	r2, r3
 8010cb4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010cb8:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 8010cbc:	601a      	str	r2, [r3, #0]
  return(result);
 8010cbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010cc2:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 8010cc6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8010cc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010ccc:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8010cd0:	601a      	str	r2, [r3, #0]
  return result;
 8010cd2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010cd6:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 8010ce0:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8010ce4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010ce8:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8010cec:	601a      	str	r2, [r3, #0]
 8010cee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010cf2:	f5a3 6299 	sub.w	r2, r3, #1224	; 0x4c8
 8010cf6:	2308      	movs	r3, #8
 8010cf8:	6013      	str	r3, [r2, #0]
 8010cfa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010cfe:	f2a3 42cc 	subw	r2, r3, #1228	; 0x4cc
 8010d02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010d06:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	6013      	str	r3, [r2, #0]
 8010d0e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010d12:	f5a3 629a 	sub.w	r2, r3, #1232	; 0x4d0
 8010d16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010d1a:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8010d22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010d26:	f5a3 629a 	sub.w	r2, r3, #1232	; 0x4d0
 8010d2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010d2e:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	f003 031f 	and.w	r3, r3, #31
 8010d38:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8010d3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010d3e:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d105      	bne.n	8010d54 <arm_nn_mat_mult_nt_t_s8+0x41c>
    return op1;
 8010d48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010d4c:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8010d50:	681a      	ldr	r2, [r3, #0]
 8010d52:	e00a      	b.n	8010d6a <arm_nn_mat_mult_nt_t_s8+0x432>
  return (op1 >> op2) | (op1 << (32U - op2));
 8010d54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010d58:	f2a3 42cc 	subw	r2, r3, #1228	; 0x4cc
 8010d5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010d60:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8010d64:	6812      	ldr	r2, [r2, #0]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	41da      	rors	r2, r3
 8010d6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010d6e:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8010d72:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8010d74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010d78:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	fa2f f283 	sxtb16	r2, r3
 8010d82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010d86:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8010d8a:	601a      	str	r2, [r3, #0]
  return(result);
 8010d8c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010d90:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8010d94:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8010d96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010d9a:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 8010d9e:	601a      	str	r2, [r3, #0]
  return result;
 8010da0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010da4:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 8010dae:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8010db2:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 8010db6:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 8010dba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010dbe:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8010dc2:	601a      	str	r2, [r3, #0]
 8010dc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010dc8:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8010dcc:	6019      	str	r1, [r3, #0]
 8010dce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010dd2:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8010dd6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8010dd8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010ddc:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8010de0:	6819      	ldr	r1, [r3, #0]
 8010de2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010de6:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8010dea:	681a      	ldr	r2, [r3, #0]
 8010dec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010df0:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	fb21 3202 	smlad	r2, r1, r2, r3
 8010dfa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010dfe:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8010e02:	601a      	str	r2, [r3, #0]
  return(result);
 8010e04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010e08:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 8010e12:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 8010e16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010e1a:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8010e1e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8010e20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010e24:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	fa2f f283 	sxtb16	r2, r3
 8010e2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010e32:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8010e36:	601a      	str	r2, [r3, #0]
  return(result);
 8010e38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010e3c:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 8010e46:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8010e4a:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 8010e4e:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 8010e52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010e56:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8010e5a:	601a      	str	r2, [r3, #0]
 8010e5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010e60:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 8010e64:	6019      	str	r1, [r3, #0]
 8010e66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010e6a:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8010e6e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8010e70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010e74:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8010e78:	6819      	ldr	r1, [r3, #0]
 8010e7a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010e7e:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 8010e82:	681a      	ldr	r2, [r3, #0]
 8010e84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010e88:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	fb21 3202 	smlad	r2, r1, r2, r3
 8010e92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010e96:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8010e9a:	601a      	str	r2, [r3, #0]
  return(result);
 8010e9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010ea0:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 8010eaa:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 8010eae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010eb2:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8010eb6:	601a      	str	r2, [r3, #0]
 8010eb8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010ebc:	f2a3 4284 	subw	r2, r3, #1156	; 0x484
 8010ec0:	2308      	movs	r3, #8
 8010ec2:	6013      	str	r3, [r2, #0]
 8010ec4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010ec8:	f5a3 6291 	sub.w	r2, r3, #1160	; 0x488
 8010ecc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010ed0:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	6013      	str	r3, [r2, #0]
 8010ed8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010edc:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 8010ee0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010ee4:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8010eec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010ef0:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 8010ef4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010ef8:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	f003 031f 	and.w	r3, r3, #31
 8010f02:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8010f04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010f08:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d105      	bne.n	8010f1e <arm_nn_mat_mult_nt_t_s8+0x5e6>
    return op1;
 8010f12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010f16:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8010f1a:	681a      	ldr	r2, [r3, #0]
 8010f1c:	e00a      	b.n	8010f34 <arm_nn_mat_mult_nt_t_s8+0x5fc>
  return (op1 >> op2) | (op1 << (32U - op2));
 8010f1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010f22:	f5a3 6291 	sub.w	r2, r3, #1160	; 0x488
 8010f26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010f2a:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8010f2e:	6812      	ldr	r2, [r2, #0]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	41da      	rors	r2, r3
 8010f34:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010f38:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8010f3c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8010f3e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010f42:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	fa2f f283 	sxtb16	r2, r3
 8010f4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010f50:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8010f54:	601a      	str	r2, [r3, #0]
  return(result);
 8010f56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010f5a:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8010f5e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8010f60:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010f64:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8010f68:	601a      	str	r2, [r3, #0]
  return result;
 8010f6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010f6e:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 8010f78:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8010f7c:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 8010f80:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 8010f84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010f88:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8010f8c:	601a      	str	r2, [r3, #0]
 8010f8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010f92:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8010f96:	6019      	str	r1, [r3, #0]
 8010f98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010f9c:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8010fa0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8010fa2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010fa6:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8010faa:	6819      	ldr	r1, [r3, #0]
 8010fac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010fb0:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8010fb4:	681a      	ldr	r2, [r3, #0]
 8010fb6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010fba:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	fb21 3202 	smlad	r2, r1, r2, r3
 8010fc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010fc8:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8010fcc:	601a      	str	r2, [r3, #0]
  return(result);
 8010fce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010fd2:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 8010fdc:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8010fe0:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 8010fe4:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 8010fe8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010fec:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8010ff0:	601a      	str	r2, [r3, #0]
 8010ff2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8010ff6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8010ffa:	6019      	str	r1, [r3, #0]
 8010ffc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011000:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8011004:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011006:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801100a:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 801100e:	6819      	ldr	r1, [r3, #0]
 8011010:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011014:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8011018:	681a      	ldr	r2, [r3, #0]
 801101a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801101e:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	fb21 3202 	smlad	r2, r1, r2, r3
 8011028:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801102c:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8011030:	601a      	str	r2, [r3, #0]
  return(result);
 8011032:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011036:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 8011040:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011044:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8011048:	681a      	ldr	r2, [r3, #0]
 801104a:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801104e:	441a      	add	r2, r3
 8011050:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011054:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8011058:	601a      	str	r2, [r3, #0]
 801105a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801105e:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8011068:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801106c:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8011070:	601a      	str	r2, [r3, #0]
    return (val);
 8011072:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011076:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 8011080:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8011084:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011088:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 801108c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801108e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011092:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	fa2f f283 	sxtb16	r2, r3
 801109c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80110a0:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 80110a4:	601a      	str	r2, [r3, #0]
  return(result);
 80110a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80110aa:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 80110b4:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80110b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80110bc:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 80110c0:	601a      	str	r2, [r3, #0]
 80110c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80110c6:	f2a3 423c 	subw	r2, r3, #1084	; 0x43c
 80110ca:	2308      	movs	r3, #8
 80110cc:	6013      	str	r3, [r2, #0]
 80110ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80110d2:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 80110d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80110da:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	6013      	str	r3, [r2, #0]
 80110e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80110e6:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 80110ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80110ee:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80110f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80110fa:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 80110fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011102:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	f003 031f 	and.w	r3, r3, #31
 801110c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801110e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011112:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d105      	bne.n	8011128 <arm_nn_mat_mult_nt_t_s8+0x7f0>
    return op1;
 801111c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011120:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8011124:	681a      	ldr	r2, [r3, #0]
 8011126:	e00a      	b.n	801113e <arm_nn_mat_mult_nt_t_s8+0x806>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011128:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801112c:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8011130:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011134:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8011138:	6812      	ldr	r2, [r2, #0]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	41da      	rors	r2, r3
 801113e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011142:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8011146:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011148:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801114c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	fa2f f283 	sxtb16	r2, r3
 8011156:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801115a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 801115e:	601a      	str	r2, [r3, #0]
  return(result);
 8011160:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011164:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8011168:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801116a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801116e:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8011172:	601a      	str	r2, [r3, #0]
  return result;
 8011174:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011178:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 8011182:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8011186:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801118a:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 801118e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011192:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8011196:	601a      	str	r2, [r3, #0]
 8011198:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801119c:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 80111a0:	6019      	str	r1, [r3, #0]
 80111a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80111a6:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 80111aa:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80111ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80111b0:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80111b4:	6819      	ldr	r1, [r3, #0]
 80111b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80111ba:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 80111be:	681a      	ldr	r2, [r3, #0]
 80111c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80111c4:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	fb21 3202 	smlad	r2, r1, r2, r3
 80111ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80111d2:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 80111d6:	601a      	str	r2, [r3, #0]
  return(result);
 80111d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80111dc:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 80111e6:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 80111ea:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 80111ee:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 80111f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80111f6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80111fa:	601a      	str	r2, [r3, #0]
 80111fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011200:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8011204:	6019      	str	r1, [r3, #0]
 8011206:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801120a:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 801120e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011210:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011214:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8011218:	6819      	ldr	r1, [r3, #0]
 801121a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801121e:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011228:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	fb21 3202 	smlad	r2, r1, r2, r3
 8011232:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011236:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 801123a:	601a      	str	r2, [r3, #0]
  return(result);
 801123c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011240:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 801124a:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801124e:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 8011252:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 8011256:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801125a:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 801125e:	601a      	str	r2, [r3, #0]
 8011260:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011264:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8011268:	6019      	str	r1, [r3, #0]
 801126a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801126e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8011272:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011274:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011278:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 801127c:	6819      	ldr	r1, [r3, #0]
 801127e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011282:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8011286:	681a      	ldr	r2, [r3, #0]
 8011288:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801128c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	fb21 3202 	smlad	r2, r1, r2, r3
 8011296:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801129a:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 801129e:	601a      	str	r2, [r3, #0]
  return(result);
 80112a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80112a4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 80112ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80112b2:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 80112b6:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80112ba:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80112bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80112c0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	461a      	mov	r2, r3
 80112cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80112d0:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 80112d4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80112d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80112da:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	1d1a      	adds	r2, r3, #4
 80112e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80112e8:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	601a      	str	r2, [r3, #0]
    return (val);
 80112f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80112f4:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 80112f8:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80112fa:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                res11 = __SMLAD(val0, val4, res11);
 80112fe:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8011302:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 8011306:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 801130a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801130e:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8011312:	601a      	str	r2, [r3, #0]
 8011314:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011318:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 801131c:	6019      	str	r1, [r3, #0]
 801131e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011322:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8011326:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011328:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801132c:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8011330:	6819      	ldr	r1, [r3, #0]
 8011332:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011336:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 801133a:	681a      	ldr	r2, [r3, #0]
 801133c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011340:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	fb21 3202 	smlad	r2, r1, r2, r3
 801134a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801134e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8011352:	601a      	str	r2, [r3, #0]
  return(result);
 8011354:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011358:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8011362:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011366:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801136a:	681a      	ldr	r2, [r3, #0]
 801136c:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8011370:	441a      	add	r2, r3
 8011372:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011376:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 801137a:	601a      	str	r2, [r3, #0]
 801137c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011380:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801138a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801138e:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8011392:	601a      	str	r2, [r3, #0]
    return (val);
 8011394:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011398:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val2 = __SXTB16(val1);
 80113a2:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 80113a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80113aa:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80113ae:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80113b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80113b4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	fa2f f283 	sxtb16	r2, r3
 80113be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80113c2:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 80113c6:	601a      	str	r2, [r3, #0]
  return(result);
 80113c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80113cc:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 80113d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80113da:	f5a3 7279 	sub.w	r2, r3, #996	; 0x3e4
 80113de:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80113e2:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80113e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80113e8:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	461a      	mov	r2, r3
 80113f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80113f8:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 80113fc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80113fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011402:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	1d1a      	adds	r2, r3, #4
 801140c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011410:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	601a      	str	r2, [r3, #0]
    return (val);
 8011418:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801141c:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 8011420:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8011422:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 8011426:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801142a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801142e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011432:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011434:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011438:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	fa2f f283 	sxtb16	r2, r3
 8011442:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011446:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 801144a:	601a      	str	r2, [r3, #0]
  return(result);
 801144c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011450:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val1 = __SXTB16_RORn(val1, 8);
 801145a:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801145e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011462:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8011466:	601a      	str	r2, [r3, #0]
 8011468:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801146c:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 8011470:	2308      	movs	r3, #8
 8011472:	6013      	str	r3, [r2, #0]
 8011474:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011478:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 801147c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011480:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	6013      	str	r3, [r2, #0]
 8011488:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801148c:	f5a3 7273 	sub.w	r2, r3, #972	; 0x3cc
 8011490:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011494:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801149c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80114a0:	f5a3 7273 	sub.w	r2, r3, #972	; 0x3cc
 80114a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80114a8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	f003 031f 	and.w	r3, r3, #31
 80114b2:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80114b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80114b8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d105      	bne.n	80114ce <arm_nn_mat_mult_nt_t_s8+0xb96>
    return op1;
 80114c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80114c6:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80114ca:	681a      	ldr	r2, [r3, #0]
 80114cc:	e00a      	b.n	80114e4 <arm_nn_mat_mult_nt_t_s8+0xbac>
  return (op1 >> op2) | (op1 << (32U - op2));
 80114ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80114d2:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 80114d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80114da:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80114de:	6812      	ldr	r2, [r2, #0]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	41da      	rors	r2, r3
 80114e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80114e8:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80114ec:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80114ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80114f2:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	fa2f f283 	sxtb16	r2, r3
 80114fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011500:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8011504:	601a      	str	r2, [r3, #0]
  return(result);
 8011506:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801150a:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 801150e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8011510:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011514:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8011518:	601a      	str	r2, [r3, #0]
  return result;
 801151a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801151e:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 8011528:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801152c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011530:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011534:	601a      	str	r2, [r3, #0]
 8011536:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801153a:	f5a3 726a 	sub.w	r2, r3, #936	; 0x3a8
 801153e:	2308      	movs	r3, #8
 8011540:	6013      	str	r3, [r2, #0]
 8011542:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011546:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 801154a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801154e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	6013      	str	r3, [r2, #0]
 8011556:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801155a:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 801155e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011562:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801156a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801156e:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 8011572:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011576:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	f003 031f 	and.w	r3, r3, #31
 8011580:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8011582:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011586:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d105      	bne.n	801159c <arm_nn_mat_mult_nt_t_s8+0xc64>
    return op1;
 8011590:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011594:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8011598:	681a      	ldr	r2, [r3, #0]
 801159a:	e00a      	b.n	80115b2 <arm_nn_mat_mult_nt_t_s8+0xc7a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801159c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80115a0:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 80115a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80115a8:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80115ac:	6812      	ldr	r2, [r2, #0]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	41da      	rors	r2, r3
 80115b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80115b6:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80115ba:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80115bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80115c0:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	fa2f f283 	sxtb16	r2, r3
 80115ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80115ce:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 80115d2:	601a      	str	r2, [r3, #0]
  return(result);
 80115d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80115d8:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 80115dc:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80115de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80115e2:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80115e6:	601a      	str	r2, [r3, #0]
  return result;
 80115e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80115ec:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 80115f6:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 80115fa:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 80115fe:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 8011602:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011606:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 801160a:	601a      	str	r2, [r3, #0]
 801160c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011610:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8011614:	6019      	str	r1, [r3, #0]
 8011616:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801161a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801161e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011620:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011624:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 8011628:	6819      	ldr	r1, [r3, #0]
 801162a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801162e:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8011632:	681a      	ldr	r2, [r3, #0]
 8011634:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011638:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	fb21 3202 	smlad	r2, r1, r2, r3
 8011642:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011646:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 801164a:	601a      	str	r2, [r3, #0]
  return(result);
 801164c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011650:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 801165a:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801165e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011662:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8011666:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011668:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801166c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	fa2f f283 	sxtb16	r2, r3
 8011676:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801167a:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 801167e:	601a      	str	r2, [r3, #0]
  return(result);
 8011680:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011684:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 801168e:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8011692:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 8011696:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801169a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801169e:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80116a2:	601a      	str	r2, [r3, #0]
 80116a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80116a8:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80116ac:	6019      	str	r1, [r3, #0]
 80116ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80116b2:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80116b6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80116b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80116bc:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80116c0:	6819      	ldr	r1, [r3, #0]
 80116c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80116c6:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80116ca:	681a      	ldr	r2, [r3, #0]
 80116cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80116d0:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	fb21 3202 	smlad	r2, r1, r2, r3
 80116da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80116de:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80116e2:	601a      	str	r2, [r3, #0]
  return(result);
 80116e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80116e8:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 80116f2:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 80116f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80116fa:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80116fe:	601a      	str	r2, [r3, #0]
 8011700:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011704:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 8011708:	2308      	movs	r3, #8
 801170a:	6013      	str	r3, [r2, #0]
 801170c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011710:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8011714:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011718:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	6013      	str	r3, [r2, #0]
 8011720:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011724:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8011728:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801172c:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8011734:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011738:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 801173c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011740:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	f003 031f 	and.w	r3, r3, #31
 801174a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801174c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011750:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d105      	bne.n	8011766 <arm_nn_mat_mult_nt_t_s8+0xe2e>
    return op1;
 801175a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801175e:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8011762:	681a      	ldr	r2, [r3, #0]
 8011764:	e00a      	b.n	801177c <arm_nn_mat_mult_nt_t_s8+0xe44>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011766:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801176a:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 801176e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011772:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8011776:	6812      	ldr	r2, [r2, #0]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	41da      	rors	r2, r3
 801177c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011780:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8011784:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011786:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801178a:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	fa2f f283 	sxtb16	r2, r3
 8011794:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011798:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 801179c:	601a      	str	r2, [r3, #0]
  return(result);
 801179e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80117a2:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 80117a6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80117a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80117ac:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80117b0:	601a      	str	r2, [r3, #0]
  return result;
 80117b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80117b6:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 80117c0:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 80117c4:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 80117c8:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 80117cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80117d0:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80117d4:	601a      	str	r2, [r3, #0]
 80117d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80117da:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80117de:	6019      	str	r1, [r3, #0]
 80117e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80117e4:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80117e8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80117ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80117ee:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80117f2:	6819      	ldr	r1, [r3, #0]
 80117f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80117f8:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80117fc:	681a      	ldr	r2, [r3, #0]
 80117fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011802:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	fb21 3202 	smlad	r2, r1, r2, r3
 801180c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011810:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8011814:	601a      	str	r2, [r3, #0]
  return(result);
 8011816:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801181a:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 8011824:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8011828:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 801182c:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 8011830:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011834:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8011838:	601a      	str	r2, [r3, #0]
 801183a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801183e:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8011842:	6019      	str	r1, [r3, #0]
 8011844:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011848:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 801184c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801184e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011852:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8011856:	6819      	ldr	r1, [r3, #0]
 8011858:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801185c:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8011860:	681a      	ldr	r2, [r3, #0]
 8011862:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011866:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	fb21 3202 	smlad	r2, r1, r2, r3
 8011870:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011874:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8011878:	601a      	str	r2, [r3, #0]
  return(result);
 801187a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801187e:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 8011888:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801188c:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8011896:	441a      	add	r2, r3
 8011898:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801189c:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80118a0:	601a      	str	r2, [r3, #0]
 80118a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80118a6:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80118b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80118b4:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 80118b8:	601a      	str	r2, [r3, #0]
    return (val);
 80118ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80118be:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 80118c8:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80118cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80118d0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80118d4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80118d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80118da:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	fa2f f283 	sxtb16	r2, r3
 80118e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80118e8:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80118ec:	601a      	str	r2, [r3, #0]
  return(result);
 80118ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80118f2:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 80118fc:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8011900:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011904:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8011908:	601a      	str	r2, [r3, #0]
 801190a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801190e:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8011912:	2308      	movs	r3, #8
 8011914:	6013      	str	r3, [r2, #0]
 8011916:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801191a:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 801191e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011922:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	6013      	str	r3, [r2, #0]
 801192a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801192e:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8011932:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011936:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801193e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011942:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8011946:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801194a:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	f003 031f 	and.w	r3, r3, #31
 8011954:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8011956:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801195a:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d105      	bne.n	8011970 <arm_nn_mat_mult_nt_t_s8+0x1038>
    return op1;
 8011964:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011968:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 801196c:	681a      	ldr	r2, [r3, #0]
 801196e:	e00a      	b.n	8011986 <arm_nn_mat_mult_nt_t_s8+0x104e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011970:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011974:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 8011978:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801197c:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8011980:	6812      	ldr	r2, [r2, #0]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	41da      	rors	r2, r3
 8011986:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801198a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 801198e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011990:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011994:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	fa2f f283 	sxtb16	r2, r3
 801199e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80119a2:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80119a6:	601a      	str	r2, [r3, #0]
  return(result);
 80119a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80119ac:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80119b0:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80119b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80119b6:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80119ba:	601a      	str	r2, [r3, #0]
  return result;
 80119bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80119c0:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 80119ca:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 80119ce:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 80119d2:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 80119d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80119da:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80119de:	601a      	str	r2, [r3, #0]
 80119e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80119e4:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80119e8:	6019      	str	r1, [r3, #0]
 80119ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80119ee:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80119f2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80119f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80119f8:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80119fc:	6819      	ldr	r1, [r3, #0]
 80119fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011a02:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8011a06:	681a      	ldr	r2, [r3, #0]
 8011a08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011a0c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	fb21 3202 	smlad	r2, r1, r2, r3
 8011a16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011a1a:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011a1e:	601a      	str	r2, [r3, #0]
  return(result);
 8011a20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011a24:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 8011a2e:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8011a32:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 8011a36:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 8011a3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011a3e:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8011a42:	601a      	str	r2, [r3, #0]
 8011a44:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011a48:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8011a4c:	6019      	str	r1, [r3, #0]
 8011a4e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011a52:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8011a56:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011a58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011a5c:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8011a60:	6819      	ldr	r1, [r3, #0]
 8011a62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011a66:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8011a6a:	681a      	ldr	r2, [r3, #0]
 8011a6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011a70:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	fb21 3202 	smlad	r2, r1, r2, r3
 8011a7a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011a7e:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8011a82:	601a      	str	r2, [r3, #0]
  return(result);
 8011a84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011a88:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 8011a92:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8011a96:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 8011a9a:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 8011a9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011aa2:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8011aa6:	601a      	str	r2, [r3, #0]
 8011aa8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011aac:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8011ab0:	6019      	str	r1, [r3, #0]
 8011ab2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011ab6:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8011aba:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011abc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011ac0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8011ac4:	6819      	ldr	r1, [r3, #0]
 8011ac6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011aca:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8011ace:	681a      	ldr	r2, [r3, #0]
 8011ad0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011ad4:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	fb21 3202 	smlad	r2, r1, r2, r3
 8011ade:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011ae2:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8011ae6:	601a      	str	r2, [r3, #0]
  return(result);
 8011ae8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011aec:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 8011af6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011afa:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8011afe:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8011b02:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8011b04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011b08:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	461a      	mov	r2, r3
 8011b14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011b18:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8011b1c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8011b1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011b22:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	1d1a      	adds	r2, r3, #4
 8011b2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011b30:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	601a      	str	r2, [r3, #0]
    return (val);
 8011b38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011b3c:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8011b40:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8011b42:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                res11 = __SMLAD(val0, val4, res11);
 8011b46:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8011b4a:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 8011b4e:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 8011b52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011b56:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8011b5a:	601a      	str	r2, [r3, #0]
 8011b5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011b60:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8011b64:	6019      	str	r1, [r3, #0]
 8011b66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011b6a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8011b6e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011b70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011b74:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8011b78:	6819      	ldr	r1, [r3, #0]
 8011b7a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011b7e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8011b82:	681a      	ldr	r2, [r3, #0]
 8011b84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011b88:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	fb21 3202 	smlad	r2, r1, r2, r3
 8011b92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011b96:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8011b9a:	601a      	str	r2, [r3, #0]
  return(result);
 8011b9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011ba0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8011baa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011bae:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 8011bb2:	681a      	ldr	r2, [r3, #0]
 8011bb4:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8011bb8:	441a      	add	r2, r3
 8011bba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011bbe:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8011bc2:	601a      	str	r2, [r3, #0]
 8011bc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011bc8:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8011bd2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011bd6:	f6a3 1398 	subw	r3, r3, #2456	; 0x998
 8011bda:	601a      	str	r2, [r3, #0]
    return (val);
 8011bdc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011be0:	f6a3 1398 	subw	r3, r3, #2456	; 0x998
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val2 = __SXTB16(val1);
 8011bea:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8011bee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011bf2:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8011bf6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011bf8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011bfc:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	fa2f f283 	sxtb16	r2, r3
 8011c06:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011c0a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8011c0e:	601a      	str	r2, [r3, #0]
  return(result);
 8011c10:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011c14:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 8011c1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011c22:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8011c26:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8011c2a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8011c2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011c30:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	461a      	mov	r2, r3
 8011c3c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011c40:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 8011c44:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8011c46:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011c4a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	1d1a      	adds	r2, r3, #4
 8011c54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011c58:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	601a      	str	r2, [r3, #0]
    return (val);
 8011c60:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011c64:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 8011c68:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8011c6a:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 8011c6e:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8011c72:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011c76:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8011c7a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011c7c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011c80:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	fa2f f283 	sxtb16	r2, r3
 8011c8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011c8e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8011c92:	601a      	str	r2, [r3, #0]
  return(result);
 8011c94:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011c98:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val1 = __SXTB16_RORn(val1, 8);
 8011ca2:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8011ca6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011caa:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011cae:	601a      	str	r2, [r3, #0]
 8011cb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011cb4:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8011cb8:	2308      	movs	r3, #8
 8011cba:	6013      	str	r3, [r2, #0]
 8011cbc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011cc0:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8011cc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011cc8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	6013      	str	r3, [r2, #0]
 8011cd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011cd4:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8011cd8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011cdc:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8011ce4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011ce8:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8011cec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011cf0:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	f003 031f 	and.w	r3, r3, #31
 8011cfa:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8011cfc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011d00:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d105      	bne.n	8011d16 <arm_nn_mat_mult_nt_t_s8+0x13de>
    return op1;
 8011d0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011d0e:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8011d12:	681a      	ldr	r2, [r3, #0]
 8011d14:	e00a      	b.n	8011d2c <arm_nn_mat_mult_nt_t_s8+0x13f4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011d16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011d1a:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8011d1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011d22:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8011d26:	6812      	ldr	r2, [r2, #0]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	41da      	rors	r2, r3
 8011d2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011d30:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8011d34:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011d36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011d3a:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	fa2f f283 	sxtb16	r2, r3
 8011d44:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011d48:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8011d4c:	601a      	str	r2, [r3, #0]
  return(result);
 8011d4e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011d52:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8011d56:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8011d58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011d5c:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8011d60:	601a      	str	r2, [r3, #0]
  return result;
 8011d62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011d66:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 8011d70:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8011d74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011d78:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8011d7c:	601a      	str	r2, [r3, #0]
 8011d7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011d82:	f5a3 7222 	sub.w	r2, r3, #648	; 0x288
 8011d86:	2308      	movs	r3, #8
 8011d88:	6013      	str	r3, [r2, #0]
 8011d8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011d8e:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 8011d92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011d96:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	6013      	str	r3, [r2, #0]
 8011d9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011da2:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8011da6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011daa:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8011db2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011db6:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8011dba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011dbe:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	f003 031f 	and.w	r3, r3, #31
 8011dc8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8011dca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011dce:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d105      	bne.n	8011de4 <arm_nn_mat_mult_nt_t_s8+0x14ac>
    return op1;
 8011dd8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011ddc:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8011de0:	681a      	ldr	r2, [r3, #0]
 8011de2:	e00a      	b.n	8011dfa <arm_nn_mat_mult_nt_t_s8+0x14c2>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011de4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011de8:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 8011dec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011df0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011df4:	6812      	ldr	r2, [r2, #0]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	41da      	rors	r2, r3
 8011dfa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011dfe:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011e02:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011e04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011e08:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	fa2f f283 	sxtb16	r2, r3
 8011e12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011e16:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8011e1a:	601a      	str	r2, [r3, #0]
  return(result);
 8011e1c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011e20:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8011e24:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8011e26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011e2a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8011e2e:	601a      	str	r2, [r3, #0]
  return result;
 8011e30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011e34:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 8011e3e:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8011e42:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 8011e46:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 8011e4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011e4e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8011e52:	601a      	str	r2, [r3, #0]
 8011e54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011e58:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8011e5c:	6019      	str	r1, [r3, #0]
 8011e5e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011e62:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8011e66:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011e68:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011e6c:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8011e70:	6819      	ldr	r1, [r3, #0]
 8011e72:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011e76:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8011e7a:	681a      	ldr	r2, [r3, #0]
 8011e7c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011e80:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	fb21 3202 	smlad	r2, r1, r2, r3
 8011e8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011e8e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8011e92:	601a      	str	r2, [r3, #0]
  return(result);
 8011e94:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011e98:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 8011ea2:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 8011ea6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011eaa:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8011eae:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011eb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011eb4:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	fa2f f283 	sxtb16	r2, r3
 8011ebe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011ec2:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8011ec6:	601a      	str	r2, [r3, #0]
  return(result);
 8011ec8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011ecc:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 8011ed6:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8011eda:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 8011ede:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 8011ee2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011ee6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8011eea:	601a      	str	r2, [r3, #0]
 8011eec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011ef0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8011ef4:	6019      	str	r1, [r3, #0]
 8011ef6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011efa:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8011efe:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011f00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011f04:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8011f08:	6819      	ldr	r1, [r3, #0]
 8011f0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011f0e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8011f12:	681a      	ldr	r2, [r3, #0]
 8011f14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011f18:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	fb21 3202 	smlad	r2, r1, r2, r3
 8011f22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011f26:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8011f2a:	601a      	str	r2, [r3, #0]
  return(result);
 8011f2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011f30:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 8011f3a:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 8011f3e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011f42:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8011f46:	601a      	str	r2, [r3, #0]
 8011f48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011f4c:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8011f50:	2308      	movs	r3, #8
 8011f52:	6013      	str	r3, [r2, #0]
 8011f54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011f58:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8011f5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011f60:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	6013      	str	r3, [r2, #0]
 8011f68:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011f6c:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8011f70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011f74:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8011f7c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011f80:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8011f84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011f88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	f003 031f 	and.w	r3, r3, #31
 8011f92:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8011f94:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011f98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d105      	bne.n	8011fae <arm_nn_mat_mult_nt_t_s8+0x1676>
    return op1;
 8011fa2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011fa6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8011faa:	681a      	ldr	r2, [r3, #0]
 8011fac:	e00a      	b.n	8011fc4 <arm_nn_mat_mult_nt_t_s8+0x168c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011fae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011fb2:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8011fb6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011fba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8011fbe:	6812      	ldr	r2, [r2, #0]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	41da      	rors	r2, r3
 8011fc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011fc8:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8011fcc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011fce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011fd2:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	fa2f f283 	sxtb16	r2, r3
 8011fdc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011fe0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8011fe4:	601a      	str	r2, [r3, #0]
  return(result);
 8011fe6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011fea:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8011fee:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8011ff0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011ff4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8011ff8:	601a      	str	r2, [r3, #0]
  return result;
 8011ffa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011ffe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 8012008:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801200c:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 8012010:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 8012014:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012018:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801201c:	601a      	str	r2, [r3, #0]
 801201e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012022:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8012026:	6019      	str	r1, [r3, #0]
 8012028:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801202c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8012030:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012032:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012036:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801203a:	6819      	ldr	r1, [r3, #0]
 801203c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012040:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8012044:	681a      	ldr	r2, [r3, #0]
 8012046:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801204a:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	fb21 3202 	smlad	r2, r1, r2, r3
 8012054:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012058:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801205c:	601a      	str	r2, [r3, #0]
  return(result);
 801205e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012062:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 801206c:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8012070:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 8012074:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 8012078:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801207c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012080:	601a      	str	r2, [r3, #0]
 8012082:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012086:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801208a:	6019      	str	r1, [r3, #0]
 801208c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012090:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8012094:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012096:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801209a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801209e:	6819      	ldr	r1, [r3, #0]
 80120a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80120a4:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80120a8:	681a      	ldr	r2, [r3, #0]
 80120aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80120ae:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	fb21 3202 	smlad	r2, r1, r2, r3
 80120b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80120bc:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80120c0:	601a      	str	r2, [r3, #0]
  return(result);
 80120c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80120c6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 80120d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80120d4:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 80120d8:	681a      	ldr	r2, [r3, #0]
 80120da:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 80120de:	441a      	add	r2, r3
 80120e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80120e4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80120e8:	601a      	str	r2, [r3, #0]
 80120ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80120ee:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80120f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80120fc:	f5a3 631a 	sub.w	r3, r3, #2464	; 0x9a0
 8012100:	601a      	str	r2, [r3, #0]
    return (val);
 8012102:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012106:	f5a3 631a 	sub.w	r3, r3, #2464	; 0x9a0
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 8012110:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8012114:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012118:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801211c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801211e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012122:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	fa2f f283 	sxtb16	r2, r3
 801212c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012130:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8012134:	601a      	str	r2, [r3, #0]
  return(result);
 8012136:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801213a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 8012144:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8012148:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801214c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8012150:	601a      	str	r2, [r3, #0]
 8012152:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012156:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 801215a:	2308      	movs	r3, #8
 801215c:	6013      	str	r3, [r2, #0]
 801215e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012162:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8012166:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801216a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	6013      	str	r3, [r2, #0]
 8012172:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012176:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 801217a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801217e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012186:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801218a:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 801218e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012192:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	f003 031f 	and.w	r3, r3, #31
 801219c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801219e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80121a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d105      	bne.n	80121b8 <arm_nn_mat_mult_nt_t_s8+0x1880>
    return op1;
 80121ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80121b0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80121b4:	681a      	ldr	r2, [r3, #0]
 80121b6:	e00a      	b.n	80121ce <arm_nn_mat_mult_nt_t_s8+0x1896>
  return (op1 >> op2) | (op1 << (32U - op2));
 80121b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80121bc:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 80121c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80121c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80121c8:	6812      	ldr	r2, [r2, #0]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	41da      	rors	r2, r3
 80121ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80121d2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80121d6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80121d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80121dc:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	fa2f f283 	sxtb16	r2, r3
 80121e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80121ea:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80121ee:	601a      	str	r2, [r3, #0]
  return(result);
 80121f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80121f4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80121f8:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80121fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80121fe:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012202:	601a      	str	r2, [r3, #0]
  return result;
 8012204:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012208:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 8012212:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8012216:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801221a:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 801221e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012222:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8012226:	601a      	str	r2, [r3, #0]
 8012228:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801222c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8012230:	6019      	str	r1, [r3, #0]
 8012232:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012236:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801223a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801223c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012240:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8012244:	6819      	ldr	r1, [r3, #0]
 8012246:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801224a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801224e:	681a      	ldr	r2, [r3, #0]
 8012250:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012254:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	fb21 3202 	smlad	r2, r1, r2, r3
 801225e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012262:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8012266:	601a      	str	r2, [r3, #0]
  return(result);
 8012268:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801226c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 8012276:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801227a:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801227e:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 8012282:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012286:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801228a:	601a      	str	r2, [r3, #0]
 801228c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012290:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8012294:	6019      	str	r1, [r3, #0]
 8012296:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801229a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801229e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80122a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80122a4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80122a8:	6819      	ldr	r1, [r3, #0]
 80122aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80122ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80122b2:	681a      	ldr	r2, [r3, #0]
 80122b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80122b8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	fb21 3202 	smlad	r2, r1, r2, r3
 80122c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80122c6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80122ca:	601a      	str	r2, [r3, #0]
  return(result);
 80122cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80122d0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 80122da:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80122de:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 80122e2:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 80122e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80122ea:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80122ee:	601a      	str	r2, [r3, #0]
 80122f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80122f4:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80122f8:	6019      	str	r1, [r3, #0]
 80122fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80122fe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8012302:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012304:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012308:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801230c:	6819      	ldr	r1, [r3, #0]
 801230e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012312:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8012316:	681a      	ldr	r2, [r3, #0]
 8012318:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801231c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	fb21 3202 	smlad	r2, r1, r2, r3
 8012326:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801232a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801232e:	601a      	str	r2, [r3, #0]
  return(result);
 8012330:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012334:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 801233e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012342:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8012346:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801234a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801234c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012350:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	461a      	mov	r2, r3
 801235c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012360:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8012364:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012366:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801236a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	1d1a      	adds	r2, r3, #4
 8012374:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012378:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	601a      	str	r2, [r3, #0]
    return (val);
 8012380:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012384:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8012388:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801238a:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                res11 = __SMLAD(val0, val4, res11);
 801238e:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8012392:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 8012396:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 801239a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801239e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80123a2:	601a      	str	r2, [r3, #0]
 80123a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80123a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80123ac:	6019      	str	r1, [r3, #0]
 80123ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80123b2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80123b6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80123b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80123bc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80123c0:	6819      	ldr	r1, [r3, #0]
 80123c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80123c6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80123ca:	681a      	ldr	r2, [r3, #0]
 80123cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80123d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	fb21 3202 	smlad	r2, r1, r2, r3
 80123da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80123de:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80123e2:	601a      	str	r2, [r3, #0]
  return(result);
 80123e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80123e8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 80123f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80123f6:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 80123fa:	681a      	ldr	r2, [r3, #0]
 80123fc:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8012400:	441a      	add	r2, r3
 8012402:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012406:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801240a:	601a      	str	r2, [r3, #0]
 801240c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012410:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801241a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801241e:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 8012422:	601a      	str	r2, [r3, #0]
    return (val);
 8012424:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012428:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val2 = __SXTB16(val1);
 8012432:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8012436:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801243a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801243e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8012440:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012444:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	fa2f f283 	sxtb16	r2, r3
 801244e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012452:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8012456:	601a      	str	r2, [r3, #0]
  return(result);
 8012458:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801245c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 8012466:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801246a:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 801246e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012472:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8012474:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012478:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	461a      	mov	r2, r3
 8012484:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012488:	f6a3 13ac 	subw	r3, r3, #2476	; 0x9ac
 801248c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801248e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012492:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	1d1a      	adds	r2, r3, #4
 801249c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80124a0:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	601a      	str	r2, [r3, #0]
    return (val);
 80124a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80124ac:	f6a3 13ac 	subw	r3, r3, #2476	; 0x9ac
 80124b0:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80124b2:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 80124b6:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80124ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80124be:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80124c2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80124c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80124c8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	fa2f f283 	sxtb16	r2, r3
 80124d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80124d6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80124da:	601a      	str	r2, [r3, #0]
  return(result);
 80124dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80124e0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val1 = __SXTB16_RORn(val1, 8);
 80124ea:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 80124ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80124f2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80124f6:	601a      	str	r2, [r3, #0]
 80124f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80124fc:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8012500:	2308      	movs	r3, #8
 8012502:	6013      	str	r3, [r2, #0]
 8012504:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012508:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 801250c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012510:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	6013      	str	r3, [r2, #0]
 8012518:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801251c:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8012520:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012524:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801252c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012530:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8012534:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012538:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	f003 031f 	and.w	r3, r3, #31
 8012542:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012544:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012548:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d105      	bne.n	801255e <arm_nn_mat_mult_nt_t_s8+0x1c26>
    return op1;
 8012552:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012556:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801255a:	681a      	ldr	r2, [r3, #0]
 801255c:	e00a      	b.n	8012574 <arm_nn_mat_mult_nt_t_s8+0x1c3c>
  return (op1 >> op2) | (op1 << (32U - op2));
 801255e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012562:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8012566:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801256a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801256e:	6812      	ldr	r2, [r2, #0]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	41da      	rors	r2, r3
 8012574:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012578:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801257c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801257e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012582:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	fa2f f283 	sxtb16	r2, r3
 801258c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012590:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8012594:	601a      	str	r2, [r3, #0]
  return(result);
 8012596:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801259a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801259e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80125a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80125a4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80125a8:	601a      	str	r2, [r3, #0]
  return result;
 80125aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80125ae:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 80125b8:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80125bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80125c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80125c4:	601a      	str	r2, [r3, #0]
 80125c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80125ca:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 80125ce:	2308      	movs	r3, #8
 80125d0:	6013      	str	r3, [r2, #0]
 80125d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80125d6:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80125da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80125de:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	6013      	str	r3, [r2, #0]
 80125e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80125ea:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 80125ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80125f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80125fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80125fe:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8012602:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012606:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	f003 031f 	and.w	r3, r3, #31
 8012610:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012612:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012616:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d105      	bne.n	801262c <arm_nn_mat_mult_nt_t_s8+0x1cf4>
    return op1;
 8012620:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012624:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8012628:	681a      	ldr	r2, [r3, #0]
 801262a:	e00a      	b.n	8012642 <arm_nn_mat_mult_nt_t_s8+0x1d0a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801262c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012630:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8012634:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012638:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801263c:	6812      	ldr	r2, [r2, #0]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	41da      	rors	r2, r3
 8012642:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012646:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801264a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801264c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012650:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	fa2f f283 	sxtb16	r2, r3
 801265a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801265e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8012662:	601a      	str	r2, [r3, #0]
  return(result);
 8012664:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012668:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801266c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801266e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012672:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8012676:	601a      	str	r2, [r3, #0]
  return result;
 8012678:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801267c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 8012686:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801268a:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801268e:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 8012692:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012696:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801269a:	601a      	str	r2, [r3, #0]
 801269c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80126a0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80126a4:	6019      	str	r1, [r3, #0]
 80126a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80126aa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80126ae:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80126b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80126b4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80126b8:	6819      	ldr	r1, [r3, #0]
 80126ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80126be:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80126c2:	681a      	ldr	r2, [r3, #0]
 80126c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80126c8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	fb21 3202 	smlad	r2, r1, r2, r3
 80126d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80126d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80126da:	601a      	str	r2, [r3, #0]
  return(result);
 80126dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80126e0:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 80126ea:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 80126ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80126f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80126f6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80126f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80126fc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	fa2f f283 	sxtb16	r2, r3
 8012706:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801270a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801270e:	601a      	str	r2, [r3, #0]
  return(result);
 8012710:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012714:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 801271e:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8012722:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 8012726:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801272a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801272e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8012732:	601a      	str	r2, [r3, #0]
 8012734:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012738:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801273c:	6019      	str	r1, [r3, #0]
 801273e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012742:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8012746:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012748:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801274c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8012750:	6819      	ldr	r1, [r3, #0]
 8012752:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012756:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801275a:	681a      	ldr	r2, [r3, #0]
 801275c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012760:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	fb21 3202 	smlad	r2, r1, r2, r3
 801276a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801276e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8012772:	601a      	str	r2, [r3, #0]
  return(result);
 8012774:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012778:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 8012782:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 8012786:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801278a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801278e:	601a      	str	r2, [r3, #0]
 8012790:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012794:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8012798:	2308      	movs	r3, #8
 801279a:	6013      	str	r3, [r2, #0]
 801279c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80127a0:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 80127a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80127a8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	6013      	str	r3, [r2, #0]
 80127b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80127b4:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 80127b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80127bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80127c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80127c8:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 80127cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80127d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	f003 031f 	and.w	r3, r3, #31
 80127da:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80127dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80127e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d105      	bne.n	80127f6 <arm_nn_mat_mult_nt_t_s8+0x1ebe>
    return op1;
 80127ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80127ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80127f2:	681a      	ldr	r2, [r3, #0]
 80127f4:	e00a      	b.n	801280c <arm_nn_mat_mult_nt_t_s8+0x1ed4>
  return (op1 >> op2) | (op1 << (32U - op2));
 80127f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80127fa:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 80127fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012802:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012806:	6812      	ldr	r2, [r2, #0]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	41da      	rors	r2, r3
 801280c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012810:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8012814:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8012816:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801281a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	fa2f f283 	sxtb16	r2, r3
 8012824:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012828:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801282c:	601a      	str	r2, [r3, #0]
  return(result);
 801282e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012832:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8012836:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8012838:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801283c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8012840:	601a      	str	r2, [r3, #0]
  return result;
 8012842:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012846:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 8012850:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8012854:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 8012858:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801285c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012860:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012864:	601a      	str	r2, [r3, #0]
 8012866:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801286a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801286e:	6019      	str	r1, [r3, #0]
 8012870:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012874:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8012878:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801287a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801287e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012882:	6819      	ldr	r1, [r3, #0]
 8012884:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012888:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801288c:	681a      	ldr	r2, [r3, #0]
 801288e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012892:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	fb21 3202 	smlad	r2, r1, r2, r3
 801289c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80128a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80128a4:	601a      	str	r2, [r3, #0]
  return(result);
 80128a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80128aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 80128b4:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80128b8:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 80128bc:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 80128c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80128c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80128c8:	601a      	str	r2, [r3, #0]
 80128ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80128ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80128d2:	6019      	str	r1, [r3, #0]
 80128d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80128d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128dc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80128de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80128e2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80128e6:	6819      	ldr	r1, [r3, #0]
 80128e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80128ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80128f0:	681a      	ldr	r2, [r3, #0]
 80128f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80128f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	fb21 3202 	smlad	r2, r1, r2, r3
 8012900:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012904:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012908:	601a      	str	r2, [r3, #0]
  return(result);
 801290a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801290e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 8012918:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801291c:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8012920:	681a      	ldr	r2, [r3, #0]
 8012922:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8012926:	4413      	add	r3, r2
 8012928:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
 801292c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8012934:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012938:	f5a3 631b 	sub.w	r3, r3, #2480	; 0x9b0
 801293c:	601a      	str	r2, [r3, #0]
    return (val);
 801293e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012942:	f5a3 631b 	sub.w	r3, r3, #2480	; 0x9b0
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801294c:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 8012950:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8012954:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 8012958:	fa2f f383 	sxtb16	r3, r3
 801295c:	f8c7 39e0 	str.w	r3, [r7, #2528]	; 0x9e0
  return(result);
 8012960:	f8d7 39e0 	ldr.w	r3, [r7, #2528]	; 0x9e0
 8012964:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 8012968:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 801296c:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00
 8012970:	2308      	movs	r3, #8
 8012972:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 8012976:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 801297a:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
 801297e:	f8d7 39fc 	ldr.w	r3, [r7, #2556]	; 0x9fc
 8012982:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
  op2 %= 32U;
 8012986:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 801298a:	f003 031f 	and.w	r3, r3, #31
 801298e:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
  if (op2 == 0U)
 8012992:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8012996:	2b00      	cmp	r3, #0
 8012998:	d102      	bne.n	80129a0 <arm_nn_mat_mult_nt_t_s8+0x2068>
    return op1;
 801299a:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 801299e:	e005      	b.n	80129ac <arm_nn_mat_mult_nt_t_s8+0x2074>
  return (op1 >> op2) | (op1 << (32U - op2));
 80129a0:	f8d7 29f8 	ldr.w	r2, [r7, #2552]	; 0x9f8
 80129a4:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 80129a8:	fa62 f303 	ror.w	r3, r2, r3
 80129ac:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80129b0:	f8d7 39f0 	ldr.w	r3, [r7, #2544]	; 0x9f0
 80129b4:	fa2f f383 	sxtb16	r3, r3
 80129b8:	f8c7 39ec 	str.w	r3, [r7, #2540]	; 0x9ec
  return(result);
 80129bc:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
    result = __SXTB16(__ROR(op1, rotate)) ;
 80129c0:	f8c7 39e8 	str.w	r3, [r7, #2536]	; 0x9e8
  return result;
 80129c4:	f8d7 39e8 	ldr.w	r3, [r7, #2536]	; 0x9e8
 80129c8:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 80129cc:	f8d7 1a4c 	ldr.w	r1, [r7, #2636]	; 0xa4c
 80129d0:	f8d7 2a54 	ldr.w	r2, [r7, #2644]	; 0xa54
 80129d4:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 80129d8:	f8c7 1a10 	str.w	r1, [r7, #2576]	; 0xa10
 80129dc:	f8c7 2a0c 	str.w	r2, [r7, #2572]	; 0xa0c
 80129e0:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80129e4:	f8d7 1a10 	ldr.w	r1, [r7, #2576]	; 0xa10
 80129e8:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 80129ec:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 80129f0:	fb21 3302 	smlad	r3, r1, r2, r3
 80129f4:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
  return(result);
 80129f8:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 80129fc:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 8012a00:	f8d7 1a4c 	ldr.w	r1, [r7, #2636]	; 0xa4c
 8012a04:	f8d7 2a44 	ldr.w	r2, [r7, #2628]	; 0xa44
 8012a08:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8012a0c:	f8c7 1a20 	str.w	r1, [r7, #2592]	; 0xa20
 8012a10:	f8c7 2a1c 	str.w	r2, [r7, #2588]	; 0xa1c
 8012a14:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012a18:	f8d7 1a20 	ldr.w	r1, [r7, #2592]	; 0xa20
 8012a1c:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 8012a20:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 8012a24:	fb21 3302 	smlad	r3, r1, r2, r3
 8012a28:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
  return(result);
 8012a2c:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 8012a30:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 8012a34:	f8d7 1a50 	ldr.w	r1, [r7, #2640]	; 0xa50
 8012a38:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8012a3c:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8012a40:	f8c7 1a30 	str.w	r1, [r7, #2608]	; 0xa30
 8012a44:	f8c7 2a2c 	str.w	r2, [r7, #2604]	; 0xa2c
 8012a48:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012a4c:	f8d7 1a30 	ldr.w	r1, [r7, #2608]	; 0xa30
 8012a50:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 8012a54:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8012a58:	fb21 3302 	smlad	r3, r1, r2, r3
 8012a5c:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
  return(result);
 8012a60:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 8012a64:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val0, val4, res11);
 8012a68:	f8d7 1a50 	ldr.w	r1, [r7, #2640]	; 0xa50
 8012a6c:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 8012a70:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8012a74:	f8c7 1a40 	str.w	r1, [r7, #2624]	; 0xa40
 8012a78:	f8c7 2a3c 	str.w	r2, [r7, #2620]	; 0xa3c
 8012a7c:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012a80:	f8d7 1a40 	ldr.w	r1, [r7, #2624]	; 0xa40
 8012a84:	f8d7 2a3c 	ldr.w	r2, [r7, #2620]	; 0xa3c
 8012a88:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 8012a8c:	fb21 3302 	smlad	r3, r1, r2, r3
 8012a90:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
  return(result);
 8012a94:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 8012a98:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8012a9c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8012aa0:	3310      	adds	r3, #16
 8012aa2:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
 8012aa6:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8012aaa:	f1a3 020f 	sub.w	r2, r3, #15
 8012aae:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8012ab2:	4293      	cmp	r3, r2
 8012ab4:	f6fe a809 	blt.w	8010aca <arm_nn_mat_mult_nt_t_s8+0x192>
            }

            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8012ab8:	e06c      	b.n	8012b94 <arm_nn_mat_mult_nt_t_s8+0x225c>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 8012aba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012abe:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	781b      	ldrb	r3, [r3, #0]
 8012ac6:	f887 3a5f 	strb.w	r3, [r7, #2655]	; 0xa5f
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 8012aca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012ace:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 8012ad2:	681a      	ldr	r2, [r3, #0]
 8012ad4:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8012ad8:	4413      	add	r3, r2
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	f887 3a5e 	strb.w	r3, [r7, #2654]	; 0xa5e
                q7_t lhs_value = lhs_ptr[0];
 8012ae0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012ae4:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	781b      	ldrb	r3, [r3, #0]
 8012aec:	f887 3a5d 	strb.w	r3, [r7, #2653]	; 0xa5d

                res00 += lhs_value * rhs_value0;
 8012af0:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 8012af4:	f997 3a5f 	ldrsb.w	r3, [r7, #2655]	; 0xa5f
 8012af8:	fb03 f202 	mul.w	r2, r3, r2
 8012afc:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 8012b00:	4413      	add	r3, r2
 8012b02:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                res01 += lhs_value * rhs_value1;
 8012b06:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 8012b0a:	f997 3a5e 	ldrsb.w	r3, [r7, #2654]	; 0xa5e
 8012b0e:	fb03 f202 	mul.w	r2, r3, r2
 8012b12:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 8012b16:	4413      	add	r3, r2
 8012b18:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                lhs_value = lhs_ptr[rhs_cols];
 8012b1c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012b20:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8012b24:	681a      	ldr	r2, [r3, #0]
 8012b26:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8012b2a:	4413      	add	r3, r2
 8012b2c:	781b      	ldrb	r3, [r3, #0]
 8012b2e:	f887 3a5d 	strb.w	r3, [r7, #2653]	; 0xa5d
                res10 += lhs_value * rhs_value0;
 8012b32:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 8012b36:	f997 3a5f 	ldrsb.w	r3, [r7, #2655]	; 0xa5f
 8012b3a:	fb03 f202 	mul.w	r2, r3, r2
 8012b3e:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8012b42:	4413      	add	r3, r2
 8012b44:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 += lhs_value * rhs_value1;
 8012b48:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 8012b4c:	f997 3a5e 	ldrsb.w	r3, [r7, #2654]	; 0xa5e
 8012b50:	fb03 f202 	mul.w	r2, r3, r2
 8012b54:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8012b58:	4413      	add	r3, r2
 8012b5a:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                ++rhs_ptr;
 8012b5e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012b62:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	1c5a      	adds	r2, r3, #1
 8012b6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012b6e:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 8012b72:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 8012b74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012b78:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	1c5a      	adds	r2, r3, #1
 8012b80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012b84:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8012b88:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8012b8a:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8012b8e:	3301      	adds	r3, #1
 8012b90:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
 8012b94:	f8d7 2aac 	ldr.w	r2, [r7, #2732]	; 0xaac
 8012b98:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8012b9c:	429a      	cmp	r2, r3
 8012b9e:	db8c      	blt.n	8012aba <arm_nn_mat_mult_nt_t_s8+0x2182>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 8012ba0:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8012ba4:	009a      	lsls	r2, r3, #2
 8012ba6:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8012baa:	4413      	add	r3, r2
 8012bac:	6818      	ldr	r0, [r3, #0]
 8012bae:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8012bb2:	009a      	lsls	r2, r3, #2
 8012bb4:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8012bb8:	4413      	add	r3, r2
 8012bba:	6819      	ldr	r1, [r3, #0]
 8012bbc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012bc0:	f5a3 62b5 	sub.w	r2, r3, #1448	; 0x5a8
 8012bc4:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 8012bc8:	6013      	str	r3, [r2, #0]
 8012bca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012bce:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8012bd2:	6018      	str	r0, [r3, #0]
 8012bd4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012bd8:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8012bdc:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8012bde:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012be2:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8012bec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012bf0:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	fa03 f202 	lsl.w	r2, r3, r2
 8012bfa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012bfe:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8012c02:	601a      	str	r2, [r3, #0]
 8012c04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012c08:	f5a3 62b7 	sub.w	r2, r3, #1464	; 0x5b8
 8012c0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012c10:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012c18:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012c1c:	f2a3 52bc 	subw	r2, r3, #1468	; 0x5bc
 8012c20:	2300      	movs	r3, #0
 8012c22:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8012c24:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8012c28:	461a      	mov	r2, r3
 8012c2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012c2e:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8012c32:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8012c36:	461a      	mov	r2, r3
 8012c38:	2300      	movs	r3, #0
 8012c3a:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8012c3e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8012c42:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012c46:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012c4a:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	17da      	asrs	r2, r3, #31
 8012c52:	673b      	str	r3, [r7, #112]	; 0x70
 8012c54:	677a      	str	r2, [r7, #116]	; 0x74
 8012c56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012c5a:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	17da      	asrs	r2, r3, #31
 8012c62:	66bb      	str	r3, [r7, #104]	; 0x68
 8012c64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012c68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012c6a:	fb02 f203 	mul.w	r2, r2, r3
 8012c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c70:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8012c72:	fb04 f303 	mul.w	r3, r4, r3
 8012c76:	4413      	add	r3, r2
 8012c78:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012c7a:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8012c7c:	fba2 4204 	umull	r4, r2, r2, r4
 8012c80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8012c84:	4622      	mov	r2, r4
 8012c86:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8012c8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8012c8e:	4413      	add	r3, r2
 8012c90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012c94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012c98:	18c3      	adds	r3, r0, r3
 8012c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8012c9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012ca0:	eb41 0303 	adc.w	r3, r1, r3
 8012ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012ca6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8012caa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8012cae:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 8012cb2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8012cb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012cba:	f04f 0000 	mov.w	r0, #0
 8012cbe:	f04f 0100 	mov.w	r1, #0
 8012cc2:	0fd0      	lsrs	r0, r2, #31
 8012cc4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012cc8:	17d9      	asrs	r1, r3, #31
 8012cca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012cce:	f2a3 52bc 	subw	r2, r3, #1468	; 0x5bc
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	6013      	str	r3, [r2, #0]
    return result;
 8012cd6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012cda:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8012cde:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8012ce0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012ce4:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	dc06      	bgt.n	8012cfc <arm_nn_mat_mult_nt_t_s8+0x23c4>
 8012cee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012cf2:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	425a      	negs	r2, r3
 8012cfa:	e000      	b.n	8012cfe <arm_nn_mat_mult_nt_t_s8+0x23c6>
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012d02:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8012d06:	6019      	str	r1, [r3, #0]
 8012d08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012d0c:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8012d10:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8012d12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012d16:	f5a3 62b9 	sub.w	r2, r3, #1480	; 0x5c8
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8012d1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012d22:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8012d26:	2201      	movs	r2, #1
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	fa02 f103 	lsl.w	r1, r2, r3
 8012d2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012d32:	f2a3 52cc 	subw	r2, r3, #1484	; 0x5cc
 8012d36:	1e4b      	subs	r3, r1, #1
 8012d38:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8012d3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012d3e:	f5a3 61ba 	sub.w	r1, r3, #1488	; 0x5d0
 8012d42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012d46:	f5a3 62b8 	sub.w	r2, r3, #1472	; 0x5c0
 8012d4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012d4e:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8012d52:	6812      	ldr	r2, [r2, #0]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	4013      	ands	r3, r2
 8012d58:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8012d5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012d5e:	f5a3 61b9 	sub.w	r1, r3, #1480	; 0x5c8
 8012d62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012d66:	f5a3 62b8 	sub.w	r2, r3, #1472	; 0x5c0
 8012d6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012d6e:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8012d72:	6812      	ldr	r2, [r2, #0]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	fa42 f303 	asr.w	r3, r2, r3
 8012d7a:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8012d7c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012d80:	f2a3 52d4 	subw	r2, r3, #1492	; 0x5d4
 8012d84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012d88:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	105b      	asrs	r3, r3, #1
 8012d90:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8012d92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012d96:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	da0a      	bge.n	8012db6 <arm_nn_mat_mult_nt_t_s8+0x247e>
        threshold++;
 8012da0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012da4:	f2a3 52d4 	subw	r2, r3, #1492	; 0x5d4
 8012da8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012dac:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	3301      	adds	r3, #1
 8012db4:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8012db6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012dba:	f5a3 62ba 	sub.w	r2, r3, #1488	; 0x5d0
 8012dbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012dc2:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8012dc6:	6812      	ldr	r2, [r2, #0]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	429a      	cmp	r2, r3
 8012dcc:	dd0a      	ble.n	8012de4 <arm_nn_mat_mult_nt_t_s8+0x24ac>
        result++;
 8012dce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012dd2:	f5a3 62b9 	sub.w	r2, r3, #1480	; 0x5c8
 8012dd6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012dda:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	3301      	adds	r3, #1
 8012de2:	6013      	str	r3, [r2, #0]
    return result;
 8012de4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012de8:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8012dec:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8012dee:	bf00      	nop
 8012df0:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 8012df4:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8012df8:	3301      	adds	r3, #1
 8012dfa:	009a      	lsls	r2, r3, #2
 8012dfc:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8012e00:	4413      	add	r3, r2
 8012e02:	6818      	ldr	r0, [r3, #0]
 8012e04:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8012e08:	3301      	adds	r3, #1
 8012e0a:	009a      	lsls	r2, r3, #2
 8012e0c:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8012e10:	4413      	add	r3, r2
 8012e12:	6819      	ldr	r1, [r3, #0]
 8012e14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012e18:	f5a3 62af 	sub.w	r2, r3, #1400	; 0x578
 8012e1c:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 8012e20:	6013      	str	r3, [r2, #0]
 8012e22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012e26:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012e2a:	6018      	str	r0, [r3, #0]
 8012e2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012e30:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012e34:	6019      	str	r1, [r3, #0]
 8012e36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012e3a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8012e44:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012e48:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	fa03 f202 	lsl.w	r2, r3, r2
 8012e52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012e56:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 8012e5a:	601a      	str	r2, [r3, #0]
 8012e5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012e60:	f5a3 62b1 	sub.w	r2, r3, #1416	; 0x588
 8012e64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012e68:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012e70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012e74:	f2a3 528c 	subw	r2, r3, #1420	; 0x58c
 8012e78:	2300      	movs	r3, #0
 8012e7a:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8012e7c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8012e80:	461a      	mov	r2, r3
 8012e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012e86:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8012e88:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8012e8c:	461a      	mov	r2, r3
 8012e8e:	2300      	movs	r3, #0
 8012e90:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8012e92:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8012e96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012e9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012e9e:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	17da      	asrs	r2, r3, #31
 8012ea6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012eaa:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8012eae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012eb2:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	17da      	asrs	r2, r3, #31
 8012eba:	67bb      	str	r3, [r7, #120]	; 0x78
 8012ebc:	67fa      	str	r2, [r7, #124]	; 0x7c
 8012ebe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012ec2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012ec4:	fb02 f203 	mul.w	r2, r2, r3
 8012ec8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012eca:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8012ece:	fb04 f303 	mul.w	r3, r4, r3
 8012ed2:	4413      	add	r3, r2
 8012ed4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012ed8:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8012eda:	fba2 4204 	umull	r4, r2, r2, r4
 8012ede:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8012ee2:	4622      	mov	r2, r4
 8012ee4:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8012ee8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012eec:	4413      	add	r3, r2
 8012eee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012ef2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012ef6:	18c3      	adds	r3, r0, r3
 8012ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8012efa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012efe:	eb41 0303 	adc.w	r3, r1, r3
 8012f02:	637b      	str	r3, [r7, #52]	; 0x34
 8012f04:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8012f08:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8012f0c:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8012f10:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8012f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f18:	f04f 0000 	mov.w	r0, #0
 8012f1c:	f04f 0100 	mov.w	r1, #0
 8012f20:	0fd0      	lsrs	r0, r2, #31
 8012f22:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012f26:	17d9      	asrs	r1, r3, #31
 8012f28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012f2c:	f2a3 528c 	subw	r2, r3, #1420	; 0x58c
 8012f30:	4603      	mov	r3, r0
 8012f32:	6013      	str	r3, [r2, #0]
    return result;
 8012f34:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012f38:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 8012f3c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8012f3e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012f42:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	dc06      	bgt.n	8012f5a <arm_nn_mat_mult_nt_t_s8+0x2622>
 8012f4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012f50:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	425a      	negs	r2, r3
 8012f58:	e000      	b.n	8012f5c <arm_nn_mat_mult_nt_t_s8+0x2624>
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012f60:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8012f64:	6019      	str	r1, [r3, #0]
 8012f66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012f6a:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 8012f6e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8012f70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012f74:	f5a3 62b3 	sub.w	r2, r3, #1432	; 0x598
 8012f78:	2300      	movs	r3, #0
 8012f7a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8012f7c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012f80:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 8012f84:	2201      	movs	r2, #1
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	fa02 f103 	lsl.w	r1, r2, r3
 8012f8c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012f90:	f2a3 529c 	subw	r2, r3, #1436	; 0x59c
 8012f94:	1e4b      	subs	r3, r1, #1
 8012f96:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8012f98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012f9c:	f5a3 61b4 	sub.w	r1, r3, #1440	; 0x5a0
 8012fa0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012fa4:	f5a3 62b2 	sub.w	r2, r3, #1424	; 0x590
 8012fa8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012fac:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 8012fb0:	6812      	ldr	r2, [r2, #0]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	4013      	ands	r3, r2
 8012fb6:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8012fb8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012fbc:	f5a3 61b3 	sub.w	r1, r3, #1432	; 0x598
 8012fc0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012fc4:	f5a3 62b2 	sub.w	r2, r3, #1424	; 0x590
 8012fc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012fcc:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 8012fd0:	6812      	ldr	r2, [r2, #0]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	fa42 f303 	asr.w	r3, r2, r3
 8012fd8:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8012fda:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012fde:	f2a3 52a4 	subw	r2, r3, #1444	; 0x5a4
 8012fe2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012fe6:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	105b      	asrs	r3, r3, #1
 8012fee:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8012ff0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012ff4:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	da0a      	bge.n	8013014 <arm_nn_mat_mult_nt_t_s8+0x26dc>
        threshold++;
 8012ffe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013002:	f2a3 52a4 	subw	r2, r3, #1444	; 0x5a4
 8013006:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801300a:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	3301      	adds	r3, #1
 8013012:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8013014:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013018:	f5a3 62b4 	sub.w	r2, r3, #1440	; 0x5a0
 801301c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013020:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8013024:	6812      	ldr	r2, [r2, #0]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	429a      	cmp	r2, r3
 801302a:	dd0a      	ble.n	8013042 <arm_nn_mat_mult_nt_t_s8+0x270a>
        result++;
 801302c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013030:	f5a3 62b3 	sub.w	r2, r3, #1432	; 0x598
 8013034:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013038:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	3301      	adds	r3, #1
 8013040:	6013      	str	r3, [r2, #0]
    return result;
 8013042:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013046:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801304a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801304c:	bf00      	nop
 801304e:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 8013052:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8013056:	009a      	lsls	r2, r3, #2
 8013058:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801305c:	4413      	add	r3, r2
 801305e:	6818      	ldr	r0, [r3, #0]
 8013060:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8013064:	009a      	lsls	r2, r3, #2
 8013066:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801306a:	4413      	add	r3, r2
 801306c:	6819      	ldr	r1, [r3, #0]
 801306e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013072:	f5a3 62a9 	sub.w	r2, r3, #1352	; 0x548
 8013076:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 801307a:	6013      	str	r3, [r2, #0]
 801307c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013080:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 8013084:	6018      	str	r0, [r3, #0]
 8013086:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801308a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801308e:	6019      	str	r1, [r3, #0]
 8013090:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013094:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801309e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80130a2:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	fa03 f202 	lsl.w	r2, r3, r2
 80130ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80130b0:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 80130b4:	601a      	str	r2, [r3, #0]
 80130b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80130ba:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 80130be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80130c2:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80130ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80130ce:	f2a3 525c 	subw	r2, r3, #1372	; 0x55c
 80130d2:	2300      	movs	r3, #0
 80130d4:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80130d6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80130da:	461a      	mov	r2, r3
 80130dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80130e0:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 80130e4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80130e8:	461a      	mov	r2, r3
 80130ea:	2300      	movs	r3, #0
 80130ec:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80130f0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80130f4:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80130f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80130fc:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	17da      	asrs	r2, r3, #31
 8013104:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013108:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801310c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013110:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	17da      	asrs	r2, r3, #31
 8013118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801311c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013120:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013124:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013128:	fb02 f203 	mul.w	r2, r2, r3
 801312c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013130:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8013134:	fb04 f303 	mul.w	r3, r4, r3
 8013138:	4413      	add	r3, r2
 801313a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801313e:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8013142:	fba2 5604 	umull	r5, r6, r2, r4
 8013146:	4433      	add	r3, r6
 8013148:	461e      	mov	r6, r3
 801314a:	1943      	adds	r3, r0, r5
 801314c:	63bb      	str	r3, [r7, #56]	; 0x38
 801314e:	eb41 0306 	adc.w	r3, r1, r6
 8013152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013154:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013158:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801315c:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 8013160:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013164:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013168:	f04f 0000 	mov.w	r0, #0
 801316c:	f04f 0100 	mov.w	r1, #0
 8013170:	0fd0      	lsrs	r0, r2, #31
 8013172:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013176:	17d9      	asrs	r1, r3, #31
 8013178:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801317c:	f2a3 525c 	subw	r2, r3, #1372	; 0x55c
 8013180:	4603      	mov	r3, r0
 8013182:	6013      	str	r3, [r2, #0]
    return result;
 8013184:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013188:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 801318c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801318e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013192:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	2b00      	cmp	r3, #0
 801319a:	dc06      	bgt.n	80131aa <arm_nn_mat_mult_nt_t_s8+0x2872>
 801319c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80131a0:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	425a      	negs	r2, r3
 80131a8:	e000      	b.n	80131ac <arm_nn_mat_mult_nt_t_s8+0x2874>
 80131aa:	2200      	movs	r2, #0
 80131ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80131b0:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 80131b4:	6019      	str	r1, [r3, #0]
 80131b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80131ba:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80131be:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80131c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80131c4:	f5a3 62ad 	sub.w	r2, r3, #1384	; 0x568
 80131c8:	2300      	movs	r3, #0
 80131ca:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80131cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80131d0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80131d4:	2201      	movs	r2, #1
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	fa02 f103 	lsl.w	r1, r2, r3
 80131dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80131e0:	f2a3 526c 	subw	r2, r3, #1388	; 0x56c
 80131e4:	1e4b      	subs	r3, r1, #1
 80131e6:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80131e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80131ec:	f5a3 61ae 	sub.w	r1, r3, #1392	; 0x570
 80131f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80131f4:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 80131f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80131fc:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 8013200:	6812      	ldr	r2, [r2, #0]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	4013      	ands	r3, r2
 8013206:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8013208:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801320c:	f5a3 61ad 	sub.w	r1, r3, #1384	; 0x568
 8013210:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013214:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 8013218:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801321c:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8013220:	6812      	ldr	r2, [r2, #0]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	fa42 f303 	asr.w	r3, r2, r3
 8013228:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801322a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801322e:	f2a3 5274 	subw	r2, r3, #1396	; 0x574
 8013232:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013236:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	105b      	asrs	r3, r3, #1
 801323e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8013240:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013244:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	2b00      	cmp	r3, #0
 801324c:	da0a      	bge.n	8013264 <arm_nn_mat_mult_nt_t_s8+0x292c>
        threshold++;
 801324e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013252:	f2a3 5274 	subw	r2, r3, #1396	; 0x574
 8013256:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801325a:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	3301      	adds	r3, #1
 8013262:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8013264:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013268:	f5a3 62ae 	sub.w	r2, r3, #1392	; 0x570
 801326c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013270:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 8013274:	6812      	ldr	r2, [r2, #0]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	429a      	cmp	r2, r3
 801327a:	dd0a      	ble.n	8013292 <arm_nn_mat_mult_nt_t_s8+0x295a>
        result++;
 801327c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013280:	f5a3 62ad 	sub.w	r2, r3, #1384	; 0x568
 8013284:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013288:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	3301      	adds	r3, #1
 8013290:	6013      	str	r3, [r2, #0]
    return result;
 8013292:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013296:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 801329a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801329c:	bf00      	nop
 801329e:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res11 = arm_nn_requantize(res11, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 80132a2:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 80132a6:	3301      	adds	r3, #1
 80132a8:	009a      	lsls	r2, r3, #2
 80132aa:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 80132ae:	4413      	add	r3, r2
 80132b0:	6818      	ldr	r0, [r3, #0]
 80132b2:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 80132b6:	3301      	adds	r3, #1
 80132b8:	009a      	lsls	r2, r3, #2
 80132ba:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80132be:	4413      	add	r3, r2
 80132c0:	6819      	ldr	r1, [r3, #0]
 80132c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80132c6:	f5a3 62a3 	sub.w	r2, r3, #1304	; 0x518
 80132ca:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 80132ce:	6013      	str	r3, [r2, #0]
 80132d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80132d4:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80132d8:	6018      	str	r0, [r3, #0]
 80132da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80132de:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80132e2:	6019      	str	r1, [r3, #0]
 80132e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80132e8:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80132f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80132f6:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	fa03 f202 	lsl.w	r2, r3, r2
 8013300:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013304:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8013308:	601a      	str	r2, [r3, #0]
 801330a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801330e:	f5a3 62a5 	sub.w	r2, r3, #1320	; 0x528
 8013312:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013316:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801331e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013322:	f2a3 522c 	subw	r2, r3, #1324	; 0x52c
 8013326:	2300      	movs	r3, #0
 8013328:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801332a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801332e:	461a      	mov	r2, r3
 8013330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013334:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8013336:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801333a:	461a      	mov	r2, r3
 801333c:	2300      	movs	r3, #0
 801333e:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8013340:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8013344:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013348:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801334c:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	17da      	asrs	r2, r3, #31
 8013354:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8013358:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801335c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013360:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	17da      	asrs	r2, r3, #31
 8013368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801336c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8013370:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013374:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013378:	fb02 f203 	mul.w	r2, r2, r3
 801337c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013380:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8013384:	fb04 f303 	mul.w	r3, r4, r3
 8013388:	4413      	add	r3, r2
 801338a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801338e:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8013392:	fba2 ab04 	umull	sl, fp, r2, r4
 8013396:	445b      	add	r3, fp
 8013398:	469b      	mov	fp, r3
 801339a:	eb10 030a 	adds.w	r3, r0, sl
 801339e:	643b      	str	r3, [r7, #64]	; 0x40
 80133a0:	eb41 030b 	adc.w	r3, r1, fp
 80133a4:	647b      	str	r3, [r7, #68]	; 0x44
 80133a6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80133aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80133ae:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 80133b2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80133b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ba:	f04f 0000 	mov.w	r0, #0
 80133be:	f04f 0100 	mov.w	r1, #0
 80133c2:	0fd0      	lsrs	r0, r2, #31
 80133c4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80133c8:	17d9      	asrs	r1, r3, #31
 80133ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80133ce:	f2a3 522c 	subw	r2, r3, #1324	; 0x52c
 80133d2:	4603      	mov	r3, r0
 80133d4:	6013      	str	r3, [r2, #0]
    return result;
 80133d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80133da:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 80133de:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80133e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80133e4:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	dc06      	bgt.n	80133fc <arm_nn_mat_mult_nt_t_s8+0x2ac4>
 80133ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80133f2:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	425a      	negs	r2, r3
 80133fa:	e000      	b.n	80133fe <arm_nn_mat_mult_nt_t_s8+0x2ac6>
 80133fc:	2200      	movs	r2, #0
 80133fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013402:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 8013406:	6019      	str	r1, [r3, #0]
 8013408:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801340c:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 8013410:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8013412:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013416:	f5a3 62a7 	sub.w	r2, r3, #1336	; 0x538
 801341a:	2300      	movs	r3, #0
 801341c:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801341e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013422:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 8013426:	2201      	movs	r2, #1
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	fa02 f103 	lsl.w	r1, r2, r3
 801342e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013432:	f2a3 523c 	subw	r2, r3, #1340	; 0x53c
 8013436:	1e4b      	subs	r3, r1, #1
 8013438:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801343a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801343e:	f5a3 61a8 	sub.w	r1, r3, #1344	; 0x540
 8013442:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013446:	f5a3 62a6 	sub.w	r2, r3, #1328	; 0x530
 801344a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801344e:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8013452:	6812      	ldr	r2, [r2, #0]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	4013      	ands	r3, r2
 8013458:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801345a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801345e:	f5a3 61a7 	sub.w	r1, r3, #1336	; 0x538
 8013462:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013466:	f5a3 62a6 	sub.w	r2, r3, #1328	; 0x530
 801346a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801346e:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 8013472:	6812      	ldr	r2, [r2, #0]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	fa42 f303 	asr.w	r3, r2, r3
 801347a:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801347c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013480:	f2a3 5244 	subw	r2, r3, #1348	; 0x544
 8013484:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013488:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	105b      	asrs	r3, r3, #1
 8013490:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8013492:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013496:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	2b00      	cmp	r3, #0
 801349e:	da0a      	bge.n	80134b6 <arm_nn_mat_mult_nt_t_s8+0x2b7e>
        threshold++;
 80134a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80134a4:	f2a3 5244 	subw	r2, r3, #1348	; 0x544
 80134a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80134ac:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	3301      	adds	r3, #1
 80134b4:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80134b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80134ba:	f5a3 62a8 	sub.w	r2, r3, #1344	; 0x540
 80134be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80134c2:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 80134c6:	6812      	ldr	r2, [r2, #0]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	429a      	cmp	r2, r3
 80134cc:	dd0a      	ble.n	80134e4 <arm_nn_mat_mult_nt_t_s8+0x2bac>
        result++;
 80134ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80134d2:	f5a3 62a7 	sub.w	r2, r3, #1336	; 0x538
 80134d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80134da:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	3301      	adds	r3, #1
 80134e2:	6013      	str	r3, [r2, #0]
    return result;
 80134e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80134e8:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 80134ec:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80134ee:	bf00      	nop
 80134f0:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            // Add offset
            res00 += dst_offset;
 80134f4:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 80134f8:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 80134fc:	4413      	add	r3, r2
 80134fe:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res01 += dst_offset;
 8013502:	f8d7 2ab8 	ldr.w	r2, [r7, #2744]	; 0xab8
 8013506:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801350a:	4413      	add	r3, r2
 801350c:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res10 += dst_offset;
 8013510:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 8013514:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8013518:	4413      	add	r3, r2
 801351a:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res11 += dst_offset;
 801351e:	f8d7 2ab0 	ldr.w	r2, [r7, #2736]	; 0xab0
 8013522:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8013526:	4413      	add	r3, r2
 8013528:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            // Clamp the result
            res00 = MAX(res00, activation_min);
 801352c:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 8013530:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013534:	4293      	cmp	r3, r2
 8013536:	bfb8      	it	lt
 8013538:	4613      	movlt	r3, r2
 801353a:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res00 = MIN(res00, activation_max);
 801353e:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 8013542:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8013546:	4293      	cmp	r3, r2
 8013548:	bfa8      	it	ge
 801354a:	4613      	movge	r3, r2
 801354c:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res01 = MAX(res01, activation_min);
 8013550:	f8d7 2ab8 	ldr.w	r2, [r7, #2744]	; 0xab8
 8013554:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013558:	4293      	cmp	r3, r2
 801355a:	bfb8      	it	lt
 801355c:	4613      	movlt	r3, r2
 801355e:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res01 = MIN(res01, activation_max);
 8013562:	f8d7 2ab8 	ldr.w	r2, [r7, #2744]	; 0xab8
 8013566:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801356a:	4293      	cmp	r3, r2
 801356c:	bfa8      	it	ge
 801356e:	4613      	movge	r3, r2
 8013570:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res10 = MAX(res10, activation_min);
 8013574:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 8013578:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801357c:	4293      	cmp	r3, r2
 801357e:	bfb8      	it	lt
 8013580:	4613      	movlt	r3, r2
 8013582:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res10 = MIN(res10, activation_max);
 8013586:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 801358a:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801358e:	4293      	cmp	r3, r2
 8013590:	bfa8      	it	ge
 8013592:	4613      	movge	r3, r2
 8013594:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res11 = MAX(res11, activation_min);
 8013598:	f8d7 2ab0 	ldr.w	r2, [r7, #2736]	; 0xab0
 801359c:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 80135a0:	4293      	cmp	r3, r2
 80135a2:	bfb8      	it	lt
 80135a4:	4613      	movlt	r3, r2
 80135a6:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
            res11 = MIN(res11, activation_max);
 80135aa:	f8d7 2ab0 	ldr.w	r2, [r7, #2736]	; 0xab0
 80135ae:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 80135b2:	4293      	cmp	r3, r2
 80135b4:	bfa8      	it	ge
 80135b6:	4613      	movge	r3, r2
 80135b8:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            dst_ptr[0] = (q7_t)res00;
 80135bc:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 80135c0:	b25b      	sxtb	r3, r3
 80135c2:	f8d7 2ad0 	ldr.w	r2, [r7, #2768]	; 0xad0
 80135c6:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 80135c8:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 80135cc:	1c5a      	adds	r2, r3, #1
 80135ce:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 80135d2:	b25b      	sxtb	r3, r3
 80135d4:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 80135d6:	f8d7 2b04 	ldr.w	r2, [r7, #2820]	; 0xb04
 80135da:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 80135de:	4413      	add	r3, r2
 80135e0:	f8c7 3ad0 	str.w	r3, [r7, #2768]	; 0xad0
            dst_ptr[0] = (q7_t)res10;
 80135e4:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 80135e8:	b25b      	sxtb	r3, r3
 80135ea:	f8d7 2ad0 	ldr.w	r2, [r7, #2768]	; 0xad0
 80135ee:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res11;
 80135f0:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 80135f4:	1c5a      	adds	r2, r3, #1
 80135f6:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 80135fa:	b25b      	sxtb	r3, r3
 80135fc:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 80135fe:	f8d7 2b04 	ldr.w	r2, [r7, #2820]	; 0xb04
 8013602:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 8013606:	4413      	add	r3, r2
 8013608:	f8c7 3ad0 	str.w	r3, [r7, #2768]	; 0xad0

            lhs_ptr += rhs_cols;
 801360c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013610:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8013614:	681a      	ldr	r2, [r3, #0]
 8013616:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801361a:	441a      	add	r2, r3
 801361c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013620:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8013624:	601a      	str	r2, [r3, #0]

            lhs_rows_idx--;
 8013626:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 801362a:	3b01      	subs	r3, #1
 801362c:	f8c7 3ac0 	str.w	r3, [r7, #2752]	; 0xac0
        while (lhs_rows_idx)
 8013630:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 8013634:	2b00      	cmp	r3, #0
 8013636:	f47d aa29 	bne.w	8010a8c <arm_nn_mat_mult_nt_t_s8+0x154>
        }

        // Left-over rows
        if (lhs_rows % 2)
 801363a:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 801363e:	f003 0301 	and.w	r3, r3, #1
 8013642:	2b00      	cmp	r3, #0
 8013644:	f001 85f7 	beq.w	8015236 <arm_nn_mat_mult_nt_t_s8+0x48fe>
        {
            const q7_t *rhs_ptr = &rhs[0];
 8013648:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801364c:	f6a3 12b4 	subw	r2, r3, #2484	; 0x9b4
 8013650:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013654:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 801365c:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8013660:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            q31_t res01 = lhs_offset_contribution1;
 8013664:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8013668:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            int32_t rhs_cols_idx = 0;
 801366c:	2300      	movs	r3, #0
 801366e:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0

            q31_t val0, val1, val2, val3, val4, val5;
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8013672:	f001 baf1 	b.w	8014c58 <arm_nn_mat_mult_nt_t_s8+0x4320>
 8013676:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801367a:	f6a3 02b4 	subw	r2, r3, #2228	; 0x8b4
 801367e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8013682:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8013684:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013688:	f6a3 03b4 	subw	r3, r3, #2228	; 0x8b4
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	461a      	mov	r2, r3
 8013694:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013698:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 801369c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801369e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80136a2:	f6a3 03b4 	subw	r3, r3, #2228	; 0x8b4
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	1d1a      	adds	r2, r3, #4
 80136ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80136b0:	f6a3 03b4 	subw	r3, r3, #2228	; 0x8b4
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	601a      	str	r2, [r3, #0]
    return (val);
 80136b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80136bc:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 80136c0:	681b      	ldr	r3, [r3, #0]
            {
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80136c2:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 80136c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80136ca:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 80136ce:	681a      	ldr	r2, [r3, #0]
 80136d0:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 80136d4:	441a      	add	r2, r3
 80136d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80136da:	f5a3 630b 	sub.w	r3, r3, #2224	; 0x8b0
 80136de:	601a      	str	r2, [r3, #0]
 80136e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80136e4:	f5a3 630b 	sub.w	r3, r3, #2224	; 0x8b0
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80136ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80136f2:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 80136f6:	601a      	str	r2, [r3, #0]
    return (val);
 80136f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80136fc:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 8013706:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801370a:	f6a3 02ac 	subw	r2, r3, #2220	; 0x8ac
 801370e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8013712:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8013714:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013718:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	461a      	mov	r2, r3
 8013724:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013728:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 801372c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801372e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013732:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	1d1a      	adds	r2, r3, #4
 801373c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013740:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	601a      	str	r2, [r3, #0]
    return (val);
 8013748:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801374c:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 8013750:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8013752:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 8013756:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801375a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801375e:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8013762:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013764:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013768:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	fa2f f283 	sxtb16	r2, r3
 8013772:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013776:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 801377a:	601a      	str	r2, [r3, #0]
  return(result);
 801377c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013780:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 801378a:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801378e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013792:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 8013796:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013798:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801379c:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	fa2f f283 	sxtb16	r2, r3
 80137a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80137aa:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 80137ae:	601a      	str	r2, [r3, #0]
  return(result);
 80137b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80137b4:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 80137be:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 80137c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80137c6:	f6a3 0394 	subw	r3, r3, #2196	; 0x894
 80137ca:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80137cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80137d0:	f6a3 0394 	subw	r3, r3, #2196	; 0x894
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	fa2f f283 	sxtb16	r2, r3
 80137da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80137de:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 80137e2:	601a      	str	r2, [r3, #0]
  return(result);
 80137e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80137e8:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 80137f2:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 80137f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80137fa:	f6a3 0378 	subw	r3, r3, #2168	; 0x878
 80137fe:	601a      	str	r2, [r3, #0]
 8013800:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013804:	f6a3 027c 	subw	r2, r3, #2172	; 0x87c
 8013808:	2308      	movs	r3, #8
 801380a:	6013      	str	r3, [r2, #0]
 801380c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013810:	f5a3 6208 	sub.w	r2, r3, #2176	; 0x880
 8013814:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013818:	f6a3 0378 	subw	r3, r3, #2168	; 0x878
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	6013      	str	r3, [r2, #0]
 8013820:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013824:	f6a3 0284 	subw	r2, r3, #2180	; 0x884
 8013828:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801382c:	f6a3 037c 	subw	r3, r3, #2172	; 0x87c
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8013834:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013838:	f6a3 0284 	subw	r2, r3, #2180	; 0x884
 801383c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013840:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	f003 031f 	and.w	r3, r3, #31
 801384a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801384c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013850:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d105      	bne.n	8013866 <arm_nn_mat_mult_nt_t_s8+0x2f2e>
    return op1;
 801385a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801385e:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 8013862:	681a      	ldr	r2, [r3, #0]
 8013864:	e00a      	b.n	801387c <arm_nn_mat_mult_nt_t_s8+0x2f44>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013866:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801386a:	f5a3 6208 	sub.w	r2, r3, #2176	; 0x880
 801386e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013872:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 8013876:	6812      	ldr	r2, [r2, #0]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	41da      	rors	r2, r3
 801387c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013880:	f6a3 0388 	subw	r3, r3, #2184	; 0x888
 8013884:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013886:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801388a:	f6a3 0388 	subw	r3, r3, #2184	; 0x888
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	fa2f f283 	sxtb16	r2, r3
 8013894:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013898:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 801389c:	601a      	str	r2, [r3, #0]
  return(result);
 801389e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80138a2:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80138a6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80138a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80138ac:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 80138b0:	601a      	str	r2, [r3, #0]
  return result;
 80138b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80138b6:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 80138c0:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 80138c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80138c8:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 80138cc:	601a      	str	r2, [r3, #0]
 80138ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80138d2:	f5a3 6206 	sub.w	r2, r3, #2144	; 0x860
 80138d6:	2308      	movs	r3, #8
 80138d8:	6013      	str	r3, [r2, #0]
 80138da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80138de:	f6a3 0264 	subw	r2, r3, #2148	; 0x864
 80138e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80138e6:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	6013      	str	r3, [r2, #0]
 80138ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80138f2:	f6a3 0268 	subw	r2, r3, #2152	; 0x868
 80138f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80138fa:	f5a3 6306 	sub.w	r3, r3, #2144	; 0x860
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8013902:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013906:	f6a3 0268 	subw	r2, r3, #2152	; 0x868
 801390a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801390e:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	f003 031f 	and.w	r3, r3, #31
 8013918:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801391a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801391e:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d105      	bne.n	8013934 <arm_nn_mat_mult_nt_t_s8+0x2ffc>
    return op1;
 8013928:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801392c:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8013930:	681a      	ldr	r2, [r3, #0]
 8013932:	e00a      	b.n	801394a <arm_nn_mat_mult_nt_t_s8+0x3012>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013934:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013938:	f6a3 0264 	subw	r2, r3, #2148	; 0x864
 801393c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013940:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8013944:	6812      	ldr	r2, [r2, #0]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	41da      	rors	r2, r3
 801394a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801394e:	f6a3 036c 	subw	r3, r3, #2156	; 0x86c
 8013952:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013954:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013958:	f6a3 036c 	subw	r3, r3, #2156	; 0x86c
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	fa2f f283 	sxtb16	r2, r3
 8013962:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013966:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 801396a:	601a      	str	r2, [r3, #0]
  return(result);
 801396c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013970:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 8013974:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8013976:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801397a:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 801397e:	601a      	str	r2, [r3, #0]
  return result;
 8013980:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013984:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 801398e:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 8013992:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013996:	f5a3 6304 	sub.w	r3, r3, #2112	; 0x840
 801399a:	601a      	str	r2, [r3, #0]
 801399c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80139a0:	f6a3 0244 	subw	r2, r3, #2116	; 0x844
 80139a4:	2308      	movs	r3, #8
 80139a6:	6013      	str	r3, [r2, #0]
 80139a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80139ac:	f6a3 0248 	subw	r2, r3, #2120	; 0x848
 80139b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80139b4:	f5a3 6304 	sub.w	r3, r3, #2112	; 0x840
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	6013      	str	r3, [r2, #0]
 80139bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80139c0:	f6a3 024c 	subw	r2, r3, #2124	; 0x84c
 80139c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80139c8:	f6a3 0344 	subw	r3, r3, #2116	; 0x844
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80139d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80139d4:	f6a3 024c 	subw	r2, r3, #2124	; 0x84c
 80139d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80139dc:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	f003 031f 	and.w	r3, r3, #31
 80139e6:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80139e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80139ec:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d105      	bne.n	8013a02 <arm_nn_mat_mult_nt_t_s8+0x30ca>
    return op1;
 80139f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80139fa:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 80139fe:	681a      	ldr	r2, [r3, #0]
 8013a00:	e00a      	b.n	8013a18 <arm_nn_mat_mult_nt_t_s8+0x30e0>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013a02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013a06:	f6a3 0248 	subw	r2, r3, #2120	; 0x848
 8013a0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013a0e:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8013a12:	6812      	ldr	r2, [r2, #0]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	41da      	rors	r2, r3
 8013a18:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013a1c:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 8013a20:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013a22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013a26:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	fa2f f283 	sxtb16	r2, r3
 8013a30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013a34:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8013a38:	601a      	str	r2, [r3, #0]
  return(result);
 8013a3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013a3e:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8013a42:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8013a44:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013a48:	f6a3 0358 	subw	r3, r3, #2136	; 0x858
 8013a4c:	601a      	str	r2, [r3, #0]
  return result;
 8013a4e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013a52:	f6a3 0358 	subw	r3, r3, #2136	; 0x858
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 8013a5c:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 8013a60:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 8013a64:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 8013a68:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013a6c:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 8013a70:	601a      	str	r2, [r3, #0]
 8013a72:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013a76:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 8013a7a:	6019      	str	r1, [r3, #0]
 8013a7c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013a80:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8013a84:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013a86:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013a8a:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 8013a8e:	6819      	ldr	r1, [r3, #0]
 8013a90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013a94:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 8013a98:	681a      	ldr	r2, [r3, #0]
 8013a9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013a9e:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	fb21 3202 	smlad	r2, r1, r2, r3
 8013aa8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013aac:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 8013ab0:	601a      	str	r2, [r3, #0]
  return(result);
 8013ab2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013ab6:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 8013ac0:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 8013ac4:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 8013ac8:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 8013acc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013ad0:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8013ad4:	601a      	str	r2, [r3, #0]
 8013ad6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013ada:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8013ade:	6019      	str	r1, [r3, #0]
 8013ae0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013ae4:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 8013ae8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013aea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013aee:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8013af2:	6819      	ldr	r1, [r3, #0]
 8013af4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013af8:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8013afc:	681a      	ldr	r2, [r3, #0]
 8013afe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013b02:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	fb21 3202 	smlad	r2, r1, r2, r3
 8013b0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013b10:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 8013b14:	601a      	str	r2, [r3, #0]
  return(result);
 8013b16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013b1a:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 8013b24:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 8013b28:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 8013b2c:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 8013b30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013b34:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8013b38:	601a      	str	r2, [r3, #0]
 8013b3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013b3e:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8013b42:	6019      	str	r1, [r3, #0]
 8013b44:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013b48:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8013b4c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013b4e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013b52:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8013b56:	6819      	ldr	r1, [r3, #0]
 8013b58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013b5c:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8013b60:	681a      	ldr	r2, [r3, #0]
 8013b62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013b66:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	fb21 3202 	smlad	r2, r1, r2, r3
 8013b70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013b74:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8013b78:	601a      	str	r2, [r3, #0]
  return(result);
 8013b7a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013b7e:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 8013b88:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 8013b8c:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 8013b90:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 8013b94:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013b98:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013b9c:	601a      	str	r2, [r3, #0]
 8013b9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013ba2:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8013ba6:	6019      	str	r1, [r3, #0]
 8013ba8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013bac:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8013bb0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013bb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013bb6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013bba:	6819      	ldr	r1, [r3, #0]
 8013bbc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013bc0:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8013bc4:	681a      	ldr	r2, [r3, #0]
 8013bc6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013bca:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	fb21 3202 	smlad	r2, r1, r2, r3
 8013bd4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013bd8:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8013bdc:	601a      	str	r2, [r3, #0]
  return(result);
 8013bde:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013be2:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 8013bec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013bf0:	f2a3 72fc 	subw	r2, r3, #2044	; 0x7fc
 8013bf4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8013bf8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8013bfa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013bfe:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	461a      	mov	r2, r3
 8013c0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013c0e:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 8013c12:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013c14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013c18:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	1d1a      	adds	r2, r3, #4
 8013c22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013c26:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	601a      	str	r2, [r3, #0]
    return (val);
 8013c2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013c32:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 8013c36:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8013c38:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8013c3c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013c40:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 8013c44:	681a      	ldr	r2, [r3, #0]
 8013c46:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8013c4a:	441a      	add	r2, r3
 8013c4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013c50:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8013c54:	601a      	str	r2, [r3, #0]
 8013c56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013c5a:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8013c64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013c68:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8013c6c:	601a      	str	r2, [r3, #0]
    return (val);
 8013c6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013c72:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 8013c7c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013c80:	f2a3 72f4 	subw	r2, r3, #2036	; 0x7f4
 8013c84:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8013c88:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8013c8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013c8e:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	461a      	mov	r2, r3
 8013c9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013c9e:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 8013ca2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013ca4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013ca8:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	1d1a      	adds	r2, r3, #4
 8013cb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013cb6:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	601a      	str	r2, [r3, #0]
    return (val);
 8013cbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013cc2:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 8013cc6:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8013cc8:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 8013ccc:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 8013cd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013cd4:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 8013cd8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013cda:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013cde:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	fa2f f283 	sxtb16	r2, r3
 8013ce8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013cec:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 8013cf0:	601a      	str	r2, [r3, #0]
  return(result);
 8013cf2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013cf6:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 8013d00:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 8013d04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013d08:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8013d0c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013d0e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013d12:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	fa2f f283 	sxtb16	r2, r3
 8013d1c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013d20:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 8013d24:	601a      	str	r2, [r3, #0]
  return(result);
 8013d26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013d2a:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 8013d34:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 8013d38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013d3c:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8013d40:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013d42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013d46:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	fa2f f283 	sxtb16	r2, r3
 8013d50:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013d54:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 8013d58:	601a      	str	r2, [r3, #0]
  return(result);
 8013d5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013d5e:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 8013d68:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 8013d6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013d70:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 8013d74:	601a      	str	r2, [r3, #0]
 8013d76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013d7a:	f2a3 72c4 	subw	r2, r3, #1988	; 0x7c4
 8013d7e:	2308      	movs	r3, #8
 8013d80:	6013      	str	r3, [r2, #0]
 8013d82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013d86:	f5a3 62f9 	sub.w	r2, r3, #1992	; 0x7c8
 8013d8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013d8e:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	6013      	str	r3, [r2, #0]
 8013d96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013d9a:	f2a3 72cc 	subw	r2, r3, #1996	; 0x7cc
 8013d9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013da2:	f2a3 73c4 	subw	r3, r3, #1988	; 0x7c4
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8013daa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013dae:	f2a3 72cc 	subw	r2, r3, #1996	; 0x7cc
 8013db2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013db6:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	f003 031f 	and.w	r3, r3, #31
 8013dc0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8013dc2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013dc6:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d105      	bne.n	8013ddc <arm_nn_mat_mult_nt_t_s8+0x34a4>
    return op1;
 8013dd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013dd4:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8013dd8:	681a      	ldr	r2, [r3, #0]
 8013dda:	e00a      	b.n	8013df2 <arm_nn_mat_mult_nt_t_s8+0x34ba>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013ddc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013de0:	f5a3 62f9 	sub.w	r2, r3, #1992	; 0x7c8
 8013de4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013de8:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 8013dec:	6812      	ldr	r2, [r2, #0]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	41da      	rors	r2, r3
 8013df2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013df6:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8013dfa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013dfc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013e00:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	fa2f f283 	sxtb16	r2, r3
 8013e0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013e0e:	f2a3 73d4 	subw	r3, r3, #2004	; 0x7d4
 8013e12:	601a      	str	r2, [r3, #0]
  return(result);
 8013e14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013e18:	f2a3 73d4 	subw	r3, r3, #2004	; 0x7d4
 8013e1c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8013e1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013e22:	f5a3 63fb 	sub.w	r3, r3, #2008	; 0x7d8
 8013e26:	601a      	str	r2, [r3, #0]
  return result;
 8013e28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013e2c:	f5a3 63fb 	sub.w	r3, r3, #2008	; 0x7d8
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 8013e36:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 8013e3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013e3e:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 8013e42:	601a      	str	r2, [r3, #0]
 8013e44:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013e48:	f5a3 62f5 	sub.w	r2, r3, #1960	; 0x7a8
 8013e4c:	2308      	movs	r3, #8
 8013e4e:	6013      	str	r3, [r2, #0]
 8013e50:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013e54:	f2a3 72ac 	subw	r2, r3, #1964	; 0x7ac
 8013e58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013e5c:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	6013      	str	r3, [r2, #0]
 8013e64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013e68:	f5a3 62f6 	sub.w	r2, r3, #1968	; 0x7b0
 8013e6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013e70:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8013e78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013e7c:	f5a3 62f6 	sub.w	r2, r3, #1968	; 0x7b0
 8013e80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013e84:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	f003 031f 	and.w	r3, r3, #31
 8013e8e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8013e90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013e94:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d105      	bne.n	8013eaa <arm_nn_mat_mult_nt_t_s8+0x3572>
    return op1;
 8013e9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013ea2:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8013ea6:	681a      	ldr	r2, [r3, #0]
 8013ea8:	e00a      	b.n	8013ec0 <arm_nn_mat_mult_nt_t_s8+0x3588>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013eaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013eae:	f2a3 72ac 	subw	r2, r3, #1964	; 0x7ac
 8013eb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013eb6:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 8013eba:	6812      	ldr	r2, [r2, #0]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	41da      	rors	r2, r3
 8013ec0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013ec4:	f2a3 73b4 	subw	r3, r3, #1972	; 0x7b4
 8013ec8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013eca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013ece:	f2a3 73b4 	subw	r3, r3, #1972	; 0x7b4
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	fa2f f283 	sxtb16	r2, r3
 8013ed8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013edc:	f5a3 63f7 	sub.w	r3, r3, #1976	; 0x7b8
 8013ee0:	601a      	str	r2, [r3, #0]
  return(result);
 8013ee2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013ee6:	f5a3 63f7 	sub.w	r3, r3, #1976	; 0x7b8
 8013eea:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8013eec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013ef0:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 8013ef4:	601a      	str	r2, [r3, #0]
  return result;
 8013ef6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013efa:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 8013f04:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 8013f08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013f0c:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 8013f10:	601a      	str	r2, [r3, #0]
 8013f12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013f16:	f2a3 728c 	subw	r2, r3, #1932	; 0x78c
 8013f1a:	2308      	movs	r3, #8
 8013f1c:	6013      	str	r3, [r2, #0]
 8013f1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013f22:	f5a3 62f2 	sub.w	r2, r3, #1936	; 0x790
 8013f26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013f2a:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	6013      	str	r3, [r2, #0]
 8013f32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013f36:	f2a3 7294 	subw	r2, r3, #1940	; 0x794
 8013f3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013f3e:	f2a3 738c 	subw	r3, r3, #1932	; 0x78c
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8013f46:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013f4a:	f2a3 7294 	subw	r2, r3, #1940	; 0x794
 8013f4e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013f52:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	f003 031f 	and.w	r3, r3, #31
 8013f5c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8013f5e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013f62:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d105      	bne.n	8013f78 <arm_nn_mat_mult_nt_t_s8+0x3640>
    return op1;
 8013f6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013f70:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8013f74:	681a      	ldr	r2, [r3, #0]
 8013f76:	e00a      	b.n	8013f8e <arm_nn_mat_mult_nt_t_s8+0x3656>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013f78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013f7c:	f5a3 62f2 	sub.w	r2, r3, #1936	; 0x790
 8013f80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013f84:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 8013f88:	6812      	ldr	r2, [r2, #0]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	41da      	rors	r2, r3
 8013f8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013f92:	f5a3 63f3 	sub.w	r3, r3, #1944	; 0x798
 8013f96:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013f98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013f9c:	f5a3 63f3 	sub.w	r3, r3, #1944	; 0x798
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	fa2f f283 	sxtb16	r2, r3
 8013fa6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013faa:	f2a3 739c 	subw	r3, r3, #1948	; 0x79c
 8013fae:	601a      	str	r2, [r3, #0]
  return(result);
 8013fb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013fb4:	f2a3 739c 	subw	r3, r3, #1948	; 0x79c
 8013fb8:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8013fba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013fbe:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 8013fc2:	601a      	str	r2, [r3, #0]
  return result;
 8013fc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013fc8:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 8013fd2:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 8013fd6:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 8013fda:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 8013fde:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013fe2:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 8013fe6:	601a      	str	r2, [r3, #0]
 8013fe8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013fec:	f2a3 737c 	subw	r3, r3, #1916	; 0x77c
 8013ff0:	6019      	str	r1, [r3, #0]
 8013ff2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8013ff6:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8013ffa:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013ffc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014000:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 8014004:	6819      	ldr	r1, [r3, #0]
 8014006:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801400a:	f2a3 737c 	subw	r3, r3, #1916	; 0x77c
 801400e:	681a      	ldr	r2, [r3, #0]
 8014010:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014014:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	fb21 3202 	smlad	r2, r1, r2, r3
 801401e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014022:	f2a3 7384 	subw	r3, r3, #1924	; 0x784
 8014026:	601a      	str	r2, [r3, #0]
  return(result);
 8014028:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801402c:	f2a3 7384 	subw	r3, r3, #1924	; 0x784
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 8014036:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801403a:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 801403e:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 8014042:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014046:	f5a3 63ed 	sub.w	r3, r3, #1896	; 0x768
 801404a:	601a      	str	r2, [r3, #0]
 801404c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014050:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8014054:	6019      	str	r1, [r3, #0]
 8014056:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801405a:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 801405e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014060:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014064:	f5a3 63ed 	sub.w	r3, r3, #1896	; 0x768
 8014068:	6819      	ldr	r1, [r3, #0]
 801406a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801406e:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8014072:	681a      	ldr	r2, [r3, #0]
 8014074:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014078:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	fb21 3202 	smlad	r2, r1, r2, r3
 8014082:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014086:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 801408a:	601a      	str	r2, [r3, #0]
  return(result);
 801408c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014090:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 801409a:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801409e:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 80140a2:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 80140a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80140aa:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 80140ae:	601a      	str	r2, [r3, #0]
 80140b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80140b4:	f2a3 735c 	subw	r3, r3, #1884	; 0x75c
 80140b8:	6019      	str	r1, [r3, #0]
 80140ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80140be:	f5a3 63ec 	sub.w	r3, r3, #1888	; 0x760
 80140c2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80140c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80140c8:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 80140cc:	6819      	ldr	r1, [r3, #0]
 80140ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80140d2:	f2a3 735c 	subw	r3, r3, #1884	; 0x75c
 80140d6:	681a      	ldr	r2, [r3, #0]
 80140d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80140dc:	f5a3 63ec 	sub.w	r3, r3, #1888	; 0x760
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	fb21 3202 	smlad	r2, r1, r2, r3
 80140e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80140ea:	f2a3 7364 	subw	r3, r3, #1892	; 0x764
 80140ee:	601a      	str	r2, [r3, #0]
  return(result);
 80140f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80140f4:	f2a3 7364 	subw	r3, r3, #1892	; 0x764
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 80140fe:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 8014102:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 8014106:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801410a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801410e:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 8014112:	601a      	str	r2, [r3, #0]
 8014114:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014118:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 801411c:	6019      	str	r1, [r3, #0]
 801411e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014122:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 8014126:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014128:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801412c:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 8014130:	6819      	ldr	r1, [r3, #0]
 8014132:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014136:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 801413a:	681a      	ldr	r2, [r3, #0]
 801413c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014140:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	fb21 3202 	smlad	r2, r1, r2, r3
 801414a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801414e:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 8014152:	601a      	str	r2, [r3, #0]
  return(result);
 8014154:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014158:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 8014162:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014166:	f2a3 7244 	subw	r2, r3, #1860	; 0x744
 801416a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801416e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8014170:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014174:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	461a      	mov	r2, r3
 8014180:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014184:	f6a3 13e4 	subw	r3, r3, #2532	; 0x9e4
 8014188:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801418a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801418e:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	1d1a      	adds	r2, r3, #4
 8014198:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801419c:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	601a      	str	r2, [r3, #0]
    return (val);
 80141a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80141a8:	f6a3 13e4 	subw	r3, r3, #2532	; 0x9e4
 80141ac:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80141ae:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 80141b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80141b6:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 80141ba:	681a      	ldr	r2, [r3, #0]
 80141bc:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 80141c0:	441a      	add	r2, r3
 80141c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80141c6:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 80141ca:	601a      	str	r2, [r3, #0]
 80141cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80141d0:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80141da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80141de:	f6a3 13e8 	subw	r3, r3, #2536	; 0x9e8
 80141e2:	601a      	str	r2, [r3, #0]
    return (val);
 80141e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80141e8:	f6a3 13e8 	subw	r3, r3, #2536	; 0x9e8
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 80141f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80141f6:	f2a3 723c 	subw	r2, r3, #1852	; 0x73c
 80141fa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80141fe:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8014200:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014204:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	461a      	mov	r2, r3
 8014210:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014214:	f6a3 13ec 	subw	r3, r3, #2540	; 0x9ec
 8014218:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801421a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801421e:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	1d1a      	adds	r2, r3, #4
 8014228:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801422c:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	601a      	str	r2, [r3, #0]
    return (val);
 8014234:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014238:	f6a3 13ec 	subw	r3, r3, #2540	; 0x9ec
 801423c:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801423e:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 8014242:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 8014246:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801424a:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 801424e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8014250:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014254:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	fa2f f283 	sxtb16	r2, r3
 801425e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014262:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 8014266:	601a      	str	r2, [r3, #0]
  return(result);
 8014268:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801426c:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 8014276:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801427a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801427e:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 8014282:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8014284:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014288:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	fa2f f283 	sxtb16	r2, r3
 8014292:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014296:	f5a3 63e6 	sub.w	r3, r3, #1840	; 0x730
 801429a:	601a      	str	r2, [r3, #0]
  return(result);
 801429c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80142a0:	f5a3 63e6 	sub.w	r3, r3, #1840	; 0x730
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 80142aa:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 80142ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80142b2:	f2a3 7324 	subw	r3, r3, #1828	; 0x724
 80142b6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80142b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80142bc:	f2a3 7324 	subw	r3, r3, #1828	; 0x724
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	fa2f f283 	sxtb16	r2, r3
 80142c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80142ca:	f5a3 63e5 	sub.w	r3, r3, #1832	; 0x728
 80142ce:	601a      	str	r2, [r3, #0]
  return(result);
 80142d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80142d4:	f5a3 63e5 	sub.w	r3, r3, #1832	; 0x728
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 80142de:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 80142e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80142e6:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80142ea:	601a      	str	r2, [r3, #0]
 80142ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80142f0:	f2a3 720c 	subw	r2, r3, #1804	; 0x70c
 80142f4:	2308      	movs	r3, #8
 80142f6:	6013      	str	r3, [r2, #0]
 80142f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80142fc:	f5a3 62e2 	sub.w	r2, r3, #1808	; 0x710
 8014300:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014304:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	6013      	str	r3, [r2, #0]
 801430c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014310:	f2a3 7214 	subw	r2, r3, #1812	; 0x714
 8014314:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014318:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8014320:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014324:	f2a3 7214 	subw	r2, r3, #1812	; 0x714
 8014328:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801432c:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	f003 031f 	and.w	r3, r3, #31
 8014336:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8014338:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801433c:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d105      	bne.n	8014352 <arm_nn_mat_mult_nt_t_s8+0x3a1a>
    return op1;
 8014346:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801434a:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 801434e:	681a      	ldr	r2, [r3, #0]
 8014350:	e00a      	b.n	8014368 <arm_nn_mat_mult_nt_t_s8+0x3a30>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014352:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014356:	f5a3 62e2 	sub.w	r2, r3, #1808	; 0x710
 801435a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801435e:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 8014362:	6812      	ldr	r2, [r2, #0]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	41da      	rors	r2, r3
 8014368:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801436c:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 8014370:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8014372:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014376:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	fa2f f283 	sxtb16	r2, r3
 8014380:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014384:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 8014388:	601a      	str	r2, [r3, #0]
  return(result);
 801438a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801438e:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 8014392:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8014394:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014398:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 801439c:	601a      	str	r2, [r3, #0]
  return result;
 801439e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80143a2:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 80143ac:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 80143b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80143b4:	f2a3 63ec 	subw	r3, r3, #1772	; 0x6ec
 80143b8:	601a      	str	r2, [r3, #0]
 80143ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80143be:	f5a3 62de 	sub.w	r2, r3, #1776	; 0x6f0
 80143c2:	2308      	movs	r3, #8
 80143c4:	6013      	str	r3, [r2, #0]
 80143c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80143ca:	f2a3 62f4 	subw	r2, r3, #1780	; 0x6f4
 80143ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80143d2:	f2a3 63ec 	subw	r3, r3, #1772	; 0x6ec
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	6013      	str	r3, [r2, #0]
 80143da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80143de:	f5a3 62df 	sub.w	r2, r3, #1784	; 0x6f8
 80143e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80143e6:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80143ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80143f2:	f5a3 62df 	sub.w	r2, r3, #1784	; 0x6f8
 80143f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80143fa:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	f003 031f 	and.w	r3, r3, #31
 8014404:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8014406:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801440a:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d105      	bne.n	8014420 <arm_nn_mat_mult_nt_t_s8+0x3ae8>
    return op1;
 8014414:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014418:	f2a3 63f4 	subw	r3, r3, #1780	; 0x6f4
 801441c:	681a      	ldr	r2, [r3, #0]
 801441e:	e00a      	b.n	8014436 <arm_nn_mat_mult_nt_t_s8+0x3afe>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014420:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014424:	f2a3 62f4 	subw	r2, r3, #1780	; 0x6f4
 8014428:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801442c:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 8014430:	6812      	ldr	r2, [r2, #0]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	41da      	rors	r2, r3
 8014436:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801443a:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 801443e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8014440:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014444:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	fa2f f283 	sxtb16	r2, r3
 801444e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014452:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 8014456:	601a      	str	r2, [r3, #0]
  return(result);
 8014458:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801445c:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 8014460:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8014462:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014466:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 801446a:	601a      	str	r2, [r3, #0]
  return result;
 801446c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014470:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 801447a:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801447e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014482:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 8014486:	601a      	str	r2, [r3, #0]
 8014488:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801448c:	f2a3 62d4 	subw	r2, r3, #1748	; 0x6d4
 8014490:	2308      	movs	r3, #8
 8014492:	6013      	str	r3, [r2, #0]
 8014494:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014498:	f5a3 62db 	sub.w	r2, r3, #1752	; 0x6d8
 801449c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80144a0:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	6013      	str	r3, [r2, #0]
 80144a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80144ac:	f2a3 62dc 	subw	r2, r3, #1756	; 0x6dc
 80144b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80144b4:	f2a3 63d4 	subw	r3, r3, #1748	; 0x6d4
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80144bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80144c0:	f2a3 62dc 	subw	r2, r3, #1756	; 0x6dc
 80144c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80144c8:	f2a3 63dc 	subw	r3, r3, #1756	; 0x6dc
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	f003 031f 	and.w	r3, r3, #31
 80144d2:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80144d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80144d8:	f2a3 63dc 	subw	r3, r3, #1756	; 0x6dc
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d105      	bne.n	80144ee <arm_nn_mat_mult_nt_t_s8+0x3bb6>
    return op1;
 80144e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80144e6:	f5a3 63db 	sub.w	r3, r3, #1752	; 0x6d8
 80144ea:	681a      	ldr	r2, [r3, #0]
 80144ec:	e00a      	b.n	8014504 <arm_nn_mat_mult_nt_t_s8+0x3bcc>
  return (op1 >> op2) | (op1 << (32U - op2));
 80144ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80144f2:	f5a3 62db 	sub.w	r2, r3, #1752	; 0x6d8
 80144f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80144fa:	f2a3 63dc 	subw	r3, r3, #1756	; 0x6dc
 80144fe:	6812      	ldr	r2, [r2, #0]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	41da      	rors	r2, r3
 8014504:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014508:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 801450c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801450e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014512:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	fa2f f283 	sxtb16	r2, r3
 801451c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014520:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 8014524:	601a      	str	r2, [r3, #0]
  return(result);
 8014526:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801452a:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 801452e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8014530:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014534:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8014538:	601a      	str	r2, [r3, #0]
  return result;
 801453a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801453e:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 8014548:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801454c:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 8014550:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 8014554:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014558:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 801455c:	601a      	str	r2, [r3, #0]
 801455e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014562:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8014566:	6019      	str	r1, [r3, #0]
 8014568:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801456c:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 8014570:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014572:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014576:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 801457a:	6819      	ldr	r1, [r3, #0]
 801457c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014580:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8014584:	681a      	ldr	r2, [r3, #0]
 8014586:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801458a:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	fb21 3202 	smlad	r2, r1, r2, r3
 8014594:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014598:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 801459c:	601a      	str	r2, [r3, #0]
  return(result);
 801459e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80145a2:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 80145ac:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 80145b0:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 80145b4:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 80145b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80145bc:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 80145c0:	601a      	str	r2, [r3, #0]
 80145c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80145c6:	f2a3 63b4 	subw	r3, r3, #1716	; 0x6b4
 80145ca:	6019      	str	r1, [r3, #0]
 80145cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80145d0:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 80145d4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80145d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80145da:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 80145de:	6819      	ldr	r1, [r3, #0]
 80145e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80145e4:	f2a3 63b4 	subw	r3, r3, #1716	; 0x6b4
 80145e8:	681a      	ldr	r2, [r3, #0]
 80145ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80145ee:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	fb21 3202 	smlad	r2, r1, r2, r3
 80145f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80145fc:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 8014600:	601a      	str	r2, [r3, #0]
  return(result);
 8014602:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014606:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 8014610:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 8014614:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 8014618:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801461c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014620:	f5a3 63d4 	sub.w	r3, r3, #1696	; 0x6a0
 8014624:	601a      	str	r2, [r3, #0]
 8014626:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801462a:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 801462e:	6019      	str	r1, [r3, #0]
 8014630:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014634:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8014638:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801463a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801463e:	f5a3 63d4 	sub.w	r3, r3, #1696	; 0x6a0
 8014642:	6819      	ldr	r1, [r3, #0]
 8014644:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014648:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 801464c:	681a      	ldr	r2, [r3, #0]
 801464e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014652:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	fb21 3202 	smlad	r2, r1, r2, r3
 801465c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014660:	f2a3 63ac 	subw	r3, r3, #1708	; 0x6ac
 8014664:	601a      	str	r2, [r3, #0]
  return(result);
 8014666:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801466a:	f2a3 63ac 	subw	r3, r3, #1708	; 0x6ac
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 8014674:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 8014678:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 801467c:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 8014680:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014684:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8014688:	601a      	str	r2, [r3, #0]
 801468a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801468e:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8014692:	6019      	str	r1, [r3, #0]
 8014694:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014698:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 801469c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801469e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80146a2:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 80146a6:	6819      	ldr	r1, [r3, #0]
 80146a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80146ac:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 80146b0:	681a      	ldr	r2, [r3, #0]
 80146b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80146b6:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	fb21 3202 	smlad	r2, r1, r2, r3
 80146c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80146c4:	f2a3 639c 	subw	r3, r3, #1692	; 0x69c
 80146c8:	601a      	str	r2, [r3, #0]
  return(result);
 80146ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80146ce:	f2a3 639c 	subw	r3, r3, #1692	; 0x69c
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 80146d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80146dc:	f2a3 628c 	subw	r2, r3, #1676	; 0x68c
 80146e0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80146e4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80146e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80146ea:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	461a      	mov	r2, r3
 80146f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80146fa:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 80146fe:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8014700:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014704:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	1d1a      	adds	r2, r3, #4
 801470e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014712:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	601a      	str	r2, [r3, #0]
    return (val);
 801471a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801471e:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 8014722:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8014724:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8014728:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801472c:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 8014730:	681a      	ldr	r2, [r3, #0]
 8014732:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8014736:	441a      	add	r2, r3
 8014738:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801473c:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 8014740:	601a      	str	r2, [r3, #0]
 8014742:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014746:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8014750:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014754:	f6a3 13f4 	subw	r3, r3, #2548	; 0x9f4
 8014758:	601a      	str	r2, [r3, #0]
    return (val);
 801475a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801475e:	f6a3 13f4 	subw	r3, r3, #2548	; 0x9f4
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 8014768:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801476c:	f2a3 6284 	subw	r2, r3, #1668	; 0x684
 8014770:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8014774:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8014776:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801477a:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	461a      	mov	r2, r3
 8014786:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801478a:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 801478e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8014790:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014794:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	1d1a      	adds	r2, r3, #4
 801479e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80147a2:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	601a      	str	r2, [r3, #0]
    return (val);
 80147aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80147ae:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 80147b2:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80147b4:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 80147b8:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 80147bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80147c0:	f2a3 637c 	subw	r3, r3, #1660	; 0x67c
 80147c4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80147c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80147ca:	f2a3 637c 	subw	r3, r3, #1660	; 0x67c
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	fa2f f283 	sxtb16	r2, r3
 80147d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80147d8:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
 80147dc:	601a      	str	r2, [r3, #0]
  return(result);
 80147de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80147e2:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 80147ec:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 80147f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80147f4:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 80147f8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80147fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80147fe:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	fa2f f283 	sxtb16	r2, r3
 8014808:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801480c:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8014810:	601a      	str	r2, [r3, #0]
  return(result);
 8014812:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014816:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 8014820:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 8014824:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014828:	f2a3 636c 	subw	r3, r3, #1644	; 0x66c
 801482c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801482e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014832:	f2a3 636c 	subw	r3, r3, #1644	; 0x66c
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	fa2f f283 	sxtb16	r2, r3
 801483c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014840:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 8014844:	601a      	str	r2, [r3, #0]
  return(result);
 8014846:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801484a:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 8014854:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 8014858:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801485c:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8014860:	601a      	str	r2, [r3, #0]
 8014862:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014866:	f2a3 6254 	subw	r2, r3, #1620	; 0x654
 801486a:	2308      	movs	r3, #8
 801486c:	6013      	str	r3, [r2, #0]
 801486e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014872:	f5a3 62cb 	sub.w	r2, r3, #1624	; 0x658
 8014876:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801487a:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	6013      	str	r3, [r2, #0]
 8014882:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014886:	f2a3 625c 	subw	r2, r3, #1628	; 0x65c
 801488a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801488e:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8014896:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801489a:	f2a3 625c 	subw	r2, r3, #1628	; 0x65c
 801489e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80148a2:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	f003 031f 	and.w	r3, r3, #31
 80148ac:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80148ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80148b2:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d105      	bne.n	80148c8 <arm_nn_mat_mult_nt_t_s8+0x3f90>
    return op1;
 80148bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80148c0:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 80148c4:	681a      	ldr	r2, [r3, #0]
 80148c6:	e00a      	b.n	80148de <arm_nn_mat_mult_nt_t_s8+0x3fa6>
  return (op1 >> op2) | (op1 << (32U - op2));
 80148c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80148cc:	f5a3 62cb 	sub.w	r2, r3, #1624	; 0x658
 80148d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80148d4:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 80148d8:	6812      	ldr	r2, [r2, #0]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	41da      	rors	r2, r3
 80148de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80148e2:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80148e6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80148e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80148ec:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	fa2f f283 	sxtb16	r2, r3
 80148f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80148fa:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 80148fe:	601a      	str	r2, [r3, #0]
  return(result);
 8014900:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014904:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 8014908:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801490a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801490e:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8014912:	601a      	str	r2, [r3, #0]
  return result;
 8014914:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014918:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 8014922:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 8014926:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801492a:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 801492e:	601a      	str	r2, [r3, #0]
 8014930:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014934:	f5a3 62c7 	sub.w	r2, r3, #1592	; 0x638
 8014938:	2308      	movs	r3, #8
 801493a:	6013      	str	r3, [r2, #0]
 801493c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014940:	f2a3 623c 	subw	r2, r3, #1596	; 0x63c
 8014944:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014948:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	6013      	str	r3, [r2, #0]
 8014950:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014954:	f5a3 62c8 	sub.w	r2, r3, #1600	; 0x640
 8014958:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801495c:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8014964:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014968:	f5a3 62c8 	sub.w	r2, r3, #1600	; 0x640
 801496c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014970:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	f003 031f 	and.w	r3, r3, #31
 801497a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801497c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014980:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d105      	bne.n	8014996 <arm_nn_mat_mult_nt_t_s8+0x405e>
    return op1;
 801498a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801498e:	f2a3 633c 	subw	r3, r3, #1596	; 0x63c
 8014992:	681a      	ldr	r2, [r3, #0]
 8014994:	e00a      	b.n	80149ac <arm_nn_mat_mult_nt_t_s8+0x4074>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014996:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801499a:	f2a3 623c 	subw	r2, r3, #1596	; 0x63c
 801499e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80149a2:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 80149a6:	6812      	ldr	r2, [r2, #0]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	41da      	rors	r2, r3
 80149ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80149b0:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 80149b4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80149b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80149ba:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	fa2f f283 	sxtb16	r2, r3
 80149c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80149c8:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 80149cc:	601a      	str	r2, [r3, #0]
  return(result);
 80149ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80149d2:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 80149d6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80149d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80149dc:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 80149e0:	601a      	str	r2, [r3, #0]
  return result;
 80149e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80149e6:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 80149f0:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 80149f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80149f8:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 80149fc:	601a      	str	r2, [r3, #0]
 80149fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014a02:	f2a3 621c 	subw	r2, r3, #1564	; 0x61c
 8014a06:	2308      	movs	r3, #8
 8014a08:	6013      	str	r3, [r2, #0]
 8014a0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014a0e:	f5a3 62c4 	sub.w	r2, r3, #1568	; 0x620
 8014a12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014a16:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	6013      	str	r3, [r2, #0]
 8014a1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014a22:	f2a3 6224 	subw	r2, r3, #1572	; 0x624
 8014a26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014a2a:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8014a32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014a36:	f2a3 6224 	subw	r2, r3, #1572	; 0x624
 8014a3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014a3e:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	f003 031f 	and.w	r3, r3, #31
 8014a48:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8014a4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014a4e:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d105      	bne.n	8014a64 <arm_nn_mat_mult_nt_t_s8+0x412c>
    return op1;
 8014a58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014a5c:	f5a3 63c4 	sub.w	r3, r3, #1568	; 0x620
 8014a60:	681a      	ldr	r2, [r3, #0]
 8014a62:	e00a      	b.n	8014a7a <arm_nn_mat_mult_nt_t_s8+0x4142>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014a64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014a68:	f5a3 62c4 	sub.w	r2, r3, #1568	; 0x620
 8014a6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014a70:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8014a74:	6812      	ldr	r2, [r2, #0]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	41da      	rors	r2, r3
 8014a7a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014a7e:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 8014a82:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8014a84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014a88:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	fa2f f283 	sxtb16	r2, r3
 8014a92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014a96:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 8014a9a:	601a      	str	r2, [r3, #0]
  return(result);
 8014a9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014aa0:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 8014aa4:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8014aa6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014aaa:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8014aae:	601a      	str	r2, [r3, #0]
  return result;
 8014ab0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014ab4:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 8014abe:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 8014ac2:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 8014ac6:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 8014aca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014ace:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8014ad2:	601a      	str	r2, [r3, #0]
 8014ad4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014ad8:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 8014adc:	6019      	str	r1, [r3, #0]
 8014ade:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014ae2:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8014ae6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014ae8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014aec:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8014af0:	6819      	ldr	r1, [r3, #0]
 8014af2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014af6:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 8014afa:	681a      	ldr	r2, [r3, #0]
 8014afc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014b00:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	fb21 3202 	smlad	r2, r1, r2, r3
 8014b0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014b0e:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8014b12:	601a      	str	r2, [r3, #0]
  return(result);
 8014b14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014b18:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 8014b22:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 8014b26:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 8014b2a:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 8014b2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014b32:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 8014b36:	601a      	str	r2, [r3, #0]
 8014b38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014b3c:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
 8014b40:	6019      	str	r1, [r3, #0]
 8014b42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014b46:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8014b4a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014b4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014b50:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 8014b54:	6819      	ldr	r1, [r3, #0]
 8014b56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014b5a:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
 8014b5e:	681a      	ldr	r2, [r3, #0]
 8014b60:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014b64:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	fb21 3202 	smlad	r2, r1, r2, r3
 8014b6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014b72:	f2a3 6304 	subw	r3, r3, #1540	; 0x604
 8014b76:	601a      	str	r2, [r3, #0]
  return(result);
 8014b78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014b7c:	f2a3 6304 	subw	r3, r3, #1540	; 0x604
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 8014b86:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 8014b8a:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 8014b8e:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 8014b92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014b96:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8014b9a:	601a      	str	r2, [r3, #0]
 8014b9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014ba0:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8014ba4:	6019      	str	r1, [r3, #0]
 8014ba6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014baa:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 8014bae:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014bb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014bb4:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8014bb8:	6819      	ldr	r1, [r3, #0]
 8014bba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014bbe:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8014bc2:	681a      	ldr	r2, [r3, #0]
 8014bc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014bc8:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	fb21 3202 	smlad	r2, r1, r2, r3
 8014bd2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014bd6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8014bda:	601a      	str	r2, [r3, #0]
  return(result);
 8014bdc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014be0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 8014bea:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 8014bee:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 8014bf2:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 8014bf6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014bfa:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8014bfe:	601a      	str	r2, [r3, #0]
 8014c00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014c04:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8014c08:	6019      	str	r1, [r3, #0]
 8014c0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014c0e:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8014c12:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014c14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014c18:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8014c1c:	6819      	ldr	r1, [r3, #0]
 8014c1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014c22:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8014c26:	681a      	ldr	r2, [r3, #0]
 8014c28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014c2c:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	fb21 3202 	smlad	r2, r1, r2, r3
 8014c36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014c3a:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8014c3e:	601a      	str	r2, [r3, #0]
  return(result);
 8014c40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014c44:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8014c4e:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8014c52:	3310      	adds	r3, #16
 8014c54:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0
 8014c58:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8014c5c:	f1a3 020f 	sub.w	r2, r3, #15
 8014c60:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8014c64:	4293      	cmp	r3, r2
 8014c66:	f6fe ad06 	blt.w	8013676 <arm_nn_mat_mult_nt_t_s8+0x2d3e>
            }

            // Left-over accumulations
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8014c6a:	e04b      	b.n	8014d04 <arm_nn_mat_mult_nt_t_s8+0x43cc>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 8014c6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014c70:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	f887 3a7b 	strb.w	r3, [r7, #2683]	; 0xa7b
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 8014c7c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014c80:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 8014c84:	681a      	ldr	r2, [r3, #0]
 8014c86:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8014c8a:	4413      	add	r3, r2
 8014c8c:	781b      	ldrb	r3, [r3, #0]
 8014c8e:	f887 3a7a 	strb.w	r3, [r7, #2682]	; 0xa7a
                q7_t lhs_value = lhs_ptr[0];
 8014c92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014c96:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	781b      	ldrb	r3, [r3, #0]
 8014c9e:	f887 3a79 	strb.w	r3, [r7, #2681]	; 0xa79

                res00 += lhs_value * rhs_value0;
 8014ca2:	f997 2a79 	ldrsb.w	r2, [r7, #2681]	; 0xa79
 8014ca6:	f997 3a7b 	ldrsb.w	r3, [r7, #2683]	; 0xa7b
 8014caa:	fb03 f202 	mul.w	r2, r3, r2
 8014cae:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8014cb2:	4413      	add	r3, r2
 8014cb4:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 += lhs_value * rhs_value1;
 8014cb8:	f997 2a79 	ldrsb.w	r2, [r7, #2681]	; 0xa79
 8014cbc:	f997 3a7a 	ldrsb.w	r3, [r7, #2682]	; 0xa7a
 8014cc0:	fb03 f202 	mul.w	r2, r3, r2
 8014cc4:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8014cc8:	4413      	add	r3, r2
 8014cca:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

                ++rhs_ptr;
 8014cce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014cd2:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	1c5a      	adds	r2, r3, #1
 8014cda:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014cde:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 8014ce2:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 8014ce4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014ce8:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	1c5a      	adds	r2, r3, #1
 8014cf0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014cf4:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8014cf8:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8014cfa:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8014cfe:	3301      	adds	r3, #1
 8014d00:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0
 8014d04:	f8d7 2aa0 	ldr.w	r2, [r7, #2720]	; 0xaa0
 8014d08:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8014d0c:	429a      	cmp	r2, r3
 8014d0e:	dbad      	blt.n	8014c6c <arm_nn_mat_mult_nt_t_s8+0x4334>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 8014d10:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8014d14:	009a      	lsls	r2, r3, #2
 8014d16:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8014d1a:	4413      	add	r3, r2
 8014d1c:	6818      	ldr	r0, [r3, #0]
 8014d1e:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8014d22:	009a      	lsls	r2, r3, #2
 8014d24:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8014d28:	4413      	add	r3, r2
 8014d2a:	6819      	ldr	r1, [r3, #0]
 8014d2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014d30:	f6a3 02e8 	subw	r2, r3, #2280	; 0x8e8
 8014d34:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8014d38:	6013      	str	r3, [r2, #0]
 8014d3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014d3e:	f6a3 03ec 	subw	r3, r3, #2284	; 0x8ec
 8014d42:	6018      	str	r0, [r3, #0]
 8014d44:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014d48:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 8014d4c:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014d4e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014d52:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8014d5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014d60:	f6a3 03e8 	subw	r3, r3, #2280	; 0x8e8
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	fa03 f202 	lsl.w	r2, r3, r2
 8014d6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014d6e:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 8014d72:	601a      	str	r2, [r3, #0]
 8014d74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014d78:	f6a3 02f8 	subw	r2, r3, #2296	; 0x8f8
 8014d7c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014d80:	f6a3 03ec 	subw	r3, r3, #2284	; 0x8ec
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8014d88:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014d8c:	f6a3 02fc 	subw	r2, r3, #2300	; 0x8fc
 8014d90:	2300      	movs	r3, #0
 8014d92:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8014d94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014d98:	461a      	mov	r2, r3
 8014d9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014d9e:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8014da0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014da4:	461a      	mov	r2, r3
 8014da6:	2300      	movs	r3, #0
 8014da8:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8014daa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014dae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014db2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014db6:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	17da      	asrs	r2, r3, #31
 8014dbe:	653b      	str	r3, [r7, #80]	; 0x50
 8014dc0:	657a      	str	r2, [r7, #84]	; 0x54
 8014dc2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014dc6:	f6a3 03f8 	subw	r3, r3, #2296	; 0x8f8
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	17da      	asrs	r2, r3, #31
 8014dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8014dd0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014dd6:	fb02 f203 	mul.w	r2, r2, r3
 8014dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ddc:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8014dde:	fb04 f303 	mul.w	r3, r4, r3
 8014de2:	4413      	add	r3, r2
 8014de4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014de6:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8014de8:	fba2 4204 	umull	r4, r2, r2, r4
 8014dec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8014df0:	4622      	mov	r2, r4
 8014df2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014df6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8014dfa:	4413      	add	r3, r2
 8014dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014e00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014e04:	18c3      	adds	r3, r0, r3
 8014e06:	61bb      	str	r3, [r7, #24]
 8014e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e0c:	eb41 0303 	adc.w	r3, r1, r3
 8014e10:	61fb      	str	r3, [r7, #28]
 8014e12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014e16:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8014e1a:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8014e1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e26:	f04f 0000 	mov.w	r0, #0
 8014e2a:	f04f 0100 	mov.w	r1, #0
 8014e2e:	0fd0      	lsrs	r0, r2, #31
 8014e30:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014e34:	17d9      	asrs	r1, r3, #31
 8014e36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014e3a:	f6a3 02fc 	subw	r2, r3, #2300	; 0x8fc
 8014e3e:	4603      	mov	r3, r0
 8014e40:	6013      	str	r3, [r2, #0]
    return result;
 8014e42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014e46:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8014e4a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014e4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014e50:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	dc06      	bgt.n	8014e68 <arm_nn_mat_mult_nt_t_s8+0x4530>
 8014e5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014e5e:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	425a      	negs	r2, r3
 8014e66:	e000      	b.n	8014e6a <arm_nn_mat_mult_nt_t_s8+0x4532>
 8014e68:	2200      	movs	r2, #0
 8014e6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014e6e:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8014e72:	6019      	str	r1, [r3, #0]
 8014e74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014e78:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 8014e7c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8014e7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014e82:	f6a3 1208 	subw	r2, r3, #2312	; 0x908
 8014e86:	2300      	movs	r3, #0
 8014e88:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8014e8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014e8e:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 8014e92:	2201      	movs	r2, #1
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	fa02 f103 	lsl.w	r1, r2, r3
 8014e9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014e9e:	f6a3 120c 	subw	r2, r3, #2316	; 0x90c
 8014ea2:	1e4b      	subs	r3, r1, #1
 8014ea4:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8014ea6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014eaa:	f5a3 6111 	sub.w	r1, r3, #2320	; 0x910
 8014eae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014eb2:	f5a3 6210 	sub.w	r2, r3, #2304	; 0x900
 8014eb6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014eba:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 8014ebe:	6812      	ldr	r2, [r2, #0]
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	4013      	ands	r3, r2
 8014ec4:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8014ec6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014eca:	f6a3 1108 	subw	r1, r3, #2312	; 0x908
 8014ece:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014ed2:	f5a3 6210 	sub.w	r2, r3, #2304	; 0x900
 8014ed6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014eda:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 8014ede:	6812      	ldr	r2, [r2, #0]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	fa42 f303 	asr.w	r3, r2, r3
 8014ee6:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8014ee8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014eec:	f6a3 1214 	subw	r2, r3, #2324	; 0x914
 8014ef0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014ef4:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	105b      	asrs	r3, r3, #1
 8014efc:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8014efe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014f02:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	da0a      	bge.n	8014f22 <arm_nn_mat_mult_nt_t_s8+0x45ea>
        threshold++;
 8014f0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014f10:	f6a3 1214 	subw	r2, r3, #2324	; 0x914
 8014f14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014f18:	f6a3 1314 	subw	r3, r3, #2324	; 0x914
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	3301      	adds	r3, #1
 8014f20:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8014f22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014f26:	f5a3 6211 	sub.w	r2, r3, #2320	; 0x910
 8014f2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014f2e:	f6a3 1314 	subw	r3, r3, #2324	; 0x914
 8014f32:	6812      	ldr	r2, [r2, #0]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	dd0a      	ble.n	8014f50 <arm_nn_mat_mult_nt_t_s8+0x4618>
        result++;
 8014f3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014f3e:	f6a3 1208 	subw	r2, r3, #2312	; 0x908
 8014f42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014f46:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	3301      	adds	r3, #1
 8014f4e:	6013      	str	r3, [r2, #0]
    return result;
 8014f50:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014f54:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 8014f58:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014f5a:	bf00      	nop
 8014f5c:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 8014f60:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8014f64:	3301      	adds	r3, #1
 8014f66:	009a      	lsls	r2, r3, #2
 8014f68:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8014f6c:	4413      	add	r3, r2
 8014f6e:	6818      	ldr	r0, [r3, #0]
 8014f70:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8014f74:	3301      	adds	r3, #1
 8014f76:	009a      	lsls	r2, r3, #2
 8014f78:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8014f7c:	4413      	add	r3, r2
 8014f7e:	6819      	ldr	r1, [r3, #0]
 8014f80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014f84:	f6a3 02b8 	subw	r2, r3, #2232	; 0x8b8
 8014f88:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8014f8c:	6013      	str	r3, [r2, #0]
 8014f8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014f92:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 8014f96:	6018      	str	r0, [r3, #0]
 8014f98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014f9c:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8014fa0:	6019      	str	r1, [r3, #0]
 8014fa2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014fa6:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8014fb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014fb4:	f6a3 03b8 	subw	r3, r3, #2232	; 0x8b8
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	fa03 f202 	lsl.w	r2, r3, r2
 8014fbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014fc2:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8014fc6:	601a      	str	r2, [r3, #0]
 8014fc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014fcc:	f6a3 02c8 	subw	r2, r3, #2248	; 0x8c8
 8014fd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014fd4:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8014fdc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8014fe0:	f6a3 02cc 	subw	r2, r3, #2252	; 0x8cc
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8014fe8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014fec:	461a      	mov	r2, r3
 8014fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014ff2:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8014ff6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014ffa:	461a      	mov	r2, r3
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8015002:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8015006:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801500a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801500e:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	17da      	asrs	r2, r3, #31
 8015016:	663b      	str	r3, [r7, #96]	; 0x60
 8015018:	667a      	str	r2, [r7, #100]	; 0x64
 801501a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801501e:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	17da      	asrs	r2, r3, #31
 8015026:	65bb      	str	r3, [r7, #88]	; 0x58
 8015028:	65fa      	str	r2, [r7, #92]	; 0x5c
 801502a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801502c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801502e:	fb02 f203 	mul.w	r2, r2, r3
 8015032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015034:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8015036:	fb04 f303 	mul.w	r3, r4, r3
 801503a:	4413      	add	r3, r2
 801503c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801503e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8015040:	fba2 4204 	umull	r4, r2, r2, r4
 8015044:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8015048:	4622      	mov	r2, r4
 801504a:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 801504e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8015052:	4413      	add	r3, r2
 8015054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015058:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801505c:	18c3      	adds	r3, r0, r3
 801505e:	623b      	str	r3, [r7, #32]
 8015060:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015064:	eb41 0303 	adc.w	r3, r1, r3
 8015068:	627b      	str	r3, [r7, #36]	; 0x24
 801506a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801506e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8015072:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 8015076:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801507a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801507e:	f04f 0000 	mov.w	r0, #0
 8015082:	f04f 0100 	mov.w	r1, #0
 8015086:	0fd0      	lsrs	r0, r2, #31
 8015088:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801508c:	17d9      	asrs	r1, r3, #31
 801508e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015092:	f6a3 02cc 	subw	r2, r3, #2252	; 0x8cc
 8015096:	4603      	mov	r3, r0
 8015098:	6013      	str	r3, [r2, #0]
    return result;
 801509a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801509e:	f6a3 03cc 	subw	r3, r3, #2252	; 0x8cc
 80150a2:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80150a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80150a8:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	dc06      	bgt.n	80150c0 <arm_nn_mat_mult_nt_t_s8+0x4788>
 80150b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80150b6:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	425a      	negs	r2, r3
 80150be:	e000      	b.n	80150c2 <arm_nn_mat_mult_nt_t_s8+0x478a>
 80150c0:	2200      	movs	r2, #0
 80150c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80150c6:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 80150ca:	6019      	str	r1, [r3, #0]
 80150cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80150d0:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 80150d4:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80150d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80150da:	f6a3 02d8 	subw	r2, r3, #2264	; 0x8d8
 80150de:	2300      	movs	r3, #0
 80150e0:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80150e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80150e6:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 80150ea:	2201      	movs	r2, #1
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	fa02 f103 	lsl.w	r1, r2, r3
 80150f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80150f6:	f6a3 02dc 	subw	r2, r3, #2268	; 0x8dc
 80150fa:	1e4b      	subs	r3, r1, #1
 80150fc:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80150fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015102:	f5a3 610e 	sub.w	r1, r3, #2272	; 0x8e0
 8015106:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801510a:	f5a3 620d 	sub.w	r2, r3, #2256	; 0x8d0
 801510e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015112:	f6a3 03dc 	subw	r3, r3, #2268	; 0x8dc
 8015116:	6812      	ldr	r2, [r2, #0]
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	4013      	ands	r3, r2
 801511c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801511e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015122:	f6a3 01d8 	subw	r1, r3, #2264	; 0x8d8
 8015126:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801512a:	f5a3 620d 	sub.w	r2, r3, #2256	; 0x8d0
 801512e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015132:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 8015136:	6812      	ldr	r2, [r2, #0]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	fa42 f303 	asr.w	r3, r2, r3
 801513e:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8015140:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015144:	f6a3 02e4 	subw	r2, r3, #2276	; 0x8e4
 8015148:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801514c:	f6a3 03dc 	subw	r3, r3, #2268	; 0x8dc
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	105b      	asrs	r3, r3, #1
 8015154:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8015156:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801515a:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	2b00      	cmp	r3, #0
 8015162:	da0a      	bge.n	801517a <arm_nn_mat_mult_nt_t_s8+0x4842>
        threshold++;
 8015164:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015168:	f6a3 02e4 	subw	r2, r3, #2276	; 0x8e4
 801516c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015170:	f6a3 03e4 	subw	r3, r3, #2276	; 0x8e4
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	3301      	adds	r3, #1
 8015178:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801517a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801517e:	f5a3 620e 	sub.w	r2, r3, #2272	; 0x8e0
 8015182:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015186:	f6a3 03e4 	subw	r3, r3, #2276	; 0x8e4
 801518a:	6812      	ldr	r2, [r2, #0]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	429a      	cmp	r2, r3
 8015190:	dd0a      	ble.n	80151a8 <arm_nn_mat_mult_nt_t_s8+0x4870>
        result++;
 8015192:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015196:	f6a3 02d8 	subw	r2, r3, #2264	; 0x8d8
 801519a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801519e:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	3301      	adds	r3, #1
 80151a6:	6013      	str	r3, [r2, #0]
    return result;
 80151a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80151ac:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 80151b0:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80151b2:	bf00      	nop
 80151b4:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            // Add offset
            res00 += dst_offset;
 80151b8:	f8d7 2aa8 	ldr.w	r2, [r7, #2728]	; 0xaa8
 80151bc:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 80151c0:	4413      	add	r3, r2
 80151c2:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res01 += dst_offset;
 80151c6:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 80151ca:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 80151ce:	4413      	add	r3, r2
 80151d0:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            // Clamp the result
            res00 = MAX(res00, activation_min);
 80151d4:	f8d7 2aa8 	ldr.w	r2, [r7, #2728]	; 0xaa8
 80151d8:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 80151dc:	4293      	cmp	r3, r2
 80151de:	bfb8      	it	lt
 80151e0:	4613      	movlt	r3, r2
 80151e2:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res00 = MIN(res00, activation_max);
 80151e6:	f8d7 2aa8 	ldr.w	r2, [r7, #2728]	; 0xaa8
 80151ea:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 80151ee:	4293      	cmp	r3, r2
 80151f0:	bfa8      	it	ge
 80151f2:	4613      	movge	r3, r2
 80151f4:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res01 = MAX(res01, activation_min);
 80151f8:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 80151fc:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8015200:	4293      	cmp	r3, r2
 8015202:	bfb8      	it	lt
 8015204:	4613      	movlt	r3, r2
 8015206:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
            res01 = MIN(res01, activation_max);
 801520a:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 801520e:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8015212:	4293      	cmp	r3, r2
 8015214:	bfa8      	it	ge
 8015216:	4613      	movge	r3, r2
 8015218:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            dst_ptr[0] = (q7_t)res00;
 801521c:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8015220:	b25b      	sxtb	r3, r3
 8015222:	f8d7 2ad0 	ldr.w	r2, [r7, #2768]	; 0xad0
 8015226:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 8015228:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801522c:	1c5a      	adds	r2, r3, #1
 801522e:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8015232:	b25b      	sxtb	r3, r3
 8015234:	7013      	strb	r3, [r2, #0]
        }

        rhs += 2 * rhs_cols;
 8015236:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801523a:	005b      	lsls	r3, r3, #1
 801523c:	4619      	mov	r1, r3
 801523e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015242:	f6a3 2208 	subw	r2, r3, #2568	; 0xa08
 8015246:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801524a:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	440b      	add	r3, r1
 8015252:	6013      	str	r3, [r2, #0]
        dst += 2;
 8015254:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015258:	f5a3 6221 	sub.w	r2, r3, #2576	; 0xa10
 801525c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015260:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	3302      	adds	r3, #2
 8015268:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801526a:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801526e:	3302      	adds	r3, #2
 8015270:	f8c7 3ad4 	str.w	r3, [r7, #2772]	; 0xad4
 8015274:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8015278:	1e5a      	subs	r2, r3, #1
 801527a:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801527e:	4293      	cmp	r3, r2
 8015280:	f6fb ab7d 	blt.w	801097e <arm_nn_mat_mult_nt_t_s8+0x46>
    }

    if (rhs_rows % 2)
 8015284:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8015288:	f003 0301 	and.w	r3, r3, #1
 801528c:	2b00      	cmp	r3, #0
 801528e:	f000 81bd 	beq.w	801560c <arm_nn_mat_mult_nt_t_s8+0x4cd4>
    {
        const q7_t *lhs_ptr = &lhs[0];
 8015292:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015296:	f6a3 2304 	subw	r3, r3, #2564	; 0xa04
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
        q7_t *dst_ptr = &dst[0];
 80152a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80152a4:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 80152ae:	2300      	movs	r3, #0
 80152b0:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
 80152b4:	e1a3      	b.n	80155fe <arm_nn_mat_mult_nt_t_s8+0x4cc6>
        {
            const q7_t *rhs_ptr = &rhs[0];
 80152b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80152ba:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
            q31_t res00 = 0;
 80152c4:	2300      	movs	r3, #0
 80152c6:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
            if (bias)
 80152ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80152ce:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d00e      	beq.n	80152f6 <arm_nn_mat_mult_nt_t_s8+0x49be>
            {
                res00 = bias[rhs_rows - 1];
 80152d8:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 80152dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80152e0:	3b01      	subs	r3, #1
 80152e2:	009b      	lsls	r3, r3, #2
 80152e4:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 80152e8:	f6a2 220c 	subw	r2, r2, #2572	; 0xa0c
 80152ec:	6812      	ldr	r2, [r2, #0]
 80152ee:	4413      	add	r3, r2
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
            }

            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80152f6:	2300      	movs	r3, #0
 80152f8:	f8c7 3a88 	str.w	r3, [r7, #2696]	; 0xa88
 80152fc:	e029      	b.n	8015352 <arm_nn_mat_mult_nt_t_s8+0x4a1a>
            {
                q31_t rhs_value = rhs_ptr[0];
 80152fe:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8015302:	f993 3000 	ldrsb.w	r3, [r3]
 8015306:	f8c7 3a80 	str.w	r3, [r7, #2688]	; 0xa80
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 801530a:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 801530e:	f993 3000 	ldrsb.w	r3, [r3]
 8015312:	461a      	mov	r2, r3
 8015314:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8015318:	4413      	add	r3, r2
 801531a:	f8c7 3a7c 	str.w	r3, [r7, #2684]	; 0xa7c

                res00 += lhs_value * rhs_value;
 801531e:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8015322:	f8d7 2a80 	ldr.w	r2, [r7, #2688]	; 0xa80
 8015326:	fb02 f303 	mul.w	r3, r2, r3
 801532a:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 801532e:	4413      	add	r3, r2
 8015330:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

                ++rhs_ptr;
 8015334:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8015338:	3301      	adds	r3, #1
 801533a:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
                ++lhs_ptr;
 801533e:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8015342:	3301      	adds	r3, #1
 8015344:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8015348:	f8d7 3a88 	ldr.w	r3, [r7, #2696]	; 0xa88
 801534c:	3301      	adds	r3, #1
 801534e:	f8c7 3a88 	str.w	r3, [r7, #2696]	; 0xa88
 8015352:	f8d7 2a88 	ldr.w	r2, [r7, #2696]	; 0xa88
 8015356:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801535a:	429a      	cmp	r2, r3
 801535c:	dbcf      	blt.n	80152fe <arm_nn_mat_mult_nt_t_s8+0x49c6>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 801535e:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8015362:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015366:	3b01      	subs	r3, #1
 8015368:	009b      	lsls	r3, r3, #2
 801536a:	f8d7 2af8 	ldr.w	r2, [r7, #2808]	; 0xaf8
 801536e:	4413      	add	r3, r2
 8015370:	6819      	ldr	r1, [r3, #0]
 8015372:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8015376:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801537a:	3b01      	subs	r3, #1
 801537c:	009b      	lsls	r3, r3, #2
 801537e:	f8d7 2afc 	ldr.w	r2, [r7, #2812]	; 0xafc
 8015382:	4413      	add	r3, r2
 8015384:	681a      	ldr	r2, [r3, #0]
 8015386:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801538a:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 801538e:	f8d7 0a8c 	ldr.w	r0, [r7, #2700]	; 0xa8c
 8015392:	6018      	str	r0, [r3, #0]
 8015394:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015398:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 801539c:	6019      	str	r1, [r3, #0]
 801539e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80153a2:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 80153a6:	601a      	str	r2, [r3, #0]
 80153a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80153ac:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80153b6:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 80153ba:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 80153be:	6812      	ldr	r2, [r2, #0]
 80153c0:	409a      	lsls	r2, r3
 80153c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80153c6:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 80153ca:	601a      	str	r2, [r3, #0]
 80153cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80153d0:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 80153d4:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 80153d8:	f6a2 121c 	subw	r2, r2, #2332	; 0x91c
 80153dc:	6812      	ldr	r2, [r2, #0]
 80153de:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80153e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80153e4:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 80153e8:	2200      	movs	r2, #0
 80153ea:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 80153ec:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80153f0:	461a      	mov	r2, r3
 80153f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80153f6:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80153f8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80153fc:	461a      	mov	r2, r3
 80153fe:	2300      	movs	r3, #0
 8015400:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8015402:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801540a:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 801540e:	f6a1 1124 	subw	r1, r1, #2340	; 0x924
 8015412:	6809      	ldr	r1, [r1, #0]
 8015414:	17c8      	asrs	r0, r1, #31
 8015416:	6139      	str	r1, [r7, #16]
 8015418:	6178      	str	r0, [r7, #20]
 801541a:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 801541e:	f6a1 1128 	subw	r1, r1, #2344	; 0x928
 8015422:	6809      	ldr	r1, [r1, #0]
 8015424:	17c8      	asrs	r0, r1, #31
 8015426:	60b9      	str	r1, [r7, #8]
 8015428:	60f8      	str	r0, [r7, #12]
 801542a:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 801542e:	4631      	mov	r1, r6
 8015430:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8015434:	4650      	mov	r0, sl
 8015436:	fb00 f001 	mul.w	r0, r0, r1
 801543a:	4659      	mov	r1, fp
 801543c:	462c      	mov	r4, r5
 801543e:	fb04 f101 	mul.w	r1, r4, r1
 8015442:	4401      	add	r1, r0
 8015444:	4628      	mov	r0, r5
 8015446:	4654      	mov	r4, sl
 8015448:	fba0 8904 	umull	r8, r9, r0, r4
 801544c:	4449      	add	r1, r9
 801544e:	4689      	mov	r9, r1
 8015450:	eb12 0108 	adds.w	r1, r2, r8
 8015454:	6039      	str	r1, [r7, #0]
 8015456:	eb43 0309 	adc.w	r3, r3, r9
 801545a:	607b      	str	r3, [r7, #4]
 801545c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015460:	e9d7 1200 	ldrd	r1, r2, [r7]
 8015464:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8015468:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801546c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015470:	f04f 0200 	mov.w	r2, #0
 8015474:	f04f 0300 	mov.w	r3, #0
 8015478:	0fc2      	lsrs	r2, r0, #31
 801547a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801547e:	17cb      	asrs	r3, r1, #31
 8015480:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8015484:	f6a1 112c 	subw	r1, r1, #2348	; 0x92c
 8015488:	4613      	mov	r3, r2
 801548a:	600b      	str	r3, [r1, #0]
    return result;
 801548c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015490:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8015494:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015496:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801549a:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	dc06      	bgt.n	80154b2 <arm_nn_mat_mult_nt_t_s8+0x4b7a>
 80154a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80154a8:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	425b      	negs	r3, r3
 80154b0:	e000      	b.n	80154b4 <arm_nn_mat_mult_nt_t_s8+0x4b7c>
 80154b2:	2300      	movs	r3, #0
 80154b4:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 80154b8:	f5a2 6213 	sub.w	r2, r2, #2352	; 0x930
 80154bc:	6011      	str	r1, [r2, #0]
 80154be:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 80154c2:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 80154c6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80154c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80154cc:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 80154d0:	2200      	movs	r2, #0
 80154d2:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80154d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80154d8:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 80154dc:	2201      	movs	r2, #1
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	409a      	lsls	r2, r3
 80154e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80154e6:	f6a3 133c 	subw	r3, r3, #2364	; 0x93c
 80154ea:	3a01      	subs	r2, #1
 80154ec:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 80154ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80154f2:	f5a3 6314 	sub.w	r3, r3, #2368	; 0x940
 80154f6:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 80154fa:	f5a2 6113 	sub.w	r1, r2, #2352	; 0x930
 80154fe:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 8015502:	f6a2 123c 	subw	r2, r2, #2364	; 0x93c
 8015506:	6809      	ldr	r1, [r1, #0]
 8015508:	6812      	ldr	r2, [r2, #0]
 801550a:	400a      	ands	r2, r1
 801550c:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801550e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015512:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 8015516:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801551a:	f5a2 6113 	sub.w	r1, r2, #2352	; 0x930
 801551e:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 8015522:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 8015526:	6809      	ldr	r1, [r1, #0]
 8015528:	6812      	ldr	r2, [r2, #0]
 801552a:	fa41 f202 	asr.w	r2, r1, r2
 801552e:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8015530:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015534:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 8015538:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801553c:	f6a2 123c 	subw	r2, r2, #2364	; 0x93c
 8015540:	6812      	ldr	r2, [r2, #0]
 8015542:	1052      	asrs	r2, r2, #1
 8015544:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8015546:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801554a:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	2b00      	cmp	r3, #0
 8015552:	da0a      	bge.n	801556a <arm_nn_mat_mult_nt_t_s8+0x4c32>
        threshold++;
 8015554:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015558:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 801555c:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 8015560:	f6a2 1244 	subw	r2, r2, #2372	; 0x944
 8015564:	6812      	ldr	r2, [r2, #0]
 8015566:	3201      	adds	r2, #1
 8015568:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801556a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801556e:	f5a3 6214 	sub.w	r2, r3, #2368	; 0x940
 8015572:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015576:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 801557a:	6812      	ldr	r2, [r2, #0]
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	429a      	cmp	r2, r3
 8015580:	dd0a      	ble.n	8015598 <arm_nn_mat_mult_nt_t_s8+0x4c60>
        result++;
 8015582:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8015586:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801558a:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801558e:	f6a2 1238 	subw	r2, r2, #2360	; 0x938
 8015592:	6812      	ldr	r2, [r2, #0]
 8015594:	3201      	adds	r2, #1
 8015596:	601a      	str	r2, [r3, #0]
    return result;
 8015598:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801559c:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 80155a0:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80155a2:	bf00      	nop
 80155a4:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

            // Add offset
            res00 += dst_offset;
 80155a8:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 80155ac:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 80155b0:	4413      	add	r3, r2
 80155b2:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

            // Clamp the result
            res00 = MAX(res00, activation_min);
 80155b6:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 80155ba:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 80155be:	4293      	cmp	r3, r2
 80155c0:	bfb8      	it	lt
 80155c2:	4613      	movlt	r3, r2
 80155c4:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
            res00 = MIN(res00, activation_max);
 80155c8:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 80155cc:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 80155d0:	4293      	cmp	r3, r2
 80155d2:	bfa8      	it	ge
 80155d4:	4613      	movge	r3, r2
 80155d6:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

            dst_ptr[0] = (q7_t)res00;
 80155da:	f8d7 3a8c 	ldr.w	r3, [r7, #2700]	; 0xa8c
 80155de:	b25a      	sxtb	r2, r3
 80155e0:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 80155e4:	701a      	strb	r2, [r3, #0]
            dst_ptr += rhs_rows;
 80155e6:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 80155ea:	f8d7 2a98 	ldr.w	r2, [r7, #2712]	; 0xa98
 80155ee:	4413      	add	r3, r2
 80155f0:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 80155f4:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 80155f8:	3301      	adds	r3, #1
 80155fa:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
 80155fe:	f8d7 2a94 	ldr.w	r2, [r7, #2708]	; 0xa94
 8015602:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8015606:	429a      	cmp	r2, r3
 8015608:	f6ff ae55 	blt.w	80152b6 <arm_nn_mat_mult_nt_t_s8+0x497e>
            dst_ptr[0] = (q7_t)res00;
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
 801560c:	2300      	movs	r3, #0
}
 801560e:	4618      	mov	r0, r3
 8015610:	f607 27d8 	addw	r7, r7, #2776	; 0xad8
 8015614:	46bd      	mov	sp, r7
 8015616:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801561a:	4770      	bx	lr

0801561c <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 801561c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015620:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 8015624:	af00      	add	r7, sp, #0
 8015626:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 801562a:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 801562e:	6020      	str	r0, [r4, #0]
 8015630:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 8015634:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 8015638:	6001      	str	r1, [r0, #0]
 801563a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801563e:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 8015642:	600a      	str	r2, [r1, #0]
 8015644:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8015648:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 801564c:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 801564e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8015652:	3b04      	subs	r3, #4
 8015654:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 8015658:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 801565c:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 8015660:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8015664:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 8015668:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 801566c:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 8015670:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 8015674:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 8015678:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 801567c:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8015680:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 8015684:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 8015688:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 801568c:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 8015690:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 8015694:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 8015698:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 801569c:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 80156a0:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 80156a4:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 80156a8:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 80156ac:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80156b0:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 80156b4:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 80156b8:	2300      	movs	r3, #0
 80156ba:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 80156be:	f001 bd13 	b.w	80170e8 <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 80156c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80156c6:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 80156ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80156ce:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 80156d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80156da:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 80156de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80156e2:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 80156ea:	2300      	movs	r3, #0
 80156ec:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 80156f0:	2300      	movs	r3, #0
 80156f2:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 80156f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80156fa:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d01b      	beq.n	801573c <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 8015704:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015708:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801570c:	6819      	ldr	r1, [r3, #0]
 801570e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015712:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 8015716:	1d0b      	adds	r3, r1, #4
 8015718:	6013      	str	r3, [r2, #0]
 801571a:	680b      	ldr	r3, [r1, #0]
 801571c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 8015720:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015724:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8015728:	6819      	ldr	r1, [r3, #0]
 801572a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801572e:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 8015732:	1d0b      	adds	r3, r1, #4
 8015734:	6013      	str	r3, [r2, #0]
 8015736:	680b      	ldr	r3, [r1, #0]
 8015738:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 801573c:	2300      	movs	r3, #0
 801573e:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8015742:	f001 b9db 	b.w	8016afc <arm_nn_vec_mat_mult_t_s8+0x14e0>
 8015746:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801574a:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 801574e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015752:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8015754:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015758:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	461a      	mov	r2, r3
 8015764:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015768:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801576c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801576e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015772:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	1d1a      	adds	r2, r3, #4
 801577c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015780:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	601a      	str	r2, [r3, #0]
    return (val);
 8015788:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801578c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8015790:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8015792:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8015796:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801579a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801579e:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 80157a2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80157a6:	6013      	str	r3, [r2, #0]
 80157a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80157ac:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 80157b0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80157b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80157b6:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80157ba:	681a      	ldr	r2, [r3, #0]
 80157bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80157c0:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	fa22 f283 	sxtab16	r2, r2, r3
 80157ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80157ce:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80157d2:	601a      	str	r2, [r3, #0]
  return(result);
 80157d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80157d8:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 80157e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80157e6:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 80157ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80157ee:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80157f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80157f4:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	461a      	mov	r2, r3
 8015800:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015804:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8015808:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801580a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801580e:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	1d1a      	adds	r2, r3, #4
 8015818:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801581c:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	601a      	str	r2, [r3, #0]
    return (val);
 8015824:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015828:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801582c:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801582e:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8015832:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8015836:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801583a:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801583e:	601a      	str	r2, [r3, #0]
 8015840:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015844:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8015848:	2308      	movs	r3, #8
 801584a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801584c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015850:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8015854:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015858:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	f003 031f 	and.w	r3, r3, #31
 8015862:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8015864:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015868:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d105      	bne.n	801587e <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 8015872:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015876:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801587a:	6819      	ldr	r1, [r3, #0]
 801587c:	e00b      	b.n	8015896 <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801587e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015882:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8015886:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801588a:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801588e:	6812      	ldr	r2, [r2, #0]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	fa62 f103 	ror.w	r1, r2, r3
 8015896:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801589a:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 801589e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80158a2:	6013      	str	r3, [r2, #0]
 80158a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80158a8:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80158ac:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80158ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80158b2:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80158b6:	681a      	ldr	r2, [r3, #0]
 80158b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80158bc:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	fa22 f283 	sxtab16	r2, r2, r3
 80158c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80158ca:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80158ce:	601a      	str	r2, [r3, #0]
  return(result);
 80158d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80158d4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 80158de:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 80158e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80158e6:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 80158ea:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 80158ee:	6013      	str	r3, [r2, #0]
 80158f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80158f4:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80158f8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80158fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80158fe:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8015902:	681a      	ldr	r2, [r3, #0]
 8015904:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015908:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	fa22 f283 	sxtab16	r2, r2, r3
 8015912:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015916:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 801591a:	601a      	str	r2, [r3, #0]
  return(result);
 801591c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015920:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 801592a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801592e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8015932:	681a      	ldr	r2, [r3, #0]
 8015934:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8015938:	441a      	add	r2, r3
 801593a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801593e:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8015942:	601a      	str	r2, [r3, #0]
 8015944:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015948:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8015952:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015956:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 801595a:	601a      	str	r2, [r3, #0]
    return (val);
 801595c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015960:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 801596a:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801596e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015972:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8015976:	601a      	str	r2, [r3, #0]
 8015978:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801597c:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8015980:	2308      	movs	r3, #8
 8015982:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8015984:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015988:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 801598c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015990:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	f003 031f 	and.w	r3, r3, #31
 801599a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801599c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80159a0:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d105      	bne.n	80159b6 <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 80159aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80159ae:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80159b2:	6819      	ldr	r1, [r3, #0]
 80159b4:	e00b      	b.n	80159ce <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 80159b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80159ba:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 80159be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80159c2:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80159c6:	6812      	ldr	r2, [r2, #0]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	fa62 f103 	ror.w	r1, r2, r3
 80159ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80159d2:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 80159d6:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 80159da:	6013      	str	r3, [r2, #0]
 80159dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80159e0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80159e4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80159e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80159ea:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80159ee:	681a      	ldr	r2, [r3, #0]
 80159f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80159f4:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	fa22 f283 	sxtab16	r2, r2, r3
 80159fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015a02:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8015a06:	601a      	str	r2, [r3, #0]
  return(result);
 8015a08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015a0c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8015a16:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8015a1a:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8015a1e:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8015a22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015a26:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8015a2a:	601a      	str	r2, [r3, #0]
 8015a2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015a30:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8015a34:	6019      	str	r1, [r3, #0]
 8015a36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015a3a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8015a3e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015a40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015a44:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8015a48:	6819      	ldr	r1, [r3, #0]
 8015a4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015a4e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8015a52:	681a      	ldr	r2, [r3, #0]
 8015a54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015a58:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	fb21 3202 	smlad	r2, r1, r2, r3
 8015a62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015a66:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8015a6a:	601a      	str	r2, [r3, #0]
  return(result);
 8015a6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015a70:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8015a7a:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8015a7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015a82:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8015a86:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8015a8a:	6013      	str	r3, [r2, #0]
 8015a8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015a90:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015a94:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015a96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015a9a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8015a9e:	681a      	ldr	r2, [r3, #0]
 8015aa0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015aa4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	fa22 f283 	sxtab16	r2, r2, r3
 8015aae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015ab2:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8015ab6:	601a      	str	r2, [r3, #0]
  return(result);
 8015ab8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015abc:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8015ac6:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8015aca:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8015ace:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8015ad2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015ad6:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8015ada:	601a      	str	r2, [r3, #0]
 8015adc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015ae0:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8015ae4:	6019      	str	r1, [r3, #0]
 8015ae6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015aea:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8015aee:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015af0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015af4:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8015af8:	6819      	ldr	r1, [r3, #0]
 8015afa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015afe:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8015b02:	681a      	ldr	r2, [r3, #0]
 8015b04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015b08:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	fb21 3202 	smlad	r2, r1, r2, r3
 8015b12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015b16:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8015b1a:	601a      	str	r2, [r3, #0]
  return(result);
 8015b1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015b20:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8015b2a:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8015b2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015b32:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8015b36:	601a      	str	r2, [r3, #0]
 8015b38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015b3c:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8015b40:	2308      	movs	r3, #8
 8015b42:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8015b44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015b48:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8015b4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015b50:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	f003 031f 	and.w	r3, r3, #31
 8015b5a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8015b5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015b60:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d105      	bne.n	8015b76 <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 8015b6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015b6e:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8015b72:	6819      	ldr	r1, [r3, #0]
 8015b74:	e00b      	b.n	8015b8e <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 8015b76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015b7a:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 8015b7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015b82:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8015b86:	6812      	ldr	r2, [r2, #0]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	fa62 f103 	ror.w	r1, r2, r3
 8015b8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015b92:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8015b96:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8015b9a:	6013      	str	r3, [r2, #0]
 8015b9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015ba0:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8015ba4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015ba6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015baa:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8015bae:	681a      	ldr	r2, [r3, #0]
 8015bb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015bb4:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	fa22 f283 	sxtab16	r2, r2, r3
 8015bbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015bc2:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8015bc6:	601a      	str	r2, [r3, #0]
  return(result);
 8015bc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015bcc:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8015bd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015bda:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8015bde:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015be2:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8015be4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015be8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	461a      	mov	r2, r3
 8015bf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015bf8:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8015bfc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8015bfe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015c02:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	1d1a      	adds	r2, r3, #4
 8015c0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015c10:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	601a      	str	r2, [r3, #0]
    return (val);
 8015c18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015c1c:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8015c20:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8015c22:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 8015c26:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8015c2a:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8015c2e:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8015c32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015c36:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8015c3a:	601a      	str	r2, [r3, #0]
 8015c3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015c40:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8015c44:	6019      	str	r1, [r3, #0]
 8015c46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015c4a:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8015c4e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015c50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015c54:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8015c58:	6819      	ldr	r1, [r3, #0]
 8015c5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015c5e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8015c62:	681a      	ldr	r2, [r3, #0]
 8015c64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015c68:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	fb21 3202 	smlad	r2, r1, r2, r3
 8015c72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015c76:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8015c7a:	601a      	str	r2, [r3, #0]
  return(result);
 8015c7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015c80:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8015c8a:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8015c8e:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8015c92:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8015c96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015c9a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8015c9e:	601a      	str	r2, [r3, #0]
 8015ca0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015ca4:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8015ca8:	6019      	str	r1, [r3, #0]
 8015caa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015cae:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8015cb2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015cb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015cb8:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8015cbc:	6819      	ldr	r1, [r3, #0]
 8015cbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015cc2:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8015cc6:	681a      	ldr	r2, [r3, #0]
 8015cc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015ccc:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	fb21 3202 	smlad	r2, r1, r2, r3
 8015cd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015cda:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8015cde:	601a      	str	r2, [r3, #0]
  return(result);
 8015ce0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015ce4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8015cee:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8015cf2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015cf6:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8015cfa:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8015cfe:	6013      	str	r3, [r2, #0]
 8015d00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015d04:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8015d08:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015d0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015d0e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8015d12:	681a      	ldr	r2, [r3, #0]
 8015d14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015d18:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	fa22 f283 	sxtab16	r2, r2, r3
 8015d22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015d26:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8015d2a:	601a      	str	r2, [r3, #0]
  return(result);
 8015d2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015d30:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8015d3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015d3e:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8015d42:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8015d46:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8015d48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015d4c:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	461a      	mov	r2, r3
 8015d58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015d5c:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 8015d60:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8015d62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015d66:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	1d1a      	adds	r2, r3, #4
 8015d70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015d74:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	601a      	str	r2, [r3, #0]
    return (val);
 8015d7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015d80:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 8015d84:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8015d86:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8015d8a:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8015d8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015d92:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8015d96:	601a      	str	r2, [r3, #0]
 8015d98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015d9c:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8015da0:	2308      	movs	r3, #8
 8015da2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8015da4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015da8:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8015dac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015db0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	f003 031f 	and.w	r3, r3, #31
 8015dba:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8015dbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015dc0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d105      	bne.n	8015dd6 <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 8015dca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015dce:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8015dd2:	6819      	ldr	r1, [r3, #0]
 8015dd4:	e00b      	b.n	8015dee <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 8015dd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015dda:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8015dde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015de2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8015de6:	6812      	ldr	r2, [r2, #0]
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	fa62 f103 	ror.w	r1, r2, r3
 8015dee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015df2:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8015df6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8015dfa:	6013      	str	r3, [r2, #0]
 8015dfc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015e00:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8015e04:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015e06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015e0a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8015e0e:	681a      	ldr	r2, [r3, #0]
 8015e10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015e14:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	fa22 f283 	sxtab16	r2, r2, r3
 8015e1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015e22:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8015e26:	601a      	str	r2, [r3, #0]
  return(result);
 8015e28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015e2c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8015e36:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8015e3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015e3e:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8015e42:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8015e46:	6013      	str	r3, [r2, #0]
 8015e48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015e4c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8015e50:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015e52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015e56:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8015e5a:	681a      	ldr	r2, [r3, #0]
 8015e5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015e60:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	fa22 f283 	sxtab16	r2, r2, r3
 8015e6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015e6e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8015e72:	601a      	str	r2, [r3, #0]
  return(result);
 8015e74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015e78:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8015e82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015e86:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8015e8a:	681a      	ldr	r2, [r3, #0]
 8015e8c:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8015e90:	441a      	add	r2, r3
 8015e92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015e96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015e9a:	601a      	str	r2, [r3, #0]
 8015e9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015ea0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8015eaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015eae:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8015eb2:	601a      	str	r2, [r3, #0]
    return (val);
 8015eb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015eb8:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 8015ec2:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8015ec6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015eca:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8015ece:	601a      	str	r2, [r3, #0]
 8015ed0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015ed4:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8015ed8:	2308      	movs	r3, #8
 8015eda:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8015edc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015ee0:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8015ee4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015ee8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	f003 031f 	and.w	r3, r3, #31
 8015ef2:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8015ef4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015ef8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d105      	bne.n	8015f0e <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 8015f02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015f06:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8015f0a:	6819      	ldr	r1, [r3, #0]
 8015f0c:	e00b      	b.n	8015f26 <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8015f0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015f12:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8015f16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015f1a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8015f1e:	6812      	ldr	r2, [r2, #0]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	fa62 f103 	ror.w	r1, r2, r3
 8015f26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015f2a:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 8015f2e:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8015f32:	6013      	str	r3, [r2, #0]
 8015f34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015f38:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8015f3c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015f3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015f42:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015f46:	681a      	ldr	r2, [r3, #0]
 8015f48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015f4c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	fa22 f283 	sxtab16	r2, r2, r3
 8015f56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015f5a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8015f5e:	601a      	str	r2, [r3, #0]
  return(result);
 8015f60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015f64:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8015f6e:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8015f72:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8015f76:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8015f7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015f7e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8015f82:	601a      	str	r2, [r3, #0]
 8015f84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015f88:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015f8c:	6019      	str	r1, [r3, #0]
 8015f8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015f92:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8015f96:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015f98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015f9c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8015fa0:	6819      	ldr	r1, [r3, #0]
 8015fa2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015fa6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015faa:	681a      	ldr	r2, [r3, #0]
 8015fac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015fb0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	fb21 3202 	smlad	r2, r1, r2, r3
 8015fba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015fbe:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8015fc2:	601a      	str	r2, [r3, #0]
  return(result);
 8015fc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015fc8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8015fd2:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8015fd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015fda:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8015fde:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8015fe2:	6013      	str	r3, [r2, #0]
 8015fe4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015fe8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8015fec:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015fee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015ff2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8015ff6:	681a      	ldr	r2, [r3, #0]
 8015ff8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015ffc:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	fa22 f283 	sxtab16	r2, r2, r3
 8016006:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801600a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801600e:	601a      	str	r2, [r3, #0]
  return(result);
 8016010:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016014:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 801601e:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8016022:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8016026:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801602a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801602e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016032:	601a      	str	r2, [r3, #0]
 8016034:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016038:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801603c:	6019      	str	r1, [r3, #0]
 801603e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016042:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016046:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016048:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801604c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016050:	6819      	ldr	r1, [r3, #0]
 8016052:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016056:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801605a:	681a      	ldr	r2, [r3, #0]
 801605c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016060:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	fb21 3202 	smlad	r2, r1, r2, r3
 801606a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801606e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8016072:	601a      	str	r2, [r3, #0]
  return(result);
 8016074:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016078:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8016082:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8016086:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801608a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801608e:	601a      	str	r2, [r3, #0]
 8016090:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016094:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8016098:	2308      	movs	r3, #8
 801609a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801609c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80160a0:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 80160a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80160a8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	f003 031f 	and.w	r3, r3, #31
 80160b2:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80160b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80160b8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d105      	bne.n	80160ce <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 80160c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80160c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80160ca:	6819      	ldr	r1, [r3, #0]
 80160cc:	e00b      	b.n	80160e6 <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 80160ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80160d2:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 80160d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80160da:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80160de:	6812      	ldr	r2, [r2, #0]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	fa62 f103 	ror.w	r1, r2, r3
 80160e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80160ea:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 80160ee:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80160f2:	6013      	str	r3, [r2, #0]
 80160f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80160f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80160fc:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80160fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016102:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8016106:	681a      	ldr	r2, [r3, #0]
 8016108:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801610c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	fa22 f283 	sxtab16	r2, r2, r3
 8016116:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801611a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801611e:	601a      	str	r2, [r3, #0]
  return(result);
 8016120:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016124:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 801612e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016132:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8016136:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801613a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801613c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016140:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	461a      	mov	r2, r3
 801614c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016150:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 8016154:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8016156:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801615a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	1d1a      	adds	r2, r3, #4
 8016164:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016168:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	601a      	str	r2, [r3, #0]
    return (val);
 8016170:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016174:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 8016178:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801617a:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 801617e:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8016182:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8016186:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 801618a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801618e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8016192:	601a      	str	r2, [r3, #0]
 8016194:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016198:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801619c:	6019      	str	r1, [r3, #0]
 801619e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80161a2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80161a6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80161a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80161ac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80161b0:	6819      	ldr	r1, [r3, #0]
 80161b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80161b6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80161ba:	681a      	ldr	r2, [r3, #0]
 80161bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80161c0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	fb21 3202 	smlad	r2, r1, r2, r3
 80161ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80161ce:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80161d2:	601a      	str	r2, [r3, #0]
  return(result);
 80161d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80161d8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 80161e2:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80161e6:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 80161ea:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 80161ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80161f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80161f6:	601a      	str	r2, [r3, #0]
 80161f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80161fc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8016200:	6019      	str	r1, [r3, #0]
 8016202:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016206:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801620a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801620c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016210:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8016214:	6819      	ldr	r1, [r3, #0]
 8016216:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801621a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801621e:	681a      	ldr	r2, [r3, #0]
 8016220:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016224:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	fb21 3202 	smlad	r2, r1, r2, r3
 801622e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016232:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8016236:	601a      	str	r2, [r3, #0]
  return(result);
 8016238:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801623c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8016246:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801624a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801624e:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 8016252:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8016256:	6013      	str	r3, [r2, #0]
 8016258:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801625c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8016260:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016262:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016266:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801626a:	681a      	ldr	r2, [r3, #0]
 801626c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016270:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	fa22 f283 	sxtab16	r2, r2, r3
 801627a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801627e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8016282:	601a      	str	r2, [r3, #0]
  return(result);
 8016284:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016288:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8016292:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016296:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 801629a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801629e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80162a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80162a4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	461a      	mov	r2, r3
 80162b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80162b4:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 80162b8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80162ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80162be:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	1d1a      	adds	r2, r3, #4
 80162c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80162cc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	601a      	str	r2, [r3, #0]
    return (val);
 80162d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80162d8:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 80162dc:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80162de:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 80162e2:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 80162e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80162ea:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80162ee:	601a      	str	r2, [r3, #0]
 80162f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80162f4:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 80162f8:	2308      	movs	r3, #8
 80162fa:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80162fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016300:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 8016304:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016308:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	f003 031f 	and.w	r3, r3, #31
 8016312:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8016314:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016318:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d105      	bne.n	801632e <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 8016322:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016326:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801632a:	6819      	ldr	r1, [r3, #0]
 801632c:	e00b      	b.n	8016346 <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801632e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016332:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8016336:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801633a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801633e:	6812      	ldr	r2, [r2, #0]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	fa62 f103 	ror.w	r1, r2, r3
 8016346:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801634a:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 801634e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8016352:	6013      	str	r3, [r2, #0]
 8016354:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016358:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801635c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801635e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016362:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8016366:	681a      	ldr	r2, [r3, #0]
 8016368:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801636c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	fa22 f283 	sxtab16	r2, r2, r3
 8016376:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801637a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801637e:	601a      	str	r2, [r3, #0]
  return(result);
 8016380:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016384:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 801638e:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8016392:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016396:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 801639a:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801639e:	6013      	str	r3, [r2, #0]
 80163a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80163a4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80163a8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80163aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80163ae:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80163b2:	681a      	ldr	r2, [r3, #0]
 80163b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80163b8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	fa22 f283 	sxtab16	r2, r2, r3
 80163c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80163c6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80163ca:	601a      	str	r2, [r3, #0]
  return(result);
 80163cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80163d0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 80163da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80163de:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80163e2:	681a      	ldr	r2, [r3, #0]
 80163e4:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 80163e8:	441a      	add	r2, r3
 80163ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80163ee:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80163f2:	601a      	str	r2, [r3, #0]
 80163f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80163f8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8016402:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016406:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 801640a:	601a      	str	r2, [r3, #0]
    return (val);
 801640c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016410:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 801641a:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801641e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016422:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8016426:	601a      	str	r2, [r3, #0]
 8016428:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801642c:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8016430:	2308      	movs	r3, #8
 8016432:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8016434:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016438:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801643c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016440:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	f003 031f 	and.w	r3, r3, #31
 801644a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801644c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016450:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d105      	bne.n	8016466 <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 801645a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801645e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8016462:	6819      	ldr	r1, [r3, #0]
 8016464:	e00b      	b.n	801647e <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 8016466:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801646a:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 801646e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016472:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016476:	6812      	ldr	r2, [r2, #0]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	fa62 f103 	ror.w	r1, r2, r3
 801647e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016482:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8016486:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801648a:	6013      	str	r3, [r2, #0]
 801648c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016490:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8016494:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016496:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801649a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801649e:	681a      	ldr	r2, [r3, #0]
 80164a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80164a4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	fa22 f283 	sxtab16	r2, r2, r3
 80164ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80164b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80164b6:	601a      	str	r2, [r3, #0]
  return(result);
 80164b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80164bc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 80164c6:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 80164ca:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 80164ce:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 80164d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80164d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80164da:	601a      	str	r2, [r3, #0]
 80164dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80164e0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80164e4:	6019      	str	r1, [r3, #0]
 80164e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80164ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80164ee:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80164f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80164f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80164f8:	6819      	ldr	r1, [r3, #0]
 80164fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80164fe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8016502:	681a      	ldr	r2, [r3, #0]
 8016504:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016508:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	fb21 3202 	smlad	r2, r1, r2, r3
 8016512:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016516:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801651a:	601a      	str	r2, [r3, #0]
  return(result);
 801651c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016520:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 801652a:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801652e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016532:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8016536:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801653a:	6013      	str	r3, [r2, #0]
 801653c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016540:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016544:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016546:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801654a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801654e:	681a      	ldr	r2, [r3, #0]
 8016550:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016554:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	fa22 f283 	sxtab16	r2, r2, r3
 801655e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016562:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8016566:	601a      	str	r2, [r3, #0]
  return(result);
 8016568:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801656c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8016576:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801657a:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801657e:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8016582:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016586:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801658a:	601a      	str	r2, [r3, #0]
 801658c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016590:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8016594:	6019      	str	r1, [r3, #0]
 8016596:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801659a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801659e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80165a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80165a4:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80165a8:	6819      	ldr	r1, [r3, #0]
 80165aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80165ae:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80165b2:	681a      	ldr	r2, [r3, #0]
 80165b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80165b8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	fb21 3202 	smlad	r2, r1, r2, r3
 80165c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80165c6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80165ca:	601a      	str	r2, [r3, #0]
  return(result);
 80165cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80165d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 80165da:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 80165de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80165e2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80165e6:	601a      	str	r2, [r3, #0]
 80165e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80165ec:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 80165f0:	2308      	movs	r3, #8
 80165f2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80165f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80165f8:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 80165fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016600:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	f003 031f 	and.w	r3, r3, #31
 801660a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801660c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016610:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d105      	bne.n	8016626 <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 801661a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801661e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8016622:	6819      	ldr	r1, [r3, #0]
 8016624:	e00b      	b.n	801663e <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 8016626:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801662a:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 801662e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016632:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016636:	6812      	ldr	r2, [r2, #0]
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	fa62 f103 	ror.w	r1, r2, r3
 801663e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016642:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8016646:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801664a:	6013      	str	r3, [r2, #0]
 801664c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016650:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8016654:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016656:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801665a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801665e:	681a      	ldr	r2, [r3, #0]
 8016660:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016664:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	fa22 f283 	sxtab16	r2, r2, r3
 801666e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016672:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8016676:	601a      	str	r2, [r3, #0]
  return(result);
 8016678:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801667c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8016686:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801668a:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 801668e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8016692:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8016694:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016698:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	461a      	mov	r2, r3
 80166a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80166a8:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 80166ac:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80166ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80166b2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	1d1a      	adds	r2, r3, #4
 80166bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80166c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	601a      	str	r2, [r3, #0]
    return (val);
 80166c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80166cc:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 80166d0:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80166d2:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 80166d6:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 80166da:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 80166de:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 80166e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80166e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80166ea:	601a      	str	r2, [r3, #0]
 80166ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80166f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80166f4:	6019      	str	r1, [r3, #0]
 80166f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80166fa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80166fe:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016700:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016704:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8016708:	6819      	ldr	r1, [r3, #0]
 801670a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801670e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8016712:	681a      	ldr	r2, [r3, #0]
 8016714:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016718:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	fb21 3202 	smlad	r2, r1, r2, r3
 8016722:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016726:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801672a:	601a      	str	r2, [r3, #0]
  return(result);
 801672c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016730:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 801673a:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801673e:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8016742:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8016746:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801674a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801674e:	601a      	str	r2, [r3, #0]
 8016750:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016754:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016758:	6019      	str	r1, [r3, #0]
 801675a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801675e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016762:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016764:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016768:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801676c:	6819      	ldr	r1, [r3, #0]
 801676e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016772:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016776:	681a      	ldr	r2, [r3, #0]
 8016778:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801677c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	fb21 3202 	smlad	r2, r1, r2, r3
 8016786:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801678a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801678e:	601a      	str	r2, [r3, #0]
  return(result);
 8016790:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016794:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 801679e:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 80167a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80167a6:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80167aa:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80167ae:	6013      	str	r3, [r2, #0]
 80167b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80167b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80167b8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80167ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80167be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80167c2:	681a      	ldr	r2, [r3, #0]
 80167c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80167c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	fa22 f283 	sxtab16	r2, r2, r3
 80167d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80167d6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80167da:	601a      	str	r2, [r3, #0]
  return(result);
 80167dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80167e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 80167ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80167ee:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 80167f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80167f6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80167f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80167fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	461a      	mov	r2, r3
 8016808:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801680c:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8016810:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8016812:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016816:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	1d1a      	adds	r2, r3, #4
 8016820:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016824:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	601a      	str	r2, [r3, #0]
    return (val);
 801682c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016830:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8016834:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8016836:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801683a:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 801683e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016842:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016846:	601a      	str	r2, [r3, #0]
 8016848:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801684c:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8016850:	2308      	movs	r3, #8
 8016852:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8016854:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016858:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 801685c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016860:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	f003 031f 	and.w	r3, r3, #31
 801686a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801686c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016870:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d105      	bne.n	8016886 <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 801687a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801687e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016882:	6819      	ldr	r1, [r3, #0]
 8016884:	e00b      	b.n	801689e <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 8016886:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801688a:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 801688e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016892:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8016896:	6812      	ldr	r2, [r2, #0]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	fa62 f103 	ror.w	r1, r2, r3
 801689e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80168a2:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 80168a6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80168aa:	6013      	str	r3, [r2, #0]
 80168ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80168b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80168b4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80168b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80168ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80168be:	681a      	ldr	r2, [r3, #0]
 80168c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80168c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	fa22 f283 	sxtab16	r2, r2, r3
 80168ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80168d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80168d6:	601a      	str	r2, [r3, #0]
  return(result);
 80168d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80168dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 80168e6:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80168ea:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 80168ee:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 80168f2:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80168f6:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 80168fa:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80168fe:	fa22 f283 	sxtab16	r2, r2, r3
 8016902:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016906:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801690a:	601a      	str	r2, [r3, #0]
  return(result);
 801690c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016910:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 801691a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801691e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8016922:	681a      	ldr	r2, [r3, #0]
 8016924:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8016928:	4413      	add	r3, r2
 801692a:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 801692e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8016936:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801693a:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 801693e:	601a      	str	r2, [r3, #0]
    return (val);
 8016940:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016944:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 801694e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 8016952:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8016956:	2308      	movs	r3, #8
 8016958:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 801695c:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8016960:	f003 031f 	and.w	r3, r3, #31
 8016964:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 8016968:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 801696c:	2b00      	cmp	r3, #0
 801696e:	d102      	bne.n	8016976 <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 8016970:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8016974:	e004      	b.n	8016980 <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 8016976:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 801697a:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 801697e:	41da      	rors	r2, r3
 8016980:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8016984:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 8016988:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801698c:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 8016990:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8016994:	fa22 f383 	sxtab16	r3, r2, r3
 8016998:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 801699c:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 80169a0:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 80169a4:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 80169a8:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 80169ac:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 80169b0:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 80169b4:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 80169b8:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80169bc:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 80169c0:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 80169c4:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 80169c8:	fb21 3302 	smlad	r3, r1, r2, r3
 80169cc:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 80169d0:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 80169d4:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 80169d8:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 80169dc:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80169e0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80169e4:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80169e8:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80169ec:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 80169f0:	fa22 f383 	sxtab16	r3, r2, r3
 80169f4:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 80169f8:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 80169fc:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8016a00:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8016a04:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8016a08:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8016a0c:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 8016a10:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8016a14:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016a18:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8016a1c:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8016a20:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8016a24:	fb21 3302 	smlad	r3, r1, r2, r3
 8016a28:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 8016a2c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8016a30:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8016a34:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 8016a38:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8016a3c:	2308      	movs	r3, #8
 8016a3e:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 8016a42:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8016a46:	f003 031f 	and.w	r3, r3, #31
 8016a4a:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 8016a4e:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d102      	bne.n	8016a5c <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 8016a56:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8016a5a:	e004      	b.n	8016a66 <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8016a5c:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8016a60:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8016a64:	41da      	rors	r2, r3
 8016a66:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8016a6a:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 8016a6e:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016a72:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 8016a76:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8016a7a:	fa22 f383 	sxtab16	r3, r2, r3
 8016a7e:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 8016a82:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8016a86:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 8016a8a:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8016a8e:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 8016a92:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8016a96:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 8016a9a:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 8016a9e:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016aa2:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 8016aa6:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 8016aaa:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 8016aae:	fb21 3302 	smlad	r3, r1, r2, r3
 8016ab2:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 8016ab6:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8016aba:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8016abe:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8016ac2:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8016ac6:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8016aca:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 8016ace:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 8016ad2:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016ad6:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8016ada:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 8016ade:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8016ae2:	fb21 3302 	smlad	r3, r1, r2, r3
 8016ae6:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 8016aea:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8016aee:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8016af2:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8016af6:	3310      	adds	r3, #16
 8016af8:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8016afc:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8016b00:	f1a3 020f 	sub.w	r2, r3, #15
 8016b04:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8016b08:	4293      	cmp	r3, r2
 8016b0a:	f6fe ae1c 	blt.w	8015746 <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8016b0e:	e05a      	b.n	8016bc6 <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 8016b10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016b14:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	f993 3000 	ldrsb.w	r3, [r3]
 8016b1e:	461a      	mov	r2, r3
 8016b20:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8016b24:	4413      	add	r3, r2
 8016b26:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 8016b2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016b2e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8016b32:	681a      	ldr	r2, [r3, #0]
 8016b34:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8016b38:	4413      	add	r3, r2
 8016b3a:	f993 3000 	ldrsb.w	r3, [r3]
 8016b3e:	461a      	mov	r2, r3
 8016b40:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8016b44:	4413      	add	r3, r2
 8016b46:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8016b4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016b4e:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	f993 3000 	ldrsb.w	r3, [r3]
 8016b58:	461a      	mov	r2, r3
 8016b5a:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8016b5e:	4413      	add	r3, r2
 8016b60:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 8016b64:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8016b68:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8016b6c:	fb03 f202 	mul.w	r2, r3, r2
 8016b70:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8016b74:	4413      	add	r3, r2
 8016b76:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 8016b7a:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8016b7e:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 8016b82:	fb03 f202 	mul.w	r2, r3, r2
 8016b86:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8016b8a:	4413      	add	r3, r2
 8016b8c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 8016b90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016b94:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	1c5a      	adds	r2, r3, #1
 8016b9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016ba0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8016ba4:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 8016ba6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016baa:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	1c5a      	adds	r2, r3, #1
 8016bb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016bb6:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8016bba:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8016bbc:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8016bc0:	3301      	adds	r3, #1
 8016bc2:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8016bc6:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 8016bca:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8016bce:	429a      	cmp	r2, r3
 8016bd0:	db9e      	blt.n	8016b10 <arm_nn_vec_mat_mult_t_s8+0x14f4>
 8016bd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016bd6:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8016bda:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8016bde:	6013      	str	r3, [r2, #0]
 8016be0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016be4:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 8016be8:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8016bec:	6013      	str	r3, [r2, #0]
 8016bee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016bf2:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8016bf6:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8016bfa:	6013      	str	r3, [r2, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016bfc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016c00:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8016c0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016c0e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	fa03 f202 	lsl.w	r2, r3, r2
 8016c18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016c1c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8016c20:	601a      	str	r2, [r3, #0]
 8016c22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016c26:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8016c2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016c2e:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016c36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016c3a:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8016c3e:	2300      	movs	r3, #0
 8016c40:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8016c42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8016c46:	461a      	mov	r2, r3
 8016c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016c4c:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8016c4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8016c52:	461a      	mov	r2, r3
 8016c54:	2300      	movs	r3, #0
 8016c56:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8016c58:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8016c5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016c60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016c64:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	17da      	asrs	r2, r3, #31
 8016c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8016c6e:	637a      	str	r2, [r7, #52]	; 0x34
 8016c70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016c74:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	17da      	asrs	r2, r3, #31
 8016c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8016c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c84:	fb02 f203 	mul.w	r2, r2, r3
 8016c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c8a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8016c8c:	fb04 f303 	mul.w	r3, r4, r3
 8016c90:	4413      	add	r3, r2
 8016c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c94:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8016c96:	fba2 5604 	umull	r5, r6, r2, r4
 8016c9a:	4433      	add	r3, r6
 8016c9c:	461e      	mov	r6, r3
 8016c9e:	1943      	adds	r3, r0, r5
 8016ca0:	61bb      	str	r3, [r7, #24]
 8016ca2:	eb41 0306 	adc.w	r3, r1, r6
 8016ca6:	61fb      	str	r3, [r7, #28]
 8016ca8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8016cac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8016cb0:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8016cb4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8016cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cbc:	f04f 0000 	mov.w	r0, #0
 8016cc0:	f04f 0100 	mov.w	r1, #0
 8016cc4:	0fd0      	lsrs	r0, r2, #31
 8016cc6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016cca:	17d9      	asrs	r1, r3, #31
 8016ccc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016cd0:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	6013      	str	r3, [r2, #0]
    return result;
 8016cd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016cdc:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8016ce0:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016ce2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016ce6:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	dc06      	bgt.n	8016cfe <arm_nn_vec_mat_mult_t_s8+0x16e2>
 8016cf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016cf4:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	425a      	negs	r2, r3
 8016cfc:	e000      	b.n	8016d00 <arm_nn_vec_mat_mult_t_s8+0x16e4>
 8016cfe:	2200      	movs	r2, #0
 8016d00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016d04:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8016d08:	6019      	str	r1, [r3, #0]
 8016d0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016d0e:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8016d12:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8016d14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016d18:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8016d20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016d24:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8016d28:	2201      	movs	r2, #1
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	fa02 f103 	lsl.w	r1, r2, r3
 8016d30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016d34:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 8016d38:	1e4b      	subs	r3, r1, #1
 8016d3a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8016d3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016d40:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 8016d44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016d48:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8016d4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016d50:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8016d54:	6812      	ldr	r2, [r2, #0]
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	4013      	ands	r3, r2
 8016d5a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8016d5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016d60:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 8016d64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016d68:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8016d6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016d70:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8016d74:	6812      	ldr	r2, [r2, #0]
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	fa42 f303 	asr.w	r3, r2, r3
 8016d7c:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8016d7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016d82:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8016d86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016d8a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	105b      	asrs	r3, r3, #1
 8016d92:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8016d94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016d98:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	da0a      	bge.n	8016db8 <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 8016da2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016da6:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8016daa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016dae:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	3301      	adds	r3, #1
 8016db6:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8016db8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016dbc:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 8016dc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016dc4:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8016dc8:	6812      	ldr	r2, [r2, #0]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	429a      	cmp	r2, r3
 8016dce:	dd0a      	ble.n	8016de6 <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 8016dd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016dd4:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8016dd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016ddc:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	3301      	adds	r3, #1
 8016de4:	6013      	str	r3, [r2, #0]
    return result;
 8016de6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016dea:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8016dee:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016df0:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 8016df2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 8016df6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016dfa:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 8016dfe:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8016e02:	6013      	str	r3, [r2, #0]
 8016e04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016e08:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8016e0c:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8016e10:	6013      	str	r3, [r2, #0]
 8016e12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016e16:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8016e1a:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8016e1e:	6013      	str	r3, [r2, #0]
 8016e20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016e24:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8016e2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016e32:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	fa03 f202 	lsl.w	r2, r3, r2
 8016e3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016e40:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8016e44:	601a      	str	r2, [r3, #0]
 8016e46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016e4a:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8016e4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016e52:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016e5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016e5e:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8016e62:	2300      	movs	r3, #0
 8016e64:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8016e66:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8016e6a:	461a      	mov	r2, r3
 8016e6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016e70:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8016e74:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8016e78:	461a      	mov	r2, r3
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8016e80:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8016e84:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016e88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016e8c:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	17da      	asrs	r2, r3, #31
 8016e94:	643b      	str	r3, [r7, #64]	; 0x40
 8016e96:	647a      	str	r2, [r7, #68]	; 0x44
 8016e98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016e9c:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	17da      	asrs	r2, r3, #31
 8016ea4:	63bb      	str	r3, [r7, #56]	; 0x38
 8016ea6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8016ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016eac:	fb02 f203 	mul.w	r2, r2, r3
 8016eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016eb2:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8016eb4:	fb04 f303 	mul.w	r3, r4, r3
 8016eb8:	4413      	add	r3, r2
 8016eba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016ebc:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8016ebe:	fba2 ab04 	umull	sl, fp, r2, r4
 8016ec2:	445b      	add	r3, fp
 8016ec4:	469b      	mov	fp, r3
 8016ec6:	eb10 030a 	adds.w	r3, r0, sl
 8016eca:	623b      	str	r3, [r7, #32]
 8016ecc:	eb41 030b 	adc.w	r3, r1, fp
 8016ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8016ed2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8016ed6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8016eda:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 8016ede:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8016ee2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016ee6:	f04f 0000 	mov.w	r0, #0
 8016eea:	f04f 0100 	mov.w	r1, #0
 8016eee:	0fd0      	lsrs	r0, r2, #31
 8016ef0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016ef4:	17d9      	asrs	r1, r3, #31
 8016ef6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016efa:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8016efe:	4603      	mov	r3, r0
 8016f00:	6013      	str	r3, [r2, #0]
    return result;
 8016f02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016f06:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8016f0a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016f0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016f10:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	dc06      	bgt.n	8016f28 <arm_nn_vec_mat_mult_t_s8+0x190c>
 8016f1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016f1e:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	425a      	negs	r2, r3
 8016f26:	e000      	b.n	8016f2a <arm_nn_vec_mat_mult_t_s8+0x190e>
 8016f28:	2200      	movs	r2, #0
 8016f2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016f2e:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8016f32:	6019      	str	r1, [r3, #0]
 8016f34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016f38:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8016f3c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8016f3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016f42:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8016f46:	2300      	movs	r3, #0
 8016f48:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8016f4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016f4e:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8016f52:	2201      	movs	r2, #1
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	fa02 f103 	lsl.w	r1, r2, r3
 8016f5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016f5e:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 8016f62:	1e4b      	subs	r3, r1, #1
 8016f64:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8016f66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016f6a:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 8016f6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016f72:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8016f76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016f7a:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8016f7e:	6812      	ldr	r2, [r2, #0]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	4013      	ands	r3, r2
 8016f84:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8016f86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016f8a:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 8016f8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016f92:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8016f96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016f9a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8016f9e:	6812      	ldr	r2, [r2, #0]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	fa42 f303 	asr.w	r3, r2, r3
 8016fa6:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8016fa8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016fac:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8016fb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016fb4:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	105b      	asrs	r3, r3, #1
 8016fbc:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8016fbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016fc2:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	da0a      	bge.n	8016fe2 <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 8016fcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016fd0:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8016fd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016fd8:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	3301      	adds	r3, #1
 8016fe0:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8016fe2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016fe6:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 8016fea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016fee:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8016ff2:	6812      	ldr	r2, [r2, #0]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	429a      	cmp	r2, r3
 8016ff8:	dd0a      	ble.n	8017010 <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 8016ffa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8016ffe:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8017002:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017006:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	3301      	adds	r3, #1
 801700e:	6013      	str	r3, [r2, #0]
    return result;
 8017010:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017014:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8017018:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801701a:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 801701c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 8017020:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 8017024:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8017028:	4413      	add	r3, r2
 801702a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 801702e:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 8017032:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8017036:	4413      	add	r3, r2
 8017038:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 801703c:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 8017040:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8017044:	4293      	cmp	r3, r2
 8017046:	bfb8      	it	lt
 8017048:	4613      	movlt	r3, r2
 801704a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 801704e:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 8017052:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8017056:	4293      	cmp	r3, r2
 8017058:	bfa8      	it	ge
 801705a:	4613      	movge	r3, r2
 801705c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 8017060:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 8017064:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8017068:	4293      	cmp	r3, r2
 801706a:	bfb8      	it	lt
 801706c:	4613      	movlt	r3, r2
 801706e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 8017072:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 8017076:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 801707a:	4293      	cmp	r3, r2
 801707c:	bfa8      	it	ge
 801707e:	4613      	movge	r3, r2
 8017080:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 8017084:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017088:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 801708c:	6819      	ldr	r1, [r3, #0]
 801708e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017092:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 8017096:	1c4b      	adds	r3, r1, #1
 8017098:	6013      	str	r3, [r2, #0]
 801709a:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 801709e:	b25b      	sxtb	r3, r3
 80170a0:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 80170a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80170a6:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 80170aa:	6819      	ldr	r1, [r3, #0]
 80170ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80170b0:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 80170b4:	1c4b      	adds	r3, r1, #1
 80170b6:	6013      	str	r3, [r2, #0]
 80170b8:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80170bc:	b25b      	sxtb	r3, r3
 80170be:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 80170c0:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80170c4:	005b      	lsls	r3, r3, #1
 80170c6:	4619      	mov	r1, r3
 80170c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80170cc:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 80170d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80170d4:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	440b      	add	r3, r1
 80170dc:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 80170de:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 80170e2:	3302      	adds	r3, #2
 80170e4:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 80170e8:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80170ec:	1e5a      	subs	r2, r3, #1
 80170ee:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 80170f2:	4293      	cmp	r3, r2
 80170f4:	f6fe aae5 	blt.w	80156c2 <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 80170f8:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80170fc:	f003 0301 	and.w	r3, r3, #1
 8017100:	2b00      	cmp	r3, #0
 8017102:	f001 806e 	beq.w	80181e2 <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 8017106:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801710a:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 801710e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017112:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 8017116:	6812      	ldr	r2, [r2, #0]
 8017118:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 801711a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801711e:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8017122:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017126:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 801712a:	6812      	ldr	r2, [r2, #0]
 801712c:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 801712e:	2300      	movs	r3, #0
 8017130:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 8017134:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017138:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d00d      	beq.n	801715e <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 8017142:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017146:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017150:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 8017154:	1d19      	adds	r1, r3, #4
 8017156:	6011      	str	r1, [r2, #0]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 801715e:	2300      	movs	r3, #0
 8017160:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8017164:	f000 beb5 	b.w	8017ed2 <arm_nn_vec_mat_mult_t_s8+0x28b6>
 8017168:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801716c:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8017170:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8017174:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8017176:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801717a:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	461a      	mov	r2, r3
 8017186:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801718a:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 801718e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8017190:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017194:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	1d1a      	adds	r2, r3, #4
 801719e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80171a2:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	601a      	str	r2, [r3, #0]
    return (val);
 80171aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80171ae:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 80171b2:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80171b4:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 80171b8:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 80171bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80171c0:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80171c4:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80171c8:	6019      	str	r1, [r3, #0]
 80171ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80171ce:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80171d2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80171d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80171d8:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80171e2:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 80171e6:	6812      	ldr	r2, [r2, #0]
 80171e8:	fa23 f282 	sxtab16	r2, r3, r2
 80171ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80171f0:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80171f4:	601a      	str	r2, [r3, #0]
  return(result);
 80171f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80171fa:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8017204:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017208:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801720c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8017210:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8017212:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017216:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	461a      	mov	r2, r3
 8017222:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017226:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 801722a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801722c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017230:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	1d1a      	adds	r2, r3, #4
 801723a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801723e:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	601a      	str	r2, [r3, #0]
    return (val);
 8017246:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801724a:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 801724e:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8017250:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8017254:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8017258:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801725c:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8017260:	601a      	str	r2, [r3, #0]
 8017262:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017266:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801726a:	2208      	movs	r2, #8
 801726c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801726e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017272:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8017276:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801727a:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 801727e:	6812      	ldr	r2, [r2, #0]
 8017280:	f002 021f 	and.w	r2, r2, #31
 8017284:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8017286:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801728a:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	2b00      	cmp	r3, #0
 8017292:	d105      	bne.n	80172a0 <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 8017294:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017298:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	e00b      	b.n	80172b8 <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 80172a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80172a4:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 80172a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80172ac:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 80172b0:	6812      	ldr	r2, [r2, #0]
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	fa62 f303 	ror.w	r3, r2, r3
 80172b8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80172bc:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 80172c0:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80172c4:	6011      	str	r1, [r2, #0]
 80172c6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80172ca:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 80172ce:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80172d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80172d4:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80172de:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 80172e2:	6812      	ldr	r2, [r2, #0]
 80172e4:	fa23 f282 	sxtab16	r2, r3, r2
 80172e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80172ec:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 80172f0:	601a      	str	r2, [r3, #0]
  return(result);
 80172f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80172f6:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 80172fa:	681b      	ldr	r3, [r3, #0]
 80172fc:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8017300:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8017304:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017308:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 801730c:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8017310:	6019      	str	r1, [r3, #0]
 8017312:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017316:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 801731a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801731c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017320:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801732a:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 801732e:	6812      	ldr	r2, [r2, #0]
 8017330:	fa23 f282 	sxtab16	r2, r3, r2
 8017334:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017338:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 801733c:	601a      	str	r2, [r3, #0]
  return(result);
 801733e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017342:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 801734c:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8017350:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017354:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 8017358:	601a      	str	r2, [r3, #0]
 801735a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801735e:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8017362:	2208      	movs	r2, #8
 8017364:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8017366:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801736a:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 801736e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017372:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 8017376:	6812      	ldr	r2, [r2, #0]
 8017378:	f002 021f 	and.w	r2, r2, #31
 801737c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801737e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017382:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d105      	bne.n	8017398 <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 801738c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017390:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 8017394:	681b      	ldr	r3, [r3, #0]
 8017396:	e00b      	b.n	80173b0 <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 8017398:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801739c:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 80173a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80173a4:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 80173a8:	6812      	ldr	r2, [r2, #0]
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	fa62 f303 	ror.w	r3, r2, r3
 80173b0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80173b4:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 80173b8:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80173bc:	6011      	str	r1, [r2, #0]
 80173be:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80173c2:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 80173c6:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80173c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80173cc:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80173d6:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 80173da:	6812      	ldr	r2, [r2, #0]
 80173dc:	fa23 f282 	sxtab16	r2, r3, r2
 80173e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80173e4:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80173e8:	601a      	str	r2, [r3, #0]
  return(result);
 80173ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80173ee:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 80173f8:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 80173fc:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8017400:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8017404:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017408:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 801740c:	6018      	str	r0, [r3, #0]
 801740e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017412:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 8017416:	6019      	str	r1, [r3, #0]
 8017418:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801741c:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8017420:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017422:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017426:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017430:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 8017434:	6812      	ldr	r2, [r2, #0]
 8017436:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801743a:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 801743e:	6809      	ldr	r1, [r1, #0]
 8017440:	fb23 1202 	smlad	r2, r3, r2, r1
 8017444:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017448:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 801744c:	601a      	str	r2, [r3, #0]
  return(result);
 801744e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017452:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 801745c:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8017460:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8017464:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8017468:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801746c:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8017470:	6018      	str	r0, [r3, #0]
 8017472:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017476:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 801747a:	6019      	str	r1, [r3, #0]
 801747c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017480:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8017484:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017486:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801748a:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017494:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 8017498:	6812      	ldr	r2, [r2, #0]
 801749a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801749e:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 80174a2:	6809      	ldr	r1, [r1, #0]
 80174a4:	fb23 1202 	smlad	r2, r3, r2, r1
 80174a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80174ac:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 80174b0:	601a      	str	r2, [r3, #0]
  return(result);
 80174b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80174b6:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 80174c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80174c4:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80174c8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80174cc:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80174ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80174d2:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	461a      	mov	r2, r3
 80174de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80174e2:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 80174e6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80174e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80174ec:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	1d1a      	adds	r2, r3, #4
 80174f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80174fa:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	601a      	str	r2, [r3, #0]
    return (val);
 8017502:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017506:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 801750a:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801750c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8017510:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8017514:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017518:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801751c:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8017520:	6019      	str	r1, [r3, #0]
 8017522:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017526:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 801752a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801752c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017530:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801753a:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 801753e:	6812      	ldr	r2, [r2, #0]
 8017540:	fa23 f282 	sxtab16	r2, r3, r2
 8017544:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017548:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 801754c:	601a      	str	r2, [r3, #0]
  return(result);
 801754e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017552:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 801755c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017560:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8017564:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8017568:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801756a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801756e:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	461a      	mov	r2, r3
 801757a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801757e:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8017582:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8017584:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017588:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	1d1a      	adds	r2, r3, #4
 8017592:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017596:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	601a      	str	r2, [r3, #0]
    return (val);
 801759e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80175a2:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 80175a6:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80175a8:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 80175ac:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 80175b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80175b4:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80175b8:	601a      	str	r2, [r3, #0]
 80175ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80175be:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80175c2:	2208      	movs	r2, #8
 80175c4:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80175c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80175ca:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80175ce:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80175d2:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 80175d6:	6812      	ldr	r2, [r2, #0]
 80175d8:	f002 021f 	and.w	r2, r2, #31
 80175dc:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80175de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80175e2:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d105      	bne.n	80175f8 <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 80175ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80175f0:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	e00b      	b.n	8017610 <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 80175f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80175fc:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 8017600:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017604:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8017608:	6812      	ldr	r2, [r2, #0]
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	fa62 f303 	ror.w	r3, r2, r3
 8017610:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017614:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 8017618:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 801761c:	6011      	str	r1, [r2, #0]
 801761e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017622:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 8017626:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017628:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801762c:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017636:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 801763a:	6812      	ldr	r2, [r2, #0]
 801763c:	fa23 f282 	sxtab16	r2, r3, r2
 8017640:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017644:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8017648:	601a      	str	r2, [r3, #0]
  return(result);
 801764a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801764e:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8017658:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801765c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017660:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8017664:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8017668:	6019      	str	r1, [r3, #0]
 801766a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801766e:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8017672:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017674:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017678:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017682:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 8017686:	6812      	ldr	r2, [r2, #0]
 8017688:	fa23 f282 	sxtab16	r2, r3, r2
 801768c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017690:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8017694:	601a      	str	r2, [r3, #0]
  return(result);
 8017696:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801769a:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 80176a4:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 80176a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80176ac:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80176b0:	601a      	str	r2, [r3, #0]
 80176b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80176b6:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 80176ba:	2208      	movs	r2, #8
 80176bc:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80176be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80176c2:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 80176c6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80176ca:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 80176ce:	6812      	ldr	r2, [r2, #0]
 80176d0:	f002 021f 	and.w	r2, r2, #31
 80176d4:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80176d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80176da:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d105      	bne.n	80176f0 <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 80176e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80176e8:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	e00b      	b.n	8017708 <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 80176f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80176f4:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 80176f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80176fc:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8017700:	6812      	ldr	r2, [r2, #0]
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	fa62 f303 	ror.w	r3, r2, r3
 8017708:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801770c:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 8017710:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8017714:	6011      	str	r1, [r2, #0]
 8017716:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801771a:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 801771e:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017720:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017724:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801772e:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 8017732:	6812      	ldr	r2, [r2, #0]
 8017734:	fa23 f282 	sxtab16	r2, r3, r2
 8017738:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801773c:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8017740:	601a      	str	r2, [r3, #0]
  return(result);
 8017742:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017746:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8017750:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8017754:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8017758:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801775c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017760:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8017764:	6018      	str	r0, [r3, #0]
 8017766:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801776a:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 801776e:	6019      	str	r1, [r3, #0]
 8017770:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017774:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8017778:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801777a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801777e:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017788:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 801778c:	6812      	ldr	r2, [r2, #0]
 801778e:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8017792:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 8017796:	6809      	ldr	r1, [r1, #0]
 8017798:	fb23 1202 	smlad	r2, r3, r2, r1
 801779c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80177a0:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 80177a4:	601a      	str	r2, [r3, #0]
  return(result);
 80177a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80177aa:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 80177b4:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 80177b8:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 80177bc:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80177c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80177c4:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 80177c8:	6018      	str	r0, [r3, #0]
 80177ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80177ce:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80177d2:	6019      	str	r1, [r3, #0]
 80177d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80177d8:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80177dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80177de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80177e2:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80177ec:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 80177f0:	6812      	ldr	r2, [r2, #0]
 80177f2:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80177f6:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 80177fa:	6809      	ldr	r1, [r1, #0]
 80177fc:	fb23 1202 	smlad	r2, r3, r2, r1
 8017800:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017804:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8017808:	601a      	str	r2, [r3, #0]
  return(result);
 801780a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801780e:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8017818:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801781c:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8017820:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8017824:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8017826:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801782a:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	461a      	mov	r2, r3
 8017836:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801783a:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 801783e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8017840:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017844:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	1d1a      	adds	r2, r3, #4
 801784e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017852:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	601a      	str	r2, [r3, #0]
    return (val);
 801785a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801785e:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8017862:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8017864:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8017868:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 801786c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017870:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8017874:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8017878:	6019      	str	r1, [r3, #0]
 801787a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801787e:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8017882:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017884:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017888:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017892:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 8017896:	6812      	ldr	r2, [r2, #0]
 8017898:	fa23 f282 	sxtab16	r2, r3, r2
 801789c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80178a0:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 80178a4:	601a      	str	r2, [r3, #0]
  return(result);
 80178a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80178aa:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 80178b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80178b8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80178bc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80178c0:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80178c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80178c6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	461a      	mov	r2, r3
 80178d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80178d6:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 80178da:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80178dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80178e0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	1d1a      	adds	r2, r3, #4
 80178ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80178ee:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	601a      	str	r2, [r3, #0]
    return (val);
 80178f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80178fa:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 80178fe:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8017900:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8017904:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8017908:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801790c:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8017910:	601a      	str	r2, [r3, #0]
 8017912:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017916:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 801791a:	2208      	movs	r2, #8
 801791c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801791e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017922:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8017926:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801792a:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 801792e:	6812      	ldr	r2, [r2, #0]
 8017930:	f002 021f 	and.w	r2, r2, #31
 8017934:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8017936:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801793a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d105      	bne.n	8017950 <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 8017944:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017948:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	e00b      	b.n	8017968 <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8017950:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017954:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 8017958:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801795c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8017960:	6812      	ldr	r2, [r2, #0]
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	fa62 f303 	ror.w	r3, r2, r3
 8017968:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801796c:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8017970:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8017974:	6011      	str	r1, [r2, #0]
 8017976:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801797a:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 801797e:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017980:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017984:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801798e:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8017992:	6812      	ldr	r2, [r2, #0]
 8017994:	fa23 f282 	sxtab16	r2, r3, r2
 8017998:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801799c:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80179a0:	601a      	str	r2, [r3, #0]
  return(result);
 80179a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80179a6:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 80179b0:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 80179b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80179b8:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 80179bc:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80179c0:	6019      	str	r1, [r3, #0]
 80179c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80179c6:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 80179ca:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80179cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80179d0:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80179da:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 80179de:	6812      	ldr	r2, [r2, #0]
 80179e0:	fa23 f282 	sxtab16	r2, r3, r2
 80179e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80179e8:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 80179ec:	601a      	str	r2, [r3, #0]
  return(result);
 80179ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80179f2:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 80179fc:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8017a00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017a04:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8017a08:	601a      	str	r2, [r3, #0]
 8017a0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017a0e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8017a12:	2208      	movs	r2, #8
 8017a14:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8017a16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017a1a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8017a1e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017a22:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 8017a26:	6812      	ldr	r2, [r2, #0]
 8017a28:	f002 021f 	and.w	r2, r2, #31
 8017a2c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8017a2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017a32:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d105      	bne.n	8017a48 <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 8017a3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017a40:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	e00b      	b.n	8017a60 <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 8017a48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017a4c:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 8017a50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017a54:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8017a58:	6812      	ldr	r2, [r2, #0]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	fa62 f303 	ror.w	r3, r2, r3
 8017a60:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017a64:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8017a68:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8017a6c:	6011      	str	r1, [r2, #0]
 8017a6e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017a72:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8017a76:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017a78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017a7c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017a86:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8017a8a:	6812      	ldr	r2, [r2, #0]
 8017a8c:	fa23 f282 	sxtab16	r2, r3, r2
 8017a90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017a94:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8017a98:	601a      	str	r2, [r3, #0]
  return(result);
 8017a9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017a9e:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8017aa8:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8017aac:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8017ab0:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8017ab4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017ab8:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8017abc:	6018      	str	r0, [r3, #0]
 8017abe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017ac2:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8017ac6:	6019      	str	r1, [r3, #0]
 8017ac8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017acc:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8017ad0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017ad2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017ad6:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017ae0:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8017ae4:	6812      	ldr	r2, [r2, #0]
 8017ae6:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8017aea:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 8017aee:	6809      	ldr	r1, [r1, #0]
 8017af0:	fb23 1202 	smlad	r2, r3, r2, r1
 8017af4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017af8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8017afc:	601a      	str	r2, [r3, #0]
  return(result);
 8017afe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017b02:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8017b0c:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8017b10:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8017b14:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8017b18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017b1c:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8017b20:	6018      	str	r0, [r3, #0]
 8017b22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017b26:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8017b2a:	6019      	str	r1, [r3, #0]
 8017b2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017b30:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8017b34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017b36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017b3a:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017b44:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 8017b48:	6812      	ldr	r2, [r2, #0]
 8017b4a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8017b4e:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8017b52:	6809      	ldr	r1, [r1, #0]
 8017b54:	fb23 1202 	smlad	r2, r3, r2, r1
 8017b58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017b5c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8017b60:	601a      	str	r2, [r3, #0]
  return(result);
 8017b62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017b66:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8017b70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017b74:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8017b78:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8017b7c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8017b7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017b82:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	461a      	mov	r2, r3
 8017b8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017b92:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8017b96:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8017b98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017b9c:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	1d1a      	adds	r2, r3, #4
 8017ba6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017baa:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	601a      	str	r2, [r3, #0]
    return (val);
 8017bb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017bb6:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8017bba:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8017bbc:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8017bc0:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8017bc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017bc8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8017bcc:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8017bd0:	6019      	str	r1, [r3, #0]
 8017bd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017bd6:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8017bda:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017bdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017be0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017bea:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 8017bee:	6812      	ldr	r2, [r2, #0]
 8017bf0:	fa23 f282 	sxtab16	r2, r3, r2
 8017bf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017bf8:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8017bfc:	601a      	str	r2, [r3, #0]
  return(result);
 8017bfe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017c02:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8017c0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017c10:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8017c14:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8017c18:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8017c1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017c1e:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	461a      	mov	r2, r3
 8017c2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017c2e:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8017c32:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8017c34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017c38:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	1d1a      	adds	r2, r3, #4
 8017c42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017c46:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	601a      	str	r2, [r3, #0]
    return (val);
 8017c4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017c52:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8017c56:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8017c58:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8017c5c:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8017c60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017c64:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8017c68:	601a      	str	r2, [r3, #0]
 8017c6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017c6e:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8017c72:	2208      	movs	r2, #8
 8017c74:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8017c76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017c7a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8017c7e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017c82:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 8017c86:	6812      	ldr	r2, [r2, #0]
 8017c88:	f002 021f 	and.w	r2, r2, #31
 8017c8c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8017c8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017c92:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d105      	bne.n	8017ca8 <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 8017c9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017ca0:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	e00b      	b.n	8017cc0 <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8017ca8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017cac:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 8017cb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017cb4:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8017cb8:	6812      	ldr	r2, [r2, #0]
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	fa62 f303 	ror.w	r3, r2, r3
 8017cc0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017cc4:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8017cc8:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8017ccc:	6011      	str	r1, [r2, #0]
 8017cce:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017cd2:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8017cd6:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017cd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017cdc:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017ce6:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8017cea:	6812      	ldr	r2, [r2, #0]
 8017cec:	fa23 f282 	sxtab16	r2, r3, r2
 8017cf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017cf4:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8017cf8:	601a      	str	r2, [r3, #0]
  return(result);
 8017cfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017cfe:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8017d08:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8017d0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017d10:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8017d14:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8017d18:	6019      	str	r1, [r3, #0]
 8017d1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017d1e:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8017d22:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017d24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017d28:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017d32:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 8017d36:	6812      	ldr	r2, [r2, #0]
 8017d38:	fa23 f282 	sxtab16	r2, r3, r2
 8017d3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017d40:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8017d44:	601a      	str	r2, [r3, #0]
  return(result);
 8017d46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017d4a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8017d54:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8017d58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017d5c:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8017d60:	601a      	str	r2, [r3, #0]
 8017d62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017d66:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8017d6a:	2208      	movs	r2, #8
 8017d6c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8017d6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017d72:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8017d76:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017d7a:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 8017d7e:	6812      	ldr	r2, [r2, #0]
 8017d80:	f002 021f 	and.w	r2, r2, #31
 8017d84:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8017d86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017d8a:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d105      	bne.n	8017da0 <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 8017d94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017d98:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	e00b      	b.n	8017db8 <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8017da0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017da4:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 8017da8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017dac:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8017db0:	6812      	ldr	r2, [r2, #0]
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	fa62 f303 	ror.w	r3, r2, r3
 8017db8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017dbc:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 8017dc0:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8017dc4:	6011      	str	r1, [r2, #0]
 8017dc6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017dca:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8017dce:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017dd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017dd4:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017dde:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8017de2:	6812      	ldr	r2, [r2, #0]
 8017de4:	fa23 f282 	sxtab16	r2, r3, r2
 8017de8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017dec:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8017df0:	601a      	str	r2, [r3, #0]
  return(result);
 8017df2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017df6:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8017e00:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8017e04:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8017e08:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8017e0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017e10:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8017e14:	6018      	str	r0, [r3, #0]
 8017e16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017e1a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8017e1e:	6019      	str	r1, [r3, #0]
 8017e20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017e24:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8017e28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017e2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017e2e:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017e38:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 8017e3c:	6812      	ldr	r2, [r2, #0]
 8017e3e:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8017e42:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 8017e46:	6809      	ldr	r1, [r1, #0]
 8017e48:	fb23 1202 	smlad	r2, r3, r2, r1
 8017e4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017e50:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8017e54:	601a      	str	r2, [r3, #0]
  return(result);
 8017e56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017e5a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8017e64:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8017e68:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8017e6c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8017e70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017e74:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8017e78:	6018      	str	r0, [r3, #0]
 8017e7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017e7e:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 8017e82:	6019      	str	r1, [r3, #0]
 8017e84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017e88:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8017e8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017e8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017e92:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017e9c:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 8017ea0:	6812      	ldr	r2, [r2, #0]
 8017ea2:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8017ea6:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 8017eaa:	6809      	ldr	r1, [r1, #0]
 8017eac:	fb23 1202 	smlad	r2, r3, r2, r1
 8017eb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017eb4:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8017eb8:	601a      	str	r2, [r3, #0]
  return(result);
 8017eba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017ebe:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8017ec8:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8017ecc:	3310      	adds	r3, #16
 8017ece:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 8017ed2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8017ed6:	3b0f      	subs	r3, #15
 8017ed8:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 8017edc:	429a      	cmp	r2, r3
 8017ede:	f6ff a943 	blt.w	8017168 <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8017ee2:	e03f      	b.n	8017f64 <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 8017ee4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017ee8:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	f993 3000 	ldrsb.w	r3, [r3]
 8017ef2:	461a      	mov	r2, r3
 8017ef4:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8017ef8:	4413      	add	r3, r2
 8017efa:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8017efe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017f02:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	f993 3000 	ldrsb.w	r3, [r3]
 8017f0c:	461a      	mov	r2, r3
 8017f0e:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8017f12:	4413      	add	r3, r2
 8017f14:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 8017f18:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8017f1c:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 8017f20:	fb02 f303 	mul.w	r3, r2, r3
 8017f24:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8017f28:	4413      	add	r3, r2
 8017f2a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 8017f2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017f32:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	1c5a      	adds	r2, r3, #1
 8017f3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017f3e:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8017f42:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 8017f44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017f48:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	1c5a      	adds	r2, r3, #1
 8017f50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017f54:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8017f58:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8017f5a:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8017f5e:	3301      	adds	r3, #1
 8017f60:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 8017f64:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 8017f68:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8017f6c:	429a      	cmp	r2, r3
 8017f6e:	dbb9      	blt.n	8017ee4 <arm_nn_vec_mat_mult_t_s8+0x28c8>
 8017f70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017f74:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 8017f78:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8017f7c:	601a      	str	r2, [r3, #0]
 8017f7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017f82:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 8017f86:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8017f8a:	601a      	str	r2, [r3, #0]
 8017f8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017f90:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8017f94:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 8017f98:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017f9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017f9e:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017fa8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017fac:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 8017fb0:	6812      	ldr	r2, [r2, #0]
 8017fb2:	409a      	lsls	r2, r3
 8017fb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017fb8:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8017fbc:	601a      	str	r2, [r3, #0]
 8017fbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017fc2:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8017fc6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017fca:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 8017fce:	6812      	ldr	r2, [r2, #0]
 8017fd0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8017fd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017fd6:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8017fda:	2200      	movs	r2, #0
 8017fdc:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8017fde:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017fe2:	461a      	mov	r2, r3
 8017fe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017fe8:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8017fec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017ff0:	461a      	mov	r2, r3
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8017ff8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017ffc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018000:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8018004:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 8018008:	6809      	ldr	r1, [r1, #0]
 801800a:	17c8      	asrs	r0, r1, #31
 801800c:	6139      	str	r1, [r7, #16]
 801800e:	6178      	str	r0, [r7, #20]
 8018010:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8018014:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 8018018:	6809      	ldr	r1, [r1, #0]
 801801a:	17c8      	asrs	r0, r1, #31
 801801c:	60b9      	str	r1, [r7, #8]
 801801e:	60f8      	str	r0, [r7, #12]
 8018020:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8018024:	4631      	mov	r1, r6
 8018026:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 801802a:	4650      	mov	r0, sl
 801802c:	fb00 f001 	mul.w	r0, r0, r1
 8018030:	4659      	mov	r1, fp
 8018032:	462c      	mov	r4, r5
 8018034:	fb04 f101 	mul.w	r1, r4, r1
 8018038:	4401      	add	r1, r0
 801803a:	4628      	mov	r0, r5
 801803c:	4654      	mov	r4, sl
 801803e:	fba0 8904 	umull	r8, r9, r0, r4
 8018042:	4449      	add	r1, r9
 8018044:	4689      	mov	r9, r1
 8018046:	eb12 0108 	adds.w	r1, r2, r8
 801804a:	6039      	str	r1, [r7, #0]
 801804c:	eb43 0309 	adc.w	r3, r3, r9
 8018050:	607b      	str	r3, [r7, #4]
 8018052:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8018056:	e9d7 1200 	ldrd	r1, r2, [r7]
 801805a:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 801805e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8018062:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8018066:	f04f 0200 	mov.w	r2, #0
 801806a:	f04f 0300 	mov.w	r3, #0
 801806e:	0fc2      	lsrs	r2, r0, #31
 8018070:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8018074:	17cb      	asrs	r3, r1, #31
 8018076:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801807a:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 801807e:	4613      	mov	r3, r2
 8018080:	600b      	str	r3, [r1, #0]
    return result;
 8018082:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8018086:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 801808a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801808c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8018090:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	2b00      	cmp	r3, #0
 8018098:	dc06      	bgt.n	80180a8 <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 801809a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801809e:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	425b      	negs	r3, r3
 80180a6:	e000      	b.n	80180aa <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 80180a8:	2300      	movs	r3, #0
 80180aa:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80180ae:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 80180b2:	6011      	str	r1, [r2, #0]
 80180b4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80180b8:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 80180bc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80180be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80180c2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80180c6:	2200      	movs	r2, #0
 80180c8:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80180ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80180ce:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 80180d2:	2201      	movs	r2, #1
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	409a      	lsls	r2, r3
 80180d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80180dc:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 80180e0:	3a01      	subs	r2, #1
 80180e2:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 80180e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80180e8:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80180ec:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80180f0:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 80180f4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80180f8:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 80180fc:	6809      	ldr	r1, [r1, #0]
 80180fe:	6812      	ldr	r2, [r2, #0]
 8018100:	400a      	ands	r2, r1
 8018102:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8018104:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8018108:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801810c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8018110:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 8018114:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8018118:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 801811c:	6809      	ldr	r1, [r1, #0]
 801811e:	6812      	ldr	r2, [r2, #0]
 8018120:	fa41 f202 	asr.w	r2, r1, r2
 8018124:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8018126:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801812a:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 801812e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8018132:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 8018136:	6812      	ldr	r2, [r2, #0]
 8018138:	1052      	asrs	r2, r2, #1
 801813a:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801813c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8018140:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	2b00      	cmp	r3, #0
 8018148:	da0a      	bge.n	8018160 <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 801814a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801814e:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8018152:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8018156:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 801815a:	6812      	ldr	r2, [r2, #0]
 801815c:	3201      	adds	r2, #1
 801815e:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8018160:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8018164:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 8018168:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801816c:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8018170:	6812      	ldr	r2, [r2, #0]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	429a      	cmp	r2, r3
 8018176:	dd0a      	ble.n	801818e <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 8018178:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801817c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8018180:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8018184:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 8018188:	6812      	ldr	r2, [r2, #0]
 801818a:	3201      	adds	r2, #1
 801818c:	601a      	str	r2, [r3, #0]
    return result;
 801818e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8018192:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8018196:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018198:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 801819a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 801819e:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80181a2:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 80181a6:	4413      	add	r3, r2
 80181a8:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 80181ac:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80181b0:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 80181b4:	4293      	cmp	r3, r2
 80181b6:	bfb8      	it	lt
 80181b8:	4613      	movlt	r3, r2
 80181ba:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 80181be:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80181c2:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 80181c6:	4293      	cmp	r3, r2
 80181c8:	bfa8      	it	ge
 80181ca:	4613      	movge	r3, r2
 80181cc:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 80181d0:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 80181d4:	b25a      	sxtb	r2, r3
 80181d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80181da:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 80181e2:	2300      	movs	r3, #0
}
 80181e4:	4618      	mov	r0, r3
 80181e6:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 80181ea:	46bd      	mov	sp, r7
 80181ec:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80181f0:	4770      	bx	lr

080181f2 <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
 80181f2:	b480      	push	{r7}
 80181f4:	b0a5      	sub	sp, #148	; 0x94
 80181f6:	af00      	add	r7, sp, #0
 80181f8:	60f8      	str	r0, [r7, #12]
 80181fa:	60b9      	str	r1, [r7, #8]
 80181fc:	607a      	str	r2, [r7, #4]
 80181fe:	807b      	strh	r3, [r7, #2]
    q31_t in_q15x2_2;
    q31_t out_q15x2_1;
    q31_t out_q15x2_2;

    /*loop unrolling */
    block_cnt = block_size >> 2;
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	089b      	lsrs	r3, r3, #2
 8018204:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 8018208:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801820c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8018210:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018218:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801821c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8018220:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8018224:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018228:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801822c:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (block_cnt > 0)
 801822e:	e070      	b.n	8018312 <arm_q7_to_q15_with_offset+0x120>
 8018230:	f107 030c 	add.w	r3, r7, #12
 8018234:	62fb      	str	r3, [r7, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 8018236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 801823e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	1d1a      	adds	r2, r3, #4
 8018244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018246:	601a      	str	r2, [r3, #0]
    return (val);
 8018248:	693b      	ldr	r3, [r7, #16]
    {
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in_q7x4 = arm_nn_read_q7x4_ia(&src);
 801824a:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
 801824c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801824e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018250:	637b      	str	r3, [r7, #52]	; 0x34
 8018252:	2308      	movs	r3, #8
 8018254:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 8018256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018258:	f003 031f 	and.w	r3, r3, #31
 801825c:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 801825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018260:	2b00      	cmp	r3, #0
 8018262:	d101      	bne.n	8018268 <arm_q7_to_q15_with_offset+0x76>
    return op1;
 8018264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018266:	e003      	b.n	8018270 <arm_q7_to_q15_with_offset+0x7e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8018268:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801826c:	fa61 f303 	ror.w	r3, r1, r3
 8018270:	643a      	str	r2, [r7, #64]	; 0x40
 8018272:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8018274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018276:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018278:	fa23 f382 	sxtab16	r3, r3, r2
 801827c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 801827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018280:	677b      	str	r3, [r7, #116]	; 0x74
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);
 8018282:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8018284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018286:	64fa      	str	r2, [r7, #76]	; 0x4c
 8018288:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801828a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801828c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801828e:	fa23 f382 	sxtab16	r3, r3, r2
 8018292:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8018294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018296:	673b      	str	r3, [r7, #112]	; 0x70

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 8018298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801829a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801829c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801829e:	66bb      	str	r3, [r7, #104]	; 0x68
 80182a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80182a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80182a4:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 80182a8:	667b      	str	r3, [r7, #100]	; 0x64
 80182aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80182ac:	663b      	str	r3, [r7, #96]	; 0x60
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 80182ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80182b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80182b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80182b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80182b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80182b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80182ba:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 80182be:	657b      	str	r3, [r7, #84]	; 0x54
 80182c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80182c2:	653b      	str	r3, [r7, #80]	; 0x50
 80182c4:	f107 0308 	add.w	r3, r7, #8
 80182c8:	623b      	str	r3, [r7, #32]
 80182ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80182cc:	61fb      	str	r3, [r7, #28]
  @param[in]     src_q31   Input value to be written.
  @return        none
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;
 80182ce:	69fb      	ldr	r3, [r7, #28]
 80182d0:	61bb      	str	r3, [r7, #24]

    memcpy(*dest_q15, &val, 4);
 80182d2:	6a3b      	ldr	r3, [r7, #32]
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	69ba      	ldr	r2, [r7, #24]
 80182d8:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 80182da:	6a3b      	ldr	r3, [r7, #32]
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	1d1a      	adds	r2, r3, #4
 80182e0:	6a3b      	ldr	r3, [r7, #32]
 80182e2:	601a      	str	r2, [r3, #0]
}
 80182e4:	bf00      	nop
 80182e6:	f107 0308 	add.w	r3, r7, #8
 80182ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80182ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80182ee:	627b      	str	r3, [r7, #36]	; 0x24
    q31_t val = src_q31;
 80182f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182f2:	617b      	str	r3, [r7, #20]
    memcpy(*dest_q15, &val, 4);
 80182f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	697a      	ldr	r2, [r7, #20]
 80182fa:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 80182fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	1d1a      	adds	r2, r3, #4
 8018302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018304:	601a      	str	r2, [r3, #0]
}
 8018306:	bf00      	nop

        arm_nn_write_q15x2_ia(&dst, out_q15x2_1);
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
 8018308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801830c:	3b01      	subs	r3, #1
 801830e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 8018312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018316:	2b00      	cmp	r3, #0
 8018318:	dc8a      	bgt.n	8018230 <arm_q7_to_q15_with_offset+0x3e>
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	f003 0303 	and.w	r3, r3, #3
 8018320:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 8018324:	e012      	b.n	801834c <arm_q7_to_q15_with_offset+0x15a>
    {
        *dst++ = (q15_t)*src++ + offset;
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	1c5a      	adds	r2, r3, #1
 801832a:	60fa      	str	r2, [r7, #12]
 801832c:	f993 3000 	ldrsb.w	r3, [r3]
 8018330:	b29a      	uxth	r2, r3
 8018332:	887b      	ldrh	r3, [r7, #2]
 8018334:	4413      	add	r3, r2
 8018336:	b299      	uxth	r1, r3
 8018338:	68bb      	ldr	r3, [r7, #8]
 801833a:	1c9a      	adds	r2, r3, #2
 801833c:	60ba      	str	r2, [r7, #8]
 801833e:	b20a      	sxth	r2, r1
 8018340:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        block_cnt--;
 8018342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018346:	3b01      	subs	r3, #1
 8018348:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 801834c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018350:	2b00      	cmp	r3, #0
 8018352:	dce8      	bgt.n	8018326 <arm_q7_to_q15_with_offset+0x134>
    }
}
 8018354:	bf00      	nop
 8018356:	bf00      	nop
 8018358:	3794      	adds	r7, #148	; 0x94
 801835a:	46bd      	mov	sp, r7
 801835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018360:	4770      	bx	lr

08018362 <scale_q31_to_q7_and_clamp>:
                                      q7_t *target,
                                      int32_t length,
                                      const int32_t count,
                                      const int act_min,
                                      const int act_max)
{
 8018362:	b480      	push	{r7}
 8018364:	b089      	sub	sp, #36	; 0x24
 8018366:	af00      	add	r7, sp, #0
 8018368:	60f8      	str	r0, [r7, #12]
 801836a:	60b9      	str	r1, [r7, #8]
 801836c:	607a      	str	r2, [r7, #4]
 801836e:	603b      	str	r3, [r7, #0]
    const int half_count = count / 2;
 8018370:	683b      	ldr	r3, [r7, #0]
 8018372:	0fda      	lsrs	r2, r3, #31
 8018374:	4413      	add	r3, r2
 8018376:	105b      	asrs	r3, r3, #1
 8018378:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < length; i++)
 801837a:	2300      	movs	r3, #0
 801837c:	61fb      	str	r3, [r7, #28]
 801837e:	e030      	b.n	80183e2 <scale_q31_to_q7_and_clamp+0x80>
    {
        int32_t sum = buffer[i] > 0 ? (buffer[i] + half_count) : (buffer[i] - half_count);
 8018380:	69fb      	ldr	r3, [r7, #28]
 8018382:	009b      	lsls	r3, r3, #2
 8018384:	68fa      	ldr	r2, [r7, #12]
 8018386:	4413      	add	r3, r2
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	2b00      	cmp	r3, #0
 801838c:	dd07      	ble.n	801839e <scale_q31_to_q7_and_clamp+0x3c>
 801838e:	69fb      	ldr	r3, [r7, #28]
 8018390:	009b      	lsls	r3, r3, #2
 8018392:	68fa      	ldr	r2, [r7, #12]
 8018394:	4413      	add	r3, r2
 8018396:	681a      	ldr	r2, [r3, #0]
 8018398:	69bb      	ldr	r3, [r7, #24]
 801839a:	4413      	add	r3, r2
 801839c:	e006      	b.n	80183ac <scale_q31_to_q7_and_clamp+0x4a>
 801839e:	69fb      	ldr	r3, [r7, #28]
 80183a0:	009b      	lsls	r3, r3, #2
 80183a2:	68fa      	ldr	r2, [r7, #12]
 80183a4:	4413      	add	r3, r2
 80183a6:	681a      	ldr	r2, [r3, #0]
 80183a8:	69bb      	ldr	r3, [r7, #24]
 80183aa:	1ad3      	subs	r3, r2, r3
 80183ac:	617b      	str	r3, [r7, #20]
        sum = sum / count;
 80183ae:	697a      	ldr	r2, [r7, #20]
 80183b0:	683b      	ldr	r3, [r7, #0]
 80183b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80183b6:	617b      	str	r3, [r7, #20]
        sum = MAX(sum, act_min);
 80183b8:	697a      	ldr	r2, [r7, #20]
 80183ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183bc:	4293      	cmp	r3, r2
 80183be:	bfb8      	it	lt
 80183c0:	4613      	movlt	r3, r2
 80183c2:	617b      	str	r3, [r7, #20]
        sum = MIN(sum, act_max);
 80183c4:	697a      	ldr	r2, [r7, #20]
 80183c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183c8:	4293      	cmp	r3, r2
 80183ca:	bfa8      	it	ge
 80183cc:	4613      	movge	r3, r2
 80183ce:	617b      	str	r3, [r7, #20]

        target[i] = (q7_t)sum;
 80183d0:	69fb      	ldr	r3, [r7, #28]
 80183d2:	68ba      	ldr	r2, [r7, #8]
 80183d4:	4413      	add	r3, r2
 80183d6:	697a      	ldr	r2, [r7, #20]
 80183d8:	b252      	sxtb	r2, r2
 80183da:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 80183dc:	69fb      	ldr	r3, [r7, #28]
 80183de:	3301      	adds	r3, #1
 80183e0:	61fb      	str	r3, [r7, #28]
 80183e2:	69fa      	ldr	r2, [r7, #28]
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	429a      	cmp	r2, r3
 80183e8:	dbca      	blt.n	8018380 <scale_q31_to_q7_and_clamp+0x1e>
    }
}
 80183ea:	bf00      	nop
 80183ec:	bf00      	nop
 80183ee:	3724      	adds	r7, #36	; 0x24
 80183f0:	46bd      	mov	sp, r7
 80183f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f6:	4770      	bx	lr

080183f8 <arm_avgpool_s8>:
                          const cmsis_nn_dims *input_dims,
                          const q7_t *src,
                          const cmsis_nn_dims *filter_dims,
                          const cmsis_nn_dims *output_dims,
                          q7_t *dst)
{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	b0a6      	sub	sp, #152	; 0x98
 80183fc:	af02      	add	r7, sp, #8
 80183fe:	60f8      	str	r0, [r7, #12]
 8018400:	60b9      	str	r1, [r7, #8]
 8018402:	607a      	str	r2, [r7, #4]
 8018404:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	685b      	ldr	r3, [r3, #4]
 801840a:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t input_x = input_dims->w;
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	689b      	ldr	r3, [r3, #8]
 8018410:	667b      	str	r3, [r7, #100]	; 0x64
    const int32_t output_y = output_dims->h;
 8018412:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018416:	685b      	ldr	r3, [r3, #4]
 8018418:	663b      	str	r3, [r7, #96]	; 0x60
    const int32_t output_x = output_dims->w;
 801841a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801841e:	689b      	ldr	r3, [r3, #8]
 8018420:	65fb      	str	r3, [r7, #92]	; 0x5c
    const int32_t stride_y = pool_params->stride.h;
 8018422:	68bb      	ldr	r3, [r7, #8]
 8018424:	685b      	ldr	r3, [r3, #4]
 8018426:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t stride_x = pool_params->stride.w;
 8018428:	68bb      	ldr	r3, [r7, #8]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t kernel_y = filter_dims->h;
 801842e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018432:	685b      	ldr	r3, [r3, #4]
 8018434:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t kernel_x = filter_dims->w;
 8018436:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801843a:	689b      	ldr	r3, [r3, #8]
 801843c:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t pad_y = pool_params->padding.h;
 801843e:	68bb      	ldr	r3, [r7, #8]
 8018440:	68db      	ldr	r3, [r3, #12]
 8018442:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t pad_x = pool_params->padding.w;
 8018444:	68bb      	ldr	r3, [r7, #8]
 8018446:	689b      	ldr	r3, [r3, #8]
 8018448:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t act_min = pool_params->activation.min;
 801844a:	68bb      	ldr	r3, [r7, #8]
 801844c:	691b      	ldr	r3, [r3, #16]
 801844e:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t act_max = pool_params->activation.max;
 8018450:	68bb      	ldr	r3, [r7, #8]
 8018452:	695b      	ldr	r3, [r3, #20]
 8018454:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t ch_src = input_dims->c;
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	68db      	ldr	r3, [r3, #12]
 801845a:	63bb      	str	r3, [r7, #56]	; 0x38
    q31_t *buffer = (q31_t *)ctx->buf;
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	637b      	str	r3, [r7, #52]	; 0x34

#if defined(ARM_MATH_DSP)

    /* Run the following code for CPU's with DSP extension
     */
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 8018462:	2300      	movs	r3, #0
 8018464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8018468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801846a:	425b      	negs	r3, r3
 801846c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8018470:	e0c1      	b.n	80185f6 <arm_avgpool_s8+0x1fe>
    {
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 8018472:	2300      	movs	r3, #0
 8018474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801847a:	425b      	negs	r3, r3
 801847c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018480:	e0a8      	b.n	80185d4 <arm_avgpool_s8+0x1dc>
        {
            /* Condition for kernel start dimension:
                      (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t kernel_y_start = MAX(0, -idx_y);
 8018482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018486:	2b00      	cmp	r3, #0
 8018488:	dc03      	bgt.n	8018492 <arm_avgpool_s8+0x9a>
 801848a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801848e:	425b      	negs	r3, r3
 8018490:	e000      	b.n	8018494 <arm_avgpool_s8+0x9c>
 8018492:	2300      	movs	r3, #0
 8018494:	633b      	str	r3, [r7, #48]	; 0x30
            const int32_t kernel_x_start = MAX(0, -idx_x);
 8018496:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801849a:	2b00      	cmp	r3, #0
 801849c:	dc03      	bgt.n	80184a6 <arm_avgpool_s8+0xae>
 801849e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80184a2:	425b      	negs	r3, r3
 80184a4:	e000      	b.n	80184a8 <arm_avgpool_s8+0xb0>
 80184a6:	2300      	movs	r3, #0
 80184a8:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Condition for kernel end dimension:
                   (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
 80184aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80184ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80184b0:	1ad3      	subs	r3, r2, r3
 80184b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80184b4:	4293      	cmp	r3, r2
 80184b6:	bfa8      	it	ge
 80184b8:	4613      	movge	r3, r2
 80184ba:	62bb      	str	r3, [r7, #40]	; 0x28
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
 80184bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80184be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80184c2:	1ad3      	subs	r3, r2, r3
 80184c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80184c6:	4293      	cmp	r3, r2
 80184c8:	bfa8      	it	ge
 80184ca:	4613      	movge	r3, r2
 80184cc:	627b      	str	r3, [r7, #36]	; 0x24

            int count = 0;
 80184ce:	2300      	movs	r3, #0
 80184d0:	67fb      	str	r3, [r7, #124]	; 0x7c

            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 80184d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80184d6:	e05d      	b.n	8018594 <arm_avgpool_s8+0x19c>
            {
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 80184d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184da:	677b      	str	r3, [r7, #116]	; 0x74
 80184dc:	e053      	b.n	8018586 <arm_avgpool_s8+0x18e>
                {
                    const q7_t *start = src + ch_src * (k_x + idx_x + (k_y + idx_y) * input_x);
 80184de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80184e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80184e4:	441a      	add	r2, r3
 80184e6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80184e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80184ec:	440b      	add	r3, r1
 80184ee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80184f0:	fb01 f303 	mul.w	r3, r1, r3
 80184f4:	4413      	add	r3, r2
 80184f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80184f8:	fb02 f303 	mul.w	r3, r2, r3
 80184fc:	461a      	mov	r2, r3
 80184fe:	683b      	ldr	r3, [r7, #0]
 8018500:	4413      	add	r3, r2
 8018502:	623b      	str	r3, [r7, #32]

                    if (count == 0)
 8018504:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018506:	2b00      	cmp	r3, #0
 8018508:	d115      	bne.n	8018536 <arm_avgpool_s8+0x13e>
                    {
                        for (int i = 0; i < ch_src; i++)
 801850a:	2300      	movs	r3, #0
 801850c:	673b      	str	r3, [r7, #112]	; 0x70
 801850e:	e00d      	b.n	801852c <arm_avgpool_s8+0x134>
                        {
                            buffer[i] = start[i];
 8018510:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018512:	6a3a      	ldr	r2, [r7, #32]
 8018514:	4413      	add	r3, r2
 8018516:	f993 1000 	ldrsb.w	r1, [r3]
 801851a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801851c:	009b      	lsls	r3, r3, #2
 801851e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018520:	4413      	add	r3, r2
 8018522:	460a      	mov	r2, r1
 8018524:	601a      	str	r2, [r3, #0]
                        for (int i = 0; i < ch_src; i++)
 8018526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018528:	3301      	adds	r3, #1
 801852a:	673b      	str	r3, [r7, #112]	; 0x70
 801852c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801852e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018530:	429a      	cmp	r2, r3
 8018532:	dbed      	blt.n	8018510 <arm_avgpool_s8+0x118>
 8018534:	e021      	b.n	801857a <arm_avgpool_s8+0x182>
                        }
                    }
                    else
                    {
                        for (int i = 0; i < ch_src; i++)
 8018536:	2300      	movs	r3, #0
 8018538:	66fb      	str	r3, [r7, #108]	; 0x6c
 801853a:	e01a      	b.n	8018572 <arm_avgpool_s8+0x17a>
                        {
                            buffer[i] = __QADD(start[i], buffer[i]);
 801853c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801853e:	6a3a      	ldr	r2, [r7, #32]
 8018540:	4413      	add	r3, r2
 8018542:	f993 3000 	ldrsb.w	r3, [r3]
 8018546:	4618      	mov	r0, r3
 8018548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801854a:	009b      	lsls	r3, r3, #2
 801854c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801854e:	4413      	add	r3, r2
 8018550:	681a      	ldr	r2, [r3, #0]
 8018552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018554:	009b      	lsls	r3, r3, #2
 8018556:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018558:	440b      	add	r3, r1
 801855a:	61f8      	str	r0, [r7, #28]
 801855c:	61ba      	str	r2, [r7, #24]

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801855e:	69fa      	ldr	r2, [r7, #28]
 8018560:	69b9      	ldr	r1, [r7, #24]
 8018562:	fa81 f282 	qadd	r2, r2, r1
 8018566:	617a      	str	r2, [r7, #20]
  return(result);
 8018568:	697a      	ldr	r2, [r7, #20]
 801856a:	601a      	str	r2, [r3, #0]
                        for (int i = 0; i < ch_src; i++)
 801856c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801856e:	3301      	adds	r3, #1
 8018570:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018572:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018576:	429a      	cmp	r2, r3
 8018578:	dbe0      	blt.n	801853c <arm_avgpool_s8+0x144>
                        }
                    }
                    count++;
 801857a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801857c:	3301      	adds	r3, #1
 801857e:	67fb      	str	r3, [r7, #124]	; 0x7c
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 8018580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018582:	3301      	adds	r3, #1
 8018584:	677b      	str	r3, [r7, #116]	; 0x74
 8018586:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801858a:	429a      	cmp	r2, r3
 801858c:	dba7      	blt.n	80184de <arm_avgpool_s8+0xe6>
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 801858e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018590:	3301      	adds	r3, #1
 8018592:	67bb      	str	r3, [r7, #120]	; 0x78
 8018594:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8018596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018598:	429a      	cmp	r2, r3
 801859a:	db9d      	blt.n	80184d8 <arm_avgpool_s8+0xe0>
                }
            }
            scale_q31_to_q7_and_clamp(buffer, dst, ch_src, count, act_min, act_max);
 801859c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801859e:	9301      	str	r3, [sp, #4]
 80185a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185a2:	9300      	str	r3, [sp, #0]
 80185a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80185a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80185a8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80185ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80185ae:	f7ff fed8 	bl	8018362 <scale_q31_to_q7_and_clamp>
            dst += ch_src;
 80185b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185b4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80185b8:	4413      	add	r3, r2
 80185ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 80185be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80185c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80185c4:	4413      	add	r3, r2
 80185c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80185ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80185ce:	3301      	adds	r3, #1
 80185d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80185d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80185d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80185da:	429a      	cmp	r2, r3
 80185dc:	f6ff af51 	blt.w	8018482 <arm_avgpool_s8+0x8a>
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 80185e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80185e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80185e6:	4413      	add	r3, r2
 80185e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80185ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80185f0:	3301      	adds	r3, #1
 80185f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80185f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80185fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80185fc:	429a      	cmp	r2, r3
 80185fe:	f6ff af38 	blt.w	8018472 <arm_avgpool_s8+0x7a>
            }
        }
    }

#endif
    return ARM_MATH_SUCCESS;
 8018602:	2300      	movs	r3, #0
}
 8018604:	4618      	mov	r0, r3
 8018606:	3790      	adds	r7, #144	; 0x90
 8018608:	46bd      	mov	sp, r7
 801860a:	bd80      	pop	{r7, pc}

0801860c <arm_avgpool_s8_get_buffer_size>:

#endif /* ARM_MATH_MVEI */

int32_t arm_avgpool_s8_get_buffer_size(const int output_x, const int ch_src)
{
 801860c:	b480      	push	{r7}
 801860e:	b083      	sub	sp, #12
 8018610:	af00      	add	r7, sp, #0
 8018612:	6078      	str	r0, [r7, #4]
 8018614:	6039      	str	r1, [r7, #0]
    (void)output_x;

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (ch_src * sizeof(int32_t));
 8018616:	683b      	ldr	r3, [r7, #0]
 8018618:	009b      	lsls	r3, r3, #2
#else
    (void)ch_src;
    return 0;
#endif
}
 801861a:	4618      	mov	r0, r3
 801861c:	370c      	adds	r7, #12
 801861e:	46bd      	mov	sp, r7
 8018620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018624:	4770      	bx	lr

08018626 <compare_and_replace_if_larger_q7>:

#include "edge-impulse-sdk/CMSIS/NN/Include/arm_nnfunctions.h"
#include "edge-impulse-sdk/CMSIS/NN/Include/arm_nnsupportfunctions.h"

static void compare_and_replace_if_larger_q7(q7_t *base, const q7_t *target, int32_t length)
{
 8018626:	b480      	push	{r7}
 8018628:	b091      	sub	sp, #68	; 0x44
 801862a:	af00      	add	r7, sp, #0
 801862c:	60f8      	str	r0, [r7, #12]
 801862e:	60b9      	str	r1, [r7, #8]
 8018630:	607a      	str	r2, [r7, #4]
        base += 16;
        target += 16;
        length -= 16;
    }
#else
    q7_t *dst = base;
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	62bb      	str	r3, [r7, #40]	; 0x28
    const q7_t *src = target;
 8018636:	68bb      	ldr	r3, [r7, #8]
 8018638:	627b      	str	r3, [r7, #36]	; 0x24
    union arm_nnword ref_max;
    union arm_nnword comp_max;
    int32_t cnt = length >> 2;
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	109b      	asrs	r3, r3, #2
 801863e:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (cnt > 0l)
 8018640:	e050      	b.n	80186e4 <compare_and_replace_if_larger_q7+0xbe>
    {
        ref_max.word = arm_nn_read_q7x4(dst);
 8018642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018644:	637b      	str	r3, [r7, #52]	; 0x34
 8018646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018648:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 801864a:	617b      	str	r3, [r7, #20]
    return (val);
 801864c:	697b      	ldr	r3, [r7, #20]
 801864e:	623b      	str	r3, [r7, #32]
 8018650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018654:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&val, *in_q7, 4);
 8018656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 801865e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	1d1a      	adds	r2, r3, #4
 8018664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018666:	601a      	str	r2, [r3, #0]
    return (val);
 8018668:	693b      	ldr	r3, [r7, #16]
        comp_max.word = arm_nn_read_q7x4_ia(&src);
 801866a:	61fb      	str	r3, [r7, #28]

        if (comp_max.bytes[0] > ref_max.bytes[0])
 801866c:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8018670:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8018674:	429a      	cmp	r2, r3
 8018676:	dd03      	ble.n	8018680 <compare_and_replace_if_larger_q7+0x5a>
        {
            ref_max.bytes[0] = comp_max.bytes[0];
 8018678:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801867c:	f887 3020 	strb.w	r3, [r7, #32]
        }
        if (comp_max.bytes[1] > ref_max.bytes[1])
 8018680:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8018684:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8018688:	429a      	cmp	r2, r3
 801868a:	dd03      	ble.n	8018694 <compare_and_replace_if_larger_q7+0x6e>
        {
            ref_max.bytes[1] = comp_max.bytes[1];
 801868c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8018690:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        }
        if (comp_max.bytes[2] > ref_max.bytes[2])
 8018694:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8018698:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 801869c:	429a      	cmp	r2, r3
 801869e:	dd03      	ble.n	80186a8 <compare_and_replace_if_larger_q7+0x82>
        {
            ref_max.bytes[2] = comp_max.bytes[2];
 80186a0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80186a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        }
        if (comp_max.bytes[3] > ref_max.bytes[3])
 80186a8:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80186ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80186b0:	429a      	cmp	r2, r3
 80186b2:	dd03      	ble.n	80186bc <compare_and_replace_if_larger_q7+0x96>
        {
            ref_max.bytes[3] = comp_max.bytes[3];
 80186b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80186b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }

        write_q7x4_ia(&dst, ref_max.word);
 80186bc:	6a3b      	ldr	r3, [r7, #32]
 80186be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80186c2:	633a      	str	r2, [r7, #48]	; 0x30
 80186c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE void write_q7x4_ia (
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
 80186c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186c8:	61bb      	str	r3, [r7, #24]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
 80186ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	69ba      	ldr	r2, [r7, #24]
 80186d0:	601a      	str	r2, [r3, #0]
  (*pQ7)[1] = (val >> 8) & 0x0FF;
  (*pQ7)[2] = (val >> 16) & 0x0FF;
  (*pQ7)[3] = (val >> 24) & 0x0FF;

#endif
  *pQ7 += 4;
 80186d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	1d1a      	adds	r2, r3, #4
 80186d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186da:	601a      	str	r2, [r3, #0]
}
 80186dc:	bf00      	nop

        cnt--;
 80186de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186e0:	3b01      	subs	r3, #1
 80186e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 80186e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	dcab      	bgt.n	8018642 <compare_and_replace_if_larger_q7+0x1c>
    }

    cnt = length & 0x3;
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	f003 0303 	and.w	r3, r3, #3
 80186f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 80186f2:	e015      	b.n	8018720 <compare_and_replace_if_larger_q7+0xfa>
    {
        if (*src > *dst)
 80186f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186f6:	f993 2000 	ldrsb.w	r2, [r3]
 80186fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186fc:	f993 3000 	ldrsb.w	r3, [r3]
 8018700:	429a      	cmp	r2, r3
 8018702:	dd04      	ble.n	801870e <compare_and_replace_if_larger_q7+0xe8>
        {
            *dst = *src;
 8018704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018708:	f992 2000 	ldrsb.w	r2, [r2]
 801870c:	701a      	strb	r2, [r3, #0]
        }
        dst++;
 801870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018710:	3301      	adds	r3, #1
 8018712:	62bb      	str	r3, [r7, #40]	; 0x28
        src++;
 8018714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018716:	3301      	adds	r3, #1
 8018718:	627b      	str	r3, [r7, #36]	; 0x24
        cnt--;
 801871a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801871c:	3b01      	subs	r3, #1
 801871e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 8018720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018722:	2b00      	cmp	r3, #0
 8018724:	dce6      	bgt.n	80186f4 <compare_and_replace_if_larger_q7+0xce>
    }
#endif
}
 8018726:	bf00      	nop
 8018728:	bf00      	nop
 801872a:	3744      	adds	r7, #68	; 0x44
 801872c:	46bd      	mov	sp, r7
 801872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018732:	4770      	bx	lr

08018734 <clamp_output>:

static void clamp_output(q7_t *source, int32_t length, const int32_t act_min, const int32_t act_max)
{
 8018734:	b480      	push	{r7}
 8018736:	b08d      	sub	sp, #52	; 0x34
 8018738:	af00      	add	r7, sp, #0
 801873a:	60f8      	str	r0, [r7, #12]
 801873c:	60b9      	str	r1, [r7, #8]
 801873e:	607a      	str	r2, [r7, #4]
 8018740:	603b      	str	r3, [r7, #0]
        vstrbq_p_s8(source, res, p);
        source += 16;
    }
#else
    union arm_nnword in;
    int32_t cnt = length >> 2;
 8018742:	68bb      	ldr	r3, [r7, #8]
 8018744:	109b      	asrs	r3, r3, #2
 8018746:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (cnt > 0l)
 8018748:	e062      	b.n	8018810 <clamp_output+0xdc>
    {
        in.word = arm_nn_read_q7x4(source);
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	61fb      	str	r3, [r7, #28]
 801874e:	69fb      	ldr	r3, [r7, #28]
 8018750:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 8018752:	617b      	str	r3, [r7, #20]
    return (val);
 8018754:	697b      	ldr	r3, [r7, #20]
 8018756:	61bb      	str	r3, [r7, #24]

        in.bytes[0] = MAX(in.bytes[0], act_min);
 8018758:	f997 3018 	ldrsb.w	r3, [r7, #24]
 801875c:	461a      	mov	r2, r3
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	4293      	cmp	r3, r2
 8018762:	bfb8      	it	lt
 8018764:	4613      	movlt	r3, r2
 8018766:	b25b      	sxtb	r3, r3
 8018768:	763b      	strb	r3, [r7, #24]
        in.bytes[0] = MIN(in.bytes[0], act_max);
 801876a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 801876e:	461a      	mov	r2, r3
 8018770:	683b      	ldr	r3, [r7, #0]
 8018772:	4293      	cmp	r3, r2
 8018774:	bfa8      	it	ge
 8018776:	4613      	movge	r3, r2
 8018778:	b25b      	sxtb	r3, r3
 801877a:	763b      	strb	r3, [r7, #24]
        in.bytes[1] = MAX(in.bytes[1], act_min);
 801877c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8018780:	461a      	mov	r2, r3
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	4293      	cmp	r3, r2
 8018786:	bfb8      	it	lt
 8018788:	4613      	movlt	r3, r2
 801878a:	b25b      	sxtb	r3, r3
 801878c:	767b      	strb	r3, [r7, #25]
        in.bytes[1] = MIN(in.bytes[1], act_max);
 801878e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8018792:	461a      	mov	r2, r3
 8018794:	683b      	ldr	r3, [r7, #0]
 8018796:	4293      	cmp	r3, r2
 8018798:	bfa8      	it	ge
 801879a:	4613      	movge	r3, r2
 801879c:	b25b      	sxtb	r3, r3
 801879e:	767b      	strb	r3, [r7, #25]
        in.bytes[2] = MAX(in.bytes[2], act_min);
 80187a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80187a4:	461a      	mov	r2, r3
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	4293      	cmp	r3, r2
 80187aa:	bfb8      	it	lt
 80187ac:	4613      	movlt	r3, r2
 80187ae:	b25b      	sxtb	r3, r3
 80187b0:	76bb      	strb	r3, [r7, #26]
        in.bytes[2] = MIN(in.bytes[2], act_max);
 80187b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80187b6:	461a      	mov	r2, r3
 80187b8:	683b      	ldr	r3, [r7, #0]
 80187ba:	4293      	cmp	r3, r2
 80187bc:	bfa8      	it	ge
 80187be:	4613      	movge	r3, r2
 80187c0:	b25b      	sxtb	r3, r3
 80187c2:	76bb      	strb	r3, [r7, #26]
        in.bytes[3] = MAX(in.bytes[3], act_min);
 80187c4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80187c8:	461a      	mov	r2, r3
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	4293      	cmp	r3, r2
 80187ce:	bfb8      	it	lt
 80187d0:	4613      	movlt	r3, r2
 80187d2:	b25b      	sxtb	r3, r3
 80187d4:	76fb      	strb	r3, [r7, #27]
        in.bytes[3] = MIN(in.bytes[3], act_max);
 80187d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80187da:	461a      	mov	r2, r3
 80187dc:	683b      	ldr	r3, [r7, #0]
 80187de:	4293      	cmp	r3, r2
 80187e0:	bfa8      	it	ge
 80187e2:	4613      	movge	r3, r2
 80187e4:	b25b      	sxtb	r3, r3
 80187e6:	76fb      	strb	r3, [r7, #27]

        write_q7x4_ia(&source, in.word);
 80187e8:	69bb      	ldr	r3, [r7, #24]
 80187ea:	f107 020c 	add.w	r2, r7, #12
 80187ee:	627a      	str	r2, [r7, #36]	; 0x24
 80187f0:	623b      	str	r3, [r7, #32]
  q31_t val = value;
 80187f2:	6a3b      	ldr	r3, [r7, #32]
 80187f4:	613b      	str	r3, [r7, #16]
  memcpy (*pQ7, &val, 4);
 80187f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	693a      	ldr	r2, [r7, #16]
 80187fc:	601a      	str	r2, [r3, #0]
  *pQ7 += 4;
 80187fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	1d1a      	adds	r2, r3, #4
 8018804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018806:	601a      	str	r2, [r3, #0]
}
 8018808:	bf00      	nop
        cnt--;
 801880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801880c:	3b01      	subs	r3, #1
 801880e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 8018810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018812:	2b00      	cmp	r3, #0
 8018814:	dc99      	bgt.n	801874a <clamp_output+0x16>
    }

    cnt = length & 0x3;
 8018816:	68bb      	ldr	r3, [r7, #8]
 8018818:	f003 0303 	and.w	r3, r3, #3
 801881c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 801881e:	e018      	b.n	8018852 <clamp_output+0x11e>
    {
        int32_t comp = *source;
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	f993 3000 	ldrsb.w	r3, [r3]
 8018826:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MAX(comp, act_min);
 8018828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	4293      	cmp	r3, r2
 801882e:	bfb8      	it	lt
 8018830:	4613      	movlt	r3, r2
 8018832:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MIN(comp, act_max);
 8018834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018836:	683b      	ldr	r3, [r7, #0]
 8018838:	4293      	cmp	r3, r2
 801883a:	bfa8      	it	ge
 801883c:	4613      	movge	r3, r2
 801883e:	62bb      	str	r3, [r7, #40]	; 0x28
        *source++ = (int8_t)comp;
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	1c5a      	adds	r2, r3, #1
 8018844:	60fa      	str	r2, [r7, #12]
 8018846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018848:	b252      	sxtb	r2, r2
 801884a:	701a      	strb	r2, [r3, #0]
        cnt--;
 801884c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801884e:	3b01      	subs	r3, #1
 8018850:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 8018852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018854:	2b00      	cmp	r3, #0
 8018856:	dce3      	bgt.n	8018820 <clamp_output+0xec>
    }
#endif
}
 8018858:	bf00      	nop
 801885a:	bf00      	nop
 801885c:	3734      	adds	r7, #52	; 0x34
 801885e:	46bd      	mov	sp, r7
 8018860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018864:	4770      	bx	lr

08018866 <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
 8018866:	b580      	push	{r7, lr}
 8018868:	b09e      	sub	sp, #120	; 0x78
 801886a:	af00      	add	r7, sp, #0
 801886c:	60f8      	str	r0, [r7, #12]
 801886e:	60b9      	str	r1, [r7, #8]
 8018870:	607a      	str	r2, [r7, #4]
 8018872:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	685b      	ldr	r3, [r3, #4]
 8018878:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t input_x = input_dims->w;
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	689b      	ldr	r3, [r3, #8]
 801887e:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t output_y = output_dims->h;
 8018880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018884:	685b      	ldr	r3, [r3, #4]
 8018886:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t output_x = output_dims->w;
 8018888:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801888c:	689b      	ldr	r3, [r3, #8]
 801888e:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t stride_y = pool_params->stride.h;
 8018890:	68bb      	ldr	r3, [r7, #8]
 8018892:	685b      	ldr	r3, [r3, #4]
 8018894:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t stride_x = pool_params->stride.w;
 8018896:	68bb      	ldr	r3, [r7, #8]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t kernel_y = filter_dims->h;
 801889c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80188a0:	685b      	ldr	r3, [r3, #4]
 80188a2:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t kernel_x = filter_dims->w;
 80188a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80188a8:	689b      	ldr	r3, [r3, #8]
 80188aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t pad_y = pool_params->padding.h;
 80188ac:	68bb      	ldr	r3, [r7, #8]
 80188ae:	68db      	ldr	r3, [r3, #12]
 80188b0:	63bb      	str	r3, [r7, #56]	; 0x38
    const int32_t pad_x = pool_params->padding.w;
 80188b2:	68bb      	ldr	r3, [r7, #8]
 80188b4:	689b      	ldr	r3, [r3, #8]
 80188b6:	637b      	str	r3, [r7, #52]	; 0x34
    const int32_t act_min = pool_params->activation.min;
 80188b8:	68bb      	ldr	r3, [r7, #8]
 80188ba:	691b      	ldr	r3, [r3, #16]
 80188bc:	633b      	str	r3, [r7, #48]	; 0x30
    const int32_t act_max = pool_params->activation.max;
 80188be:	68bb      	ldr	r3, [r7, #8]
 80188c0:	695b      	ldr	r3, [r3, #20]
 80188c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32_t channel_in = input_dims->c;
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	68db      	ldr	r3, [r3, #12]
 80188c8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)ctx;
    q7_t *dst_base = dst;
 80188ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80188ce:	627b      	str	r3, [r7, #36]	; 0x24

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 80188d0:	2300      	movs	r3, #0
 80188d2:	677b      	str	r3, [r7, #116]	; 0x74
 80188d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188d6:	425b      	negs	r3, r3
 80188d8:	673b      	str	r3, [r7, #112]	; 0x70
 80188da:	e078      	b.n	80189ce <arm_max_pool_s8+0x168>
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 80188dc:	2300      	movs	r3, #0
 80188de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80188e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188e2:	425b      	negs	r3, r3
 80188e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80188e6:	e067      	b.n	80189b8 <arm_max_pool_s8+0x152>
        {
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
 80188e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	dc02      	bgt.n	80188f4 <arm_max_pool_s8+0x8e>
 80188ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80188f0:	425b      	negs	r3, r3
 80188f2:	e000      	b.n	80188f6 <arm_max_pool_s8+0x90>
 80188f4:	2300      	movs	r3, #0
 80188f6:	623b      	str	r3, [r7, #32]
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 80188f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	dc02      	bgt.n	8018904 <arm_max_pool_s8+0x9e>
 80188fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018900:	425b      	negs	r3, r3
 8018902:	e000      	b.n	8018906 <arm_max_pool_s8+0xa0>
 8018904:	2300      	movs	r3, #0
 8018906:	61fb      	str	r3, [r7, #28]

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 8018908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801890a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801890c:	1ad3      	subs	r3, r2, r3
 801890e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018910:	4293      	cmp	r3, r2
 8018912:	bfa8      	it	ge
 8018914:	4613      	movge	r3, r2
 8018916:	61bb      	str	r3, [r7, #24]
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 8018918:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801891a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801891c:	1ad3      	subs	r3, r2, r3
 801891e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018920:	4293      	cmp	r3, r2
 8018922:	bfa8      	it	ge
 8018924:	4613      	movge	r3, r2
 8018926:	617b      	str	r3, [r7, #20]

            int count = 0;
 8018928:	2300      	movs	r3, #0
 801892a:	667b      	str	r3, [r7, #100]	; 0x64

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 801892c:	6a3b      	ldr	r3, [r7, #32]
 801892e:	663b      	str	r3, [r7, #96]	; 0x60
 8018930:	e031      	b.n	8018996 <arm_max_pool_s8+0x130>
            {
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 8018932:	69fb      	ldr	r3, [r7, #28]
 8018934:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018936:	e027      	b.n	8018988 <arm_max_pool_s8+0x122>
                {
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 8018938:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801893a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801893c:	441a      	add	r2, r3
 801893e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8018940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018942:	440b      	add	r3, r1
 8018944:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018946:	fb01 f303 	mul.w	r3, r1, r3
 801894a:	4413      	add	r3, r2
 801894c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801894e:	fb02 f303 	mul.w	r3, r2, r3
 8018952:	461a      	mov	r2, r3
 8018954:	683b      	ldr	r3, [r7, #0]
 8018956:	4413      	add	r3, r2
 8018958:	613b      	str	r3, [r7, #16]

                    if (count == 0)
 801895a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801895c:	2b00      	cmp	r3, #0
 801895e:	d10a      	bne.n	8018976 <arm_max_pool_s8+0x110>
                    {
                        memcpy(dst, start, channel_in);
 8018960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018962:	461a      	mov	r2, r3
 8018964:	6939      	ldr	r1, [r7, #16]
 8018966:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801896a:	f013 fc91 	bl	802c290 <memcpy>
                        count++;
 801896e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018970:	3301      	adds	r3, #1
 8018972:	667b      	str	r3, [r7, #100]	; 0x64
 8018974:	e005      	b.n	8018982 <arm_max_pool_s8+0x11c>
                    }
                    else
                    {
                        compare_and_replace_if_larger_q7(dst, start, channel_in);
 8018976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018978:	6939      	ldr	r1, [r7, #16]
 801897a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801897e:	f7ff fe52 	bl	8018626 <compare_and_replace_if_larger_q7>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 8018982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018984:	3301      	adds	r3, #1
 8018986:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018988:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801898a:	697b      	ldr	r3, [r7, #20]
 801898c:	429a      	cmp	r2, r3
 801898e:	dbd3      	blt.n	8018938 <arm_max_pool_s8+0xd2>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 8018990:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018992:	3301      	adds	r3, #1
 8018994:	663b      	str	r3, [r7, #96]	; 0x60
 8018996:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018998:	69bb      	ldr	r3, [r7, #24]
 801899a:	429a      	cmp	r2, r3
 801899c:	dbc9      	blt.n	8018932 <arm_max_pool_s8+0xcc>
                    }
                }
            }
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
 801899e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80189a4:	4413      	add	r3, r2
 80189a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 80189aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80189ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80189ae:	4413      	add	r3, r2
 80189b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80189b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80189b4:	3301      	adds	r3, #1
 80189b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80189b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80189ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80189bc:	429a      	cmp	r2, r3
 80189be:	db93      	blt.n	80188e8 <arm_max_pool_s8+0x82>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 80189c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80189c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80189c4:	4413      	add	r3, r2
 80189c6:	673b      	str	r3, [r7, #112]	; 0x70
 80189c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80189ca:	3301      	adds	r3, #1
 80189cc:	677b      	str	r3, [r7, #116]	; 0x74
 80189ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80189d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189d2:	429a      	cmp	r2, r3
 80189d4:	db82      	blt.n	80188dc <arm_max_pool_s8+0x76>
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 80189d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80189d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80189da:	fb02 f303 	mul.w	r3, r2, r3
 80189de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80189e0:	fb02 f103 	mul.w	r1, r2, r3
 80189e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80189e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80189ea:	f7ff fea3 	bl	8018734 <clamp_output>

    return ARM_MATH_SUCCESS;
 80189ee:	2300      	movs	r3, #0
}
 80189f0:	4618      	mov	r0, r3
 80189f2:	3778      	adds	r7, #120	; 0x78
 80189f4:	46bd      	mov	sp, r7
 80189f6:	bd80      	pop	{r7, pc}

080189f8 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 80189f8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80189fc:	f6ad 1da8 	subw	sp, sp, #2472	; 0x9a8
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 8018a06:	f5a4 7471 	sub.w	r4, r4, #964	; 0x3c4
 8018a0a:	6020      	str	r0, [r4, #0]
 8018a0c:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 8018a10:	f5a0 7072 	sub.w	r0, r0, #968	; 0x3c8
 8018a14:	6001      	str	r1, [r0, #0]
 8018a16:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8018a1a:	f5a1 7173 	sub.w	r1, r1, #972	; 0x3cc
 8018a1e:	600a      	str	r2, [r1, #0]
 8018a20:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 8018a24:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8018a28:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 8018a2a:	2201      	movs	r2, #1
 8018a2c:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 8018a30:	fa02 f303 	lsl.w	r3, r2, r3
 8018a34:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994

    int32_t col = 0;
 8018a38:	2300      	movs	r3, #0
 8018a3a:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8018a3e:	2300      	movs	r3, #0
 8018a40:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 8018a44:	f004 b863 	b.w	801cb0e <arm_softmax_s8+0x4116>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 8018a48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a4c:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	781b      	ldrb	r3, [r3, #0]
 8018a54:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 8018a58:	2301      	movs	r3, #1
 8018a5a:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8018a5e:	e015      	b.n	8018a8c <arm_softmax_s8+0x94>
        {
            max = MAX(max, input[col]);
 8018a60:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8018a64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a68:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	4413      	add	r3, r2
 8018a70:	f993 2000 	ldrsb.w	r2, [r3]
 8018a74:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 8018a78:	4293      	cmp	r3, r2
 8018a7a:	bfb8      	it	lt
 8018a7c:	4613      	movlt	r3, r2
 8018a7e:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 8018a82:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8018a86:	3301      	adds	r3, #1
 8018a88:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8018a8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a90:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8018a94:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8018a98:	681b      	ldr	r3, [r3, #0]
 8018a9a:	429a      	cmp	r2, r3
 8018a9c:	dbe0      	blt.n	8018a60 <arm_softmax_s8+0x68>
        }

        int32_t diff = 0;
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t sum = 0;
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998

        for (col = 0; col < row_size; ++col)
 8018aaa:	2300      	movs	r3, #0
 8018aac:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8018ab0:	f001 ba24 	b.w	8019efc <arm_softmax_s8+0x1504>
        {
            diff = input[col] - max;
 8018ab4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8018ab8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018abc:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	4413      	add	r3, r2
 8018ac4:	f993 3000 	ldrsb.w	r3, [r3]
 8018ac8:	461a      	mov	r2, r3
 8018aca:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 8018ace:	1ad3      	subs	r3, r2, r3
 8018ad0:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 8018ad4:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8018ad8:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 8018adc:	429a      	cmp	r2, r3
 8018ade:	f2c1 8208 	blt.w	8019ef2 <arm_softmax_s8+0x14fa>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 8018ae2:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8018ae6:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 8018aea:	fb03 f202 	mul.w	r2, r3, r2
 8018aee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018af2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8018af6:	601a      	str	r2, [r3, #0]
 8018af8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018afc:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8018b00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b04:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018b0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b10:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8018b14:	2300      	movs	r3, #0
 8018b16:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018b18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018b1c:	f04f 0300 	mov.w	r3, #0
 8018b20:	f607 0138 	addw	r1, r7, #2104	; 0x838
 8018b24:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018b28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b2c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	0fdb      	lsrs	r3, r3, #31
 8018b34:	b2da      	uxtb	r2, r3
 8018b36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b3a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	0fdb      	lsrs	r3, r3, #31
 8018b42:	b2db      	uxtb	r3, r3
 8018b44:	4053      	eors	r3, r2
 8018b46:	b2db      	uxtb	r3, r3
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	d012      	beq.n	8018b72 <arm_softmax_s8+0x17a>
        mult = 1 - mult;
 8018b4c:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8018b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b54:	2100      	movs	r1, #0
 8018b56:	f1d2 0001 	rsbs	r0, r2, #1
 8018b5a:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 8018b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8018b62:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8018b66:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 8018b6a:	f607 0238 	addw	r2, r7, #2104	; 0x838
 8018b6e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018b72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b76:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	17da      	asrs	r2, r3, #31
 8018b7e:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8018b82:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 8018b86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b8a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	17da      	asrs	r2, r3, #31
 8018b92:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8018b96:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 8018b9a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8018b9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018ba2:	460b      	mov	r3, r1
 8018ba4:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8018ba8:	fb02 f203 	mul.w	r2, r2, r3
 8018bac:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8018bb0:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 8018bb4:	e9c4 0100 	strd	r0, r1, [r4]
 8018bb8:	4601      	mov	r1, r0
 8018bba:	fb01 f303 	mul.w	r3, r1, r3
 8018bbe:	4413      	add	r3, r2
 8018bc0:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8018bc4:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 8018bc8:	fba2 1201 	umull	r1, r2, r2, r1
 8018bcc:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 8018bd0:	460a      	mov	r2, r1
 8018bd2:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 8018bd6:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 8018bda:	4413      	add	r3, r2
 8018bdc:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8018be0:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8018be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018be8:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 8018bec:	1851      	adds	r1, r2, r1
 8018bee:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 8018bf2:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 8018bf6:	414b      	adcs	r3, r1
 8018bf8:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8018bfc:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 8018c00:	f607 0238 	addw	r2, r7, #2104	; 0x838
 8018c04:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018c08:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8018c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	da0a      	bge.n	8018c2a <arm_softmax_s8+0x232>
 8018c14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018c18:	1851      	adds	r1, r2, r1
 8018c1a:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 8018c1e:	f143 0300 	adc.w	r3, r3, #0
 8018c22:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8018c26:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8018c2a:	f04f 0000 	mov.w	r0, #0
 8018c2e:	f04f 0100 	mov.w	r1, #0
 8018c32:	0fd0      	lsrs	r0, r2, #31
 8018c34:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018c38:	17d9      	asrs	r1, r3, #31
 8018c3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c3e:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8018c42:	4603      	mov	r3, r0
 8018c44:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018c46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c4a:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 8018c4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c52:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8018c56:	6812      	ldr	r2, [r2, #0]
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	429a      	cmp	r2, r3
 8018c5c:	d10e      	bne.n	8018c7c <arm_softmax_s8+0x284>
 8018c5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c62:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018c6c:	d106      	bne.n	8018c7c <arm_softmax_s8+0x284>
        result = Q31_MAX;
 8018c6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c72:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8018c76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018c7a:	6013      	str	r3, [r2, #0]
    return result;
 8018c7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c80:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
    int32_t mask = 0;
 8018c8a:	2300      	movs	r3, #0
 8018c8c:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    int32_t shift = 24;
 8018c90:	2318      	movs	r3, #24
 8018c92:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8018c96:	2201      	movs	r2, #1
 8018c98:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 8018c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8018ca0:	1e5a      	subs	r2, r3, #1
 8018ca2:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8018ca6:	ea02 0103 	and.w	r1, r2, r3
 8018caa:	2201      	movs	r2, #1
 8018cac:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 8018cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8018cb4:	1acb      	subs	r3, r1, r3
 8018cb6:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t remainder = val_mod_minus_quarter - val;
 8018cba:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 8018cbe:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8018cc2:	1ad3      	subs	r3, r2, r3
 8018cc4:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8018cc8:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 8018ccc:	015b      	lsls	r3, r3, #5
 8018cce:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8018cd2:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 8018cd6:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8018cda:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 8018cde:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8018ce2:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q31_t result = 0;
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    q63_t mult = 1 << 30;
 8018cec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018cf0:	f04f 0300 	mov.w	r3, #0
 8018cf4:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8018cf8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018cfc:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8018d00:	0fdb      	lsrs	r3, r3, #31
 8018d02:	b2da      	uxtb	r2, r3
 8018d04:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8018d08:	0fdb      	lsrs	r3, r3, #31
 8018d0a:	b2db      	uxtb	r3, r3
 8018d0c:	4053      	eors	r3, r2
 8018d0e:	b2db      	uxtb	r3, r3
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d012      	beq.n	8018d3a <arm_softmax_s8+0x342>
        mult = 1 - mult;
 8018d14:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8018d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d1c:	2100      	movs	r1, #0
 8018d1e:	f1d2 0001 	rsbs	r0, r2, #1
 8018d22:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 8018d26:	eb61 0303 	sbc.w	r3, r1, r3
 8018d2a:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8018d2e:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 8018d32:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8018d36:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018d3a:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8018d3e:	17da      	asrs	r2, r3, #31
 8018d40:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 8018d44:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 8018d48:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8018d4c:	17da      	asrs	r2, r3, #31
 8018d4e:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 8018d52:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 8018d56:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8018d5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018d5e:	460b      	mov	r3, r1
 8018d60:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8018d64:	fb02 f203 	mul.w	r2, r2, r3
 8018d68:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8018d6c:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 8018d70:	e9c4 0100 	strd	r0, r1, [r4]
 8018d74:	4601      	mov	r1, r0
 8018d76:	fb01 f303 	mul.w	r3, r1, r3
 8018d7a:	4413      	add	r3, r2
 8018d7c:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 8018d80:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 8018d84:	fba2 8901 	umull	r8, r9, r2, r1
 8018d88:	444b      	add	r3, r9
 8018d8a:	4699      	mov	r9, r3
 8018d8c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8018d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d94:	eb12 0108 	adds.w	r1, r2, r8
 8018d98:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 8018d9c:	eb43 0309 	adc.w	r3, r3, r9
 8018da0:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8018da4:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 8018da8:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8018dac:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018db0:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8018db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	da0a      	bge.n	8018dd2 <arm_softmax_s8+0x3da>
 8018dbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018dc0:	1851      	adds	r1, r2, r1
 8018dc2:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 8018dc6:	f143 0300 	adc.w	r3, r3, #0
 8018dca:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8018dce:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8018dd2:	f04f 0000 	mov.w	r0, #0
 8018dd6:	f04f 0100 	mov.w	r1, #0
 8018dda:	0fd0      	lsrs	r0, r2, #31
 8018ddc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018de0:	17d9      	asrs	r1, r3, #31
 8018de2:	4602      	mov	r2, r0
 8018de4:	460b      	mov	r3, r1
 8018de6:	4613      	mov	r3, r2
 8018de8:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018dec:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8018df0:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8018df4:	429a      	cmp	r2, r3
 8018df6:	d108      	bne.n	8018e0a <arm_softmax_s8+0x412>
 8018df8:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8018dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018e00:	d103      	bne.n	8018e0a <arm_softmax_s8+0x412>
        result = Q31_MAX;
 8018e02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018e06:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    return result;
 8018e0a:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
    const int32_t x2 = MUL_SAT(x, x);
 8018e0e:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 8018e12:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8018e16:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 8018e1a:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8018e1e:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 8018e22:	2300      	movs	r3, #0
 8018e24:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 8018e28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018e2c:	f04f 0300 	mov.w	r3, #0
 8018e30:	f607 1128 	addw	r1, r7, #2344	; 0x928
 8018e34:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018e38:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8018e3c:	0fdb      	lsrs	r3, r3, #31
 8018e3e:	b2da      	uxtb	r2, r3
 8018e40:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8018e44:	0fdb      	lsrs	r3, r3, #31
 8018e46:	b2db      	uxtb	r3, r3
 8018e48:	4053      	eors	r3, r2
 8018e4a:	b2db      	uxtb	r3, r3
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d012      	beq.n	8018e76 <arm_softmax_s8+0x47e>
        mult = 1 - mult;
 8018e50:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8018e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e58:	2100      	movs	r1, #0
 8018e5a:	f1d2 0001 	rsbs	r0, r2, #1
 8018e5e:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 8018e62:	eb61 0303 	sbc.w	r3, r1, r3
 8018e66:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8018e6a:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 8018e6e:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8018e72:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018e76:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8018e7a:	17da      	asrs	r2, r3, #31
 8018e7c:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 8018e80:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 8018e84:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8018e88:	17da      	asrs	r2, r3, #31
 8018e8a:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 8018e8e:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 8018e92:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8018e96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018e9a:	460b      	mov	r3, r1
 8018e9c:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 8018ea0:	fb02 f203 	mul.w	r2, r2, r3
 8018ea4:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8018ea8:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 8018eac:	e9c4 0100 	strd	r0, r1, [r4]
 8018eb0:	4601      	mov	r1, r0
 8018eb2:	fb01 f303 	mul.w	r3, r1, r3
 8018eb6:	4413      	add	r3, r2
 8018eb8:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 8018ebc:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 8018ec0:	fba2 ab01 	umull	sl, fp, r2, r1
 8018ec4:	445b      	add	r3, fp
 8018ec6:	469b      	mov	fp, r3
 8018ec8:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8018ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ed0:	eb12 010a 	adds.w	r1, r2, sl
 8018ed4:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 8018ed8:	eb43 030b 	adc.w	r3, r3, fp
 8018edc:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8018ee0:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 8018ee4:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8018ee8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018eec:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8018ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	da0a      	bge.n	8018f0e <arm_softmax_s8+0x516>
 8018ef8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018efc:	1851      	adds	r1, r2, r1
 8018efe:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 8018f02:	f143 0300 	adc.w	r3, r3, #0
 8018f06:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8018f0a:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8018f0e:	f04f 0000 	mov.w	r0, #0
 8018f12:	f04f 0100 	mov.w	r1, #0
 8018f16:	0fd0      	lsrs	r0, r2, #31
 8018f18:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018f1c:	17d9      	asrs	r1, r3, #31
 8018f1e:	4602      	mov	r2, r0
 8018f20:	460b      	mov	r3, r1
 8018f22:	4613      	mov	r3, r2
 8018f24:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018f28:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 8018f2c:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8018f30:	429a      	cmp	r2, r3
 8018f32:	d108      	bne.n	8018f46 <arm_softmax_s8+0x54e>
 8018f34:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8018f38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018f3c:	d103      	bne.n	8018f46 <arm_softmax_s8+0x54e>
        result = Q31_MAX;
 8018f3e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018f42:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 8018f46:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 8018f4a:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 8018f4e:	2300      	movs	r3, #0
 8018f50:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018f54:	2304      	movs	r3, #4
 8018f56:	3b01      	subs	r3, #1
 8018f58:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 8018f5c:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 8018f60:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8018f64:	4013      	ands	r3, r2
 8018f66:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 8018f6a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8018f6e:	109b      	asrs	r3, r3, #2
 8018f70:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 8018f74:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8018f78:	105b      	asrs	r3, r3, #1
 8018f7a:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 8018f7e:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	da04      	bge.n	8018f90 <arm_softmax_s8+0x598>
        threshold++;
 8018f86:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8018f8a:	3301      	adds	r3, #1
 8018f8c:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 8018f90:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 8018f94:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8018f98:	429a      	cmp	r2, r3
 8018f9a:	dd04      	ble.n	8018fa6 <arm_softmax_s8+0x5ae>
        result++;
 8018f9c:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8018fa0:	3301      	adds	r3, #1
 8018fa2:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 8018fa6:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 8018faa:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8018fae:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 8018fb2:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8018fb6:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 8018fba:	2300      	movs	r3, #0
 8018fbc:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 8018fc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018fc4:	f04f 0300 	mov.w	r3, #0
 8018fc8:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8018fcc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018fd0:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8018fd4:	0fdb      	lsrs	r3, r3, #31
 8018fd6:	b2da      	uxtb	r2, r3
 8018fd8:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8018fdc:	0fdb      	lsrs	r3, r3, #31
 8018fde:	b2db      	uxtb	r3, r3
 8018fe0:	4053      	eors	r3, r2
 8018fe2:	b2db      	uxtb	r3, r3
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d012      	beq.n	801900e <arm_softmax_s8+0x616>
        mult = 1 - mult;
 8018fe8:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8018fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ff0:	2100      	movs	r1, #0
 8018ff2:	f1d2 0001 	rsbs	r0, r2, #1
 8018ff6:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 8018ffa:	eb61 0303 	sbc.w	r3, r1, r3
 8018ffe:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8019002:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8019006:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 801900a:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 801900e:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8019012:	17da      	asrs	r2, r3, #31
 8019014:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 8019018:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 801901c:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8019020:	17da      	asrs	r2, r3, #31
 8019022:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 8019026:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 801902a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 801902e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019032:	460b      	mov	r3, r1
 8019034:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 8019038:	fb02 f203 	mul.w	r2, r2, r3
 801903c:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8019040:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 8019044:	e9cc 0100 	strd	r0, r1, [ip]
 8019048:	4601      	mov	r1, r0
 801904a:	fb01 f303 	mul.w	r3, r1, r3
 801904e:	4413      	add	r3, r2
 8019050:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 8019054:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 8019058:	fba2 5601 	umull	r5, r6, r2, r1
 801905c:	4433      	add	r3, r6
 801905e:	461e      	mov	r6, r3
 8019060:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8019064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019068:	1951      	adds	r1, r2, r5
 801906a:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 801906e:	4173      	adcs	r3, r6
 8019070:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019074:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8019078:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 801907c:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8019080:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8019084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019088:	2b00      	cmp	r3, #0
 801908a:	da0a      	bge.n	80190a2 <arm_softmax_s8+0x6aa>
 801908c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019090:	1851      	adds	r1, r2, r1
 8019092:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 8019096:	f143 0300 	adc.w	r3, r3, #0
 801909a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 801909e:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 80190a2:	f04f 0000 	mov.w	r0, #0
 80190a6:	f04f 0100 	mov.w	r1, #0
 80190aa:	0fd0      	lsrs	r0, r2, #31
 80190ac:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80190b0:	17d9      	asrs	r1, r3, #31
 80190b2:	4602      	mov	r2, r0
 80190b4:	460b      	mov	r3, r1
 80190b6:	4613      	mov	r3, r2
 80190b8:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80190bc:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 80190c0:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 80190c4:	429a      	cmp	r2, r3
 80190c6:	d108      	bne.n	80190da <arm_softmax_s8+0x6e2>
 80190c8:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 80190cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80190d0:	d103      	bne.n	80190da <arm_softmax_s8+0x6e2>
        result = Q31_MAX;
 80190d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80190d6:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 80190da:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80190de:	4423      	add	r3, r4
 80190e0:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 80190e4:	2300      	movs	r3, #0
 80190e6:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 80190ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80190ee:	f04f 0300 	mov.w	r3, #0
 80190f2:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 80190f6:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80190fa:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 80190fe:	0fdb      	lsrs	r3, r3, #31
 8019100:	b2da      	uxtb	r2, r3
 8019102:	2300      	movs	r3, #0
 8019104:	4053      	eors	r3, r2
 8019106:	b2db      	uxtb	r3, r3
 8019108:	2b00      	cmp	r3, #0
 801910a:	d012      	beq.n	8019132 <arm_softmax_s8+0x73a>
        mult = 1 - mult;
 801910c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8019110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019114:	2100      	movs	r1, #0
 8019116:	f1d2 0001 	rsbs	r0, r2, #1
 801911a:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 801911e:	eb61 0303 	sbc.w	r3, r1, r3
 8019122:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8019126:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 801912a:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 801912e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8019132:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8019136:	17da      	asrs	r2, r3, #31
 8019138:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 801913c:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 8019140:	a3f0      	add	r3, pc, #960	; (adr r3, 8019504 <arm_softmax_s8+0xb0c>)
 8019142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019146:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 801914a:	fb02 f001 	mul.w	r0, r2, r1
 801914e:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 8019152:	fb01 f103 	mul.w	r1, r1, r3
 8019156:	4401      	add	r1, r0
 8019158:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 801915c:	fba0 2302 	umull	r2, r3, r0, r2
 8019160:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8019164:	4613      	mov	r3, r2
 8019166:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 801916a:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 801916e:	18cb      	adds	r3, r1, r3
 8019170:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8019174:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8019178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801917c:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 8019180:	1851      	adds	r1, r2, r1
 8019182:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 8019186:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 801918a:	414b      	adcs	r3, r1
 801918c:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8019190:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 8019194:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 8019198:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801919c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80191a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	da0a      	bge.n	80191be <arm_softmax_s8+0x7c6>
 80191a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80191ac:	1851      	adds	r1, r2, r1
 80191ae:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 80191b2:	f143 0300 	adc.w	r3, r3, #0
 80191b6:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 80191ba:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80191be:	f04f 0000 	mov.w	r0, #0
 80191c2:	f04f 0100 	mov.w	r1, #0
 80191c6:	0fd0      	lsrs	r0, r2, #31
 80191c8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80191cc:	17d9      	asrs	r1, r3, #31
 80191ce:	4602      	mov	r2, r0
 80191d0:	460b      	mov	r3, r1
 80191d2:	4613      	mov	r3, r2
 80191d4:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80191d8:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 80191dc:	4bc6      	ldr	r3, [pc, #792]	; (80194f8 <arm_softmax_s8+0xb00>)
 80191de:	429a      	cmp	r2, r3
 80191e0:	d108      	bne.n	80191f4 <arm_softmax_s8+0x7fc>
 80191e2:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 80191e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80191ea:	d103      	bne.n	80191f4 <arm_softmax_s8+0x7fc>
        result = Q31_MAX;
 80191ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80191f0:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 80191f4:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80191f8:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 80191fc:	4413      	add	r3, r2
 80191fe:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 8019202:	2300      	movs	r3, #0
 8019204:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019208:	2302      	movs	r3, #2
 801920a:	3b01      	subs	r3, #1
 801920c:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 8019210:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 8019214:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8019218:	4013      	ands	r3, r2
 801921a:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 801921e:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 8019222:	105b      	asrs	r3, r3, #1
 8019224:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 8019228:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 801922c:	105b      	asrs	r3, r3, #1
 801922e:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 8019232:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8019236:	2b00      	cmp	r3, #0
 8019238:	da04      	bge.n	8019244 <arm_softmax_s8+0x84c>
        threshold++;
 801923a:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 801923e:	3301      	adds	r3, #1
 8019240:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 8019244:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8019248:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 801924c:	429a      	cmp	r2, r3
 801924e:	dd04      	ble.n	801925a <arm_softmax_s8+0x862>
        result++;
 8019250:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8019254:	3301      	adds	r3, #1
 8019256:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 801925a:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 801925e:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8019262:	4413      	add	r3, r2
 8019264:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 8019268:	2300      	movs	r3, #0
 801926a:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 801926e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019272:	f04f 0300 	mov.w	r3, #0
 8019276:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 801927a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801927e:	2200      	movs	r2, #0
 8019280:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 8019284:	0fdb      	lsrs	r3, r3, #31
 8019286:	b2db      	uxtb	r3, r3
 8019288:	4053      	eors	r3, r2
 801928a:	b2db      	uxtb	r3, r3
 801928c:	2b00      	cmp	r3, #0
 801928e:	d012      	beq.n	80192b6 <arm_softmax_s8+0x8be>
        mult = 1 - mult;
 8019290:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8019294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019298:	2100      	movs	r1, #0
 801929a:	f1d2 0001 	rsbs	r0, r2, #1
 801929e:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 80192a2:	eb61 0303 	sbc.w	r3, r1, r3
 80192a6:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80192aa:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 80192ae:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 80192b2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80192b6:	a18c      	add	r1, pc, #560	; (adr r1, 80194e8 <arm_softmax_s8+0xaf0>)
 80192b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80192bc:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 80192c0:	17da      	asrs	r2, r3, #31
 80192c2:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 80192c6:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 80192ca:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 80192ce:	fb03 f201 	mul.w	r2, r3, r1
 80192d2:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 80192d6:	fb00 f303 	mul.w	r3, r0, r3
 80192da:	4413      	add	r3, r2
 80192dc:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 80192e0:	fba0 1202 	umull	r1, r2, r0, r2
 80192e4:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 80192e8:	460a      	mov	r2, r1
 80192ea:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 80192ee:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 80192f2:	4413      	add	r3, r2
 80192f4:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 80192f8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80192fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019300:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8019304:	1851      	adds	r1, r2, r1
 8019306:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 801930a:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 801930e:	414b      	adcs	r3, r1
 8019310:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8019314:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 8019318:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 801931c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8019320:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8019324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019328:	2b00      	cmp	r3, #0
 801932a:	da0a      	bge.n	8019342 <arm_softmax_s8+0x94a>
 801932c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019330:	1851      	adds	r1, r2, r1
 8019332:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 8019336:	f143 0300 	adc.w	r3, r3, #0
 801933a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 801933e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8019342:	f04f 0000 	mov.w	r0, #0
 8019346:	f04f 0100 	mov.w	r1, #0
 801934a:	0fd0      	lsrs	r0, r2, #31
 801934c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8019350:	17d9      	asrs	r1, r3, #31
 8019352:	4602      	mov	r2, r0
 8019354:	460b      	mov	r3, r1
 8019356:	4613      	mov	r3, r2
 8019358:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 801935c:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 8019360:	4b66      	ldr	r3, [pc, #408]	; (80194fc <arm_softmax_s8+0xb04>)
 8019362:	4413      	add	r3, r2
 8019364:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1672461947)
 8019368:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 801936c:	1c53      	adds	r3, r2, #1
 801936e:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8019372:	2301      	movs	r3, #1
 8019374:	fa03 f202 	lsl.w	r2, r3, r2
 8019378:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 801937c:	4013      	ands	r3, r2
 801937e:	2b00      	cmp	r3, #0
 8019380:	d002      	beq.n	8019388 <arm_softmax_s8+0x990>
 8019382:	f04f 33ff 	mov.w	r3, #4294967295
 8019386:	e000      	b.n	801938a <arm_softmax_s8+0x992>
 8019388:	2300      	movs	r3, #0
 801938a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801938e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8019392:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 8019396:	2300      	movs	r3, #0
 8019398:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 801939c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80193a0:	f04f 0300 	mov.w	r3, #0
 80193a4:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80193a8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80193ac:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80193b0:	0fdb      	lsrs	r3, r3, #31
 80193b2:	b2da      	uxtb	r2, r3
 80193b4:	2300      	movs	r3, #0
 80193b6:	4053      	eors	r3, r2
 80193b8:	b2db      	uxtb	r3, r3
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d012      	beq.n	80193e4 <arm_softmax_s8+0x9ec>
        mult = 1 - mult;
 80193be:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80193c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193c6:	2100      	movs	r1, #0
 80193c8:	f1d2 0001 	rsbs	r0, r2, #1
 80193cc:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 80193d0:	eb61 0303 	sbc.w	r3, r1, r3
 80193d4:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 80193d8:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 80193dc:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80193e0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80193e4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80193e8:	17da      	asrs	r2, r3, #31
 80193ea:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 80193ee:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 80193f2:	a33f      	add	r3, pc, #252	; (adr r3, 80194f0 <arm_softmax_s8+0xaf8>)
 80193f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193f8:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 80193fc:	fb02 f001 	mul.w	r0, r2, r1
 8019400:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 8019404:	fb01 f103 	mul.w	r1, r1, r3
 8019408:	4401      	add	r1, r0
 801940a:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 801940e:	fba0 2302 	umull	r2, r3, r0, r2
 8019412:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8019416:	4613      	mov	r3, r2
 8019418:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 801941c:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 8019420:	18cb      	adds	r3, r1, r3
 8019422:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8019426:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 801942a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801942e:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8019432:	1851      	adds	r1, r2, r1
 8019434:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8019438:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 801943c:	414b      	adcs	r3, r1
 801943e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8019442:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 8019446:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 801944a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801944e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8019452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019456:	2b00      	cmp	r3, #0
 8019458:	da0a      	bge.n	8019470 <arm_softmax_s8+0xa78>
 801945a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801945e:	1851      	adds	r1, r2, r1
 8019460:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8019464:	f143 0300 	adc.w	r3, r3, #0
 8019468:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 801946c:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8019470:	f04f 0000 	mov.w	r0, #0
 8019474:	f04f 0100 	mov.w	r1, #0
 8019478:	0fd0      	lsrs	r0, r2, #31
 801947a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801947e:	17d9      	asrs	r1, r3, #31
 8019480:	4602      	mov	r2, r0
 8019482:	460b      	mov	r3, r1
 8019484:	4613      	mov	r3, r2
 8019486:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801948a:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 801948e:	4b1c      	ldr	r3, [pc, #112]	; (8019500 <arm_softmax_s8+0xb08>)
 8019490:	429a      	cmp	r2, r3
 8019492:	d108      	bne.n	80194a6 <arm_softmax_s8+0xaae>
 8019494:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8019498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801949c:	d103      	bne.n	80194a6 <arm_softmax_s8+0xaae>
        result = Q31_MAX;
 801949e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80194a2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 80194a6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 80194aa:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80194ae:	ea02 0103 	and.w	r1, r2, r3
 80194b2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80194b6:	43da      	mvns	r2, r3
 80194b8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80194bc:	4013      	ands	r3, r2
 80194be:	404b      	eors	r3, r1
 80194c0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 80194c4:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 80194c8:	1c53      	adds	r3, r2, #1
 80194ca:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 80194ce:	2301      	movs	r3, #1
 80194d0:	fa03 f202 	lsl.w	r2, r3, r2
 80194d4:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80194d8:	4013      	ands	r3, r2
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d016      	beq.n	801950c <arm_softmax_s8+0xb14>
 80194de:	f04f 33ff 	mov.w	r3, #4294967295
 80194e2:	e014      	b.n	801950e <arm_softmax_s8+0xb16>
 80194e4:	f3af 8000 	nop.w
 80194e8:	70f5a894 	.word	0x70f5a894
 80194ec:	00000000 	.word	0x00000000
 80194f0:	63afbe7b 	.word	0x63afbe7b
 80194f4:	00000000 	.word	0x00000000
 80194f8:	2aaaaaab 	.word	0x2aaaaaab
 80194fc:	70f5a894 	.word	0x70f5a894
 8019500:	63afbe7b 	.word	0x63afbe7b
 8019504:	2aaaaaab 	.word	0x2aaaaaab
 8019508:	00000000 	.word	0x00000000
 801950c:	2300      	movs	r3, #0
 801950e:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8019512:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8019516:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    q31_t result = 0;
 801951a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801951e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8019522:	2300      	movs	r3, #0
 8019524:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8019526:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801952a:	f04f 0300 	mov.w	r3, #0
 801952e:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 8019532:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8019536:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 801953a:	0fdb      	lsrs	r3, r3, #31
 801953c:	b2da      	uxtb	r2, r3
 801953e:	2300      	movs	r3, #0
 8019540:	4053      	eors	r3, r2
 8019542:	b2db      	uxtb	r3, r3
 8019544:	2b00      	cmp	r3, #0
 8019546:	d012      	beq.n	801956e <arm_softmax_s8+0xb76>
        mult = 1 - mult;
 8019548:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 801954c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019550:	2100      	movs	r1, #0
 8019552:	f1d2 0001 	rsbs	r0, r2, #1
 8019556:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 801955a:	eb61 0303 	sbc.w	r3, r1, r3
 801955e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8019562:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 8019566:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 801956a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801956e:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8019572:	17da      	asrs	r2, r3, #31
 8019574:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8019578:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 801957c:	a3a8      	add	r3, pc, #672	; (adr r3, 8019820 <arm_softmax_s8+0xe28>)
 801957e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019582:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 8019586:	fb02 f001 	mul.w	r0, r2, r1
 801958a:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 801958e:	fb01 f103 	mul.w	r1, r1, r3
 8019592:	4401      	add	r1, r0
 8019594:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 8019598:	fba0 2302 	umull	r2, r3, r0, r2
 801959c:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 80195a0:	4613      	mov	r3, r2
 80195a2:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 80195a6:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 80195aa:	18cb      	adds	r3, r1, r3
 80195ac:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 80195b0:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80195b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195b8:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 80195bc:	1851      	adds	r1, r2, r1
 80195be:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 80195c2:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 80195c6:	414b      	adcs	r3, r1
 80195c8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80195cc:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 80195d0:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 80195d4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80195d8:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80195dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	da0a      	bge.n	80195fa <arm_softmax_s8+0xc02>
 80195e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80195e8:	1851      	adds	r1, r2, r1
 80195ea:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80195ee:	f143 0300 	adc.w	r3, r3, #0
 80195f2:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80195f6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80195fa:	f04f 0000 	mov.w	r0, #0
 80195fe:	f04f 0100 	mov.w	r1, #0
 8019602:	0fd0      	lsrs	r0, r2, #31
 8019604:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8019608:	17d9      	asrs	r1, r3, #31
 801960a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801960e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8019612:	4603      	mov	r3, r0
 8019614:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8019616:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 801961a:	4b7f      	ldr	r3, [pc, #508]	; (8019818 <arm_softmax_s8+0xe20>)
 801961c:	429a      	cmp	r2, r3
 801961e:	d10b      	bne.n	8019638 <arm_softmax_s8+0xc40>
 8019620:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8019624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019628:	d106      	bne.n	8019638 <arm_softmax_s8+0xc40>
        result = Q31_MAX;
 801962a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801962e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8019632:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019636:	6013      	str	r3, [r2, #0]
    return result;
 8019638:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801963c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8019640:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8019642:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8019646:	ea02 0103 	and.w	r1, r2, r3
 801964a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801964e:	43da      	mvns	r2, r3
 8019650:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8019654:	4013      	ands	r3, r2
 8019656:	404b      	eors	r3, r1
 8019658:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 801965c:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8019660:	1c53      	adds	r3, r2, #1
 8019662:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8019666:	2301      	movs	r3, #1
 8019668:	fa03 f202 	lsl.w	r2, r3, r2
 801966c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8019670:	4013      	ands	r3, r2
 8019672:	2b00      	cmp	r3, #0
 8019674:	d002      	beq.n	801967c <arm_softmax_s8+0xc84>
 8019676:	f04f 33ff 	mov.w	r3, #4294967295
 801967a:	e000      	b.n	801967e <arm_softmax_s8+0xc86>
 801967c:	2300      	movs	r3, #0
 801967e:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8019682:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019686:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 801968a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801968e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019690:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019694:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8019698:	2300      	movs	r3, #0
 801969a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801969c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80196a0:	f04f 0300 	mov.w	r3, #0
 80196a4:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 80196a8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80196ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80196b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	0fdb      	lsrs	r3, r3, #31
 80196b8:	b2da      	uxtb	r2, r3
 80196ba:	2300      	movs	r3, #0
 80196bc:	4053      	eors	r3, r2
 80196be:	b2db      	uxtb	r3, r3
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d012      	beq.n	80196ea <arm_softmax_s8+0xcf2>
        mult = 1 - mult;
 80196c4:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80196c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196cc:	2100      	movs	r1, #0
 80196ce:	f1d2 0001 	rsbs	r0, r2, #1
 80196d2:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 80196d6:	eb61 0303 	sbc.w	r3, r1, r3
 80196da:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80196de:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 80196e2:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 80196e6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80196ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80196ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	17da      	asrs	r2, r3, #31
 80196f6:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 80196fa:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 80196fe:	a344      	add	r3, pc, #272	; (adr r3, 8019810 <arm_softmax_s8+0xe18>)
 8019700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019704:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8019708:	fb02 f001 	mul.w	r0, r2, r1
 801970c:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 8019710:	fb01 f103 	mul.w	r1, r1, r3
 8019714:	4401      	add	r1, r0
 8019716:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 801971a:	fba0 2302 	umull	r2, r3, r0, r2
 801971e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8019722:	4613      	mov	r3, r2
 8019724:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8019728:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 801972c:	18cb      	adds	r3, r1, r3
 801972e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8019732:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8019736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801973a:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 801973e:	1851      	adds	r1, r2, r1
 8019740:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8019744:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8019748:	414b      	adcs	r3, r1
 801974a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 801974e:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 8019752:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8019756:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801975a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 801975e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019762:	2b00      	cmp	r3, #0
 8019764:	da0a      	bge.n	801977c <arm_softmax_s8+0xd84>
 8019766:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801976a:	1851      	adds	r1, r2, r1
 801976c:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8019770:	f143 0300 	adc.w	r3, r3, #0
 8019774:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8019778:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 801977c:	f04f 0000 	mov.w	r0, #0
 8019780:	f04f 0100 	mov.w	r1, #0
 8019784:	0fd0      	lsrs	r0, r2, #31
 8019786:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801978a:	17d9      	asrs	r1, r3, #31
 801978c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019790:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8019794:	4603      	mov	r3, r0
 8019796:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8019798:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801979c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80197a0:	681a      	ldr	r2, [r3, #0]
 80197a2:	4b1e      	ldr	r3, [pc, #120]	; (801981c <arm_softmax_s8+0xe24>)
 80197a4:	429a      	cmp	r2, r3
 80197a6:	d10e      	bne.n	80197c6 <arm_softmax_s8+0xdce>
 80197a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80197ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80197b6:	d106      	bne.n	80197c6 <arm_softmax_s8+0xdce>
        result = Q31_MAX;
 80197b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80197bc:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80197c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80197c4:	6013      	str	r3, [r2, #0]
    return result;
 80197c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80197ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80197ce:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 80197d0:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80197d4:	ea02 0103 	and.w	r1, r2, r3
 80197d8:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80197dc:	43da      	mvns	r2, r3
 80197de:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80197e2:	4013      	ands	r3, r2
 80197e4:	404b      	eors	r3, r1
 80197e6:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 80197ea:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 80197ee:	1c53      	adds	r3, r2, #1
 80197f0:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 80197f4:	2301      	movs	r3, #1
 80197f6:	fa03 f202 	lsl.w	r2, r3, r2
 80197fa:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80197fe:	4013      	ands	r3, r2
 8019800:	2b00      	cmp	r3, #0
 8019802:	d011      	beq.n	8019828 <arm_softmax_s8+0xe30>
 8019804:	f04f 33ff 	mov.w	r3, #4294967295
 8019808:	e00f      	b.n	801982a <arm_softmax_s8+0xe32>
 801980a:	bf00      	nop
 801980c:	f3af 8000 	nop.w
 8019810:	2f16ac6c 	.word	0x2f16ac6c
 8019814:	00000000 	.word	0x00000000
 8019818:	4da2cbf2 	.word	0x4da2cbf2
 801981c:	2f16ac6c 	.word	0x2f16ac6c
 8019820:	4da2cbf2 	.word	0x4da2cbf2
 8019824:	00000000 	.word	0x00000000
 8019828:	2300      	movs	r3, #0
 801982a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801982e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019832:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8019836:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801983a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801983c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019840:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8019844:	2300      	movs	r3, #0
 8019846:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8019848:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801984c:	f04f 0300 	mov.w	r3, #0
 8019850:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 8019854:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8019858:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801985c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	0fdb      	lsrs	r3, r3, #31
 8019864:	b2da      	uxtb	r2, r3
 8019866:	2300      	movs	r3, #0
 8019868:	4053      	eors	r3, r2
 801986a:	b2db      	uxtb	r3, r3
 801986c:	2b00      	cmp	r3, #0
 801986e:	d012      	beq.n	8019896 <arm_softmax_s8+0xe9e>
        mult = 1 - mult;
 8019870:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8019874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019878:	2100      	movs	r1, #0
 801987a:	f1d2 0001 	rsbs	r0, r2, #1
 801987e:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 8019882:	eb61 0303 	sbc.w	r3, r1, r3
 8019886:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 801988a:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 801988e:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8019892:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8019896:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801989a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	17da      	asrs	r2, r3, #31
 80198a2:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 80198a6:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 80198aa:	a3ab      	add	r3, pc, #684	; (adr r3, 8019b58 <arm_softmax_s8+0x1160>)
 80198ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198b0:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 80198b4:	fb02 f001 	mul.w	r0, r2, r1
 80198b8:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 80198bc:	fb01 f103 	mul.w	r1, r1, r3
 80198c0:	4401      	add	r1, r0
 80198c2:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 80198c6:	fba0 2302 	umull	r2, r3, r0, r2
 80198ca:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 80198ce:	4613      	mov	r3, r2
 80198d0:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 80198d4:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 80198d8:	18cb      	adds	r3, r1, r3
 80198da:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 80198de:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80198e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198e6:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 80198ea:	1851      	adds	r1, r2, r1
 80198ec:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 80198f0:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 80198f4:	414b      	adcs	r3, r1
 80198f6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80198fa:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 80198fe:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8019902:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8019906:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 801990a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801990e:	2b00      	cmp	r3, #0
 8019910:	da0a      	bge.n	8019928 <arm_softmax_s8+0xf30>
 8019912:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019916:	1851      	adds	r1, r2, r1
 8019918:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 801991c:	f143 0300 	adc.w	r3, r3, #0
 8019920:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8019924:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8019928:	f04f 0000 	mov.w	r0, #0
 801992c:	f04f 0100 	mov.w	r1, #0
 8019930:	0fd0      	lsrs	r0, r2, #31
 8019932:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8019936:	17d9      	asrs	r1, r3, #31
 8019938:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801993c:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8019940:	4603      	mov	r3, r0
 8019942:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8019944:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019948:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801994c:	681a      	ldr	r2, [r3, #0]
 801994e:	4b80      	ldr	r3, [pc, #512]	; (8019b50 <arm_softmax_s8+0x1158>)
 8019950:	429a      	cmp	r2, r3
 8019952:	d10e      	bne.n	8019972 <arm_softmax_s8+0xf7a>
 8019954:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019958:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019962:	d106      	bne.n	8019972 <arm_softmax_s8+0xf7a>
        result = Q31_MAX;
 8019964:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019968:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 801996c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019970:	6013      	str	r3, [r2, #0]
    return result;
 8019972:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019976:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801997a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 801997c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8019980:	ea02 0103 	and.w	r1, r2, r3
 8019984:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8019988:	43da      	mvns	r2, r3
 801998a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801998e:	4013      	ands	r3, r2
 8019990:	404b      	eors	r3, r1
 8019992:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 8019996:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 801999a:	1c53      	adds	r3, r2, #1
 801999c:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 80199a0:	2301      	movs	r3, #1
 80199a2:	fa03 f202 	lsl.w	r2, r3, r2
 80199a6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80199aa:	4013      	ands	r3, r2
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d002      	beq.n	80199b6 <arm_softmax_s8+0xfbe>
 80199b0:	f04f 33ff 	mov.w	r3, #4294967295
 80199b4:	e000      	b.n	80199b8 <arm_softmax_s8+0xfc0>
 80199b6:	2300      	movs	r3, #0
 80199b8:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80199bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80199c0:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 80199c4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80199c8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80199ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80199ce:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 80199d2:	2300      	movs	r3, #0
 80199d4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80199d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80199da:	f04f 0300 	mov.w	r3, #0
 80199de:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 80199e2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80199e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80199ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	0fdb      	lsrs	r3, r3, #31
 80199f2:	b2da      	uxtb	r2, r3
 80199f4:	2300      	movs	r3, #0
 80199f6:	4053      	eors	r3, r2
 80199f8:	b2db      	uxtb	r3, r3
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d012      	beq.n	8019a24 <arm_softmax_s8+0x102c>
        mult = 1 - mult;
 80199fe:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8019a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a06:	2100      	movs	r1, #0
 8019a08:	f1d2 0001 	rsbs	r0, r2, #1
 8019a0c:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 8019a10:	eb61 0303 	sbc.w	r3, r1, r3
 8019a14:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8019a18:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8019a1c:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 8019a20:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8019a24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019a28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	17da      	asrs	r2, r3, #31
 8019a30:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8019a34:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 8019a38:	a343      	add	r3, pc, #268	; (adr r3, 8019b48 <arm_softmax_s8+0x1150>)
 8019a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a3e:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 8019a42:	fb02 f001 	mul.w	r0, r2, r1
 8019a46:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 8019a4a:	fb01 f103 	mul.w	r1, r1, r3
 8019a4e:	4401      	add	r1, r0
 8019a50:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 8019a54:	fba0 2302 	umull	r2, r3, r0, r2
 8019a58:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8019a5c:	4613      	mov	r3, r2
 8019a5e:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 8019a62:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8019a66:	18cb      	adds	r3, r1, r3
 8019a68:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8019a6c:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8019a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a74:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 8019a78:	1851      	adds	r1, r2, r1
 8019a7a:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 8019a7e:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 8019a82:	414b      	adcs	r3, r1
 8019a84:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8019a88:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8019a8c:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 8019a90:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8019a94:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8019a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	da0a      	bge.n	8019ab6 <arm_softmax_s8+0x10be>
 8019aa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019aa4:	1851      	adds	r1, r2, r1
 8019aa6:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 8019aaa:	f143 0300 	adc.w	r3, r3, #0
 8019aae:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8019ab2:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8019ab6:	f04f 0000 	mov.w	r0, #0
 8019aba:	f04f 0100 	mov.w	r1, #0
 8019abe:	0fd0      	lsrs	r0, r2, #31
 8019ac0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8019ac4:	17d9      	asrs	r1, r3, #31
 8019ac6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019aca:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8019ace:	4603      	mov	r3, r0
 8019ad0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8019ad2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019ad6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8019ada:	681a      	ldr	r2, [r3, #0]
 8019adc:	4b1d      	ldr	r3, [pc, #116]	; (8019b54 <arm_softmax_s8+0x115c>)
 8019ade:	429a      	cmp	r2, r3
 8019ae0:	d10e      	bne.n	8019b00 <arm_softmax_s8+0x1108>
 8019ae2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019ae6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019af0:	d106      	bne.n	8019b00 <arm_softmax_s8+0x1108>
        result = Q31_MAX;
 8019af2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019af6:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8019afa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019afe:	6013      	str	r3, [r2, #0]
    return result;
 8019b00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019b04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8019b08:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8019b0a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8019b0e:	ea02 0103 	and.w	r1, r2, r3
 8019b12:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8019b16:	43da      	mvns	r2, r3
 8019b18:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8019b1c:	4013      	ands	r3, r2
 8019b1e:	404b      	eors	r3, r1
 8019b20:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 8019b24:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8019b28:	1c53      	adds	r3, r2, #1
 8019b2a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8019b2e:	2301      	movs	r3, #1
 8019b30:	fa03 f202 	lsl.w	r2, r3, r2
 8019b34:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8019b38:	4013      	ands	r3, r2
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d010      	beq.n	8019b60 <arm_softmax_s8+0x1168>
 8019b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8019b42:	e00e      	b.n	8019b62 <arm_softmax_s8+0x116a>
 8019b44:	f3af 8000 	nop.w
 8019b48:	02582ab7 	.word	0x02582ab7
 8019b4c:	00000000 	.word	0x00000000
 8019b50:	1152aaa4 	.word	0x1152aaa4
 8019b54:	02582ab7 	.word	0x02582ab7
 8019b58:	1152aaa4 	.word	0x1152aaa4
 8019b5c:	00000000 	.word	0x00000000
 8019b60:	2300      	movs	r3, #0
 8019b62:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8019b66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019b6a:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8019b6e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8019b72:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019b74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019b78:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8019b7c:	2300      	movs	r3, #0
 8019b7e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8019b80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019b84:	f04f 0300 	mov.w	r3, #0
 8019b88:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 8019b8c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8019b90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019b94:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	0fdb      	lsrs	r3, r3, #31
 8019b9c:	b2da      	uxtb	r2, r3
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	4053      	eors	r3, r2
 8019ba2:	b2db      	uxtb	r3, r3
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d012      	beq.n	8019bce <arm_softmax_s8+0x11d6>
        mult = 1 - mult;
 8019ba8:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8019bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bb0:	2100      	movs	r1, #0
 8019bb2:	f1d2 0001 	rsbs	r0, r2, #1
 8019bb6:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 8019bba:	eb61 0303 	sbc.w	r3, r1, r3
 8019bbe:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8019bc2:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 8019bc6:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8019bca:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8019bce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019bd2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	17da      	asrs	r2, r3, #31
 8019bda:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 8019bde:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 8019be2:	4ad3      	ldr	r2, [pc, #844]	; (8019f30 <arm_softmax_s8+0x1538>)
 8019be4:	f04f 0300 	mov.w	r3, #0
 8019be8:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8019bec:	fb02 f001 	mul.w	r0, r2, r1
 8019bf0:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 8019bf4:	fb01 f103 	mul.w	r1, r1, r3
 8019bf8:	4401      	add	r1, r0
 8019bfa:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8019bfe:	fba0 2302 	umull	r2, r3, r0, r2
 8019c02:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 8019c06:	4613      	mov	r3, r2
 8019c08:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 8019c0c:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8019c10:	18cb      	adds	r3, r1, r3
 8019c12:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 8019c16:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8019c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c1e:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 8019c22:	1851      	adds	r1, r2, r1
 8019c24:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8019c28:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 8019c2c:	414b      	adcs	r3, r1
 8019c2e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8019c32:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 8019c36:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8019c3a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8019c3e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8019c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	da0a      	bge.n	8019c60 <arm_softmax_s8+0x1268>
 8019c4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019c4e:	1851      	adds	r1, r2, r1
 8019c50:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8019c54:	f143 0300 	adc.w	r3, r3, #0
 8019c58:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8019c5c:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8019c60:	f04f 0000 	mov.w	r0, #0
 8019c64:	f04f 0100 	mov.w	r1, #0
 8019c68:	0fd0      	lsrs	r0, r2, #31
 8019c6a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8019c6e:	17d9      	asrs	r1, r3, #31
 8019c70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019c74:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8019c78:	4603      	mov	r3, r0
 8019c7a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8019c7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019c80:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8019c84:	681a      	ldr	r2, [r3, #0]
 8019c86:	4baa      	ldr	r3, [pc, #680]	; (8019f30 <arm_softmax_s8+0x1538>)
 8019c88:	429a      	cmp	r2, r3
 8019c8a:	d10e      	bne.n	8019caa <arm_softmax_s8+0x12b2>
 8019c8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019c90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019c9a:	d106      	bne.n	8019caa <arm_softmax_s8+0x12b2>
        result = Q31_MAX;
 8019c9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019ca0:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8019ca4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019ca8:	6013      	str	r3, [r2, #0]
    return result;
 8019caa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019cae:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8019cb2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8019cb4:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8019cb8:	ea02 0103 	and.w	r1, r2, r3
 8019cbc:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8019cc0:	43da      	mvns	r2, r3
 8019cc2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8019cc6:	4013      	ands	r3, r2
 8019cc8:	404b      	eors	r3, r1
 8019cca:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 8019cce:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8019cd2:	1c53      	adds	r3, r2, #1
 8019cd4:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8019cd8:	2301      	movs	r3, #1
 8019cda:	fa03 f202 	lsl.w	r2, r3, r2
 8019cde:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8019ce2:	4013      	ands	r3, r2
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d002      	beq.n	8019cee <arm_softmax_s8+0x12f6>
 8019ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8019cec:	e000      	b.n	8019cf0 <arm_softmax_s8+0x12f8>
 8019cee:	2300      	movs	r3, #0
 8019cf0:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8019cf4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019cf8:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8019cfc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8019d00:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019d02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019d06:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8019d0a:	2300      	movs	r3, #0
 8019d0c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8019d0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019d12:	f04f 0300 	mov.w	r3, #0
 8019d16:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 8019d1a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8019d1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019d22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	0fdb      	lsrs	r3, r3, #31
 8019d2a:	b2da      	uxtb	r2, r3
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	4053      	eors	r3, r2
 8019d30:	b2db      	uxtb	r3, r3
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d012      	beq.n	8019d5c <arm_softmax_s8+0x1364>
        mult = 1 - mult;
 8019d36:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8019d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d3e:	2100      	movs	r1, #0
 8019d40:	f1d2 0001 	rsbs	r0, r2, #1
 8019d44:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 8019d48:	eb61 0303 	sbc.w	r3, r1, r3
 8019d4c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8019d50:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 8019d54:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8019d58:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8019d5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019d60:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	17da      	asrs	r2, r3, #31
 8019d68:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8019d6c:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 8019d70:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 8019d74:	f04f 0300 	mov.w	r3, #0
 8019d78:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 8019d7c:	fb02 f001 	mul.w	r0, r2, r1
 8019d80:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 8019d84:	fb01 f103 	mul.w	r1, r1, r3
 8019d88:	4401      	add	r1, r0
 8019d8a:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 8019d8e:	fba0 2302 	umull	r2, r3, r0, r2
 8019d92:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 8019d96:	4613      	mov	r3, r2
 8019d98:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 8019d9c:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8019da0:	18cb      	adds	r3, r1, r3
 8019da2:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 8019da6:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8019daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dae:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 8019db2:	1851      	adds	r1, r2, r1
 8019db4:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8019db8:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 8019dbc:	414b      	adcs	r3, r1
 8019dbe:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8019dc2:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8019dc6:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8019dca:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8019dce:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8019dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	da0a      	bge.n	8019df0 <arm_softmax_s8+0x13f8>
 8019dda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019dde:	1851      	adds	r1, r2, r1
 8019de0:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 8019de4:	f143 0300 	adc.w	r3, r3, #0
 8019de8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8019dec:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 8019df0:	f04f 0000 	mov.w	r0, #0
 8019df4:	f04f 0100 	mov.w	r1, #0
 8019df8:	0fd0      	lsrs	r0, r2, #31
 8019dfa:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8019dfe:	17d9      	asrs	r1, r3, #31
 8019e00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019e04:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8019e08:	4603      	mov	r3, r0
 8019e0a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8019e0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019e10:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	2bf2      	cmp	r3, #242	; 0xf2
 8019e18:	d10e      	bne.n	8019e38 <arm_softmax_s8+0x1440>
 8019e1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019e1e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019e28:	d106      	bne.n	8019e38 <arm_softmax_s8+0x1440>
        result = Q31_MAX;
 8019e2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019e2e:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8019e32:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019e36:	6013      	str	r3, [r2, #0]
    return result;
 8019e38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019e3c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8019e40:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8019e42:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8019e46:	ea02 0103 	and.w	r1, r2, r3
 8019e4a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8019e4e:	43da      	mvns	r2, r3
 8019e50:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8019e54:	4013      	ands	r3, r2
 8019e56:	404b      	eors	r3, r1
 8019e58:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    mask = MASK_IF_ZERO(val);
 8019e5c:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d102      	bne.n	8019e6a <arm_softmax_s8+0x1472>
 8019e64:	f04f 33ff 	mov.w	r3, #4294967295
 8019e68:	e000      	b.n	8019e6c <arm_softmax_s8+0x1474>
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8019e70:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8019e74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019e78:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8019e7c:	43da      	mvns	r2, r3
 8019e7e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8019e82:	4013      	ands	r3, r2
 8019e84:	404b      	eors	r3, r1
 8019e86:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t result = 0;
 8019e8a:	2300      	movs	r3, #0
 8019e8c:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019e94:	3b01      	subs	r3, #1
 8019e96:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    int32_t remainder = remainder_mask & dividend;
 8019e9a:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 8019e9e:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 8019ea2:	4013      	ands	r3, r2
 8019ea4:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    result = dividend >> exponent;
 8019ea8:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 8019eac:	131b      	asrs	r3, r3, #12
 8019eae:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    q31_t threshold = remainder_mask >> 1;
 8019eb2:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 8019eb6:	105b      	asrs	r3, r3, #1
 8019eb8:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (result < 0)
 8019ebc:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	da04      	bge.n	8019ece <arm_softmax_s8+0x14d6>
        threshold++;
 8019ec4:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8019ec8:	3301      	adds	r3, #1
 8019eca:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (remainder > threshold)
 8019ece:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 8019ed2:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8019ed6:	429a      	cmp	r2, r3
 8019ed8:	dd04      	ble.n	8019ee4 <arm_softmax_s8+0x14ec>
        result++;
 8019eda:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8019ede:	3301      	adds	r3, #1
 8019ee0:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    return result;
 8019ee4:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 8019ee8:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 8019eec:	4413      	add	r3, r2
 8019eee:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        for (col = 0; col < row_size; ++col)
 8019ef2:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8019ef6:	3301      	adds	r3, #1
 8019ef8:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8019efc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019f00:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8019f04:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	429a      	cmp	r2, r3
 8019f0c:	f6fe add2 	blt.w	8018ab4 <arm_softmax_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 8019f10:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8019f14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019f18:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8019f1c:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 8019f1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019f22:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d103      	bne.n	8019f34 <arm_softmax_s8+0x153c>
    return 32U;
 8019f2c:	2320      	movs	r3, #32
 8019f2e:	e009      	b.n	8019f44 <arm_softmax_s8+0x154c>
 8019f30:	000afe11 	.word	0x000afe11
  return __builtin_clz(value);
 8019f34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019f38:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	fab3 f383 	clz	r3, r3
 8019f42:	b2db      	uxtb	r3, r3
 8019f44:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8019f48:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8019f4c:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8019f50:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 8019f54:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8019f58:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8019f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8019f60:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8019f64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019f68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8019f6c:	601a      	str	r2, [r3, #0]
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 8019f6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019f72:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	17da      	asrs	r2, r3, #31
 8019f7a:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8019f7e:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 8019f82:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019f86:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 8019f8a:	4602      	mov	r2, r0
 8019f8c:	18d3      	adds	r3, r2, r3
 8019f8e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8019f92:	460b      	mov	r3, r1
 8019f94:	f143 0300 	adc.w	r3, r3, #0
 8019f98:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8019f9c:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8019fa0:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8019fa4:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8019fa8:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8019fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	db04      	blt.n	8019fbe <arm_softmax_s8+0x15c6>
 8019fb4:	f04f 0001 	mov.w	r0, #1
 8019fb8:	f04f 0100 	mov.w	r1, #0
 8019fbc:	e003      	b.n	8019fc6 <arm_softmax_s8+0x15ce>
 8019fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8019fc2:	f04f 31ff 	mov.w	r1, #4294967295
 8019fc6:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8019fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fce:	1884      	adds	r4, r0, r2
 8019fd0:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 8019fd4:	eb41 0303 	adc.w	r3, r1, r3
 8019fd8:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8019fdc:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 8019fe0:	460b      	mov	r3, r1
 8019fe2:	0fdb      	lsrs	r3, r3, #31
 8019fe4:	2200      	movs	r2, #0
 8019fe6:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8019fea:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 8019fee:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8019ff2:	4602      	mov	r2, r0
 8019ff4:	189b      	adds	r3, r3, r2
 8019ff6:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8019ffa:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8019ffe:	460a      	mov	r2, r1
 801a000:	4153      	adcs	r3, r2
 801a002:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 801a006:	f04f 0200 	mov.w	r2, #0
 801a00a:	f04f 0300 	mov.w	r3, #0
 801a00e:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 801a012:	084a      	lsrs	r2, r1, #1
 801a014:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 801a018:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801a01c:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 801a020:	104b      	asrs	r3, r1, #1
 801a022:	4610      	mov	r0, r2
 801a024:	4619      	mov	r1, r3
 801a026:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a02a:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 801a02e:	4603      	mov	r3, r0
 801a030:	6013      	str	r3, [r2, #0]
 801a032:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a036:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 801a03a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a03e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801a046:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a04a:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801a04e:	2300      	movs	r3, #0
 801a050:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801a052:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a056:	f04f 0300 	mov.w	r3, #0
 801a05a:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 801a05e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801a062:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a066:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	0fdb      	lsrs	r3, r3, #31
 801a06e:	b2da      	uxtb	r2, r3
 801a070:	2301      	movs	r3, #1
 801a072:	4053      	eors	r3, r2
 801a074:	b2db      	uxtb	r3, r3
 801a076:	2b00      	cmp	r3, #0
 801a078:	d012      	beq.n	801a0a0 <arm_softmax_s8+0x16a8>
        mult = 1 - mult;
 801a07a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801a07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a082:	2100      	movs	r1, #0
 801a084:	f1d2 0001 	rsbs	r0, r2, #1
 801a088:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 801a08c:	eb61 0303 	sbc.w	r3, r1, r3
 801a090:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 801a094:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 801a098:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 801a09c:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801a0a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a0a4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	17da      	asrs	r2, r3, #31
 801a0ac:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 801a0b0:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 801a0b4:	f60f 53a0 	addw	r3, pc, #3488	; 0xda0
 801a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0bc:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 801a0c0:	fb02 f001 	mul.w	r0, r2, r1
 801a0c4:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 801a0c8:	fb01 f103 	mul.w	r1, r1, r3
 801a0cc:	4401      	add	r1, r0
 801a0ce:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 801a0d2:	fba0 2302 	umull	r2, r3, r0, r2
 801a0d6:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 801a0da:	4613      	mov	r3, r2
 801a0dc:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 801a0e0:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 801a0e4:	18cb      	adds	r3, r1, r3
 801a0e6:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 801a0ea:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0f2:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 801a0f6:	1851      	adds	r1, r2, r1
 801a0f8:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 801a0fc:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 801a100:	414b      	adcs	r3, r1
 801a102:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801a106:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 801a10a:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 801a10e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801a112:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	da0a      	bge.n	801a134 <arm_softmax_s8+0x173c>
 801a11e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a122:	1851      	adds	r1, r2, r1
 801a124:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 801a128:	f143 0300 	adc.w	r3, r3, #0
 801a12c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 801a130:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 801a134:	f04f 0000 	mov.w	r0, #0
 801a138:	f04f 0100 	mov.w	r1, #0
 801a13c:	0fd0      	lsrs	r0, r2, #31
 801a13e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801a142:	17d9      	asrs	r1, r3, #31
 801a144:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a148:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801a14c:	4603      	mov	r3, r0
 801a14e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801a150:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a154:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 801a15e:	d10e      	bne.n	801a17e <arm_softmax_s8+0x1786>
 801a160:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a164:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801a168:	681b      	ldr	r3, [r3, #0]
 801a16a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a16e:	d106      	bne.n	801a17e <arm_softmax_s8+0x1786>
        result = Q31_MAX;
 801a170:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a174:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801a178:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a17c:	6013      	str	r3, [r2, #0]
    return result;
 801a17e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a182:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801a186:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 801a188:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a18c:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801a190:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 801a194:	6013      	str	r3, [r2, #0]
    const int32_t shift = (1 << 29);
 801a196:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a19a:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 801a19e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801a1a2:	6013      	str	r3, [r2, #0]
 801a1a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a1a8:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 801a1ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a1b0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	6013      	str	r3, [r2, #0]
 801a1b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a1bc:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 801a1c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a1c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801a1cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a1d0:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 801a1d4:	2300      	movs	r3, #0
 801a1d6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801a1d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a1dc:	f04f 0300 	mov.w	r3, #0
 801a1e0:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 801a1e4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801a1e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a1ec:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	0fdb      	lsrs	r3, r3, #31
 801a1f4:	b2da      	uxtb	r2, r3
 801a1f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a1fa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	0fdb      	lsrs	r3, r3, #31
 801a202:	b2db      	uxtb	r3, r3
 801a204:	4053      	eors	r3, r2
 801a206:	b2db      	uxtb	r3, r3
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d012      	beq.n	801a232 <arm_softmax_s8+0x183a>
        mult = 1 - mult;
 801a20c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 801a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a214:	2100      	movs	r1, #0
 801a216:	f1d2 0001 	rsbs	r0, r2, #1
 801a21a:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 801a21e:	eb61 0303 	sbc.w	r3, r1, r3
 801a222:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 801a226:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 801a22a:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 801a22e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801a232:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a236:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	17da      	asrs	r2, r3, #31
 801a23e:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 801a242:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 801a246:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a24a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	17da      	asrs	r2, r3, #31
 801a252:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 801a256:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 801a25a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 801a25e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a262:	460b      	mov	r3, r1
 801a264:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 801a268:	fb02 f203 	mul.w	r2, r2, r3
 801a26c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 801a270:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 801a274:	e9c4 0100 	strd	r0, r1, [r4]
 801a278:	4601      	mov	r1, r0
 801a27a:	fb01 f303 	mul.w	r3, r1, r3
 801a27e:	4413      	add	r3, r2
 801a280:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 801a284:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 801a288:	fba2 1201 	umull	r1, r2, r2, r1
 801a28c:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 801a290:	460a      	mov	r2, r1
 801a292:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801a296:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 801a29a:	4413      	add	r3, r2
 801a29c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801a2a0:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 801a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2a8:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801a2ac:	1851      	adds	r1, r2, r1
 801a2ae:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 801a2b2:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 801a2b6:	414b      	adcs	r3, r1
 801a2b8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 801a2bc:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 801a2c0:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 801a2c4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801a2c8:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 801a2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	da0a      	bge.n	801a2ea <arm_softmax_s8+0x18f2>
 801a2d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a2d8:	1851      	adds	r1, r2, r1
 801a2da:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 801a2de:	f143 0300 	adc.w	r3, r3, #0
 801a2e2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 801a2e6:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 801a2ea:	f04f 0000 	mov.w	r0, #0
 801a2ee:	f04f 0100 	mov.w	r1, #0
 801a2f2:	0fd0      	lsrs	r0, r2, #31
 801a2f4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801a2f8:	17d9      	asrs	r1, r3, #31
 801a2fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a2fe:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 801a302:	4603      	mov	r3, r0
 801a304:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801a306:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a30a:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 801a30e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a312:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801a316:	6812      	ldr	r2, [r2, #0]
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	429a      	cmp	r2, r3
 801a31c:	d10e      	bne.n	801a33c <arm_softmax_s8+0x1944>
 801a31e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a322:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a32c:	d106      	bne.n	801a33c <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 801a32e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a332:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 801a336:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a33a:	6013      	str	r3, [r2, #0]
    return result;
 801a33c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a340:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801a344:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801a346:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a34a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	1a99      	subs	r1, r3, r2
 801a352:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a356:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 801a35a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a35e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	6013      	str	r3, [r2, #0]
 801a366:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a36a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801a36e:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 801a370:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a374:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 801a378:	2300      	movs	r3, #0
 801a37a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801a37c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a380:	f04f 0300 	mov.w	r3, #0
 801a384:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 801a388:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801a38c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a390:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	0fdb      	lsrs	r3, r3, #31
 801a398:	b2da      	uxtb	r2, r3
 801a39a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a39e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	0fdb      	lsrs	r3, r3, #31
 801a3a6:	b2db      	uxtb	r3, r3
 801a3a8:	4053      	eors	r3, r2
 801a3aa:	b2db      	uxtb	r3, r3
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d012      	beq.n	801a3d6 <arm_softmax_s8+0x19de>
        mult = 1 - mult;
 801a3b0:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 801a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3b8:	2100      	movs	r1, #0
 801a3ba:	f1d2 0001 	rsbs	r0, r2, #1
 801a3be:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 801a3c2:	eb61 0303 	sbc.w	r3, r1, r3
 801a3c6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 801a3ca:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 801a3ce:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 801a3d2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801a3d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a3da:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	17da      	asrs	r2, r3, #31
 801a3e2:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 801a3e6:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 801a3ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a3ee:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	17da      	asrs	r2, r3, #31
 801a3f6:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 801a3fa:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 801a3fe:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 801a402:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a406:	460b      	mov	r3, r1
 801a408:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 801a40c:	fb02 f203 	mul.w	r2, r2, r3
 801a410:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 801a414:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 801a418:	e9c4 0100 	strd	r0, r1, [r4]
 801a41c:	4601      	mov	r1, r0
 801a41e:	fb01 f303 	mul.w	r3, r1, r3
 801a422:	4413      	add	r3, r2
 801a424:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 801a428:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 801a42c:	fba2 1201 	umull	r1, r2, r2, r1
 801a430:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 801a434:	460a      	mov	r2, r1
 801a436:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 801a43a:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 801a43e:	4413      	add	r3, r2
 801a440:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 801a444:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 801a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a44c:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 801a450:	1851      	adds	r1, r2, r1
 801a452:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 801a456:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 801a45a:	414b      	adcs	r3, r1
 801a45c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 801a460:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 801a464:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 801a468:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801a46c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 801a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a474:	2b00      	cmp	r3, #0
 801a476:	da0a      	bge.n	801a48e <arm_softmax_s8+0x1a96>
 801a478:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a47c:	1851      	adds	r1, r2, r1
 801a47e:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 801a482:	f143 0300 	adc.w	r3, r3, #0
 801a486:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 801a48a:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 801a48e:	f04f 0000 	mov.w	r0, #0
 801a492:	f04f 0100 	mov.w	r1, #0
 801a496:	0fd0      	lsrs	r0, r2, #31
 801a498:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801a49c:	17d9      	asrs	r1, r3, #31
 801a49e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a4a2:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 801a4a6:	4603      	mov	r3, r0
 801a4a8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801a4aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a4ae:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 801a4b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a4b6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801a4ba:	6812      	ldr	r2, [r2, #0]
 801a4bc:	681b      	ldr	r3, [r3, #0]
 801a4be:	429a      	cmp	r2, r3
 801a4c0:	d10e      	bne.n	801a4e0 <arm_softmax_s8+0x1ae8>
 801a4c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a4c6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a4d0:	d106      	bne.n	801a4e0 <arm_softmax_s8+0x1ae8>
        result = Q31_MAX;
 801a4d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a4d6:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 801a4da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a4de:	6013      	str	r3, [r2, #0]
    return result;
 801a4e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a4e4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801a4e8:	681a      	ldr	r2, [r3, #0]
 801a4ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a4ee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801a4f2:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 801a4f4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801a4f8:	4619      	mov	r1, r3
 801a4fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a4fe:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 801a502:	1e4b      	subs	r3, r1, #1
 801a504:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 801a506:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a50a:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 801a50e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a512:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	009b      	lsls	r3, r3, #2
 801a51a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 801a51c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a520:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 801a524:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a528:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801a52c:	6812      	ldr	r2, [r2, #0]
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	429a      	cmp	r2, r3
 801a532:	dd02      	ble.n	801a53a <arm_softmax_s8+0x1b42>
 801a534:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a538:	e000      	b.n	801a53c <arm_softmax_s8+0x1b44>
 801a53a:	2000      	movs	r0, #0
 801a53c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a540:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 801a544:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a548:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801a54c:	6812      	ldr	r2, [r2, #0]
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	429a      	cmp	r2, r3
 801a552:	dd01      	ble.n	801a558 <arm_softmax_s8+0x1b60>
 801a554:	2200      	movs	r2, #0
 801a556:	e001      	b.n	801a55c <arm_softmax_s8+0x1b64>
 801a558:	f04f 32ff 	mov.w	r2, #4294967295
 801a55c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a560:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	ea02 0103 	and.w	r1, r2, r3
 801a56a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a56e:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 801a572:	ea81 0300 	eor.w	r3, r1, r0
 801a576:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 801a578:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a57c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801a580:	681b      	ldr	r3, [r3, #0]
 801a582:	425a      	negs	r2, r3
 801a584:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a588:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	4293      	cmp	r3, r2
 801a590:	da02      	bge.n	801a598 <arm_softmax_s8+0x1ba0>
 801a592:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801a596:	e000      	b.n	801a59a <arm_softmax_s8+0x1ba2>
 801a598:	2000      	movs	r0, #0
 801a59a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a59e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	425a      	negs	r2, r3
 801a5a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a5aa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	4293      	cmp	r3, r2
 801a5b2:	da01      	bge.n	801a5b8 <arm_softmax_s8+0x1bc0>
 801a5b4:	2200      	movs	r2, #0
 801a5b6:	e001      	b.n	801a5bc <arm_softmax_s8+0x1bc4>
 801a5b8:	f04f 32ff 	mov.w	r2, #4294967295
 801a5bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a5c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	ea02 0103 	and.w	r1, r2, r3
 801a5ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a5ce:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 801a5d2:	ea81 0300 	eor.w	r3, r1, r0
 801a5d6:	6013      	str	r3, [r2, #0]
    return result;
 801a5d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a5dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801a5e0:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801a5e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a5e6:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801a5ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a5ee:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	440b      	add	r3, r1
 801a5f6:	6013      	str	r3, [r2, #0]
 801a5f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a5fc:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 801a600:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a604:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	6013      	str	r3, [r2, #0]
 801a60c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a610:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 801a614:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a618:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801a620:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a624:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 801a628:	2300      	movs	r3, #0
 801a62a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801a62c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a630:	f04f 0300 	mov.w	r3, #0
 801a634:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 801a638:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801a63c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a640:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	0fdb      	lsrs	r3, r3, #31
 801a648:	b2da      	uxtb	r2, r3
 801a64a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a64e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	0fdb      	lsrs	r3, r3, #31
 801a656:	b2db      	uxtb	r3, r3
 801a658:	4053      	eors	r3, r2
 801a65a:	b2db      	uxtb	r3, r3
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d012      	beq.n	801a686 <arm_softmax_s8+0x1c8e>
        mult = 1 - mult;
 801a660:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 801a664:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a668:	2100      	movs	r1, #0
 801a66a:	f1d2 0001 	rsbs	r0, r2, #1
 801a66e:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 801a672:	eb61 0303 	sbc.w	r3, r1, r3
 801a676:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 801a67a:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 801a67e:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 801a682:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801a686:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a68a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	17da      	asrs	r2, r3, #31
 801a692:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 801a696:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 801a69a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a69e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	17da      	asrs	r2, r3, #31
 801a6a6:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 801a6aa:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 801a6ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 801a6b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a6b6:	460b      	mov	r3, r1
 801a6b8:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 801a6bc:	fb02 f203 	mul.w	r2, r2, r3
 801a6c0:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801a6c4:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 801a6c8:	e9c4 0100 	strd	r0, r1, [r4]
 801a6cc:	4601      	mov	r1, r0
 801a6ce:	fb01 f303 	mul.w	r3, r1, r3
 801a6d2:	4413      	add	r3, r2
 801a6d4:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 801a6d8:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 801a6dc:	fba2 1201 	umull	r1, r2, r2, r1
 801a6e0:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 801a6e4:	460a      	mov	r2, r1
 801a6e6:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 801a6ea:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801a6ee:	4413      	add	r3, r2
 801a6f0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801a6f4:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 801a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6fc:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 801a700:	1851      	adds	r1, r2, r1
 801a702:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 801a706:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 801a70a:	414b      	adcs	r3, r1
 801a70c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 801a710:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 801a714:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 801a718:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801a71c:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 801a720:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a724:	2b00      	cmp	r3, #0
 801a726:	da0a      	bge.n	801a73e <arm_softmax_s8+0x1d46>
 801a728:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a72c:	1851      	adds	r1, r2, r1
 801a72e:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 801a732:	f143 0300 	adc.w	r3, r3, #0
 801a736:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 801a73a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 801a73e:	f04f 0000 	mov.w	r0, #0
 801a742:	f04f 0100 	mov.w	r1, #0
 801a746:	0fd0      	lsrs	r0, r2, #31
 801a748:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801a74c:	17d9      	asrs	r1, r3, #31
 801a74e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a752:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 801a756:	4603      	mov	r3, r0
 801a758:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801a75a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a75e:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 801a762:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a766:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801a76a:	6812      	ldr	r2, [r2, #0]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	429a      	cmp	r2, r3
 801a770:	d10e      	bne.n	801a790 <arm_softmax_s8+0x1d98>
 801a772:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a776:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a780:	d106      	bne.n	801a790 <arm_softmax_s8+0x1d98>
        result = Q31_MAX;
 801a782:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a786:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 801a78a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a78e:	6013      	str	r3, [r2, #0]
    return result;
 801a790:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a794:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801a798:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801a79a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a79e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801a7a2:	681b      	ldr	r3, [r3, #0]
 801a7a4:	1a99      	subs	r1, r3, r2
 801a7a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a7aa:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801a7ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a7b2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801a7b6:	681b      	ldr	r3, [r3, #0]
 801a7b8:	6013      	str	r3, [r2, #0]
 801a7ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a7be:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801a7c2:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 801a7c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a7c8:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 801a7cc:	2300      	movs	r3, #0
 801a7ce:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801a7d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a7d4:	f04f 0300 	mov.w	r3, #0
 801a7d8:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 801a7dc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801a7e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a7e4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	0fdb      	lsrs	r3, r3, #31
 801a7ec:	b2da      	uxtb	r2, r3
 801a7ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a7f2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	0fdb      	lsrs	r3, r3, #31
 801a7fa:	b2db      	uxtb	r3, r3
 801a7fc:	4053      	eors	r3, r2
 801a7fe:	b2db      	uxtb	r3, r3
 801a800:	2b00      	cmp	r3, #0
 801a802:	d012      	beq.n	801a82a <arm_softmax_s8+0x1e32>
        mult = 1 - mult;
 801a804:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a80c:	2100      	movs	r1, #0
 801a80e:	f1d2 0001 	rsbs	r0, r2, #1
 801a812:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 801a816:	eb61 0303 	sbc.w	r3, r1, r3
 801a81a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 801a81e:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 801a822:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 801a826:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801a82a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a82e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	17da      	asrs	r2, r3, #31
 801a836:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 801a83a:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 801a83e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a842:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	17da      	asrs	r2, r3, #31
 801a84a:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 801a84e:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 801a852:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 801a856:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a85a:	460b      	mov	r3, r1
 801a85c:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 801a860:	fb02 f203 	mul.w	r2, r2, r3
 801a864:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801a868:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 801a86c:	e9c4 0100 	strd	r0, r1, [r4]
 801a870:	4601      	mov	r1, r0
 801a872:	fb01 f303 	mul.w	r3, r1, r3
 801a876:	4413      	add	r3, r2
 801a878:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 801a87c:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 801a880:	fba2 1201 	umull	r1, r2, r2, r1
 801a884:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 801a888:	460a      	mov	r2, r1
 801a88a:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 801a88e:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 801a892:	4413      	add	r3, r2
 801a894:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 801a898:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8a0:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 801a8a4:	1851      	adds	r1, r2, r1
 801a8a6:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 801a8aa:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 801a8ae:	414b      	adcs	r3, r1
 801a8b0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 801a8b4:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 801a8b8:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 801a8bc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801a8c0:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	da0a      	bge.n	801a8e2 <arm_softmax_s8+0x1eea>
 801a8cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a8d0:	1851      	adds	r1, r2, r1
 801a8d2:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 801a8d6:	f143 0300 	adc.w	r3, r3, #0
 801a8da:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 801a8de:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 801a8e2:	f04f 0000 	mov.w	r0, #0
 801a8e6:	f04f 0100 	mov.w	r1, #0
 801a8ea:	0fd0      	lsrs	r0, r2, #31
 801a8ec:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801a8f0:	17d9      	asrs	r1, r3, #31
 801a8f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a8f6:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 801a8fa:	4603      	mov	r3, r0
 801a8fc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801a8fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a902:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801a906:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a90a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801a90e:	6812      	ldr	r2, [r2, #0]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	429a      	cmp	r2, r3
 801a914:	d10e      	bne.n	801a934 <arm_softmax_s8+0x1f3c>
 801a916:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a91a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a924:	d106      	bne.n	801a934 <arm_softmax_s8+0x1f3c>
        result = Q31_MAX;
 801a926:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a92a:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 801a92e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a932:	6013      	str	r3, [r2, #0]
    return result;
 801a934:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801a93c:	681a      	ldr	r2, [r3, #0]
 801a93e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a942:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801a946:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 801a948:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801a94c:	4619      	mov	r1, r3
 801a94e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a952:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 801a956:	1e4b      	subs	r3, r1, #1
 801a958:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 801a95a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a95e:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 801a962:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a966:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	009b      	lsls	r3, r3, #2
 801a96e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 801a970:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a974:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 801a978:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a97c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801a980:	6812      	ldr	r2, [r2, #0]
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	429a      	cmp	r2, r3
 801a986:	dd02      	ble.n	801a98e <arm_softmax_s8+0x1f96>
 801a988:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a98c:	e000      	b.n	801a990 <arm_softmax_s8+0x1f98>
 801a98e:	2000      	movs	r0, #0
 801a990:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a994:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 801a998:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a99c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801a9a0:	6812      	ldr	r2, [r2, #0]
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	429a      	cmp	r2, r3
 801a9a6:	dd01      	ble.n	801a9ac <arm_softmax_s8+0x1fb4>
 801a9a8:	2200      	movs	r2, #0
 801a9aa:	e001      	b.n	801a9b0 <arm_softmax_s8+0x1fb8>
 801a9ac:	f04f 32ff 	mov.w	r2, #4294967295
 801a9b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a9b4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	ea02 0103 	and.w	r1, r2, r3
 801a9be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a9c2:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 801a9c6:	ea81 0300 	eor.w	r3, r1, r0
 801a9ca:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 801a9cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a9d0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	425a      	negs	r2, r3
 801a9d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a9dc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	4293      	cmp	r3, r2
 801a9e4:	da02      	bge.n	801a9ec <arm_softmax_s8+0x1ff4>
 801a9e6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801a9ea:	e000      	b.n	801a9ee <arm_softmax_s8+0x1ff6>
 801a9ec:	2000      	movs	r0, #0
 801a9ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a9f2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	425a      	negs	r2, r3
 801a9fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801a9fe:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	4293      	cmp	r3, r2
 801aa06:	da01      	bge.n	801aa0c <arm_softmax_s8+0x2014>
 801aa08:	2200      	movs	r2, #0
 801aa0a:	e001      	b.n	801aa10 <arm_softmax_s8+0x2018>
 801aa0c:	f04f 32ff 	mov.w	r2, #4294967295
 801aa10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aa14:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801aa18:	681b      	ldr	r3, [r3, #0]
 801aa1a:	ea02 0103 	and.w	r1, r2, r3
 801aa1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aa22:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 801aa26:	ea81 0300 	eor.w	r3, r1, r0
 801aa2a:	6013      	str	r3, [r2, #0]
    return result;
 801aa2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aa30:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801aa34:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801aa36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aa3a:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801aa3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aa42:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	440b      	add	r3, r1
 801aa4a:	6013      	str	r3, [r2, #0]
 801aa4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aa50:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 801aa54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aa58:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	6013      	str	r3, [r2, #0]
 801aa60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aa64:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 801aa68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aa6c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801aa74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aa78:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 801aa7c:	2300      	movs	r3, #0
 801aa7e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801aa80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801aa84:	f04f 0300 	mov.w	r3, #0
 801aa88:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 801aa8c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801aa90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aa94:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	0fdb      	lsrs	r3, r3, #31
 801aa9c:	b2da      	uxtb	r2, r3
 801aa9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aaa2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	0fdb      	lsrs	r3, r3, #31
 801aaaa:	b2db      	uxtb	r3, r3
 801aaac:	4053      	eors	r3, r2
 801aaae:	b2db      	uxtb	r3, r3
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d012      	beq.n	801aada <arm_softmax_s8+0x20e2>
        mult = 1 - mult;
 801aab4:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aabc:	2100      	movs	r1, #0
 801aabe:	f1d2 0001 	rsbs	r0, r2, #1
 801aac2:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 801aac6:	eb61 0303 	sbc.w	r3, r1, r3
 801aaca:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 801aace:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 801aad2:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 801aad6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801aada:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aade:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	17da      	asrs	r2, r3, #31
 801aae6:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 801aaea:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 801aaee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aaf2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	17da      	asrs	r2, r3, #31
 801aafa:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 801aafe:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 801ab02:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 801ab06:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ab0a:	460b      	mov	r3, r1
 801ab0c:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 801ab10:	fb02 f203 	mul.w	r2, r2, r3
 801ab14:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 801ab18:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 801ab1c:	e9c4 0100 	strd	r0, r1, [r4]
 801ab20:	4601      	mov	r1, r0
 801ab22:	fb01 f303 	mul.w	r3, r1, r3
 801ab26:	4413      	add	r3, r2
 801ab28:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 801ab2c:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 801ab30:	fba2 1201 	umull	r1, r2, r2, r1
 801ab34:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 801ab38:	460a      	mov	r2, r1
 801ab3a:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 801ab3e:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 801ab42:	4413      	add	r3, r2
 801ab44:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 801ab48:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab50:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 801ab54:	1851      	adds	r1, r2, r1
 801ab56:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 801ab5a:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 801ab5e:	414b      	adcs	r3, r1
 801ab60:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 801ab64:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 801ab68:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 801ab6c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801ab70:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	da0a      	bge.n	801ab92 <arm_softmax_s8+0x219a>
 801ab7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ab80:	1851      	adds	r1, r2, r1
 801ab82:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 801ab86:	f143 0300 	adc.w	r3, r3, #0
 801ab8a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 801ab8e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 801ab92:	f04f 0000 	mov.w	r0, #0
 801ab96:	f04f 0100 	mov.w	r1, #0
 801ab9a:	0fd0      	lsrs	r0, r2, #31
 801ab9c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801aba0:	17d9      	asrs	r1, r3, #31
 801aba2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aba6:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 801abaa:	4603      	mov	r3, r0
 801abac:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801abae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801abb2:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 801abb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801abba:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801abbe:	6812      	ldr	r2, [r2, #0]
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	429a      	cmp	r2, r3
 801abc4:	d10e      	bne.n	801abe4 <arm_softmax_s8+0x21ec>
 801abc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801abca:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801abd4:	d106      	bne.n	801abe4 <arm_softmax_s8+0x21ec>
        result = Q31_MAX;
 801abd6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801abda:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 801abde:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801abe2:	6013      	str	r3, [r2, #0]
    return result;
 801abe4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801abe8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801abec:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801abee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801abf2:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	1a99      	subs	r1, r3, r2
 801abfa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801abfe:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 801ac02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ac06:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	6013      	str	r3, [r2, #0]
 801ac0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ac12:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801ac16:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 801ac18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ac1c:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 801ac20:	2300      	movs	r3, #0
 801ac22:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801ac24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801ac28:	f04f 0300 	mov.w	r3, #0
 801ac2c:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 801ac30:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801ac34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ac38:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	0fdb      	lsrs	r3, r3, #31
 801ac40:	b2da      	uxtb	r2, r3
 801ac42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ac46:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	0fdb      	lsrs	r3, r3, #31
 801ac4e:	b2db      	uxtb	r3, r3
 801ac50:	4053      	eors	r3, r2
 801ac52:	b2db      	uxtb	r3, r3
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d012      	beq.n	801ac7e <arm_softmax_s8+0x2286>
        mult = 1 - mult;
 801ac58:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 801ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac60:	2100      	movs	r1, #0
 801ac62:	f1d2 0001 	rsbs	r0, r2, #1
 801ac66:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 801ac6a:	eb61 0303 	sbc.w	r3, r1, r3
 801ac6e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 801ac72:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 801ac76:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 801ac7a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801ac7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ac82:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	17da      	asrs	r2, r3, #31
 801ac8a:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 801ac8e:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 801ac92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ac96:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	17da      	asrs	r2, r3, #31
 801ac9e:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 801aca2:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 801aca6:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 801acaa:	460b      	mov	r3, r1
 801acac:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 801acb0:	fb02 f203 	mul.w	r2, r2, r3
 801acb4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 801acb8:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 801acbc:	4601      	mov	r1, r0
 801acbe:	fb01 f303 	mul.w	r3, r1, r3
 801acc2:	4413      	add	r3, r2
 801acc4:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 801acc8:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 801accc:	fba2 1201 	umull	r1, r2, r2, r1
 801acd0:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 801acd4:	460a      	mov	r2, r1
 801acd6:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 801acda:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 801acde:	4413      	add	r3, r2
 801ace0:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 801ace4:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 801ace8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acec:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 801acf0:	1851      	adds	r1, r2, r1
 801acf2:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 801acf6:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 801acfa:	414b      	adcs	r3, r1
 801acfc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 801ad00:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 801ad04:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 801ad08:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801ad0c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 801ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	da0a      	bge.n	801ad2e <arm_softmax_s8+0x2336>
 801ad18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ad1c:	1851      	adds	r1, r2, r1
 801ad1e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 801ad22:	f143 0300 	adc.w	r3, r3, #0
 801ad26:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801ad2a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801ad2e:	f04f 0000 	mov.w	r0, #0
 801ad32:	f04f 0100 	mov.w	r1, #0
 801ad36:	0fd0      	lsrs	r0, r2, #31
 801ad38:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801ad3c:	17d9      	asrs	r1, r3, #31
 801ad3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ad42:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 801ad46:	4603      	mov	r3, r0
 801ad48:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801ad4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ad4e:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 801ad52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ad56:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801ad5a:	6812      	ldr	r2, [r2, #0]
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	429a      	cmp	r2, r3
 801ad60:	d10e      	bne.n	801ad80 <arm_softmax_s8+0x2388>
 801ad62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ad66:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ad70:	d106      	bne.n	801ad80 <arm_softmax_s8+0x2388>
        result = Q31_MAX;
 801ad72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ad76:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 801ad7a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801ad7e:	6013      	str	r3, [r2, #0]
    return result;
 801ad80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ad84:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801ad88:	681a      	ldr	r2, [r3, #0]
 801ad8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ad8e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801ad92:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 801ad94:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801ad98:	4619      	mov	r1, r3
 801ad9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ad9e:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 801ada2:	1e4b      	subs	r3, r1, #1
 801ada4:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 801ada6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801adaa:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801adae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801adb2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	009b      	lsls	r3, r3, #2
 801adba:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 801adbc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801adc0:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 801adc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801adc8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801adcc:	6812      	ldr	r2, [r2, #0]
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	429a      	cmp	r2, r3
 801add2:	dd02      	ble.n	801adda <arm_softmax_s8+0x23e2>
 801add4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801add8:	e000      	b.n	801addc <arm_softmax_s8+0x23e4>
 801adda:	2000      	movs	r0, #0
 801addc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ade0:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 801ade4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ade8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801adec:	6812      	ldr	r2, [r2, #0]
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	429a      	cmp	r2, r3
 801adf2:	dd01      	ble.n	801adf8 <arm_softmax_s8+0x2400>
 801adf4:	2200      	movs	r2, #0
 801adf6:	e001      	b.n	801adfc <arm_softmax_s8+0x2404>
 801adf8:	f04f 32ff 	mov.w	r2, #4294967295
 801adfc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ae00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801ae04:	681b      	ldr	r3, [r3, #0]
 801ae06:	ea02 0103 	and.w	r1, r2, r3
 801ae0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ae0e:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801ae12:	ea81 0300 	eor.w	r3, r1, r0
 801ae16:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 801ae18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ae1c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801ae20:	681b      	ldr	r3, [r3, #0]
 801ae22:	425a      	negs	r2, r3
 801ae24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ae28:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	4293      	cmp	r3, r2
 801ae30:	da02      	bge.n	801ae38 <arm_softmax_s8+0x2440>
 801ae32:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801ae36:	e000      	b.n	801ae3a <arm_softmax_s8+0x2442>
 801ae38:	2000      	movs	r0, #0
 801ae3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ae3e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	425a      	negs	r2, r3
 801ae46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ae4a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	4293      	cmp	r3, r2
 801ae52:	da05      	bge.n	801ae60 <arm_softmax_s8+0x2468>
 801ae54:	2200      	movs	r2, #0
 801ae56:	e005      	b.n	801ae64 <arm_softmax_s8+0x246c>
 801ae58:	c3c3c3c4 	.word	0xc3c3c3c4
 801ae5c:	ffffffff 	.word	0xffffffff
 801ae60:	f04f 32ff 	mov.w	r2, #4294967295
 801ae64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ae68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	ea02 0103 	and.w	r1, r2, r3
 801ae72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ae76:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801ae7a:	ea81 0300 	eor.w	r3, r1, r0
 801ae7e:	6013      	str	r3, [r2, #0]
    return result;
 801ae80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ae84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801ae88:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801ae8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ae8e:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801ae92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ae96:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	440b      	add	r3, r1
 801ae9e:	6013      	str	r3, [r2, #0]
 801aea0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aea4:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 801aea8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aeac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 801aeb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801aeb8:	4619      	mov	r1, r3
 801aeba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aebe:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 801aec2:	1e4b      	subs	r3, r1, #1
 801aec4:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 801aec6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aeca:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801aece:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aed2:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	005b      	lsls	r3, r3, #1
 801aeda:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 801aedc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aee0:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 801aee4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aee8:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801aeec:	6812      	ldr	r2, [r2, #0]
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	429a      	cmp	r2, r3
 801aef2:	dd02      	ble.n	801aefa <arm_softmax_s8+0x2502>
 801aef4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801aef8:	e000      	b.n	801aefc <arm_softmax_s8+0x2504>
 801aefa:	2000      	movs	r0, #0
 801aefc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801af00:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 801af04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801af08:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801af0c:	6812      	ldr	r2, [r2, #0]
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	429a      	cmp	r2, r3
 801af12:	dd01      	ble.n	801af18 <arm_softmax_s8+0x2520>
 801af14:	2200      	movs	r2, #0
 801af16:	e001      	b.n	801af1c <arm_softmax_s8+0x2524>
 801af18:	f04f 32ff 	mov.w	r2, #4294967295
 801af1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801af20:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	ea02 0103 	and.w	r1, r2, r3
 801af2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801af2e:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801af32:	ea81 0300 	eor.w	r3, r1, r0
 801af36:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 801af38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801af3c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801af40:	681b      	ldr	r3, [r3, #0]
 801af42:	425a      	negs	r2, r3
 801af44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801af48:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801af4c:	681b      	ldr	r3, [r3, #0]
 801af4e:	4293      	cmp	r3, r2
 801af50:	da02      	bge.n	801af58 <arm_softmax_s8+0x2560>
 801af52:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801af56:	e000      	b.n	801af5a <arm_softmax_s8+0x2562>
 801af58:	2000      	movs	r0, #0
 801af5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801af5e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	425a      	negs	r2, r3
 801af66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801af6a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	4293      	cmp	r3, r2
 801af72:	da01      	bge.n	801af78 <arm_softmax_s8+0x2580>
 801af74:	2200      	movs	r2, #0
 801af76:	e001      	b.n	801af7c <arm_softmax_s8+0x2584>
 801af78:	f04f 32ff 	mov.w	r2, #4294967295
 801af7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801af80:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	ea02 0103 	and.w	r1, r2, r3
 801af8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801af8e:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801af92:	ea81 0300 	eor.w	r3, r1, r0
 801af96:	6013      	str	r3, [r2, #0]
    return result;
 801af98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801af9c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801afa0:	681b      	ldr	r3, [r3, #0]
    return MUL_POW2(x, 1);
 801afa2:	bf00      	nop
 801afa4:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

        for (col = 0; col < row_size; ++col)
 801afa8:	2300      	movs	r3, #0
 801afaa:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 801afae:	f001 bd85 	b.w	801cabc <arm_softmax_s8+0x40c4>
        {
            diff = input[col] - max;
 801afb2:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801afb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801afba:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	4413      	add	r3, r2
 801afc2:	f993 3000 	ldrsb.w	r3, [r3]
 801afc6:	461a      	mov	r2, r3
 801afc8:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 801afcc:	1ad3      	subs	r3, r2, r3
 801afce:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 801afd2:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 801afd6:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 801afda:	429a      	cmp	r2, r3
 801afdc:	f2c1 8562 	blt.w	801caa4 <arm_softmax_s8+0x40ac>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 801afe0:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 801afe4:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 801afe8:	fb03 f202 	mul.w	r2, r3, r2
 801afec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801aff0:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 801aff4:	601a      	str	r2, [r3, #0]
 801aff6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801affa:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 801affe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b002:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 801b006:	681b      	ldr	r3, [r3, #0]
 801b008:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801b00a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b00e:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 801b012:	2300      	movs	r3, #0
 801b014:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801b016:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801b01a:	f04f 0300 	mov.w	r3, #0
 801b01e:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 801b022:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801b026:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b02a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 801b02e:	681b      	ldr	r3, [r3, #0]
 801b030:	0fdb      	lsrs	r3, r3, #31
 801b032:	b2da      	uxtb	r2, r3
 801b034:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b038:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	0fdb      	lsrs	r3, r3, #31
 801b040:	b2db      	uxtb	r3, r3
 801b042:	4053      	eors	r3, r2
 801b044:	b2db      	uxtb	r3, r3
 801b046:	2b00      	cmp	r3, #0
 801b048:	d012      	beq.n	801b070 <arm_softmax_s8+0x2678>
        mult = 1 - mult;
 801b04a:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b052:	2100      	movs	r1, #0
 801b054:	f1d2 0001 	rsbs	r0, r2, #1
 801b058:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 801b05c:	eb61 0303 	sbc.w	r3, r1, r3
 801b060:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801b064:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 801b068:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 801b06c:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801b070:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b074:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 801b078:	681b      	ldr	r3, [r3, #0]
 801b07a:	17da      	asrs	r2, r3, #31
 801b07c:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 801b080:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 801b084:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b088:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	17da      	asrs	r2, r3, #31
 801b090:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 801b094:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 801b098:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 801b09c:	460b      	mov	r3, r1
 801b09e:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 801b0a2:	fb02 f203 	mul.w	r2, r2, r3
 801b0a6:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801b0aa:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 801b0ae:	4601      	mov	r1, r0
 801b0b0:	fb01 f303 	mul.w	r3, r1, r3
 801b0b4:	4413      	add	r3, r2
 801b0b6:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 801b0ba:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 801b0be:	fba2 1201 	umull	r1, r2, r2, r1
 801b0c2:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 801b0c6:	460a      	mov	r2, r1
 801b0c8:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 801b0cc:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 801b0d0:	4413      	add	r3, r2
 801b0d2:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 801b0d6:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0de:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 801b0e2:	1851      	adds	r1, r2, r1
 801b0e4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 801b0e8:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 801b0ec:	414b      	adcs	r3, r1
 801b0ee:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801b0f2:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 801b0f6:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 801b0fa:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801b0fe:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801b102:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b106:	2b00      	cmp	r3, #0
 801b108:	da0a      	bge.n	801b120 <arm_softmax_s8+0x2728>
 801b10a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b10e:	1851      	adds	r1, r2, r1
 801b110:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 801b114:	f143 0300 	adc.w	r3, r3, #0
 801b118:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801b11c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801b120:	f04f 0000 	mov.w	r0, #0
 801b124:	f04f 0100 	mov.w	r1, #0
 801b128:	0fd0      	lsrs	r0, r2, #31
 801b12a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801b12e:	17d9      	asrs	r1, r3, #31
 801b130:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b134:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 801b138:	4603      	mov	r3, r0
 801b13a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801b13c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b140:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 801b144:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b148:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 801b14c:	6812      	ldr	r2, [r2, #0]
 801b14e:	681b      	ldr	r3, [r3, #0]
 801b150:	429a      	cmp	r2, r3
 801b152:	d10e      	bne.n	801b172 <arm_softmax_s8+0x277a>
 801b154:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b158:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 801b15c:	681b      	ldr	r3, [r3, #0]
 801b15e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b162:	d106      	bne.n	801b172 <arm_softmax_s8+0x277a>
        result = Q31_MAX;
 801b164:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b168:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 801b16c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b170:	6013      	str	r3, [r2, #0]
    return result;
 801b172:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b176:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 801b17a:	681a      	ldr	r2, [r3, #0]
 801b17c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b180:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801b184:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 801b186:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b18a:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 801b18e:	2300      	movs	r3, #0
 801b190:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 801b192:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b196:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 801b19a:	2318      	movs	r3, #24
 801b19c:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 801b19e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b1a2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801b1a6:	2201      	movs	r2, #1
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	fa02 f303 	lsl.w	r3, r2, r3
 801b1ae:	1e5a      	subs	r2, r3, #1
 801b1b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b1b4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801b1b8:	681b      	ldr	r3, [r3, #0]
 801b1ba:	ea02 0003 	and.w	r0, r2, r3
 801b1be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b1c2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801b1c6:	2201      	movs	r2, #1
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	fa02 f103 	lsl.w	r1, r2, r3
 801b1ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b1d2:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 801b1d6:	1a43      	subs	r3, r0, r1
 801b1d8:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 801b1da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b1de:	f5a3 7127 	sub.w	r1, r3, #668	; 0x29c
 801b1e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b1e6:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 801b1ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b1ee:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801b1f2:	6812      	ldr	r2, [r2, #0]
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	1ad3      	subs	r3, r2, r3
 801b1f8:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 801b1fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b1fe:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	0159      	lsls	r1, r3, #5
 801b206:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b20a:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 801b20e:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 801b212:	6013      	str	r3, [r2, #0]
 801b214:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b218:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 801b21c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b220:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	6013      	str	r3, [r2, #0]
 801b228:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b22c:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 801b230:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b234:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801b23c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b240:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 801b244:	2300      	movs	r3, #0
 801b246:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801b248:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801b24c:	f04f 0300 	mov.w	r3, #0
 801b250:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 801b254:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801b258:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b25c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	0fdb      	lsrs	r3, r3, #31
 801b264:	b2da      	uxtb	r2, r3
 801b266:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b26a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	0fdb      	lsrs	r3, r3, #31
 801b272:	b2db      	uxtb	r3, r3
 801b274:	4053      	eors	r3, r2
 801b276:	b2db      	uxtb	r3, r3
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d012      	beq.n	801b2a2 <arm_softmax_s8+0x28aa>
        mult = 1 - mult;
 801b27c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801b280:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b284:	2100      	movs	r1, #0
 801b286:	f1d2 0001 	rsbs	r0, r2, #1
 801b28a:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 801b28e:	eb61 0303 	sbc.w	r3, r1, r3
 801b292:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801b296:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 801b29a:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 801b29e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801b2a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b2a6:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	17da      	asrs	r2, r3, #31
 801b2ae:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 801b2b2:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 801b2b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b2ba:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	17da      	asrs	r2, r3, #31
 801b2c2:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 801b2c6:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 801b2ca:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 801b2ce:	460b      	mov	r3, r1
 801b2d0:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 801b2d4:	fb02 f203 	mul.w	r2, r2, r3
 801b2d8:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 801b2dc:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 801b2e0:	4601      	mov	r1, r0
 801b2e2:	fb01 f303 	mul.w	r3, r1, r3
 801b2e6:	4413      	add	r3, r2
 801b2e8:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 801b2ec:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 801b2f0:	fba2 1201 	umull	r1, r2, r2, r1
 801b2f4:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 801b2f8:	460a      	mov	r2, r1
 801b2fa:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 801b2fe:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 801b302:	4413      	add	r3, r2
 801b304:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 801b308:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b310:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 801b314:	1851      	adds	r1, r2, r1
 801b316:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 801b31a:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 801b31e:	414b      	adcs	r3, r1
 801b320:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801b324:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 801b328:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 801b32c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801b330:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b338:	2b00      	cmp	r3, #0
 801b33a:	da0a      	bge.n	801b352 <arm_softmax_s8+0x295a>
 801b33c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b340:	1851      	adds	r1, r2, r1
 801b342:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 801b346:	f143 0300 	adc.w	r3, r3, #0
 801b34a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801b34e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801b352:	f04f 0000 	mov.w	r0, #0
 801b356:	f04f 0100 	mov.w	r1, #0
 801b35a:	0fd0      	lsrs	r0, r2, #31
 801b35c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801b360:	17d9      	asrs	r1, r3, #31
 801b362:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b366:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 801b36a:	4603      	mov	r3, r0
 801b36c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801b36e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b372:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 801b376:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b37a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 801b37e:	6812      	ldr	r2, [r2, #0]
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	429a      	cmp	r2, r3
 801b384:	d10e      	bne.n	801b3a4 <arm_softmax_s8+0x29ac>
 801b386:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b38a:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b394:	d106      	bne.n	801b3a4 <arm_softmax_s8+0x29ac>
        result = Q31_MAX;
 801b396:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b39a:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 801b39e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b3a2:	6013      	str	r3, [r2, #0]
    return result;
 801b3a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b3a8:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 801b3ac:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 801b3ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b3b2:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801b3b6:	601a      	str	r2, [r3, #0]
 801b3b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b3bc:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 801b3c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b3c4:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801b3c8:	681b      	ldr	r3, [r3, #0]
 801b3ca:	6013      	str	r3, [r2, #0]
 801b3cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b3d0:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 801b3d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b3d8:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801b3e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b3e4:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 801b3e8:	2300      	movs	r3, #0
 801b3ea:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801b3ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801b3f0:	f04f 0300 	mov.w	r3, #0
 801b3f4:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 801b3f8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801b3fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b400:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	0fdb      	lsrs	r3, r3, #31
 801b408:	b2da      	uxtb	r2, r3
 801b40a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b40e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	0fdb      	lsrs	r3, r3, #31
 801b416:	b2db      	uxtb	r3, r3
 801b418:	4053      	eors	r3, r2
 801b41a:	b2db      	uxtb	r3, r3
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d012      	beq.n	801b446 <arm_softmax_s8+0x2a4e>
        mult = 1 - mult;
 801b420:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 801b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b428:	2100      	movs	r1, #0
 801b42a:	f1d2 0001 	rsbs	r0, r2, #1
 801b42e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 801b432:	eb61 0303 	sbc.w	r3, r1, r3
 801b436:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801b43a:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 801b43e:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 801b442:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801b446:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b44a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	17da      	asrs	r2, r3, #31
 801b452:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 801b456:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 801b45a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b45e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	17da      	asrs	r2, r3, #31
 801b466:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 801b46a:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 801b46e:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 801b472:	460b      	mov	r3, r1
 801b474:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801b478:	fb02 f203 	mul.w	r2, r2, r3
 801b47c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 801b480:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 801b484:	4601      	mov	r1, r0
 801b486:	fb01 f303 	mul.w	r3, r1, r3
 801b48a:	4413      	add	r3, r2
 801b48c:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 801b490:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 801b494:	fba2 1201 	umull	r1, r2, r2, r1
 801b498:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 801b49c:	460a      	mov	r2, r1
 801b49e:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 801b4a2:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 801b4a6:	4413      	add	r3, r2
 801b4a8:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 801b4ac:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 801b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4b4:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 801b4b8:	1851      	adds	r1, r2, r1
 801b4ba:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 801b4be:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 801b4c2:	414b      	adcs	r3, r1
 801b4c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b4c8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 801b4cc:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 801b4d0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801b4d4:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 801b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	da0a      	bge.n	801b4f6 <arm_softmax_s8+0x2afe>
 801b4e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b4e4:	1851      	adds	r1, r2, r1
 801b4e6:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 801b4ea:	f143 0300 	adc.w	r3, r3, #0
 801b4ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b4f2:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 801b4f6:	f04f 0000 	mov.w	r0, #0
 801b4fa:	f04f 0100 	mov.w	r1, #0
 801b4fe:	0fd0      	lsrs	r0, r2, #31
 801b500:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801b504:	17d9      	asrs	r1, r3, #31
 801b506:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b50a:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 801b50e:	4603      	mov	r3, r0
 801b510:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801b512:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b516:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 801b51a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b51e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801b522:	6812      	ldr	r2, [r2, #0]
 801b524:	681b      	ldr	r3, [r3, #0]
 801b526:	429a      	cmp	r2, r3
 801b528:	d10e      	bne.n	801b548 <arm_softmax_s8+0x2b50>
 801b52a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b52e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b538:	d106      	bne.n	801b548 <arm_softmax_s8+0x2b50>
        result = Q31_MAX;
 801b53a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b53e:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 801b542:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b546:	6013      	str	r3, [r2, #0]
    return result;
 801b548:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b54c:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 801b550:	681a      	ldr	r2, [r3, #0]
 801b552:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b556:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801b55a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801b55c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b560:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 801b564:	2300      	movs	r3, #0
 801b566:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b568:	2104      	movs	r1, #4
 801b56a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b56e:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 801b572:	1e4b      	subs	r3, r1, #1
 801b574:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801b576:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b57a:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 801b57e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b582:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 801b586:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b58a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 801b58e:	6812      	ldr	r2, [r2, #0]
 801b590:	681b      	ldr	r3, [r3, #0]
 801b592:	4013      	ands	r3, r2
 801b594:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801b596:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b59a:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 801b59e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b5a2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	109b      	asrs	r3, r3, #2
 801b5aa:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 801b5ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b5b0:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 801b5b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b5b8:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 801b5bc:	681b      	ldr	r3, [r3, #0]
 801b5be:	105b      	asrs	r3, r3, #1
 801b5c0:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801b5c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b5c6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	da0a      	bge.n	801b5e6 <arm_softmax_s8+0x2bee>
        threshold++;
 801b5d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b5d4:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 801b5d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b5dc:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	3301      	adds	r3, #1
 801b5e4:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801b5e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b5ea:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 801b5ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b5f2:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801b5f6:	6812      	ldr	r2, [r2, #0]
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	429a      	cmp	r2, r3
 801b5fc:	dd0a      	ble.n	801b614 <arm_softmax_s8+0x2c1c>
        result++;
 801b5fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b602:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 801b606:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b60a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	3301      	adds	r3, #1
 801b612:	6013      	str	r3, [r2, #0]
    return result;
 801b614:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b618:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801b61c:	681c      	ldr	r4, [r3, #0]
 801b61e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b622:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 801b626:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b62a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	6013      	str	r3, [r2, #0]
 801b632:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b636:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 801b63a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b63e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801b646:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b64a:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 801b64e:	2300      	movs	r3, #0
 801b650:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801b652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801b656:	f04f 0300 	mov.w	r3, #0
 801b65a:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 801b65e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801b662:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b666:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	0fdb      	lsrs	r3, r3, #31
 801b66e:	b2da      	uxtb	r2, r3
 801b670:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b674:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801b678:	681b      	ldr	r3, [r3, #0]
 801b67a:	0fdb      	lsrs	r3, r3, #31
 801b67c:	b2db      	uxtb	r3, r3
 801b67e:	4053      	eors	r3, r2
 801b680:	b2db      	uxtb	r3, r3
 801b682:	2b00      	cmp	r3, #0
 801b684:	d012      	beq.n	801b6ac <arm_softmax_s8+0x2cb4>
        mult = 1 - mult;
 801b686:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b68e:	2100      	movs	r1, #0
 801b690:	f1d2 0001 	rsbs	r0, r2, #1
 801b694:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 801b698:	eb61 0303 	sbc.w	r3, r1, r3
 801b69c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801b6a0:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 801b6a4:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 801b6a8:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 801b6ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b6b0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	17da      	asrs	r2, r3, #31
 801b6b8:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 801b6bc:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 801b6c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b6c4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	17da      	asrs	r2, r3, #31
 801b6cc:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 801b6d0:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 801b6d4:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 801b6d8:	460b      	mov	r3, r1
 801b6da:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 801b6de:	fb02 f203 	mul.w	r2, r2, r3
 801b6e2:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 801b6e6:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 801b6ea:	4601      	mov	r1, r0
 801b6ec:	fb01 f303 	mul.w	r3, r1, r3
 801b6f0:	4413      	add	r3, r2
 801b6f2:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 801b6f6:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 801b6fa:	fba2 1201 	umull	r1, r2, r2, r1
 801b6fe:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 801b702:	460a      	mov	r2, r1
 801b704:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 801b708:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 801b70c:	4413      	add	r3, r2
 801b70e:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 801b712:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801b716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b71a:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 801b71e:	1851      	adds	r1, r2, r1
 801b720:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 801b724:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 801b728:	414b      	adcs	r3, r1
 801b72a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801b72e:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801b732:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 801b736:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 801b73a:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801b73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b742:	2b00      	cmp	r3, #0
 801b744:	da0a      	bge.n	801b75c <arm_softmax_s8+0x2d64>
 801b746:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b74a:	1851      	adds	r1, r2, r1
 801b74c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 801b750:	f143 0300 	adc.w	r3, r3, #0
 801b754:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801b758:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 801b75c:	f04f 0000 	mov.w	r0, #0
 801b760:	f04f 0100 	mov.w	r1, #0
 801b764:	0fd0      	lsrs	r0, r2, #31
 801b766:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801b76a:	17d9      	asrs	r1, r3, #31
 801b76c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b770:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 801b774:	4603      	mov	r3, r0
 801b776:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801b778:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b77c:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 801b780:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b784:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801b788:	6812      	ldr	r2, [r2, #0]
 801b78a:	681b      	ldr	r3, [r3, #0]
 801b78c:	429a      	cmp	r2, r3
 801b78e:	d10e      	bne.n	801b7ae <arm_softmax_s8+0x2db6>
 801b790:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b794:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b79e:	d106      	bne.n	801b7ae <arm_softmax_s8+0x2db6>
        result = Q31_MAX;
 801b7a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b7a4:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 801b7a8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b7ac:	6013      	str	r3, [r2, #0]
    return result;
 801b7ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b7b2:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801b7b6:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 801b7b8:	18e2      	adds	r2, r4, r3
 801b7ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b7be:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801b7c2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801b7c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b7c8:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 801b7cc:	2300      	movs	r3, #0
 801b7ce:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801b7d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801b7d4:	f04f 0300 	mov.w	r3, #0
 801b7d8:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 801b7dc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801b7e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b7e4:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	0fdb      	lsrs	r3, r3, #31
 801b7ec:	b2da      	uxtb	r2, r3
 801b7ee:	2300      	movs	r3, #0
 801b7f0:	4053      	eors	r3, r2
 801b7f2:	b2db      	uxtb	r3, r3
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d012      	beq.n	801b81e <arm_softmax_s8+0x2e26>
        mult = 1 - mult;
 801b7f8:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801b7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b800:	2100      	movs	r1, #0
 801b802:	f1d2 0001 	rsbs	r0, r2, #1
 801b806:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 801b80a:	eb61 0303 	sbc.w	r3, r1, r3
 801b80e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801b812:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 801b816:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 801b81a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801b81e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b822:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	17da      	asrs	r2, r3, #31
 801b82a:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 801b82e:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 801b832:	a3c9      	add	r3, pc, #804	; (adr r3, 801bb58 <arm_softmax_s8+0x3160>)
 801b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b838:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 801b83c:	fb02 f001 	mul.w	r0, r2, r1
 801b840:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 801b844:	fb01 f103 	mul.w	r1, r1, r3
 801b848:	4401      	add	r1, r0
 801b84a:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 801b84e:	fba0 2302 	umull	r2, r3, r0, r2
 801b852:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 801b856:	4613      	mov	r3, r2
 801b858:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 801b85c:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 801b860:	18cb      	adds	r3, r1, r3
 801b862:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 801b866:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801b86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b86e:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 801b872:	1851      	adds	r1, r2, r1
 801b874:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 801b878:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 801b87c:	414b      	adcs	r3, r1
 801b87e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801b882:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 801b886:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 801b88a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801b88e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801b892:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b896:	2b00      	cmp	r3, #0
 801b898:	da0a      	bge.n	801b8b0 <arm_softmax_s8+0x2eb8>
 801b89a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b89e:	1851      	adds	r1, r2, r1
 801b8a0:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 801b8a4:	f143 0300 	adc.w	r3, r3, #0
 801b8a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801b8ac:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 801b8b0:	f04f 0000 	mov.w	r0, #0
 801b8b4:	f04f 0100 	mov.w	r1, #0
 801b8b8:	0fd0      	lsrs	r0, r2, #31
 801b8ba:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801b8be:	17d9      	asrs	r1, r3, #31
 801b8c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b8c4:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 801b8c8:	4603      	mov	r3, r0
 801b8ca:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801b8cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b8d0:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801b8d4:	681a      	ldr	r2, [r3, #0]
 801b8d6:	4b9e      	ldr	r3, [pc, #632]	; (801bb50 <arm_softmax_s8+0x3158>)
 801b8d8:	429a      	cmp	r2, r3
 801b8da:	d10e      	bne.n	801b8fa <arm_softmax_s8+0x2f02>
 801b8dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b8e0:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b8ea:	d106      	bne.n	801b8fa <arm_softmax_s8+0x2f02>
        result = Q31_MAX;
 801b8ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b8f0:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 801b8f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b8f8:	6013      	str	r3, [r2, #0]
    return result;
 801b8fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b8fe:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 801b902:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 801b904:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b908:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	441a      	add	r2, r3
 801b910:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b914:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 801b918:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801b91a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b91e:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 801b922:	2300      	movs	r3, #0
 801b924:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b926:	2102      	movs	r1, #2
 801b928:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b92c:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 801b930:	1e4b      	subs	r3, r1, #1
 801b932:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801b934:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b938:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 801b93c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b940:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 801b944:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b948:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801b94c:	6812      	ldr	r2, [r2, #0]
 801b94e:	681b      	ldr	r3, [r3, #0]
 801b950:	4013      	ands	r3, r2
 801b952:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801b954:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b958:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 801b95c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b960:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 801b964:	681b      	ldr	r3, [r3, #0]
 801b966:	105b      	asrs	r3, r3, #1
 801b968:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 801b96a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b96e:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 801b972:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b976:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	105b      	asrs	r3, r3, #1
 801b97e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801b980:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b984:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801b988:	681b      	ldr	r3, [r3, #0]
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	da0a      	bge.n	801b9a4 <arm_softmax_s8+0x2fac>
        threshold++;
 801b98e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b992:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 801b996:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b99a:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	3301      	adds	r3, #1
 801b9a2:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801b9a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b9a8:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 801b9ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b9b0:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801b9b4:	6812      	ldr	r2, [r2, #0]
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	429a      	cmp	r2, r3
 801b9ba:	dd0a      	ble.n	801b9d2 <arm_softmax_s8+0x2fda>
        result++;
 801b9bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b9c0:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 801b9c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b9c8:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	3301      	adds	r3, #1
 801b9d0:	6013      	str	r3, [r2, #0]
    return result;
 801b9d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b9d6:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801b9da:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 801b9dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b9e0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801b9e4:	681b      	ldr	r3, [r3, #0]
 801b9e6:	441a      	add	r2, r3
 801b9e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b9ec:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 801b9f0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801b9f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801b9f6:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 801b9fa:	2300      	movs	r3, #0
 801b9fc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801b9fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801ba02:	f04f 0300 	mov.w	r3, #0
 801ba06:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 801ba0a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801ba0e:	2200      	movs	r2, #0
 801ba10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ba14:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	0fdb      	lsrs	r3, r3, #31
 801ba1c:	b2db      	uxtb	r3, r3
 801ba1e:	4053      	eors	r3, r2
 801ba20:	b2db      	uxtb	r3, r3
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	d012      	beq.n	801ba4c <arm_softmax_s8+0x3054>
        mult = 1 - mult;
 801ba26:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba2e:	2100      	movs	r1, #0
 801ba30:	f1d2 0001 	rsbs	r0, r2, #1
 801ba34:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 801ba38:	eb61 0303 	sbc.w	r3, r1, r3
 801ba3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801ba40:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 801ba44:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 801ba48:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801ba4c:	a13e      	add	r1, pc, #248	; (adr r1, 801bb48 <arm_softmax_s8+0x3150>)
 801ba4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ba52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ba56:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	17da      	asrs	r2, r3, #31
 801ba5e:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 801ba62:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 801ba66:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 801ba6a:	fb03 f201 	mul.w	r2, r3, r1
 801ba6e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 801ba72:	fb00 f303 	mul.w	r3, r0, r3
 801ba76:	4413      	add	r3, r2
 801ba78:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 801ba7c:	fba0 1202 	umull	r1, r2, r0, r2
 801ba80:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 801ba84:	460a      	mov	r2, r1
 801ba86:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 801ba8a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 801ba8e:	4413      	add	r3, r2
 801ba90:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 801ba94:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801ba98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba9c:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 801baa0:	1851      	adds	r1, r2, r1
 801baa2:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 801baa6:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 801baaa:	414b      	adcs	r3, r1
 801baac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801bab0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 801bab4:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 801bab8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801babc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801bac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	da0a      	bge.n	801bade <arm_softmax_s8+0x30e6>
 801bac8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bacc:	1851      	adds	r1, r2, r1
 801bace:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 801bad2:	f143 0300 	adc.w	r3, r3, #0
 801bad6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801bada:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 801bade:	f04f 0000 	mov.w	r0, #0
 801bae2:	f04f 0100 	mov.w	r1, #0
 801bae6:	0fd0      	lsrs	r0, r2, #31
 801bae8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801baec:	17d9      	asrs	r1, r3, #31
 801baee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801baf2:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 801baf6:	4603      	mov	r3, r0
 801baf8:	6013      	str	r3, [r2, #0]
    return result;
 801bafa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bafe:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801bb02:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 801bb04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bb08:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801bb0c:	4b11      	ldr	r3, [pc, #68]	; (801bb54 <arm_softmax_s8+0x315c>)
 801bb0e:	440b      	add	r3, r1
 801bb10:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 801bb12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bb16:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801bb1a:	6819      	ldr	r1, [r3, #0]
 801bb1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bb20:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 801bb24:	1c4b      	adds	r3, r1, #1
 801bb26:	6013      	str	r3, [r2, #0]
 801bb28:	2301      	movs	r3, #1
 801bb2a:	fa03 f201 	lsl.w	r2, r3, r1
 801bb2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bb32:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	4013      	ands	r3, r2
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	d010      	beq.n	801bb60 <arm_softmax_s8+0x3168>
 801bb3e:	f04f 32ff 	mov.w	r2, #4294967295
 801bb42:	e00e      	b.n	801bb62 <arm_softmax_s8+0x316a>
 801bb44:	f3af 8000 	nop.w
 801bb48:	70f5a894 	.word	0x70f5a894
 801bb4c:	00000000 	.word	0x00000000
 801bb50:	2aaaaaab 	.word	0x2aaaaaab
 801bb54:	70f5a894 	.word	0x70f5a894
 801bb58:	2aaaaaab 	.word	0x2aaaaaab
 801bb5c:	00000000 	.word	0x00000000
 801bb60:	2200      	movs	r2, #0
 801bb62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bb66:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801bb6a:	601a      	str	r2, [r3, #0]
 801bb6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bb70:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 801bb74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bb78:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801bb80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bb84:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 801bb88:	2300      	movs	r3, #0
 801bb8a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801bb8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801bb90:	f04f 0300 	mov.w	r3, #0
 801bb94:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 801bb98:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801bb9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bba0:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801bba4:	681b      	ldr	r3, [r3, #0]
 801bba6:	0fdb      	lsrs	r3, r3, #31
 801bba8:	b2da      	uxtb	r2, r3
 801bbaa:	2300      	movs	r3, #0
 801bbac:	4053      	eors	r3, r2
 801bbae:	b2db      	uxtb	r3, r3
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d012      	beq.n	801bbda <arm_softmax_s8+0x31e2>
        mult = 1 - mult;
 801bbb4:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbbc:	2100      	movs	r1, #0
 801bbbe:	f1d2 0001 	rsbs	r0, r2, #1
 801bbc2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 801bbc6:	eb61 0303 	sbc.w	r3, r1, r3
 801bbca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801bbce:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 801bbd2:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 801bbd6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801bbda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bbde:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801bbe2:	681b      	ldr	r3, [r3, #0]
 801bbe4:	17da      	asrs	r2, r3, #31
 801bbe6:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 801bbea:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 801bbee:	a3c4      	add	r3, pc, #784	; (adr r3, 801bf00 <arm_softmax_s8+0x3508>)
 801bbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbf4:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 801bbf8:	fb02 f001 	mul.w	r0, r2, r1
 801bbfc:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 801bc00:	fb01 f103 	mul.w	r1, r1, r3
 801bc04:	4401      	add	r1, r0
 801bc06:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 801bc0a:	fba0 2302 	umull	r2, r3, r0, r2
 801bc0e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 801bc12:	4613      	mov	r3, r2
 801bc14:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 801bc18:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 801bc1c:	18cb      	adds	r3, r1, r3
 801bc1e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 801bc22:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801bc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc2a:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 801bc2e:	1851      	adds	r1, r2, r1
 801bc30:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801bc34:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 801bc38:	414b      	adcs	r3, r1
 801bc3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801bc3e:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 801bc42:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 801bc46:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801bc4a:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801bc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	da0a      	bge.n	801bc6c <arm_softmax_s8+0x3274>
 801bc56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bc5a:	1851      	adds	r1, r2, r1
 801bc5c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 801bc60:	f143 0300 	adc.w	r3, r3, #0
 801bc64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801bc68:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801bc6c:	f04f 0000 	mov.w	r0, #0
 801bc70:	f04f 0100 	mov.w	r1, #0
 801bc74:	0fd0      	lsrs	r0, r2, #31
 801bc76:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801bc7a:	17d9      	asrs	r1, r3, #31
 801bc7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bc80:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 801bc84:	4603      	mov	r3, r0
 801bc86:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801bc88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bc8c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801bc90:	681a      	ldr	r2, [r3, #0]
 801bc92:	4b99      	ldr	r3, [pc, #612]	; (801bef8 <arm_softmax_s8+0x3500>)
 801bc94:	429a      	cmp	r2, r3
 801bc96:	d10e      	bne.n	801bcb6 <arm_softmax_s8+0x32be>
 801bc98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bc9c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801bca6:	d106      	bne.n	801bcb6 <arm_softmax_s8+0x32be>
        result = Q31_MAX;
 801bca8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bcac:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 801bcb0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801bcb4:	6013      	str	r3, [r2, #0]
    return result;
 801bcb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bcba:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 801bcbe:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 801bcc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bcc4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801bcc8:	681b      	ldr	r3, [r3, #0]
 801bcca:	ea02 0003 	and.w	r0, r2, r3
 801bcce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bcd2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801bcd6:	681b      	ldr	r3, [r3, #0]
 801bcd8:	43da      	mvns	r2, r3
 801bcda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bcde:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801bce2:	681b      	ldr	r3, [r3, #0]
 801bce4:	ea02 0103 	and.w	r1, r2, r3
 801bce8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bcec:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801bcf0:	ea80 0301 	eor.w	r3, r0, r1
 801bcf4:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 801bcf6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bcfa:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801bcfe:	6819      	ldr	r1, [r3, #0]
 801bd00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bd04:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 801bd08:	1c4b      	adds	r3, r1, #1
 801bd0a:	6013      	str	r3, [r2, #0]
 801bd0c:	2301      	movs	r3, #1
 801bd0e:	fa03 f201 	lsl.w	r2, r3, r1
 801bd12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bd16:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801bd1a:	681b      	ldr	r3, [r3, #0]
 801bd1c:	4013      	ands	r3, r2
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d002      	beq.n	801bd28 <arm_softmax_s8+0x3330>
 801bd22:	f04f 32ff 	mov.w	r2, #4294967295
 801bd26:	e000      	b.n	801bd2a <arm_softmax_s8+0x3332>
 801bd28:	2200      	movs	r2, #0
 801bd2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bd2e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801bd32:	601a      	str	r2, [r3, #0]
 801bd34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bd38:	f5a3 7253 	sub.w	r2, r3, #844	; 0x34c
 801bd3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bd40:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801bd48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bd4c:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 801bd50:	2300      	movs	r3, #0
 801bd52:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801bd54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801bd58:	f04f 0300 	mov.w	r3, #0
 801bd5c:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 801bd60:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801bd64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bd68:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801bd6c:	681b      	ldr	r3, [r3, #0]
 801bd6e:	0fdb      	lsrs	r3, r3, #31
 801bd70:	b2da      	uxtb	r2, r3
 801bd72:	2300      	movs	r3, #0
 801bd74:	4053      	eors	r3, r2
 801bd76:	b2db      	uxtb	r3, r3
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d012      	beq.n	801bda2 <arm_softmax_s8+0x33aa>
        mult = 1 - mult;
 801bd7c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801bd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd84:	2100      	movs	r1, #0
 801bd86:	f1d2 0001 	rsbs	r0, r2, #1
 801bd8a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 801bd8e:	eb61 0303 	sbc.w	r3, r1, r3
 801bd92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801bd96:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 801bd9a:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 801bd9e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801bda2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bda6:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	17da      	asrs	r2, r3, #31
 801bdae:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 801bdb2:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 801bdb6:	a34e      	add	r3, pc, #312	; (adr r3, 801bef0 <arm_softmax_s8+0x34f8>)
 801bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdbc:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 801bdc0:	fb02 f001 	mul.w	r0, r2, r1
 801bdc4:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 801bdc8:	fb01 f103 	mul.w	r1, r1, r3
 801bdcc:	4401      	add	r1, r0
 801bdce:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 801bdd2:	fba0 2302 	umull	r2, r3, r0, r2
 801bdd6:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 801bdda:	4613      	mov	r3, r2
 801bddc:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 801bde0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 801bde4:	18cb      	adds	r3, r1, r3
 801bde6:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 801bdea:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdf2:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 801bdf6:	1851      	adds	r1, r2, r1
 801bdf8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 801bdfc:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 801be00:	414b      	adcs	r3, r1
 801be02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801be06:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 801be0a:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 801be0e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801be12:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801be16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	da0a      	bge.n	801be34 <arm_softmax_s8+0x343c>
 801be1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801be22:	1851      	adds	r1, r2, r1
 801be24:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 801be28:	f143 0300 	adc.w	r3, r3, #0
 801be2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801be30:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801be34:	f04f 0000 	mov.w	r0, #0
 801be38:	f04f 0100 	mov.w	r1, #0
 801be3c:	0fd0      	lsrs	r0, r2, #31
 801be3e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801be42:	17d9      	asrs	r1, r3, #31
 801be44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801be48:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 801be4c:	4603      	mov	r3, r0
 801be4e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801be50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801be54:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801be58:	681a      	ldr	r2, [r3, #0]
 801be5a:	4b28      	ldr	r3, [pc, #160]	; (801befc <arm_softmax_s8+0x3504>)
 801be5c:	429a      	cmp	r2, r3
 801be5e:	d10e      	bne.n	801be7e <arm_softmax_s8+0x3486>
 801be60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801be64:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801be6e:	d106      	bne.n	801be7e <arm_softmax_s8+0x3486>
        result = Q31_MAX;
 801be70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801be74:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 801be78:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801be7c:	6013      	str	r3, [r2, #0]
    return result;
 801be7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801be82:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801be86:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 801be88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801be8c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	ea02 0003 	and.w	r0, r2, r3
 801be96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801be9a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801be9e:	681b      	ldr	r3, [r3, #0]
 801bea0:	43da      	mvns	r2, r3
 801bea2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bea6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801beaa:	681b      	ldr	r3, [r3, #0]
 801beac:	ea02 0103 	and.w	r1, r2, r3
 801beb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801beb4:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801beb8:	ea80 0301 	eor.w	r3, r0, r1
 801bebc:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 801bebe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bec2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801bec6:	6819      	ldr	r1, [r3, #0]
 801bec8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801becc:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 801bed0:	1c4b      	adds	r3, r1, #1
 801bed2:	6013      	str	r3, [r2, #0]
 801bed4:	2301      	movs	r3, #1
 801bed6:	fa03 f201 	lsl.w	r2, r3, r1
 801beda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bede:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	4013      	ands	r3, r2
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d00e      	beq.n	801bf08 <arm_softmax_s8+0x3510>
 801beea:	f04f 32ff 	mov.w	r2, #4294967295
 801beee:	e00c      	b.n	801bf0a <arm_softmax_s8+0x3512>
 801bef0:	4da2cbf2 	.word	0x4da2cbf2
 801bef4:	00000000 	.word	0x00000000
 801bef8:	63afbe7b 	.word	0x63afbe7b
 801befc:	4da2cbf2 	.word	0x4da2cbf2
 801bf00:	63afbe7b 	.word	0x63afbe7b
 801bf04:	00000000 	.word	0x00000000
 801bf08:	2200      	movs	r2, #0
 801bf0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bf0e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801bf12:	601a      	str	r2, [r3, #0]
 801bf14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bf18:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 801bf1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bf20:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801bf28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bf2c:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 801bf30:	2300      	movs	r3, #0
 801bf32:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801bf34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801bf38:	f04f 0300 	mov.w	r3, #0
 801bf3c:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 801bf40:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801bf44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bf48:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	0fdb      	lsrs	r3, r3, #31
 801bf50:	b2da      	uxtb	r2, r3
 801bf52:	2300      	movs	r3, #0
 801bf54:	4053      	eors	r3, r2
 801bf56:	b2db      	uxtb	r3, r3
 801bf58:	2b00      	cmp	r3, #0
 801bf5a:	d012      	beq.n	801bf82 <arm_softmax_s8+0x358a>
        mult = 1 - mult;
 801bf5c:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801bf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf64:	2100      	movs	r1, #0
 801bf66:	f1d2 0001 	rsbs	r0, r2, #1
 801bf6a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 801bf6e:	eb61 0303 	sbc.w	r3, r1, r3
 801bf72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801bf76:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 801bf7a:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 801bf7e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801bf82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801bf86:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	17da      	asrs	r2, r3, #31
 801bf8e:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 801bf92:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 801bf96:	a3c0      	add	r3, pc, #768	; (adr r3, 801c298 <arm_softmax_s8+0x38a0>)
 801bf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf9c:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 801bfa0:	fb02 f001 	mul.w	r0, r2, r1
 801bfa4:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801bfa8:	fb01 f103 	mul.w	r1, r1, r3
 801bfac:	4401      	add	r1, r0
 801bfae:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 801bfb2:	fba0 2302 	umull	r2, r3, r0, r2
 801bfb6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 801bfba:	4613      	mov	r3, r2
 801bfbc:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 801bfc0:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 801bfc4:	18cb      	adds	r3, r1, r3
 801bfc6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 801bfca:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801bfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfd2:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 801bfd6:	1851      	adds	r1, r2, r1
 801bfd8:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 801bfdc:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 801bfe0:	414b      	adcs	r3, r1
 801bfe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801bfe6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 801bfea:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 801bfee:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801bff2:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801bff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	da08      	bge.n	801c010 <arm_softmax_s8+0x3618>
 801bffe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c002:	1851      	adds	r1, r2, r1
 801c004:	67b9      	str	r1, [r7, #120]	; 0x78
 801c006:	f143 0300 	adc.w	r3, r3, #0
 801c00a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801c00c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 801c010:	f04f 0000 	mov.w	r0, #0
 801c014:	f04f 0100 	mov.w	r1, #0
 801c018:	0fd0      	lsrs	r0, r2, #31
 801c01a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801c01e:	17d9      	asrs	r1, r3, #31
 801c020:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c024:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 801c028:	4603      	mov	r3, r0
 801c02a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801c02c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c030:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801c034:	681a      	ldr	r2, [r3, #0]
 801c036:	4b96      	ldr	r3, [pc, #600]	; (801c290 <arm_softmax_s8+0x3898>)
 801c038:	429a      	cmp	r2, r3
 801c03a:	d10e      	bne.n	801c05a <arm_softmax_s8+0x3662>
 801c03c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c040:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801c044:	681b      	ldr	r3, [r3, #0]
 801c046:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c04a:	d106      	bne.n	801c05a <arm_softmax_s8+0x3662>
        result = Q31_MAX;
 801c04c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c050:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 801c054:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801c058:	6013      	str	r3, [r2, #0]
    return result;
 801c05a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c05e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 801c062:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 801c064:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c068:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	ea02 0003 	and.w	r0, r2, r3
 801c072:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c076:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	43da      	mvns	r2, r3
 801c07e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c082:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801c086:	681b      	ldr	r3, [r3, #0]
 801c088:	ea02 0103 	and.w	r1, r2, r3
 801c08c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c090:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801c094:	ea80 0301 	eor.w	r3, r0, r1
 801c098:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 801c09a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c09e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801c0a2:	6819      	ldr	r1, [r3, #0]
 801c0a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c0a8:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 801c0ac:	1c4b      	adds	r3, r1, #1
 801c0ae:	6013      	str	r3, [r2, #0]
 801c0b0:	2301      	movs	r3, #1
 801c0b2:	fa03 f201 	lsl.w	r2, r3, r1
 801c0b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c0ba:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801c0be:	681b      	ldr	r3, [r3, #0]
 801c0c0:	4013      	ands	r3, r2
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d002      	beq.n	801c0cc <arm_softmax_s8+0x36d4>
 801c0c6:	f04f 32ff 	mov.w	r2, #4294967295
 801c0ca:	e000      	b.n	801c0ce <arm_softmax_s8+0x36d6>
 801c0cc:	2200      	movs	r2, #0
 801c0ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c0d2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c0d6:	601a      	str	r2, [r3, #0]
 801c0d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c0dc:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 801c0e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c0e4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c0ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c0f0:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 801c0f4:	2300      	movs	r3, #0
 801c0f6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801c0f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c0fc:	f04f 0300 	mov.w	r3, #0
 801c100:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801c104:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801c108:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c10c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 801c110:	681b      	ldr	r3, [r3, #0]
 801c112:	0fdb      	lsrs	r3, r3, #31
 801c114:	b2da      	uxtb	r2, r3
 801c116:	2300      	movs	r3, #0
 801c118:	4053      	eors	r3, r2
 801c11a:	b2db      	uxtb	r3, r3
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d010      	beq.n	801c142 <arm_softmax_s8+0x374a>
        mult = 1 - mult;
 801c120:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c128:	2100      	movs	r1, #0
 801c12a:	f1d2 0001 	rsbs	r0, r2, #1
 801c12e:	6738      	str	r0, [r7, #112]	; 0x70
 801c130:	eb61 0303 	sbc.w	r3, r1, r3
 801c134:	677b      	str	r3, [r7, #116]	; 0x74
 801c136:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 801c13a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801c13e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801c142:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c146:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	17da      	asrs	r2, r3, #31
 801c14e:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 801c152:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 801c156:	a34c      	add	r3, pc, #304	; (adr r3, 801c288 <arm_softmax_s8+0x3890>)
 801c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c15c:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 801c160:	fb02 f001 	mul.w	r0, r2, r1
 801c164:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 801c168:	fb01 f103 	mul.w	r1, r1, r3
 801c16c:	4401      	add	r1, r0
 801c16e:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 801c172:	fba0 2302 	umull	r2, r3, r0, r2
 801c176:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 801c17a:	4613      	mov	r3, r2
 801c17c:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 801c180:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 801c184:	18cb      	adds	r3, r1, r3
 801c186:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 801c18a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801c18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c192:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 801c196:	1851      	adds	r1, r2, r1
 801c198:	66b9      	str	r1, [r7, #104]	; 0x68
 801c19a:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 801c19e:	414b      	adcs	r3, r1
 801c1a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c1a2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 801c1a6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801c1aa:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801c1ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801c1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	da08      	bge.n	801c1cc <arm_softmax_s8+0x37d4>
 801c1ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c1be:	1851      	adds	r1, r2, r1
 801c1c0:	6639      	str	r1, [r7, #96]	; 0x60
 801c1c2:	f143 0300 	adc.w	r3, r3, #0
 801c1c6:	667b      	str	r3, [r7, #100]	; 0x64
 801c1c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801c1cc:	f04f 0000 	mov.w	r0, #0
 801c1d0:	f04f 0100 	mov.w	r1, #0
 801c1d4:	0fd0      	lsrs	r0, r2, #31
 801c1d6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801c1da:	17d9      	asrs	r1, r3, #31
 801c1dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c1e0:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 801c1e4:	4603      	mov	r3, r0
 801c1e6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801c1e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c1ec:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 801c1f0:	681a      	ldr	r2, [r3, #0]
 801c1f2:	4b28      	ldr	r3, [pc, #160]	; (801c294 <arm_softmax_s8+0x389c>)
 801c1f4:	429a      	cmp	r2, r3
 801c1f6:	d10e      	bne.n	801c216 <arm_softmax_s8+0x381e>
 801c1f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c1fc:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c206:	d106      	bne.n	801c216 <arm_softmax_s8+0x381e>
        result = Q31_MAX;
 801c208:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c20c:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 801c210:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801c214:	6013      	str	r3, [r2, #0]
    return result;
 801c216:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c21a:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 801c21e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 801c220:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c224:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	ea02 0003 	and.w	r0, r2, r3
 801c22e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c232:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	43da      	mvns	r2, r3
 801c23a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c23e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801c242:	681b      	ldr	r3, [r3, #0]
 801c244:	ea02 0103 	and.w	r1, r2, r3
 801c248:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c24c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801c250:	ea80 0301 	eor.w	r3, r0, r1
 801c254:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 801c256:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c25a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801c25e:	6819      	ldr	r1, [r3, #0]
 801c260:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c264:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 801c268:	1c4b      	adds	r3, r1, #1
 801c26a:	6013      	str	r3, [r2, #0]
 801c26c:	2301      	movs	r3, #1
 801c26e:	fa03 f201 	lsl.w	r2, r3, r1
 801c272:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c276:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801c27a:	681b      	ldr	r3, [r3, #0]
 801c27c:	4013      	ands	r3, r2
 801c27e:	2b00      	cmp	r3, #0
 801c280:	d00e      	beq.n	801c2a0 <arm_softmax_s8+0x38a8>
 801c282:	f04f 32ff 	mov.w	r2, #4294967295
 801c286:	e00c      	b.n	801c2a2 <arm_softmax_s8+0x38aa>
 801c288:	1152aaa4 	.word	0x1152aaa4
 801c28c:	00000000 	.word	0x00000000
 801c290:	2f16ac6c 	.word	0x2f16ac6c
 801c294:	1152aaa4 	.word	0x1152aaa4
 801c298:	2f16ac6c 	.word	0x2f16ac6c
 801c29c:	00000000 	.word	0x00000000
 801c2a0:	2200      	movs	r2, #0
 801c2a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c2a6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c2aa:	601a      	str	r2, [r3, #0]
 801c2ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c2b0:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 801c2b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c2b8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801c2bc:	681b      	ldr	r3, [r3, #0]
 801c2be:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c2c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c2c4:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 801c2c8:	2300      	movs	r3, #0
 801c2ca:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801c2cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c2d0:	f04f 0300 	mov.w	r3, #0
 801c2d4:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 801c2d8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801c2dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c2e0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801c2e4:	681b      	ldr	r3, [r3, #0]
 801c2e6:	0fdb      	lsrs	r3, r3, #31
 801c2e8:	b2da      	uxtb	r2, r3
 801c2ea:	2300      	movs	r3, #0
 801c2ec:	4053      	eors	r3, r2
 801c2ee:	b2db      	uxtb	r3, r3
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	d010      	beq.n	801c316 <arm_softmax_s8+0x391e>
        mult = 1 - mult;
 801c2f4:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801c2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2fc:	2100      	movs	r1, #0
 801c2fe:	f1d2 0001 	rsbs	r0, r2, #1
 801c302:	65b8      	str	r0, [r7, #88]	; 0x58
 801c304:	eb61 0303 	sbc.w	r3, r1, r3
 801c308:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c30a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 801c30e:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 801c312:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801c316:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c31a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	17da      	asrs	r2, r3, #31
 801c322:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 801c326:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 801c32a:	a3bd      	add	r3, pc, #756	; (adr r3, 801c620 <arm_softmax_s8+0x3c28>)
 801c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c330:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 801c334:	fb02 f001 	mul.w	r0, r2, r1
 801c338:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 801c33c:	fb01 f103 	mul.w	r1, r1, r3
 801c340:	4401      	add	r1, r0
 801c342:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 801c346:	fba0 2302 	umull	r2, r3, r0, r2
 801c34a:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 801c34e:	4613      	mov	r3, r2
 801c350:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 801c354:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 801c358:	18cb      	adds	r3, r1, r3
 801c35a:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 801c35e:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801c362:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c366:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 801c36a:	1851      	adds	r1, r2, r1
 801c36c:	6539      	str	r1, [r7, #80]	; 0x50
 801c36e:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 801c372:	414b      	adcs	r3, r1
 801c374:	657b      	str	r3, [r7, #84]	; 0x54
 801c376:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 801c37a:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 801c37e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801c382:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801c386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	da08      	bge.n	801c3a0 <arm_softmax_s8+0x39a8>
 801c38e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c392:	1851      	adds	r1, r2, r1
 801c394:	64b9      	str	r1, [r7, #72]	; 0x48
 801c396:	f143 0300 	adc.w	r3, r3, #0
 801c39a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c39c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801c3a0:	f04f 0000 	mov.w	r0, #0
 801c3a4:	f04f 0100 	mov.w	r1, #0
 801c3a8:	0fd0      	lsrs	r0, r2, #31
 801c3aa:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801c3ae:	17d9      	asrs	r1, r3, #31
 801c3b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c3b4:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 801c3b8:	4603      	mov	r3, r0
 801c3ba:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801c3bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c3c0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801c3c4:	681a      	ldr	r2, [r3, #0]
 801c3c6:	4b94      	ldr	r3, [pc, #592]	; (801c618 <arm_softmax_s8+0x3c20>)
 801c3c8:	429a      	cmp	r2, r3
 801c3ca:	d10e      	bne.n	801c3ea <arm_softmax_s8+0x39f2>
 801c3cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c3d0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801c3d4:	681b      	ldr	r3, [r3, #0]
 801c3d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c3da:	d106      	bne.n	801c3ea <arm_softmax_s8+0x39f2>
        result = Q31_MAX;
 801c3dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c3e0:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 801c3e4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801c3e8:	6013      	str	r3, [r2, #0]
    return result;
 801c3ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c3ee:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 801c3f2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 801c3f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c3f8:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	ea02 0003 	and.w	r0, r2, r3
 801c402:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c406:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c40a:	681b      	ldr	r3, [r3, #0]
 801c40c:	43da      	mvns	r2, r3
 801c40e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c412:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801c416:	681b      	ldr	r3, [r3, #0]
 801c418:	ea02 0103 	and.w	r1, r2, r3
 801c41c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c420:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801c424:	ea80 0301 	eor.w	r3, r0, r1
 801c428:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 801c42a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c42e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801c432:	6819      	ldr	r1, [r3, #0]
 801c434:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c438:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 801c43c:	1c4b      	adds	r3, r1, #1
 801c43e:	6013      	str	r3, [r2, #0]
 801c440:	2301      	movs	r3, #1
 801c442:	fa03 f201 	lsl.w	r2, r3, r1
 801c446:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c44a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	4013      	ands	r3, r2
 801c452:	2b00      	cmp	r3, #0
 801c454:	d002      	beq.n	801c45c <arm_softmax_s8+0x3a64>
 801c456:	f04f 32ff 	mov.w	r2, #4294967295
 801c45a:	e000      	b.n	801c45e <arm_softmax_s8+0x3a66>
 801c45c:	2200      	movs	r2, #0
 801c45e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c462:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c466:	601a      	str	r2, [r3, #0]
 801c468:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c46c:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 801c470:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c474:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c47c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c480:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 801c484:	2300      	movs	r3, #0
 801c486:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801c488:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c48c:	f04f 0300 	mov.w	r3, #0
 801c490:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 801c494:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801c498:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c49c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	0fdb      	lsrs	r3, r3, #31
 801c4a4:	b2da      	uxtb	r2, r3
 801c4a6:	2300      	movs	r3, #0
 801c4a8:	4053      	eors	r3, r2
 801c4aa:	b2db      	uxtb	r3, r3
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d010      	beq.n	801c4d2 <arm_softmax_s8+0x3ada>
        mult = 1 - mult;
 801c4b0:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801c4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4b8:	2100      	movs	r1, #0
 801c4ba:	f1d2 0001 	rsbs	r0, r2, #1
 801c4be:	6438      	str	r0, [r7, #64]	; 0x40
 801c4c0:	eb61 0303 	sbc.w	r3, r1, r3
 801c4c4:	647b      	str	r3, [r7, #68]	; 0x44
 801c4c6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 801c4ca:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 801c4ce:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801c4d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c4d6:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	17da      	asrs	r2, r3, #31
 801c4de:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 801c4e2:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 801c4e6:	4a4d      	ldr	r2, [pc, #308]	; (801c61c <arm_softmax_s8+0x3c24>)
 801c4e8:	f04f 0300 	mov.w	r3, #0
 801c4ec:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 801c4f0:	fb02 f001 	mul.w	r0, r2, r1
 801c4f4:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 801c4f8:	fb01 f103 	mul.w	r1, r1, r3
 801c4fc:	4401      	add	r1, r0
 801c4fe:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 801c502:	fba0 2302 	umull	r2, r3, r0, r2
 801c506:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 801c50a:	4613      	mov	r3, r2
 801c50c:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 801c510:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 801c514:	18cb      	adds	r3, r1, r3
 801c516:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 801c51a:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801c51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c522:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 801c526:	1851      	adds	r1, r2, r1
 801c528:	63b9      	str	r1, [r7, #56]	; 0x38
 801c52a:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 801c52e:	414b      	adcs	r3, r1
 801c530:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c532:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801c536:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 801c53a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801c53e:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801c542:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c546:	2b00      	cmp	r3, #0
 801c548:	da08      	bge.n	801c55c <arm_softmax_s8+0x3b64>
 801c54a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c54e:	1851      	adds	r1, r2, r1
 801c550:	6339      	str	r1, [r7, #48]	; 0x30
 801c552:	f143 0300 	adc.w	r3, r3, #0
 801c556:	637b      	str	r3, [r7, #52]	; 0x34
 801c558:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801c55c:	f04f 0000 	mov.w	r0, #0
 801c560:	f04f 0100 	mov.w	r1, #0
 801c564:	0fd0      	lsrs	r0, r2, #31
 801c566:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801c56a:	17d9      	asrs	r1, r3, #31
 801c56c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c570:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 801c574:	4603      	mov	r3, r0
 801c576:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801c578:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c57c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 801c580:	681a      	ldr	r2, [r3, #0]
 801c582:	4b26      	ldr	r3, [pc, #152]	; (801c61c <arm_softmax_s8+0x3c24>)
 801c584:	429a      	cmp	r2, r3
 801c586:	d10e      	bne.n	801c5a6 <arm_softmax_s8+0x3bae>
 801c588:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c58c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 801c590:	681b      	ldr	r3, [r3, #0]
 801c592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c596:	d106      	bne.n	801c5a6 <arm_softmax_s8+0x3bae>
        result = Q31_MAX;
 801c598:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c59c:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 801c5a0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801c5a4:	6013      	str	r3, [r2, #0]
    return result;
 801c5a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c5aa:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 801c5ae:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 801c5b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c5b4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c5b8:	681b      	ldr	r3, [r3, #0]
 801c5ba:	ea02 0003 	and.w	r0, r2, r3
 801c5be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c5c2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	43da      	mvns	r2, r3
 801c5ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c5ce:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	ea02 0103 	and.w	r1, r2, r3
 801c5d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c5dc:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801c5e0:	ea80 0301 	eor.w	r3, r0, r1
 801c5e4:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 801c5e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c5ea:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801c5ee:	6819      	ldr	r1, [r3, #0]
 801c5f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c5f4:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 801c5f8:	1c4b      	adds	r3, r1, #1
 801c5fa:	6013      	str	r3, [r2, #0]
 801c5fc:	2301      	movs	r3, #1
 801c5fe:	fa03 f201 	lsl.w	r2, r3, r1
 801c602:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c606:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	4013      	ands	r3, r2
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d00a      	beq.n	801c628 <arm_softmax_s8+0x3c30>
 801c612:	f04f 32ff 	mov.w	r2, #4294967295
 801c616:	e008      	b.n	801c62a <arm_softmax_s8+0x3c32>
 801c618:	02582ab7 	.word	0x02582ab7
 801c61c:	000afe11 	.word	0x000afe11
 801c620:	02582ab7 	.word	0x02582ab7
 801c624:	00000000 	.word	0x00000000
 801c628:	2200      	movs	r2, #0
 801c62a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c62e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c632:	601a      	str	r2, [r3, #0]
 801c634:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c638:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 801c63c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c640:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801c644:	681b      	ldr	r3, [r3, #0]
 801c646:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c648:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c64c:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 801c650:	2300      	movs	r3, #0
 801c652:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801c654:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c658:	f04f 0300 	mov.w	r3, #0
 801c65c:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 801c660:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801c664:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c668:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	0fdb      	lsrs	r3, r3, #31
 801c670:	b2da      	uxtb	r2, r3
 801c672:	2300      	movs	r3, #0
 801c674:	4053      	eors	r3, r2
 801c676:	b2db      	uxtb	r3, r3
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d010      	beq.n	801c69e <arm_softmax_s8+0x3ca6>
        mult = 1 - mult;
 801c67c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 801c680:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c684:	2100      	movs	r1, #0
 801c686:	f1d2 0001 	rsbs	r0, r2, #1
 801c68a:	62b8      	str	r0, [r7, #40]	; 0x28
 801c68c:	eb61 0303 	sbc.w	r3, r1, r3
 801c690:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c692:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801c696:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801c69a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801c69e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c6a2:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	17da      	asrs	r2, r3, #31
 801c6aa:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 801c6ae:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 801c6b2:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 801c6b6:	f04f 0300 	mov.w	r3, #0
 801c6ba:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 801c6be:	fb02 f001 	mul.w	r0, r2, r1
 801c6c2:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 801c6c6:	fb01 f103 	mul.w	r1, r1, r3
 801c6ca:	4401      	add	r1, r0
 801c6cc:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 801c6d0:	fba0 2302 	umull	r2, r3, r0, r2
 801c6d4:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 801c6d8:	4613      	mov	r3, r2
 801c6da:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 801c6de:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 801c6e2:	18cb      	adds	r3, r1, r3
 801c6e4:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 801c6e8:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 801c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6f0:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 801c6f4:	1851      	adds	r1, r2, r1
 801c6f6:	6239      	str	r1, [r7, #32]
 801c6f8:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 801c6fc:	414b      	adcs	r3, r1
 801c6fe:	627b      	str	r3, [r7, #36]	; 0x24
 801c700:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801c704:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801c708:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801c70c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 801c710:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c714:	2b00      	cmp	r3, #0
 801c716:	da08      	bge.n	801c72a <arm_softmax_s8+0x3d32>
 801c718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c71c:	1851      	adds	r1, r2, r1
 801c71e:	61b9      	str	r1, [r7, #24]
 801c720:	f143 0300 	adc.w	r3, r3, #0
 801c724:	61fb      	str	r3, [r7, #28]
 801c726:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801c72a:	f04f 0000 	mov.w	r0, #0
 801c72e:	f04f 0100 	mov.w	r1, #0
 801c732:	0fd0      	lsrs	r0, r2, #31
 801c734:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801c738:	17d9      	asrs	r1, r3, #31
 801c73a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c73e:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 801c742:	4603      	mov	r3, r0
 801c744:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801c746:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c74a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801c74e:	681b      	ldr	r3, [r3, #0]
 801c750:	2bf2      	cmp	r3, #242	; 0xf2
 801c752:	d10e      	bne.n	801c772 <arm_softmax_s8+0x3d7a>
 801c754:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c758:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801c75c:	681b      	ldr	r3, [r3, #0]
 801c75e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c762:	d106      	bne.n	801c772 <arm_softmax_s8+0x3d7a>
        result = Q31_MAX;
 801c764:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c768:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 801c76c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801c770:	6013      	str	r3, [r2, #0]
    return result;
 801c772:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c776:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 801c77a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 801c77c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c780:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c784:	681b      	ldr	r3, [r3, #0]
 801c786:	ea02 0003 	and.w	r0, r2, r3
 801c78a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c78e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	43da      	mvns	r2, r3
 801c796:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c79a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	ea02 0103 	and.w	r1, r2, r3
 801c7a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c7a8:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801c7ac:	ea80 0301 	eor.w	r3, r0, r1
 801c7b0:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 801c7b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c7b6:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801c7ba:	681b      	ldr	r3, [r3, #0]
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	d102      	bne.n	801c7c6 <arm_softmax_s8+0x3dce>
 801c7c0:	f04f 32ff 	mov.w	r2, #4294967295
 801c7c4:	e000      	b.n	801c7c8 <arm_softmax_s8+0x3dd0>
 801c7c6:	2200      	movs	r2, #0
 801c7c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c7cc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c7d0:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 801c7d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c7d6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c7da:	681b      	ldr	r3, [r3, #0]
 801c7dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801c7e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c7e4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801c7e8:	681b      	ldr	r3, [r3, #0]
 801c7ea:	43da      	mvns	r2, r3
 801c7ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c7f0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801c7f4:	681b      	ldr	r3, [r3, #0]
 801c7f6:	4013      	ands	r3, r2
 801c7f8:	4059      	eors	r1, r3
 801c7fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c7fe:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 801c802:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 801c806:	6013      	str	r3, [r2, #0]
 801c808:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c80c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801c810:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 801c812:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c816:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 801c81a:	2300      	movs	r3, #0
 801c81c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801c81e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c822:	f04f 0300 	mov.w	r3, #0
 801c826:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 801c82a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801c82e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c832:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	0fdb      	lsrs	r3, r3, #31
 801c83a:	b2da      	uxtb	r2, r3
 801c83c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c840:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	0fdb      	lsrs	r3, r3, #31
 801c848:	b2db      	uxtb	r3, r3
 801c84a:	4053      	eors	r3, r2
 801c84c:	b2db      	uxtb	r3, r3
 801c84e:	2b00      	cmp	r3, #0
 801c850:	d010      	beq.n	801c874 <arm_softmax_s8+0x3e7c>
        mult = 1 - mult;
 801c852:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 801c856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c85a:	2100      	movs	r1, #0
 801c85c:	f1d2 0001 	rsbs	r0, r2, #1
 801c860:	6138      	str	r0, [r7, #16]
 801c862:	eb61 0303 	sbc.w	r3, r1, r3
 801c866:	617b      	str	r3, [r7, #20]
 801c868:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801c86c:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 801c870:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801c874:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c878:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801c87c:	681b      	ldr	r3, [r3, #0]
 801c87e:	17da      	asrs	r2, r3, #31
 801c880:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 801c884:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 801c888:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c88c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801c890:	681b      	ldr	r3, [r3, #0]
 801c892:	17da      	asrs	r2, r3, #31
 801c894:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 801c898:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 801c89c:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 801c8a0:	460b      	mov	r3, r1
 801c8a2:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801c8a6:	fb02 f203 	mul.w	r2, r2, r3
 801c8aa:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 801c8ae:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 801c8b2:	4601      	mov	r1, r0
 801c8b4:	fb01 f303 	mul.w	r3, r1, r3
 801c8b8:	4413      	add	r3, r2
 801c8ba:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801c8be:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 801c8c2:	fba2 1201 	umull	r1, r2, r2, r1
 801c8c6:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 801c8ca:	460a      	mov	r2, r1
 801c8cc:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 801c8d0:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 801c8d4:	4413      	add	r3, r2
 801c8d6:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 801c8da:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 801c8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8e2:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 801c8e6:	1851      	adds	r1, r2, r1
 801c8e8:	60b9      	str	r1, [r7, #8]
 801c8ea:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 801c8ee:	414b      	adcs	r3, r1
 801c8f0:	60fb      	str	r3, [r7, #12]
 801c8f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801c8f6:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 801c8fa:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801c8fe:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 801c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c906:	2b00      	cmp	r3, #0
 801c908:	da08      	bge.n	801c91c <arm_softmax_s8+0x3f24>
 801c90a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c90e:	1851      	adds	r1, r2, r1
 801c910:	6039      	str	r1, [r7, #0]
 801c912:	f143 0300 	adc.w	r3, r3, #0
 801c916:	607b      	str	r3, [r7, #4]
 801c918:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c91c:	f04f 0000 	mov.w	r0, #0
 801c920:	f04f 0100 	mov.w	r1, #0
 801c924:	0fd0      	lsrs	r0, r2, #31
 801c926:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801c92a:	17d9      	asrs	r1, r3, #31
 801c92c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c930:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 801c934:	4603      	mov	r3, r0
 801c936:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801c938:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c93c:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 801c940:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c944:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801c948:	6812      	ldr	r2, [r2, #0]
 801c94a:	681b      	ldr	r3, [r3, #0]
 801c94c:	429a      	cmp	r2, r3
 801c94e:	d10e      	bne.n	801c96e <arm_softmax_s8+0x3f76>
 801c950:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c954:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801c958:	681b      	ldr	r3, [r3, #0]
 801c95a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c95e:	d106      	bne.n	801c96e <arm_softmax_s8+0x3f76>
        result = Q31_MAX;
 801c960:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c964:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 801c968:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801c96c:	6013      	str	r3, [r2, #0]
    return result;
 801c96e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c972:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801c976:	681a      	ldr	r2, [r3, #0]
 801c978:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c97c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801c980:	601a      	str	r2, [r3, #0]
 801c982:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c986:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 801c98a:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 801c98e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c990:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c994:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 801c998:	2300      	movs	r3, #0
 801c99a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c99c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c9a0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801c9a4:	2201      	movs	r2, #1
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	fa02 f103 	lsl.w	r1, r2, r3
 801c9ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c9b0:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 801c9b4:	1e4b      	subs	r3, r1, #1
 801c9b6:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801c9b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c9bc:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 801c9c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c9c4:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 801c9c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c9cc:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801c9d0:	6812      	ldr	r2, [r2, #0]
 801c9d2:	681b      	ldr	r3, [r3, #0]
 801c9d4:	4013      	ands	r3, r2
 801c9d6:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801c9d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c9dc:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 801c9e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c9e4:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 801c9e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c9ec:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801c9f0:	6812      	ldr	r2, [r2, #0]
 801c9f2:	681b      	ldr	r3, [r3, #0]
 801c9f4:	fa42 f303 	asr.w	r3, r2, r3
 801c9f8:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801c9fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801c9fe:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 801ca02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ca06:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	105b      	asrs	r3, r3, #1
 801ca0e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801ca10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ca14:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801ca18:	681b      	ldr	r3, [r3, #0]
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	da0a      	bge.n	801ca34 <arm_softmax_s8+0x403c>
        threshold++;
 801ca1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ca22:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 801ca26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ca2a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801ca2e:	681b      	ldr	r3, [r3, #0]
 801ca30:	3301      	adds	r3, #1
 801ca32:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801ca34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ca38:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 801ca3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ca40:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801ca44:	6812      	ldr	r2, [r2, #0]
 801ca46:	681b      	ldr	r3, [r3, #0]
 801ca48:	429a      	cmp	r2, r3
 801ca4a:	dd0a      	ble.n	801ca62 <arm_softmax_s8+0x406a>
        result++;
 801ca4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ca50:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 801ca54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ca58:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801ca5c:	681b      	ldr	r3, [r3, #0]
 801ca5e:	3301      	adds	r3, #1
 801ca60:	6013      	str	r3, [r2, #0]
    return result;
 801ca62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801ca66:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801ca6a:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 801ca6c:	3b80      	subs	r3, #128	; 0x80
 801ca6e:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 801ca72:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 801ca76:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 801ca7a:	db09      	blt.n	801ca90 <arm_softmax_s8+0x4098>
 801ca7c:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 801ca80:	2b7e      	cmp	r3, #126	; 0x7e
 801ca82:	dc03      	bgt.n	801ca8c <arm_softmax_s8+0x4094>
 801ca84:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 801ca88:	b259      	sxtb	r1, r3
 801ca8a:	e003      	b.n	801ca94 <arm_softmax_s8+0x409c>
 801ca8c:	217f      	movs	r1, #127	; 0x7f
 801ca8e:	e001      	b.n	801ca94 <arm_softmax_s8+0x409c>
 801ca90:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 801ca94:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801ca98:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 801ca9c:	441a      	add	r2, r3
 801ca9e:	460b      	mov	r3, r1
 801caa0:	7013      	strb	r3, [r2, #0]
 801caa2:	e006      	b.n	801cab2 <arm_softmax_s8+0x40ba>
            }
            else
            {
                output[col] = -128;
 801caa4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801caa8:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 801caac:	441a      	add	r2, r3
 801caae:	2380      	movs	r3, #128	; 0x80
 801cab0:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 801cab2:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 801cab6:	3301      	adds	r3, #1
 801cab8:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 801cabc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801cac0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801cac4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	429a      	cmp	r2, r3
 801cacc:	f6fe aa71 	blt.w	801afb2 <arm_softmax_s8+0x25ba>
            }
        }
        input += row_size;
 801cad0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801cad4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801cad8:	6819      	ldr	r1, [r3, #0]
 801cada:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801cade:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 801cae2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801cae6:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 801caea:	681b      	ldr	r3, [r3, #0]
 801caec:	440b      	add	r3, r1
 801caee:	6013      	str	r3, [r2, #0]
        output += row_size;
 801caf0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801caf4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801caf8:	681a      	ldr	r2, [r3, #0]
 801cafa:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 801cafe:	4413      	add	r3, r2
 801cb00:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 801cb04:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 801cb08:	3301      	adds	r3, #1
 801cb0a:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 801cb0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801cb12:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 801cb16:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 801cb1a:	681b      	ldr	r3, [r3, #0]
 801cb1c:	429a      	cmp	r2, r3
 801cb1e:	f6fb af93 	blt.w	8018a48 <arm_softmax_s8+0x50>
    }

#endif
}
 801cb22:	bf00      	nop
 801cb24:	bf00      	nop
 801cb26:	f607 17a8 	addw	r7, r7, #2472	; 0x9a8
 801cb2a:	46bd      	mov	sp, r7
 801cb2c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801cb30:	4770      	bx	lr
 801cb32:	bf00      	nop

0801cb34 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 801cb34:	b580      	push	{r7, lr}
 801cb36:	b082      	sub	sp, #8
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	ed87 0a01 	vstr	s0, [r7, #4]
 801cb3e:	ed97 0a01 	vldr	s0, [r7, #4]
 801cb42:	f00c fc63 	bl	802940c <cosf>
 801cb46:	eef0 7a40 	vmov.f32	s15, s0
 801cb4a:	eeb0 0a67 	vmov.f32	s0, s15
 801cb4e:	3708      	adds	r7, #8
 801cb50:	46bd      	mov	sp, r7
 801cb52:	bd80      	pop	{r7, pc}

0801cb54 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 801cb54:	b580      	push	{r7, lr}
 801cb56:	b082      	sub	sp, #8
 801cb58:	af00      	add	r7, sp, #0
 801cb5a:	ed87 0a01 	vstr	s0, [r7, #4]
 801cb5e:	ed97 0a01 	vldr	s0, [r7, #4]
 801cb62:	f00c fd01 	bl	8029568 <sinf>
 801cb66:	eef0 7a40 	vmov.f32	s15, s0
 801cb6a:	eeb0 0a67 	vmov.f32	s0, s15
 801cb6e:	3708      	adds	r7, #8
 801cb70:	46bd      	mov	sp, r7
 801cb72:	bd80      	pop	{r7, pc}
 801cb74:	0000      	movs	r0, r0
	...

0801cb78 <_ZN2ei3dct9transformEPfj>:
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327950288
#endif // M_PI

// DCT type II, unscaled
int ei::dct::transform(float vector[], size_t len) {
 801cb78:	b5b0      	push	{r4, r5, r7, lr}
 801cb7a:	ed2d 8b02 	vpush	{d8}
 801cb7e:	b090      	sub	sp, #64	; 0x40
 801cb80:	af02      	add	r7, sp, #8
 801cb82:	6078      	str	r0, [r7, #4]
 801cb84:	6039      	str	r1, [r7, #0]
    const size_t fft_data_out_size = (len / 2 + 1) * sizeof(ei::fft_complex_t);
 801cb86:	683b      	ldr	r3, [r7, #0]
 801cb88:	085b      	lsrs	r3, r3, #1
 801cb8a:	3301      	adds	r3, #1
 801cb8c:	00db      	lsls	r3, r3, #3
 801cb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const size_t fft_data_in_size = len * sizeof(float);
 801cb90:	683b      	ldr	r3, [r7, #0]
 801cb92:	009b      	lsls	r3, r3, #2
 801cb94:	62bb      	str	r3, [r7, #40]	; 0x28

    // Allocate KissFFT input / output buffer
    fft_complex_t *fft_data_out =
        (ei::fft_complex_t*)ei_dsp_calloc(fft_data_out_size, 1);
 801cb96:	2101      	movs	r1, #1
 801cb98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cb9a:	f001 fe69 	bl	801e870 <_Z9ei_callocjj>
 801cb9e:	6278      	str	r0, [r7, #36]	; 0x24
    if (!fft_data_out) {
 801cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d101      	bne.n	801cbaa <_ZN2ei3dct9transformEPfj+0x32>
        return ei::EIDSP_OUT_OF_MEM;
 801cba6:	4b86      	ldr	r3, [pc, #536]	; (801cdc0 <_ZN2ei3dct9transformEPfj+0x248>)
 801cba8:	e0ff      	b.n	801cdaa <_ZN2ei3dct9transformEPfj+0x232>
    }

    float *fft_data_in = (float*)ei_dsp_calloc(fft_data_in_size, 1);
 801cbaa:	2101      	movs	r1, #1
 801cbac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801cbae:	f001 fe5f 	bl	801e870 <_Z9ei_callocjj>
 801cbb2:	6238      	str	r0, [r7, #32]
    if (!fft_data_in) {
 801cbb4:	6a3b      	ldr	r3, [r7, #32]
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d104      	bne.n	801cbc4 <_ZN2ei3dct9transformEPfj+0x4c>
        ei_dsp_free(fft_data_out, fft_data_out_size);
 801cbba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cbbc:	f001 fe66 	bl	801e88c <_Z7ei_freePv>
        return ei::EIDSP_OUT_OF_MEM;
 801cbc0:	4b7f      	ldr	r3, [pc, #508]	; (801cdc0 <_ZN2ei3dct9transformEPfj+0x248>)
 801cbc2:	e0f2      	b.n	801cdaa <_ZN2ei3dct9transformEPfj+0x232>
    }

    // Preprocess the input buffer with the data from the vector
    size_t halfLen = len / 2;
 801cbc4:	683b      	ldr	r3, [r7, #0]
 801cbc6:	085b      	lsrs	r3, r3, #1
 801cbc8:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < halfLen; i++) {
 801cbca:	2300      	movs	r3, #0
 801cbcc:	637b      	str	r3, [r7, #52]	; 0x34
 801cbce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cbd0:	69fb      	ldr	r3, [r7, #28]
 801cbd2:	429a      	cmp	r2, r3
 801cbd4:	d21b      	bcs.n	801cc0e <_ZN2ei3dct9transformEPfj+0x96>
        fft_data_in[i] = vector[i * 2];
 801cbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cbd8:	00db      	lsls	r3, r3, #3
 801cbda:	687a      	ldr	r2, [r7, #4]
 801cbdc:	441a      	add	r2, r3
 801cbde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cbe0:	009b      	lsls	r3, r3, #2
 801cbe2:	6a39      	ldr	r1, [r7, #32]
 801cbe4:	440b      	add	r3, r1
 801cbe6:	6812      	ldr	r2, [r2, #0]
 801cbe8:	601a      	str	r2, [r3, #0]
        fft_data_in[len - 1 - i] = vector[i * 2 + 1];
 801cbea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cbec:	00db      	lsls	r3, r3, #3
 801cbee:	3304      	adds	r3, #4
 801cbf0:	687a      	ldr	r2, [r7, #4]
 801cbf2:	441a      	add	r2, r3
 801cbf4:	6839      	ldr	r1, [r7, #0]
 801cbf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cbf8:	1acb      	subs	r3, r1, r3
 801cbfa:	3b01      	subs	r3, #1
 801cbfc:	009b      	lsls	r3, r3, #2
 801cbfe:	6a39      	ldr	r1, [r7, #32]
 801cc00:	440b      	add	r3, r1
 801cc02:	6812      	ldr	r2, [r2, #0]
 801cc04:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < halfLen; i++) {
 801cc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cc08:	3301      	adds	r3, #1
 801cc0a:	637b      	str	r3, [r7, #52]	; 0x34
 801cc0c:	e7df      	b.n	801cbce <_ZN2ei3dct9transformEPfj+0x56>
    }
    if (len % 2 == 1) {
 801cc0e:	683b      	ldr	r3, [r7, #0]
 801cc10:	f003 0301 	and.w	r3, r3, #1
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	d00c      	beq.n	801cc32 <_ZN2ei3dct9transformEPfj+0xba>
        fft_data_in[halfLen] = vector[len - 1];
 801cc18:	683b      	ldr	r3, [r7, #0]
 801cc1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801cc1e:	3b01      	subs	r3, #1
 801cc20:	009b      	lsls	r3, r3, #2
 801cc22:	687a      	ldr	r2, [r7, #4]
 801cc24:	441a      	add	r2, r3
 801cc26:	69fb      	ldr	r3, [r7, #28]
 801cc28:	009b      	lsls	r3, r3, #2
 801cc2a:	6a39      	ldr	r1, [r7, #32]
 801cc2c:	440b      	add	r3, r1
 801cc2e:	6812      	ldr	r2, [r2, #0]
 801cc30:	601a      	str	r2, [r3, #0]
    }

    int r = ei::numpy::rfft(fft_data_in, len, fft_data_out, (len / 2 + 1), len);
 801cc32:	683b      	ldr	r3, [r7, #0]
 801cc34:	085b      	lsrs	r3, r3, #1
 801cc36:	1c5a      	adds	r2, r3, #1
 801cc38:	683b      	ldr	r3, [r7, #0]
 801cc3a:	9300      	str	r3, [sp, #0]
 801cc3c:	4613      	mov	r3, r2
 801cc3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cc40:	6839      	ldr	r1, [r7, #0]
 801cc42:	6a38      	ldr	r0, [r7, #32]
 801cc44:	f7e5 f988 	bl	8001f58 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 801cc48:	61b8      	str	r0, [r7, #24]
    if (r != 0) {
 801cc4a:	69bb      	ldr	r3, [r7, #24]
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d007      	beq.n	801cc60 <_ZN2ei3dct9transformEPfj+0xe8>
        ei_dsp_free(fft_data_in, fft_data_in_size);
 801cc50:	6a38      	ldr	r0, [r7, #32]
 801cc52:	f001 fe1b 	bl	801e88c <_Z7ei_freePv>
        ei_dsp_free(fft_data_out, fft_data_out_size);
 801cc56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cc58:	f001 fe18 	bl	801e88c <_Z7ei_freePv>
        return r;
 801cc5c:	69bb      	ldr	r3, [r7, #24]
 801cc5e:	e0a4      	b.n	801cdaa <_ZN2ei3dct9transformEPfj+0x232>
    }

    size_t i = 0;
 801cc60:	2300      	movs	r3, #0
 801cc62:	633b      	str	r3, [r7, #48]	; 0x30
    for (; i < len / 2 + 1; i++) {
 801cc64:	683b      	ldr	r3, [r7, #0]
 801cc66:	085b      	lsrs	r3, r3, #1
 801cc68:	3301      	adds	r3, #1
 801cc6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cc6c:	429a      	cmp	r2, r3
 801cc6e:	d246      	bcs.n	801ccfe <_ZN2ei3dct9transformEPfj+0x186>
        float temp = i * M_PI / (len * 2);
 801cc70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cc72:	f7e3 fc71 	bl	8000558 <__aeabi_ui2d>
 801cc76:	a350      	add	r3, pc, #320	; (adr r3, 801cdb8 <_ZN2ei3dct9transformEPfj+0x240>)
 801cc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc7c:	f7e3 fce6 	bl	800064c <__aeabi_dmul>
 801cc80:	4602      	mov	r2, r0
 801cc82:	460b      	mov	r3, r1
 801cc84:	4614      	mov	r4, r2
 801cc86:	461d      	mov	r5, r3
 801cc88:	683b      	ldr	r3, [r7, #0]
 801cc8a:	005b      	lsls	r3, r3, #1
 801cc8c:	4618      	mov	r0, r3
 801cc8e:	f7e3 fc63 	bl	8000558 <__aeabi_ui2d>
 801cc92:	4602      	mov	r2, r0
 801cc94:	460b      	mov	r3, r1
 801cc96:	4620      	mov	r0, r4
 801cc98:	4629      	mov	r1, r5
 801cc9a:	f7e3 fe01 	bl	80008a0 <__aeabi_ddiv>
 801cc9e:	4602      	mov	r2, r0
 801cca0:	460b      	mov	r3, r1
 801cca2:	4610      	mov	r0, r2
 801cca4:	4619      	mov	r1, r3
 801cca6:	f7e3 ffc9 	bl	8000c3c <__aeabi_d2f>
 801ccaa:	4603      	mov	r3, r0
 801ccac:	617b      	str	r3, [r7, #20]
        vector[i] = fft_data_out[i].r * cos(temp) + fft_data_out[i].i * sin(temp);
 801ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ccb0:	00db      	lsls	r3, r3, #3
 801ccb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ccb4:	4413      	add	r3, r2
 801ccb6:	ed93 8a00 	vldr	s16, [r3]
 801ccba:	ed97 0a05 	vldr	s0, [r7, #20]
 801ccbe:	f7ff ff39 	bl	801cb34 <_ZSt3cosf>
 801ccc2:	eef0 7a40 	vmov.f32	s15, s0
 801ccc6:	ee28 8a27 	vmul.f32	s16, s16, s15
 801ccca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cccc:	00db      	lsls	r3, r3, #3
 801ccce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ccd0:	4413      	add	r3, r2
 801ccd2:	edd3 8a01 	vldr	s17, [r3, #4]
 801ccd6:	ed97 0a05 	vldr	s0, [r7, #20]
 801ccda:	f7ff ff3b 	bl	801cb54 <_ZSt3sinf>
 801ccde:	eef0 7a40 	vmov.f32	s15, s0
 801cce2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801cce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cce8:	009b      	lsls	r3, r3, #2
 801ccea:	687a      	ldr	r2, [r7, #4]
 801ccec:	4413      	add	r3, r2
 801ccee:	ee78 7a27 	vadd.f32	s15, s16, s15
 801ccf2:	edc3 7a00 	vstr	s15, [r3]
    for (; i < len / 2 + 1; i++) {
 801ccf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ccf8:	3301      	adds	r3, #1
 801ccfa:	633b      	str	r3, [r7, #48]	; 0x30
 801ccfc:	e7b2      	b.n	801cc64 <_ZN2ei3dct9transformEPfj+0xec>
    }
    //take advantage of hermetian symmetry to calculate remainder of signal
    for (; i < len; i++) {
 801ccfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cd00:	683b      	ldr	r3, [r7, #0]
 801cd02:	429a      	cmp	r2, r3
 801cd04:	d24a      	bcs.n	801cd9c <_ZN2ei3dct9transformEPfj+0x224>
        float temp = i * M_PI / (len * 2);
 801cd06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cd08:	f7e3 fc26 	bl	8000558 <__aeabi_ui2d>
 801cd0c:	a32a      	add	r3, pc, #168	; (adr r3, 801cdb8 <_ZN2ei3dct9transformEPfj+0x240>)
 801cd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd12:	f7e3 fc9b 	bl	800064c <__aeabi_dmul>
 801cd16:	4602      	mov	r2, r0
 801cd18:	460b      	mov	r3, r1
 801cd1a:	4614      	mov	r4, r2
 801cd1c:	461d      	mov	r5, r3
 801cd1e:	683b      	ldr	r3, [r7, #0]
 801cd20:	005b      	lsls	r3, r3, #1
 801cd22:	4618      	mov	r0, r3
 801cd24:	f7e3 fc18 	bl	8000558 <__aeabi_ui2d>
 801cd28:	4602      	mov	r2, r0
 801cd2a:	460b      	mov	r3, r1
 801cd2c:	4620      	mov	r0, r4
 801cd2e:	4629      	mov	r1, r5
 801cd30:	f7e3 fdb6 	bl	80008a0 <__aeabi_ddiv>
 801cd34:	4602      	mov	r2, r0
 801cd36:	460b      	mov	r3, r1
 801cd38:	4610      	mov	r0, r2
 801cd3a:	4619      	mov	r1, r3
 801cd3c:	f7e3 ff7e 	bl	8000c3c <__aeabi_d2f>
 801cd40:	4603      	mov	r3, r0
 801cd42:	613b      	str	r3, [r7, #16]
        int conj_idx = len-i;
 801cd44:	683a      	ldr	r2, [r7, #0]
 801cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd48:	1ad3      	subs	r3, r2, r3
 801cd4a:	60fb      	str	r3, [r7, #12]
        // second half bins not calculated would have just been the conjugate of the first half (note minus of imag)
        vector[i] = fft_data_out[conj_idx].r * cos(temp) - fft_data_out[conj_idx].i * sin(temp);
 801cd4c:	68fb      	ldr	r3, [r7, #12]
 801cd4e:	00db      	lsls	r3, r3, #3
 801cd50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cd52:	4413      	add	r3, r2
 801cd54:	ed93 8a00 	vldr	s16, [r3]
 801cd58:	ed97 0a04 	vldr	s0, [r7, #16]
 801cd5c:	f7ff feea 	bl	801cb34 <_ZSt3cosf>
 801cd60:	eef0 7a40 	vmov.f32	s15, s0
 801cd64:	ee28 8a27 	vmul.f32	s16, s16, s15
 801cd68:	68fb      	ldr	r3, [r7, #12]
 801cd6a:	00db      	lsls	r3, r3, #3
 801cd6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cd6e:	4413      	add	r3, r2
 801cd70:	edd3 8a01 	vldr	s17, [r3, #4]
 801cd74:	ed97 0a04 	vldr	s0, [r7, #16]
 801cd78:	f7ff feec 	bl	801cb54 <_ZSt3sinf>
 801cd7c:	eef0 7a40 	vmov.f32	s15, s0
 801cd80:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801cd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd86:	009b      	lsls	r3, r3, #2
 801cd88:	687a      	ldr	r2, [r7, #4]
 801cd8a:	4413      	add	r3, r2
 801cd8c:	ee78 7a67 	vsub.f32	s15, s16, s15
 801cd90:	edc3 7a00 	vstr	s15, [r3]
    for (; i < len; i++) {
 801cd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd96:	3301      	adds	r3, #1
 801cd98:	633b      	str	r3, [r7, #48]	; 0x30
 801cd9a:	e7b0      	b.n	801ccfe <_ZN2ei3dct9transformEPfj+0x186>
    }
    ei_dsp_free(fft_data_in, fft_data_in_size);
 801cd9c:	6a38      	ldr	r0, [r7, #32]
 801cd9e:	f001 fd75 	bl	801e88c <_Z7ei_freePv>
    ei_dsp_free(fft_data_out, fft_data_out_size);
 801cda2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cda4:	f001 fd72 	bl	801e88c <_Z7ei_freePv>

    return 0;
 801cda8:	2300      	movs	r3, #0
 801cdaa:	4618      	mov	r0, r3
 801cdac:	3738      	adds	r7, #56	; 0x38
 801cdae:	46bd      	mov	sp, r7
 801cdb0:	ecbd 8b02 	vpop	{d8}
 801cdb4:	bdb0      	pop	{r4, r5, r7, pc}
 801cdb6:	bf00      	nop
 801cdb8:	54442d18 	.word	0x54442d18
 801cdbc:	400921fb 	.word	0x400921fb
 801cdc0:	fffffc16 	.word	0xfffffc16

0801cdc4 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 801cdc4:	b480      	push	{r7}
 801cdc6:	b089      	sub	sp, #36	; 0x24
 801cdc8:	af00      	add	r7, sp, #0
 801cdca:	60f8      	str	r0, [r7, #12]
 801cdcc:	60b9      	str	r1, [r7, #8]
 801cdce:	607a      	str	r2, [r7, #4]
 801cdd0:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 801cdd2:	687b      	ldr	r3, [r7, #4]
 801cdd4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801cdd8:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 801cdda:	683b      	ldr	r3, [r7, #0]
 801cddc:	00db      	lsls	r3, r3, #3
 801cdde:	68fa      	ldr	r2, [r7, #12]
 801cde0:	4413      	add	r3, r2
 801cde2:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 801cde4:	69fb      	ldr	r3, [r7, #28]
 801cde6:	ed93 7a00 	vldr	s14, [r3]
 801cdea:	69bb      	ldr	r3, [r7, #24]
 801cdec:	edd3 7a00 	vldr	s15, [r3]
 801cdf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801cdf4:	69fb      	ldr	r3, [r7, #28]
 801cdf6:	edd3 6a01 	vldr	s13, [r3, #4]
 801cdfa:	69bb      	ldr	r3, [r7, #24]
 801cdfc:	edd3 7a01 	vldr	s15, [r3, #4]
 801ce00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ce04:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ce08:	edc7 7a04 	vstr	s15, [r7, #16]
 801ce0c:	69fb      	ldr	r3, [r7, #28]
 801ce0e:	ed93 7a00 	vldr	s14, [r3]
 801ce12:	69bb      	ldr	r3, [r7, #24]
 801ce14:	edd3 7a01 	vldr	s15, [r3, #4]
 801ce18:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ce1c:	69fb      	ldr	r3, [r7, #28]
 801ce1e:	edd3 6a01 	vldr	s13, [r3, #4]
 801ce22:	69bb      	ldr	r3, [r7, #24]
 801ce24:	edd3 7a00 	vldr	s15, [r3]
 801ce28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ce2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ce30:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 801ce34:	68bb      	ldr	r3, [r7, #8]
 801ce36:	00db      	lsls	r3, r3, #3
 801ce38:	69ba      	ldr	r2, [r7, #24]
 801ce3a:	4413      	add	r3, r2
 801ce3c:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 801ce3e:	68fb      	ldr	r3, [r7, #12]
 801ce40:	ed93 7a00 	vldr	s14, [r3]
 801ce44:	edd7 7a04 	vldr	s15, [r7, #16]
 801ce48:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ce4c:	69fb      	ldr	r3, [r7, #28]
 801ce4e:	edc3 7a00 	vstr	s15, [r3]
 801ce52:	68fb      	ldr	r3, [r7, #12]
 801ce54:	ed93 7a01 	vldr	s14, [r3, #4]
 801ce58:	edd7 7a05 	vldr	s15, [r7, #20]
 801ce5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ce60:	69fb      	ldr	r3, [r7, #28]
 801ce62:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 801ce66:	68fb      	ldr	r3, [r7, #12]
 801ce68:	ed93 7a00 	vldr	s14, [r3]
 801ce6c:	edd7 7a04 	vldr	s15, [r7, #16]
 801ce70:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ce74:	68fb      	ldr	r3, [r7, #12]
 801ce76:	edc3 7a00 	vstr	s15, [r3]
 801ce7a:	68fb      	ldr	r3, [r7, #12]
 801ce7c:	ed93 7a01 	vldr	s14, [r3, #4]
 801ce80:	edd7 7a05 	vldr	s15, [r7, #20]
 801ce84:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ce88:	68fb      	ldr	r3, [r7, #12]
 801ce8a:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 801ce8e:	69fb      	ldr	r3, [r7, #28]
 801ce90:	3308      	adds	r3, #8
 801ce92:	61fb      	str	r3, [r7, #28]
        ++Fout;
 801ce94:	68fb      	ldr	r3, [r7, #12]
 801ce96:	3308      	adds	r3, #8
 801ce98:	60fb      	str	r3, [r7, #12]
    }while (--m);
 801ce9a:	683b      	ldr	r3, [r7, #0]
 801ce9c:	3b01      	subs	r3, #1
 801ce9e:	603b      	str	r3, [r7, #0]
 801cea0:	683b      	ldr	r3, [r7, #0]
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	bf14      	ite	ne
 801cea6:	2301      	movne	r3, #1
 801cea8:	2300      	moveq	r3, #0
 801ceaa:	b2db      	uxtb	r3, r3
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	d000      	beq.n	801ceb2 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0xee>
    do{
 801ceb0:	e798      	b.n	801cde4 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 801ceb2:	bf00      	nop
 801ceb4:	3724      	adds	r7, #36	; 0x24
 801ceb6:	46bd      	mov	sp, r7
 801ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cebc:	4770      	bx	lr

0801cebe <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 801cebe:	b480      	push	{r7}
 801cec0:	b097      	sub	sp, #92	; 0x5c
 801cec2:	af00      	add	r7, sp, #0
 801cec4:	60f8      	str	r0, [r7, #12]
 801cec6:	60b9      	str	r1, [r7, #8]
 801cec8:	607a      	str	r2, [r7, #4]
 801ceca:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 801cecc:	683b      	ldr	r3, [r7, #0]
 801cece:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 801ced0:	683b      	ldr	r3, [r7, #0]
 801ced2:	005b      	lsls	r3, r3, #1
 801ced4:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 801ced6:	683a      	ldr	r2, [r7, #0]
 801ced8:	4613      	mov	r3, r2
 801ceda:	005b      	lsls	r3, r3, #1
 801cedc:	4413      	add	r3, r2
 801cede:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801cee6:	657b      	str	r3, [r7, #84]	; 0x54
 801cee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ceea:	653b      	str	r3, [r7, #80]	; 0x50
 801ceec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ceee:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 801cef0:	683b      	ldr	r3, [r7, #0]
 801cef2:	00db      	lsls	r3, r3, #3
 801cef4:	68fa      	ldr	r2, [r7, #12]
 801cef6:	4413      	add	r3, r2
 801cef8:	ed93 7a00 	vldr	s14, [r3]
 801cefc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cefe:	edd3 7a00 	vldr	s15, [r3]
 801cf02:	ee27 7a27 	vmul.f32	s14, s14, s15
 801cf06:	683b      	ldr	r3, [r7, #0]
 801cf08:	00db      	lsls	r3, r3, #3
 801cf0a:	68fa      	ldr	r2, [r7, #12]
 801cf0c:	4413      	add	r3, r2
 801cf0e:	edd3 6a01 	vldr	s13, [r3, #4]
 801cf12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cf14:	edd3 7a01 	vldr	s15, [r3, #4]
 801cf18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801cf1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801cf20:	edc7 7a04 	vstr	s15, [r7, #16]
 801cf24:	683b      	ldr	r3, [r7, #0]
 801cf26:	00db      	lsls	r3, r3, #3
 801cf28:	68fa      	ldr	r2, [r7, #12]
 801cf2a:	4413      	add	r3, r2
 801cf2c:	ed93 7a00 	vldr	s14, [r3]
 801cf30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cf32:	edd3 7a01 	vldr	s15, [r3, #4]
 801cf36:	ee27 7a27 	vmul.f32	s14, s14, s15
 801cf3a:	683b      	ldr	r3, [r7, #0]
 801cf3c:	00db      	lsls	r3, r3, #3
 801cf3e:	68fa      	ldr	r2, [r7, #12]
 801cf40:	4413      	add	r3, r2
 801cf42:	edd3 6a01 	vldr	s13, [r3, #4]
 801cf46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cf48:	edd3 7a00 	vldr	s15, [r3]
 801cf4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801cf50:	ee77 7a27 	vadd.f32	s15, s14, s15
 801cf54:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 801cf58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf5a:	00db      	lsls	r3, r3, #3
 801cf5c:	68fa      	ldr	r2, [r7, #12]
 801cf5e:	4413      	add	r3, r2
 801cf60:	ed93 7a00 	vldr	s14, [r3]
 801cf64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cf66:	edd3 7a00 	vldr	s15, [r3]
 801cf6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801cf6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf70:	00db      	lsls	r3, r3, #3
 801cf72:	68fa      	ldr	r2, [r7, #12]
 801cf74:	4413      	add	r3, r2
 801cf76:	edd3 6a01 	vldr	s13, [r3, #4]
 801cf7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cf7c:	edd3 7a01 	vldr	s15, [r3, #4]
 801cf80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801cf84:	ee77 7a67 	vsub.f32	s15, s14, s15
 801cf88:	edc7 7a06 	vstr	s15, [r7, #24]
 801cf8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf8e:	00db      	lsls	r3, r3, #3
 801cf90:	68fa      	ldr	r2, [r7, #12]
 801cf92:	4413      	add	r3, r2
 801cf94:	ed93 7a00 	vldr	s14, [r3]
 801cf98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cf9a:	edd3 7a01 	vldr	s15, [r3, #4]
 801cf9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801cfa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cfa4:	00db      	lsls	r3, r3, #3
 801cfa6:	68fa      	ldr	r2, [r7, #12]
 801cfa8:	4413      	add	r3, r2
 801cfaa:	edd3 6a01 	vldr	s13, [r3, #4]
 801cfae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cfb0:	edd3 7a00 	vldr	s15, [r3]
 801cfb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801cfb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801cfbc:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 801cfc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cfc2:	00db      	lsls	r3, r3, #3
 801cfc4:	68fa      	ldr	r2, [r7, #12]
 801cfc6:	4413      	add	r3, r2
 801cfc8:	ed93 7a00 	vldr	s14, [r3]
 801cfcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cfce:	edd3 7a00 	vldr	s15, [r3]
 801cfd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 801cfd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cfd8:	00db      	lsls	r3, r3, #3
 801cfda:	68fa      	ldr	r2, [r7, #12]
 801cfdc:	4413      	add	r3, r2
 801cfde:	edd3 6a01 	vldr	s13, [r3, #4]
 801cfe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cfe4:	edd3 7a01 	vldr	s15, [r3, #4]
 801cfe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801cfec:	ee77 7a67 	vsub.f32	s15, s14, s15
 801cff0:	edc7 7a08 	vstr	s15, [r7, #32]
 801cff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cff6:	00db      	lsls	r3, r3, #3
 801cff8:	68fa      	ldr	r2, [r7, #12]
 801cffa:	4413      	add	r3, r2
 801cffc:	ed93 7a00 	vldr	s14, [r3]
 801d000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d002:	edd3 7a01 	vldr	s15, [r3, #4]
 801d006:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d00a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d00c:	00db      	lsls	r3, r3, #3
 801d00e:	68fa      	ldr	r2, [r7, #12]
 801d010:	4413      	add	r3, r2
 801d012:	edd3 6a01 	vldr	s13, [r3, #4]
 801d016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d018:	edd3 7a00 	vldr	s15, [r3]
 801d01c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d020:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d024:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 801d028:	68fb      	ldr	r3, [r7, #12]
 801d02a:	ed93 7a00 	vldr	s14, [r3]
 801d02e:	edd7 7a06 	vldr	s15, [r7, #24]
 801d032:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d036:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 801d03a:	68fb      	ldr	r3, [r7, #12]
 801d03c:	ed93 7a01 	vldr	s14, [r3, #4]
 801d040:	edd7 7a07 	vldr	s15, [r7, #28]
 801d044:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d048:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 801d04c:	68fb      	ldr	r3, [r7, #12]
 801d04e:	ed93 7a00 	vldr	s14, [r3]
 801d052:	edd7 7a06 	vldr	s15, [r7, #24]
 801d056:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d05a:	68fb      	ldr	r3, [r7, #12]
 801d05c:	edc3 7a00 	vstr	s15, [r3]
 801d060:	68fb      	ldr	r3, [r7, #12]
 801d062:	ed93 7a01 	vldr	s14, [r3, #4]
 801d066:	edd7 7a07 	vldr	s15, [r7, #28]
 801d06a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d06e:	68fb      	ldr	r3, [r7, #12]
 801d070:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 801d074:	ed97 7a04 	vldr	s14, [r7, #16]
 801d078:	edd7 7a08 	vldr	s15, [r7, #32]
 801d07c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d080:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 801d084:	ed97 7a05 	vldr	s14, [r7, #20]
 801d088:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801d08c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d090:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 801d094:	ed97 7a04 	vldr	s14, [r7, #16]
 801d098:	edd7 7a08 	vldr	s15, [r7, #32]
 801d09c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d0a0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 801d0a4:	ed97 7a05 	vldr	s14, [r7, #20]
 801d0a8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801d0ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d0b0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 801d0b4:	68fb      	ldr	r3, [r7, #12]
 801d0b6:	ed93 7a00 	vldr	s14, [r3]
 801d0ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801d0be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d0c0:	00db      	lsls	r3, r3, #3
 801d0c2:	68fa      	ldr	r2, [r7, #12]
 801d0c4:	4413      	add	r3, r2
 801d0c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d0ca:	edc3 7a00 	vstr	s15, [r3]
 801d0ce:	68fb      	ldr	r3, [r7, #12]
 801d0d0:	ed93 7a01 	vldr	s14, [r3, #4]
 801d0d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801d0d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d0da:	00db      	lsls	r3, r3, #3
 801d0dc:	68fa      	ldr	r2, [r7, #12]
 801d0de:	4413      	add	r3, r2
 801d0e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d0e4:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 801d0e8:	68bb      	ldr	r3, [r7, #8]
 801d0ea:	00db      	lsls	r3, r3, #3
 801d0ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d0ee:	4413      	add	r3, r2
 801d0f0:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 801d0f2:	68bb      	ldr	r3, [r7, #8]
 801d0f4:	011b      	lsls	r3, r3, #4
 801d0f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d0f8:	4413      	add	r3, r2
 801d0fa:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 801d0fc:	68ba      	ldr	r2, [r7, #8]
 801d0fe:	4613      	mov	r3, r2
 801d100:	005b      	lsls	r3, r3, #1
 801d102:	4413      	add	r3, r2
 801d104:	00db      	lsls	r3, r3, #3
 801d106:	461a      	mov	r2, r3
 801d108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d10a:	4413      	add	r3, r2
 801d10c:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 801d10e:	68fb      	ldr	r3, [r7, #12]
 801d110:	ed93 7a00 	vldr	s14, [r3]
 801d114:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801d118:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d11c:	68fb      	ldr	r3, [r7, #12]
 801d11e:	edc3 7a00 	vstr	s15, [r3]
 801d122:	68fb      	ldr	r3, [r7, #12]
 801d124:	ed93 7a01 	vldr	s14, [r3, #4]
 801d128:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801d12c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d130:	68fb      	ldr	r3, [r7, #12]
 801d132:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	685b      	ldr	r3, [r3, #4]
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	d030      	beq.n	801d1a0 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 801d13e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801d142:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801d146:	683b      	ldr	r3, [r7, #0]
 801d148:	00db      	lsls	r3, r3, #3
 801d14a:	68fa      	ldr	r2, [r7, #12]
 801d14c:	4413      	add	r3, r2
 801d14e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d152:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 801d156:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801d15a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801d15e:	683b      	ldr	r3, [r7, #0]
 801d160:	00db      	lsls	r3, r3, #3
 801d162:	68fa      	ldr	r2, [r7, #12]
 801d164:	4413      	add	r3, r2
 801d166:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d16a:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 801d16e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801d172:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801d176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d178:	00db      	lsls	r3, r3, #3
 801d17a:	68fa      	ldr	r2, [r7, #12]
 801d17c:	4413      	add	r3, r2
 801d17e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d182:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 801d186:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801d18a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801d18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d190:	00db      	lsls	r3, r3, #3
 801d192:	68fa      	ldr	r2, [r7, #12]
 801d194:	4413      	add	r3, r2
 801d196:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d19a:	edc3 7a01 	vstr	s15, [r3, #4]
 801d19e:	e02f      	b.n	801d200 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 801d1a0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801d1a4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801d1a8:	683b      	ldr	r3, [r7, #0]
 801d1aa:	00db      	lsls	r3, r3, #3
 801d1ac:	68fa      	ldr	r2, [r7, #12]
 801d1ae:	4413      	add	r3, r2
 801d1b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d1b4:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 801d1b8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801d1bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801d1c0:	683b      	ldr	r3, [r7, #0]
 801d1c2:	00db      	lsls	r3, r3, #3
 801d1c4:	68fa      	ldr	r2, [r7, #12]
 801d1c6:	4413      	add	r3, r2
 801d1c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d1cc:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 801d1d0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801d1d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801d1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d1da:	00db      	lsls	r3, r3, #3
 801d1dc:	68fa      	ldr	r2, [r7, #12]
 801d1de:	4413      	add	r3, r2
 801d1e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d1e4:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 801d1e8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801d1ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801d1f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d1f2:	00db      	lsls	r3, r3, #3
 801d1f4:	68fa      	ldr	r2, [r7, #12]
 801d1f6:	4413      	add	r3, r2
 801d1f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d1fc:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 801d200:	68fb      	ldr	r3, [r7, #12]
 801d202:	3308      	adds	r3, #8
 801d204:	60fb      	str	r3, [r7, #12]
    }while(--k);
 801d206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d208:	3b01      	subs	r3, #1
 801d20a:	64bb      	str	r3, [r7, #72]	; 0x48
 801d20c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d20e:	2b00      	cmp	r3, #0
 801d210:	bf14      	ite	ne
 801d212:	2301      	movne	r3, #1
 801d214:	2300      	moveq	r3, #0
 801d216:	b2db      	uxtb	r3, r3
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d000      	beq.n	801d21e <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x360>
    do {
 801d21c:	e668      	b.n	801cef0 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 801d21e:	bf00      	nop
 801d220:	375c      	adds	r7, #92	; 0x5c
 801d222:	46bd      	mov	sp, r7
 801d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d228:	4770      	bx	lr
	...

0801d22c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 801d22c:	b5b0      	push	{r4, r5, r7, lr}
 801d22e:	b094      	sub	sp, #80	; 0x50
 801d230:	af00      	add	r7, sp, #0
 801d232:	60f8      	str	r0, [r7, #12]
 801d234:	60b9      	str	r1, [r7, #8]
 801d236:	607a      	str	r2, [r7, #4]
 801d238:	603b      	str	r3, [r7, #0]
     size_t k=m;
 801d23a:	683b      	ldr	r3, [r7, #0]
 801d23c:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 801d23e:	683b      	ldr	r3, [r7, #0]
 801d240:	005b      	lsls	r3, r3, #1
 801d242:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 801d244:	68bb      	ldr	r3, [r7, #8]
 801d246:	683a      	ldr	r2, [r7, #0]
 801d248:	fb02 f303 	mul.w	r3, r2, r3
 801d24c:	6879      	ldr	r1, [r7, #4]
 801d24e:	3321      	adds	r3, #33	; 0x21
 801d250:	f107 0210 	add.w	r2, r7, #16
 801d254:	00db      	lsls	r3, r3, #3
 801d256:	440b      	add	r3, r1
 801d258:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d25c:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 801d260:	687b      	ldr	r3, [r7, #4]
 801d262:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801d266:	647b      	str	r3, [r7, #68]	; 0x44
 801d268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d26a:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 801d26c:	683b      	ldr	r3, [r7, #0]
 801d26e:	00db      	lsls	r3, r3, #3
 801d270:	68fa      	ldr	r2, [r7, #12]
 801d272:	4413      	add	r3, r2
 801d274:	ed93 7a00 	vldr	s14, [r3]
 801d278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d27a:	edd3 7a00 	vldr	s15, [r3]
 801d27e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d282:	683b      	ldr	r3, [r7, #0]
 801d284:	00db      	lsls	r3, r3, #3
 801d286:	68fa      	ldr	r2, [r7, #12]
 801d288:	4413      	add	r3, r2
 801d28a:	edd3 6a01 	vldr	s13, [r3, #4]
 801d28e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d290:	edd3 7a01 	vldr	s15, [r3, #4]
 801d294:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d298:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d29c:	edc7 7a08 	vstr	s15, [r7, #32]
 801d2a0:	683b      	ldr	r3, [r7, #0]
 801d2a2:	00db      	lsls	r3, r3, #3
 801d2a4:	68fa      	ldr	r2, [r7, #12]
 801d2a6:	4413      	add	r3, r2
 801d2a8:	ed93 7a00 	vldr	s14, [r3]
 801d2ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d2ae:	edd3 7a01 	vldr	s15, [r3, #4]
 801d2b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d2b6:	683b      	ldr	r3, [r7, #0]
 801d2b8:	00db      	lsls	r3, r3, #3
 801d2ba:	68fa      	ldr	r2, [r7, #12]
 801d2bc:	4413      	add	r3, r2
 801d2be:	edd3 6a01 	vldr	s13, [r3, #4]
 801d2c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d2c4:	edd3 7a00 	vldr	s15, [r3]
 801d2c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d2cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d2d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 801d2d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d2d6:	00db      	lsls	r3, r3, #3
 801d2d8:	68fa      	ldr	r2, [r7, #12]
 801d2da:	4413      	add	r3, r2
 801d2dc:	ed93 7a00 	vldr	s14, [r3]
 801d2e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d2e2:	edd3 7a00 	vldr	s15, [r3]
 801d2e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d2ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d2ec:	00db      	lsls	r3, r3, #3
 801d2ee:	68fa      	ldr	r2, [r7, #12]
 801d2f0:	4413      	add	r3, r2
 801d2f2:	edd3 6a01 	vldr	s13, [r3, #4]
 801d2f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d2f8:	edd3 7a01 	vldr	s15, [r3, #4]
 801d2fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d300:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d304:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 801d308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d30a:	00db      	lsls	r3, r3, #3
 801d30c:	68fa      	ldr	r2, [r7, #12]
 801d30e:	4413      	add	r3, r2
 801d310:	ed93 7a00 	vldr	s14, [r3]
 801d314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d316:	edd3 7a01 	vldr	s15, [r3, #4]
 801d31a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d31e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d320:	00db      	lsls	r3, r3, #3
 801d322:	68fa      	ldr	r2, [r7, #12]
 801d324:	4413      	add	r3, r2
 801d326:	edd3 6a01 	vldr	s13, [r3, #4]
 801d32a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d32c:	edd3 7a00 	vldr	s15, [r3]
 801d330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d334:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d338:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 801d33c:	ed97 7a08 	vldr	s14, [r7, #32]
 801d340:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801d344:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d348:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 801d34c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801d350:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801d354:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d358:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 801d35c:	ed97 7a08 	vldr	s14, [r7, #32]
 801d360:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801d364:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d368:	edc7 7a06 	vstr	s15, [r7, #24]
 801d36c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801d370:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801d374:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d378:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 801d37c:	68bb      	ldr	r3, [r7, #8]
 801d37e:	00db      	lsls	r3, r3, #3
 801d380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d382:	4413      	add	r3, r2
 801d384:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 801d386:	68bb      	ldr	r3, [r7, #8]
 801d388:	011b      	lsls	r3, r3, #4
 801d38a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d38c:	4413      	add	r3, r2
 801d38e:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	4618      	mov	r0, r3
 801d396:	f7e3 f901 	bl	800059c <__aeabi_f2d>
 801d39a:	4604      	mov	r4, r0
 801d39c:	460d      	mov	r5, r1
 801d39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3a0:	4618      	mov	r0, r3
 801d3a2:	f7e3 f8fb 	bl	800059c <__aeabi_f2d>
 801d3a6:	f04f 0200 	mov.w	r2, #0
 801d3aa:	4b57      	ldr	r3, [pc, #348]	; (801d508 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 801d3ac:	f7e3 f94e 	bl	800064c <__aeabi_dmul>
 801d3b0:	4602      	mov	r2, r0
 801d3b2:	460b      	mov	r3, r1
 801d3b4:	4620      	mov	r0, r4
 801d3b6:	4629      	mov	r1, r5
 801d3b8:	f7e2 ff90 	bl	80002dc <__aeabi_dsub>
 801d3bc:	4602      	mov	r2, r0
 801d3be:	460b      	mov	r3, r1
 801d3c0:	4610      	mov	r0, r2
 801d3c2:	4619      	mov	r1, r3
 801d3c4:	683b      	ldr	r3, [r7, #0]
 801d3c6:	00db      	lsls	r3, r3, #3
 801d3c8:	68fa      	ldr	r2, [r7, #12]
 801d3ca:	18d4      	adds	r4, r2, r3
 801d3cc:	f7e3 fc36 	bl	8000c3c <__aeabi_d2f>
 801d3d0:	4603      	mov	r3, r0
 801d3d2:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 801d3d4:	68fb      	ldr	r3, [r7, #12]
 801d3d6:	685b      	ldr	r3, [r3, #4]
 801d3d8:	4618      	mov	r0, r3
 801d3da:	f7e3 f8df 	bl	800059c <__aeabi_f2d>
 801d3de:	4604      	mov	r4, r0
 801d3e0:	460d      	mov	r5, r1
 801d3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d3e4:	4618      	mov	r0, r3
 801d3e6:	f7e3 f8d9 	bl	800059c <__aeabi_f2d>
 801d3ea:	f04f 0200 	mov.w	r2, #0
 801d3ee:	4b46      	ldr	r3, [pc, #280]	; (801d508 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 801d3f0:	f7e3 f92c 	bl	800064c <__aeabi_dmul>
 801d3f4:	4602      	mov	r2, r0
 801d3f6:	460b      	mov	r3, r1
 801d3f8:	4620      	mov	r0, r4
 801d3fa:	4629      	mov	r1, r5
 801d3fc:	f7e2 ff6e 	bl	80002dc <__aeabi_dsub>
 801d400:	4602      	mov	r2, r0
 801d402:	460b      	mov	r3, r1
 801d404:	4610      	mov	r0, r2
 801d406:	4619      	mov	r1, r3
 801d408:	683b      	ldr	r3, [r7, #0]
 801d40a:	00db      	lsls	r3, r3, #3
 801d40c:	68fa      	ldr	r2, [r7, #12]
 801d40e:	18d4      	adds	r4, r2, r3
 801d410:	f7e3 fc14 	bl	8000c3c <__aeabi_d2f>
 801d414:	4603      	mov	r3, r0
 801d416:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 801d418:	ed97 7a06 	vldr	s14, [r7, #24]
 801d41c:	edd7 7a05 	vldr	s15, [r7, #20]
 801d420:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d424:	edc7 7a06 	vstr	s15, [r7, #24]
 801d428:	ed97 7a07 	vldr	s14, [r7, #28]
 801d42c:	edd7 7a05 	vldr	s15, [r7, #20]
 801d430:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d434:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 801d438:	68fb      	ldr	r3, [r7, #12]
 801d43a:	ed93 7a00 	vldr	s14, [r3]
 801d43e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801d442:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d446:	68fb      	ldr	r3, [r7, #12]
 801d448:	edc3 7a00 	vstr	s15, [r3]
 801d44c:	68fb      	ldr	r3, [r7, #12]
 801d44e:	ed93 7a01 	vldr	s14, [r3, #4]
 801d452:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801d456:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d45a:	68fb      	ldr	r3, [r7, #12]
 801d45c:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 801d460:	683b      	ldr	r3, [r7, #0]
 801d462:	00db      	lsls	r3, r3, #3
 801d464:	68fa      	ldr	r2, [r7, #12]
 801d466:	4413      	add	r3, r2
 801d468:	ed93 7a00 	vldr	s14, [r3]
 801d46c:	edd7 7a07 	vldr	s15, [r7, #28]
 801d470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d472:	00db      	lsls	r3, r3, #3
 801d474:	68fa      	ldr	r2, [r7, #12]
 801d476:	4413      	add	r3, r2
 801d478:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d47c:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 801d480:	683b      	ldr	r3, [r7, #0]
 801d482:	00db      	lsls	r3, r3, #3
 801d484:	68fa      	ldr	r2, [r7, #12]
 801d486:	4413      	add	r3, r2
 801d488:	ed93 7a01 	vldr	s14, [r3, #4]
 801d48c:	edd7 7a06 	vldr	s15, [r7, #24]
 801d490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d492:	00db      	lsls	r3, r3, #3
 801d494:	68fa      	ldr	r2, [r7, #12]
 801d496:	4413      	add	r3, r2
 801d498:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d49c:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 801d4a0:	683b      	ldr	r3, [r7, #0]
 801d4a2:	00db      	lsls	r3, r3, #3
 801d4a4:	68fa      	ldr	r2, [r7, #12]
 801d4a6:	4413      	add	r3, r2
 801d4a8:	ed93 7a00 	vldr	s14, [r3]
 801d4ac:	edd7 7a07 	vldr	s15, [r7, #28]
 801d4b0:	683b      	ldr	r3, [r7, #0]
 801d4b2:	00db      	lsls	r3, r3, #3
 801d4b4:	68fa      	ldr	r2, [r7, #12]
 801d4b6:	4413      	add	r3, r2
 801d4b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d4bc:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 801d4c0:	683b      	ldr	r3, [r7, #0]
 801d4c2:	00db      	lsls	r3, r3, #3
 801d4c4:	68fa      	ldr	r2, [r7, #12]
 801d4c6:	4413      	add	r3, r2
 801d4c8:	ed93 7a01 	vldr	s14, [r3, #4]
 801d4cc:	edd7 7a06 	vldr	s15, [r7, #24]
 801d4d0:	683b      	ldr	r3, [r7, #0]
 801d4d2:	00db      	lsls	r3, r3, #3
 801d4d4:	68fa      	ldr	r2, [r7, #12]
 801d4d6:	4413      	add	r3, r2
 801d4d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d4dc:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 801d4e0:	68fb      	ldr	r3, [r7, #12]
 801d4e2:	3308      	adds	r3, #8
 801d4e4:	60fb      	str	r3, [r7, #12]
     }while(--k);
 801d4e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d4e8:	3b01      	subs	r3, #1
 801d4ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d4ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	bf14      	ite	ne
 801d4f2:	2301      	movne	r3, #1
 801d4f4:	2300      	moveq	r3, #0
 801d4f6:	b2db      	uxtb	r3, r3
 801d4f8:	2b00      	cmp	r3, #0
 801d4fa:	d000      	beq.n	801d4fe <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2d2>
     do{
 801d4fc:	e6b6      	b.n	801d26c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 801d4fe:	bf00      	nop
 801d500:	3750      	adds	r7, #80	; 0x50
 801d502:	46bd      	mov	sp, r7
 801d504:	bdb0      	pop	{r4, r5, r7, pc}
 801d506:	bf00      	nop
 801d508:	3fe00000 	.word	0x3fe00000

0801d50c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 801d50c:	b480      	push	{r7}
 801d50e:	b0ab      	sub	sp, #172	; 0xac
 801d510:	af00      	add	r7, sp, #0
 801d512:	60f8      	str	r0, [r7, #12]
 801d514:	60b9      	str	r1, [r7, #8]
 801d516:	607a      	str	r2, [r7, #4]
 801d518:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801d520:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 801d524:	683b      	ldr	r3, [r7, #0]
 801d526:	68ba      	ldr	r2, [r7, #8]
 801d528:	fb02 f303 	mul.w	r3, r2, r3
 801d52c:	00db      	lsls	r3, r3, #3
 801d52e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801d532:	441a      	add	r2, r3
 801d534:	f107 0318 	add.w	r3, r7, #24
 801d538:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d53c:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 801d540:	683b      	ldr	r3, [r7, #0]
 801d542:	68ba      	ldr	r2, [r7, #8]
 801d544:	fb02 f303 	mul.w	r3, r2, r3
 801d548:	011b      	lsls	r3, r3, #4
 801d54a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801d54e:	441a      	add	r2, r3
 801d550:	f107 0310 	add.w	r3, r7, #16
 801d554:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d558:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 801d55c:	68fb      	ldr	r3, [r7, #12]
 801d55e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 801d562:	683b      	ldr	r3, [r7, #0]
 801d564:	00db      	lsls	r3, r3, #3
 801d566:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801d56a:	4413      	add	r3, r2
 801d56c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 801d570:	683b      	ldr	r3, [r7, #0]
 801d572:	011b      	lsls	r3, r3, #4
 801d574:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801d578:	4413      	add	r3, r2
 801d57a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 801d57e:	683a      	ldr	r2, [r7, #0]
 801d580:	4613      	mov	r3, r2
 801d582:	005b      	lsls	r3, r3, #1
 801d584:	4413      	add	r3, r2
 801d586:	00db      	lsls	r3, r3, #3
 801d588:	461a      	mov	r2, r3
 801d58a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d58e:	4413      	add	r3, r2
 801d590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 801d594:	683b      	ldr	r3, [r7, #0]
 801d596:	015b      	lsls	r3, r3, #5
 801d598:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801d59c:	4413      	add	r3, r2
 801d59e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801d5a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 801d5ac:	2300      	movs	r3, #0
 801d5ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d5b2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801d5b6:	683b      	ldr	r3, [r7, #0]
 801d5b8:	429a      	cmp	r2, r3
 801d5ba:	f280 82a9 	bge.w	801db10 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x604>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 801d5be:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801d5c2:	f107 0320 	add.w	r3, r7, #32
 801d5c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d5ca:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 801d5ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801d5d2:	ed93 7a00 	vldr	s14, [r3]
 801d5d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d5da:	68ba      	ldr	r2, [r7, #8]
 801d5dc:	fb02 f303 	mul.w	r3, r2, r3
 801d5e0:	00db      	lsls	r3, r3, #3
 801d5e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d5e6:	4413      	add	r3, r2
 801d5e8:	edd3 7a00 	vldr	s15, [r3]
 801d5ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d5f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801d5f4:	edd3 6a01 	vldr	s13, [r3, #4]
 801d5f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d5fc:	68ba      	ldr	r2, [r7, #8]
 801d5fe:	fb02 f303 	mul.w	r3, r2, r3
 801d602:	00db      	lsls	r3, r3, #3
 801d604:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d608:	4413      	add	r3, r2
 801d60a:	edd3 7a01 	vldr	s15, [r3, #4]
 801d60e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d612:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d616:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 801d61a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801d61e:	ed93 7a00 	vldr	s14, [r3]
 801d622:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d626:	68ba      	ldr	r2, [r7, #8]
 801d628:	fb02 f303 	mul.w	r3, r2, r3
 801d62c:	00db      	lsls	r3, r3, #3
 801d62e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d632:	4413      	add	r3, r2
 801d634:	edd3 7a01 	vldr	s15, [r3, #4]
 801d638:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d63c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801d640:	edd3 6a01 	vldr	s13, [r3, #4]
 801d644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d648:	68ba      	ldr	r2, [r7, #8]
 801d64a:	fb02 f303 	mul.w	r3, r2, r3
 801d64e:	00db      	lsls	r3, r3, #3
 801d650:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d654:	4413      	add	r3, r2
 801d656:	edd3 7a00 	vldr	s15, [r3]
 801d65a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d65e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d662:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 801d666:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d66a:	ed93 7a00 	vldr	s14, [r3]
 801d66e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d672:	68ba      	ldr	r2, [r7, #8]
 801d674:	fb02 f303 	mul.w	r3, r2, r3
 801d678:	011b      	lsls	r3, r3, #4
 801d67a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d67e:	4413      	add	r3, r2
 801d680:	edd3 7a00 	vldr	s15, [r3]
 801d684:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d688:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d68c:	edd3 6a01 	vldr	s13, [r3, #4]
 801d690:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d694:	68ba      	ldr	r2, [r7, #8]
 801d696:	fb02 f303 	mul.w	r3, r2, r3
 801d69a:	011b      	lsls	r3, r3, #4
 801d69c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d6a0:	4413      	add	r3, r2
 801d6a2:	edd3 7a01 	vldr	s15, [r3, #4]
 801d6a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d6aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d6ae:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 801d6b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d6b6:	ed93 7a00 	vldr	s14, [r3]
 801d6ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d6be:	68ba      	ldr	r2, [r7, #8]
 801d6c0:	fb02 f303 	mul.w	r3, r2, r3
 801d6c4:	011b      	lsls	r3, r3, #4
 801d6c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d6ca:	4413      	add	r3, r2
 801d6cc:	edd3 7a01 	vldr	s15, [r3, #4]
 801d6d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d6d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d6d8:	edd3 6a01 	vldr	s13, [r3, #4]
 801d6dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d6e0:	68ba      	ldr	r2, [r7, #8]
 801d6e2:	fb02 f303 	mul.w	r3, r2, r3
 801d6e6:	011b      	lsls	r3, r3, #4
 801d6e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d6ec:	4413      	add	r3, r2
 801d6ee:	edd3 7a00 	vldr	s15, [r3]
 801d6f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d6f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d6fa:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 801d6fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d702:	ed93 7a00 	vldr	s14, [r3]
 801d706:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d70a:	68ba      	ldr	r2, [r7, #8]
 801d70c:	fb03 f202 	mul.w	r2, r3, r2
 801d710:	4613      	mov	r3, r2
 801d712:	005b      	lsls	r3, r3, #1
 801d714:	4413      	add	r3, r2
 801d716:	00db      	lsls	r3, r3, #3
 801d718:	461a      	mov	r2, r3
 801d71a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801d71e:	4413      	add	r3, r2
 801d720:	edd3 7a00 	vldr	s15, [r3]
 801d724:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d728:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d72c:	edd3 6a01 	vldr	s13, [r3, #4]
 801d730:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d734:	68ba      	ldr	r2, [r7, #8]
 801d736:	fb03 f202 	mul.w	r2, r3, r2
 801d73a:	4613      	mov	r3, r2
 801d73c:	005b      	lsls	r3, r3, #1
 801d73e:	4413      	add	r3, r2
 801d740:	00db      	lsls	r3, r3, #3
 801d742:	461a      	mov	r2, r3
 801d744:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801d748:	4413      	add	r3, r2
 801d74a:	edd3 7a01 	vldr	s15, [r3, #4]
 801d74e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d752:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d756:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 801d75a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d75e:	ed93 7a00 	vldr	s14, [r3]
 801d762:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d766:	68ba      	ldr	r2, [r7, #8]
 801d768:	fb03 f202 	mul.w	r2, r3, r2
 801d76c:	4613      	mov	r3, r2
 801d76e:	005b      	lsls	r3, r3, #1
 801d770:	4413      	add	r3, r2
 801d772:	00db      	lsls	r3, r3, #3
 801d774:	461a      	mov	r2, r3
 801d776:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801d77a:	4413      	add	r3, r2
 801d77c:	edd3 7a01 	vldr	s15, [r3, #4]
 801d780:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d784:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d788:	edd3 6a01 	vldr	s13, [r3, #4]
 801d78c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d790:	68ba      	ldr	r2, [r7, #8]
 801d792:	fb03 f202 	mul.w	r2, r3, r2
 801d796:	4613      	mov	r3, r2
 801d798:	005b      	lsls	r3, r3, #1
 801d79a:	4413      	add	r3, r2
 801d79c:	00db      	lsls	r3, r3, #3
 801d79e:	461a      	mov	r2, r3
 801d7a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801d7a4:	4413      	add	r3, r2
 801d7a6:	edd3 7a00 	vldr	s15, [r3]
 801d7aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d7ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d7b2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 801d7b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d7ba:	ed93 7a00 	vldr	s14, [r3]
 801d7be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d7c2:	68ba      	ldr	r2, [r7, #8]
 801d7c4:	fb02 f303 	mul.w	r3, r2, r3
 801d7c8:	015b      	lsls	r3, r3, #5
 801d7ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d7ce:	4413      	add	r3, r2
 801d7d0:	edd3 7a00 	vldr	s15, [r3]
 801d7d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d7d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d7dc:	edd3 6a01 	vldr	s13, [r3, #4]
 801d7e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d7e4:	68ba      	ldr	r2, [r7, #8]
 801d7e6:	fb02 f303 	mul.w	r3, r2, r3
 801d7ea:	015b      	lsls	r3, r3, #5
 801d7ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d7f0:	4413      	add	r3, r2
 801d7f2:	edd3 7a01 	vldr	s15, [r3, #4]
 801d7f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d7fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d7fe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 801d802:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d806:	ed93 7a00 	vldr	s14, [r3]
 801d80a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d80e:	68ba      	ldr	r2, [r7, #8]
 801d810:	fb02 f303 	mul.w	r3, r2, r3
 801d814:	015b      	lsls	r3, r3, #5
 801d816:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d81a:	4413      	add	r3, r2
 801d81c:	edd3 7a01 	vldr	s15, [r3, #4]
 801d820:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d824:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d828:	edd3 6a01 	vldr	s13, [r3, #4]
 801d82c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d830:	68ba      	ldr	r2, [r7, #8]
 801d832:	fb02 f303 	mul.w	r3, r2, r3
 801d836:	015b      	lsls	r3, r3, #5
 801d838:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d83c:	4413      	add	r3, r2
 801d83e:	edd3 7a00 	vldr	s15, [r3]
 801d842:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d846:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d84a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 801d84e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801d852:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801d856:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d85a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 801d85e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801d862:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801d866:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d86a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 801d86e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801d872:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801d876:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d87a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 801d87e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801d882:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801d886:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d88a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 801d88e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801d892:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801d896:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d89a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 801d89e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801d8a2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801d8a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d8aa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 801d8ae:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801d8b2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801d8b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d8ba:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 801d8be:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801d8c2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801d8c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d8ca:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 801d8ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d8d2:	ed93 7a00 	vldr	s14, [r3]
 801d8d6:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801d8da:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801d8de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d8e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d8e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d8ea:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 801d8ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d8f2:	ed93 7a01 	vldr	s14, [r3, #4]
 801d8f6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801d8fa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801d8fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d902:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d906:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d90a:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 801d90e:	ed97 7a08 	vldr	s14, [r7, #32]
 801d912:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801d916:	edd7 7a06 	vldr	s15, [r7, #24]
 801d91a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d91e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d922:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 801d926:	edd7 7a04 	vldr	s15, [r7, #16]
 801d92a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d92e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d932:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 801d936:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801d93a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801d93e:	edd7 7a06 	vldr	s15, [r7, #24]
 801d942:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d946:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d94a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801d94e:	edd7 7a04 	vldr	s15, [r7, #16]
 801d952:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d956:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d95a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 801d95e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 801d962:	edd7 7a07 	vldr	s15, [r7, #28]
 801d966:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d96a:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 801d96e:	edd7 7a05 	vldr	s15, [r7, #20]
 801d972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d976:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d97a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 801d97e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 801d982:	edd7 7a07 	vldr	s15, [r7, #28]
 801d986:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d98a:	eeb1 7a67 	vneg.f32	s14, s15
 801d98e:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 801d992:	edd7 7a05 	vldr	s15, [r7, #20]
 801d996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801d99a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d99e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 801d9a2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801d9a6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801d9aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d9ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801d9b2:	edc3 7a00 	vstr	s15, [r3]
 801d9b6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801d9ba:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801d9be:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d9c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801d9c6:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 801d9ca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801d9ce:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801d9d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d9d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d9da:	edc3 7a00 	vstr	s15, [r3]
 801d9de:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801d9e2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801d9e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d9ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d9ee:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 801d9f2:	ed97 7a08 	vldr	s14, [r7, #32]
 801d9f6:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801d9fa:	edd7 7a04 	vldr	s15, [r7, #16]
 801d9fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801da02:	ee37 7a27 	vadd.f32	s14, s14, s15
 801da06:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 801da0a:	edd7 7a06 	vldr	s15, [r7, #24]
 801da0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801da12:	ee77 7a27 	vadd.f32	s15, s14, s15
 801da16:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 801da1a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801da1e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801da22:	edd7 7a04 	vldr	s15, [r7, #16]
 801da26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801da2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801da2e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801da32:	edd7 7a06 	vldr	s15, [r7, #24]
 801da36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801da3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801da3e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 801da42:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 801da46:	edd7 7a07 	vldr	s15, [r7, #28]
 801da4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801da4e:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 801da52:	edd7 7a05 	vldr	s15, [r7, #20]
 801da56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801da5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801da5e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 801da62:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 801da66:	edd7 7a05 	vldr	s15, [r7, #20]
 801da6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801da6e:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 801da72:	edd7 7a07 	vldr	s15, [r7, #28]
 801da76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801da7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801da7e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 801da82:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 801da86:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801da8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801da8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801da92:	edc3 7a00 	vstr	s15, [r3]
 801da96:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 801da9a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801da9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801daa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801daa6:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 801daaa:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 801daae:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801dab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801dab6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801daba:	edc3 7a00 	vstr	s15, [r3]
 801dabe:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 801dac2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801dac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801daca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801dace:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 801dad2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801dad6:	3308      	adds	r3, #8
 801dad8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801dadc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801dae0:	3308      	adds	r3, #8
 801dae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801dae6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801daea:	3308      	adds	r3, #8
 801daec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801daf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801daf4:	3308      	adds	r3, #8
 801daf6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801dafa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801dafe:	3308      	adds	r3, #8
 801db00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 801db04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801db08:	3301      	adds	r3, #1
 801db0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801db0e:	e550      	b.n	801d5b2 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa6>
    }
}
 801db10:	bf00      	nop
 801db12:	37ac      	adds	r7, #172	; 0xac
 801db14:	46bd      	mov	sp, r7
 801db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db1a:	4770      	bx	lr

0801db1c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 801db1c:	b580      	push	{r7, lr}
 801db1e:	b08e      	sub	sp, #56	; 0x38
 801db20:	af00      	add	r7, sp, #0
 801db22:	60f8      	str	r0, [r7, #12]
 801db24:	60b9      	str	r1, [r7, #8]
 801db26:	607a      	str	r2, [r7, #4]
 801db28:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801db30:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 801db32:	687b      	ldr	r3, [r7, #4]
 801db34:	681b      	ldr	r3, [r3, #0]
 801db36:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 801db38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801db3a:	00db      	lsls	r3, r3, #3
 801db3c:	4618      	mov	r0, r3
 801db3e:	f000 fe8b 	bl	801e858 <_Z9ei_mallocj>
 801db42:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 801db44:	2300      	movs	r3, #0
 801db46:	637b      	str	r3, [r7, #52]	; 0x34
 801db48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801db4a:	683b      	ldr	r3, [r7, #0]
 801db4c:	429a      	cmp	r2, r3
 801db4e:	f280 80b6 	bge.w	801dcbe <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x1a2>
        k=u;
 801db52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db54:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801db56:	2300      	movs	r3, #0
 801db58:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801db5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801db5e:	429a      	cmp	r2, r3
 801db60:	da14      	bge.n	801db8c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x70>
            scratch[q1] = Fout[ k  ];
 801db62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db64:	00db      	lsls	r3, r3, #3
 801db66:	68fa      	ldr	r2, [r7, #12]
 801db68:	18d1      	adds	r1, r2, r3
 801db6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db6c:	00db      	lsls	r3, r3, #3
 801db6e:	69ba      	ldr	r2, [r7, #24]
 801db70:	4413      	add	r3, r2
 801db72:	460a      	mov	r2, r1
 801db74:	e892 0003 	ldmia.w	r2, {r0, r1}
 801db78:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 801db7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801db7e:	683b      	ldr	r3, [r7, #0]
 801db80:	4413      	add	r3, r2
 801db82:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801db84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db86:	3301      	adds	r3, #1
 801db88:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db8a:	e7e6      	b.n	801db5a <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x3e>
        }

        k=u;
 801db8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db8e:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801db90:	2300      	movs	r3, #0
 801db92:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801db96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801db98:	429a      	cmp	r2, r3
 801db9a:	f280 808c 	bge.w	801dcb6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19a>
            int twidx=0;
 801db9e:	2300      	movs	r3, #0
 801dba0:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 801dba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dba4:	00db      	lsls	r3, r3, #3
 801dba6:	68fa      	ldr	r2, [r7, #12]
 801dba8:	4413      	add	r3, r2
 801dbaa:	69ba      	ldr	r2, [r7, #24]
 801dbac:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dbb0:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 801dbb4:	2301      	movs	r3, #1
 801dbb6:	62bb      	str	r3, [r7, #40]	; 0x28
 801dbb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dbba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dbbc:	429a      	cmp	r2, r3
 801dbbe:	da72      	bge.n	801dca6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18a>
                twidx += fstride * k;
 801dbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbc2:	68ba      	ldr	r2, [r7, #8]
 801dbc4:	fb03 f202 	mul.w	r2, r3, r2
 801dbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbca:	4413      	add	r3, r2
 801dbcc:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 801dbce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dbd0:	69fb      	ldr	r3, [r7, #28]
 801dbd2:	429a      	cmp	r2, r3
 801dbd4:	db03      	blt.n	801dbde <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc2>
 801dbd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dbd8:	69fb      	ldr	r3, [r7, #28]
 801dbda:	1ad3      	subs	r3, r2, r3
 801dbdc:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 801dbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbe0:	00db      	lsls	r3, r3, #3
 801dbe2:	69ba      	ldr	r2, [r7, #24]
 801dbe4:	4413      	add	r3, r2
 801dbe6:	ed93 7a00 	vldr	s14, [r3]
 801dbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbec:	00db      	lsls	r3, r3, #3
 801dbee:	6a3a      	ldr	r2, [r7, #32]
 801dbf0:	4413      	add	r3, r2
 801dbf2:	edd3 7a00 	vldr	s15, [r3]
 801dbf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 801dbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbfc:	00db      	lsls	r3, r3, #3
 801dbfe:	69ba      	ldr	r2, [r7, #24]
 801dc00:	4413      	add	r3, r2
 801dc02:	edd3 6a01 	vldr	s13, [r3, #4]
 801dc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc08:	00db      	lsls	r3, r3, #3
 801dc0a:	6a3a      	ldr	r2, [r7, #32]
 801dc0c:	4413      	add	r3, r2
 801dc0e:	edd3 7a01 	vldr	s15, [r3, #4]
 801dc12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801dc16:	ee77 7a67 	vsub.f32	s15, s14, s15
 801dc1a:	edc7 7a04 	vstr	s15, [r7, #16]
 801dc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc20:	00db      	lsls	r3, r3, #3
 801dc22:	69ba      	ldr	r2, [r7, #24]
 801dc24:	4413      	add	r3, r2
 801dc26:	ed93 7a00 	vldr	s14, [r3]
 801dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc2c:	00db      	lsls	r3, r3, #3
 801dc2e:	6a3a      	ldr	r2, [r7, #32]
 801dc30:	4413      	add	r3, r2
 801dc32:	edd3 7a01 	vldr	s15, [r3, #4]
 801dc36:	ee27 7a27 	vmul.f32	s14, s14, s15
 801dc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc3c:	00db      	lsls	r3, r3, #3
 801dc3e:	69ba      	ldr	r2, [r7, #24]
 801dc40:	4413      	add	r3, r2
 801dc42:	edd3 6a01 	vldr	s13, [r3, #4]
 801dc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc48:	00db      	lsls	r3, r3, #3
 801dc4a:	6a3a      	ldr	r2, [r7, #32]
 801dc4c:	4413      	add	r3, r2
 801dc4e:	edd3 7a00 	vldr	s15, [r3]
 801dc52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801dc56:	ee77 7a27 	vadd.f32	s15, s14, s15
 801dc5a:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 801dc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc60:	00db      	lsls	r3, r3, #3
 801dc62:	68fa      	ldr	r2, [r7, #12]
 801dc64:	4413      	add	r3, r2
 801dc66:	ed93 7a00 	vldr	s14, [r3]
 801dc6a:	edd7 7a04 	vldr	s15, [r7, #16]
 801dc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc70:	00db      	lsls	r3, r3, #3
 801dc72:	68fa      	ldr	r2, [r7, #12]
 801dc74:	4413      	add	r3, r2
 801dc76:	ee77 7a27 	vadd.f32	s15, s14, s15
 801dc7a:	edc3 7a00 	vstr	s15, [r3]
 801dc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc80:	00db      	lsls	r3, r3, #3
 801dc82:	68fa      	ldr	r2, [r7, #12]
 801dc84:	4413      	add	r3, r2
 801dc86:	ed93 7a01 	vldr	s14, [r3, #4]
 801dc8a:	edd7 7a05 	vldr	s15, [r7, #20]
 801dc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc90:	00db      	lsls	r3, r3, #3
 801dc92:	68fa      	ldr	r2, [r7, #12]
 801dc94:	4413      	add	r3, r2
 801dc96:	ee77 7a27 	vadd.f32	s15, s14, s15
 801dc9a:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 801dc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dca0:	3301      	adds	r3, #1
 801dca2:	62bb      	str	r3, [r7, #40]	; 0x28
 801dca4:	e788      	b.n	801dbb8 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x9c>
            }
            k += m;
 801dca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dca8:	683b      	ldr	r3, [r7, #0]
 801dcaa:	4413      	add	r3, r2
 801dcac:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801dcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dcb0:	3301      	adds	r3, #1
 801dcb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dcb4:	e76e      	b.n	801db94 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x78>
    for ( u=0; u<m; ++u ) {
 801dcb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dcb8:	3301      	adds	r3, #1
 801dcba:	637b      	str	r3, [r7, #52]	; 0x34
 801dcbc:	e744      	b.n	801db48 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2c>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 801dcbe:	69b8      	ldr	r0, [r7, #24]
 801dcc0:	f000 fde4 	bl	801e88c <_Z7ei_freePv>
}
 801dcc4:	bf00      	nop
 801dcc6:	3738      	adds	r7, #56	; 0x38
 801dcc8:	46bd      	mov	sp, r7
 801dcca:	bd80      	pop	{r7, pc}

0801dccc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 801dccc:	b580      	push	{r7, lr}
 801dcce:	b08a      	sub	sp, #40	; 0x28
 801dcd0:	af02      	add	r7, sp, #8
 801dcd2:	60f8      	str	r0, [r7, #12]
 801dcd4:	60b9      	str	r1, [r7, #8]
 801dcd6:	607a      	str	r2, [r7, #4]
 801dcd8:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 801dcda:	68fb      	ldr	r3, [r7, #12]
 801dcdc:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 801dcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dce0:	1d1a      	adds	r2, r3, #4
 801dce2:	62ba      	str	r2, [r7, #40]	; 0x28
 801dce4:	681b      	ldr	r3, [r3, #0]
 801dce6:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 801dce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dcea:	1d1a      	adds	r2, r3, #4
 801dcec:	62ba      	str	r2, [r7, #40]	; 0x28
 801dcee:	681b      	ldr	r3, [r3, #0]
 801dcf0:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 801dcf2:	69bb      	ldr	r3, [r7, #24]
 801dcf4:	697a      	ldr	r2, [r7, #20]
 801dcf6:	fb02 f303 	mul.w	r3, r2, r3
 801dcfa:	00db      	lsls	r3, r3, #3
 801dcfc:	68fa      	ldr	r2, [r7, #12]
 801dcfe:	4413      	add	r3, r2
 801dd00:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 801dd02:	697b      	ldr	r3, [r7, #20]
 801dd04:	2b01      	cmp	r3, #1
 801dd06:	d11a      	bne.n	801dd3e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 801dd08:	68fb      	ldr	r3, [r7, #12]
 801dd0a:	68ba      	ldr	r2, [r7, #8]
 801dd0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dd10:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 801dd14:	683b      	ldr	r3, [r7, #0]
 801dd16:	687a      	ldr	r2, [r7, #4]
 801dd18:	fb02 f303 	mul.w	r3, r2, r3
 801dd1c:	00db      	lsls	r3, r3, #3
 801dd1e:	68ba      	ldr	r2, [r7, #8]
 801dd20:	4413      	add	r3, r2
 801dd22:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 801dd24:	68fb      	ldr	r3, [r7, #12]
 801dd26:	3308      	adds	r3, #8
 801dd28:	60fb      	str	r3, [r7, #12]
 801dd2a:	68fa      	ldr	r2, [r7, #12]
 801dd2c:	693b      	ldr	r3, [r7, #16]
 801dd2e:	429a      	cmp	r2, r3
 801dd30:	bf14      	ite	ne
 801dd32:	2301      	movne	r3, #1
 801dd34:	2300      	moveq	r3, #0
 801dd36:	b2db      	uxtb	r3, r3
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d024      	beq.n	801dd86 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 801dd3c:	e7e4      	b.n	801dd08 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 801dd3e:	69bb      	ldr	r3, [r7, #24]
 801dd40:	687a      	ldr	r2, [r7, #4]
 801dd42:	fb03 f202 	mul.w	r2, r3, r2
 801dd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd48:	9301      	str	r3, [sp, #4]
 801dd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd4c:	9300      	str	r3, [sp, #0]
 801dd4e:	683b      	ldr	r3, [r7, #0]
 801dd50:	68b9      	ldr	r1, [r7, #8]
 801dd52:	68f8      	ldr	r0, [r7, #12]
 801dd54:	f7ff ffba 	bl	801dccc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 801dd58:	683b      	ldr	r3, [r7, #0]
 801dd5a:	687a      	ldr	r2, [r7, #4]
 801dd5c:	fb02 f303 	mul.w	r3, r2, r3
 801dd60:	00db      	lsls	r3, r3, #3
 801dd62:	68ba      	ldr	r2, [r7, #8]
 801dd64:	4413      	add	r3, r2
 801dd66:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 801dd68:	697b      	ldr	r3, [r7, #20]
 801dd6a:	00db      	lsls	r3, r3, #3
 801dd6c:	68fa      	ldr	r2, [r7, #12]
 801dd6e:	4413      	add	r3, r2
 801dd70:	60fb      	str	r3, [r7, #12]
 801dd72:	68fa      	ldr	r2, [r7, #12]
 801dd74:	693b      	ldr	r3, [r7, #16]
 801dd76:	429a      	cmp	r2, r3
 801dd78:	bf14      	ite	ne
 801dd7a:	2301      	movne	r3, #1
 801dd7c:	2300      	moveq	r3, #0
 801dd7e:	b2db      	uxtb	r3, r3
 801dd80:	2b00      	cmp	r3, #0
 801dd82:	d000      	beq.n	801dd86 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 801dd84:	e7db      	b.n	801dd3e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 801dd86:	69fb      	ldr	r3, [r7, #28]
 801dd88:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 801dd8a:	69bb      	ldr	r3, [r7, #24]
 801dd8c:	3b02      	subs	r3, #2
 801dd8e:	2b03      	cmp	r3, #3
 801dd90:	d826      	bhi.n	801dde0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 801dd92:	a201      	add	r2, pc, #4	; (adr r2, 801dd98 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 801dd94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dd98:	0801dda9 	.word	0x0801dda9
 801dd9c:	0801ddb7 	.word	0x0801ddb7
 801dda0:	0801ddc5 	.word	0x0801ddc5
 801dda4:	0801ddd3 	.word	0x0801ddd3
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 801dda8:	697b      	ldr	r3, [r7, #20]
 801ddaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ddac:	6879      	ldr	r1, [r7, #4]
 801ddae:	68f8      	ldr	r0, [r7, #12]
 801ddb0:	f7ff f808 	bl	801cdc4 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 801ddb4:	e01d      	b.n	801ddf2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 801ddb6:	697b      	ldr	r3, [r7, #20]
 801ddb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ddba:	6879      	ldr	r1, [r7, #4]
 801ddbc:	68f8      	ldr	r0, [r7, #12]
 801ddbe:	f7ff fa35 	bl	801d22c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 801ddc2:	e016      	b.n	801ddf2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 801ddc4:	697b      	ldr	r3, [r7, #20]
 801ddc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ddc8:	6879      	ldr	r1, [r7, #4]
 801ddca:	68f8      	ldr	r0, [r7, #12]
 801ddcc:	f7ff f877 	bl	801cebe <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 801ddd0:	e00f      	b.n	801ddf2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 801ddd2:	697b      	ldr	r3, [r7, #20]
 801ddd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ddd6:	6879      	ldr	r1, [r7, #4]
 801ddd8:	68f8      	ldr	r0, [r7, #12]
 801ddda:	f7ff fb97 	bl	801d50c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 801ddde:	e008      	b.n	801ddf2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 801dde0:	69bb      	ldr	r3, [r7, #24]
 801dde2:	9300      	str	r3, [sp, #0]
 801dde4:	697b      	ldr	r3, [r7, #20]
 801dde6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dde8:	6879      	ldr	r1, [r7, #4]
 801ddea:	68f8      	ldr	r0, [r7, #12]
 801ddec:	f7ff fe96 	bl	801db1c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 801ddf0:	bf00      	nop
    }
}
 801ddf2:	bf00      	nop
 801ddf4:	3720      	adds	r7, #32
 801ddf6:	46bd      	mov	sp, r7
 801ddf8:	bd80      	pop	{r7, pc}
 801ddfa:	bf00      	nop

0801ddfc <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 801ddfc:	b580      	push	{r7, lr}
 801ddfe:	b086      	sub	sp, #24
 801de00:	af00      	add	r7, sp, #0
 801de02:	6078      	str	r0, [r7, #4]
 801de04:	6039      	str	r1, [r7, #0]
    int p=4;
 801de06:	2304      	movs	r3, #4
 801de08:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 801de0a:	6878      	ldr	r0, [r7, #4]
 801de0c:	f7e2 fbb4 	bl	8000578 <__aeabi_i2d>
 801de10:	4602      	mov	r2, r0
 801de12:	460b      	mov	r3, r1
 801de14:	ec43 2b10 	vmov	d0, r2, r3
 801de18:	f00b fc5c 	bl	80296d4 <sqrt>
 801de1c:	eeb0 7a40 	vmov.f32	s14, s0
 801de20:	eef0 7a60 	vmov.f32	s15, s1
 801de24:	eeb0 0a47 	vmov.f32	s0, s14
 801de28:	eef0 0a67 	vmov.f32	s1, s15
 801de2c:	f00b f954 	bl	80290d8 <floor>
 801de30:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 801de34:	687b      	ldr	r3, [r7, #4]
 801de36:	697a      	ldr	r2, [r7, #20]
 801de38:	fb93 f2f2 	sdiv	r2, r3, r2
 801de3c:	6979      	ldr	r1, [r7, #20]
 801de3e:	fb01 f202 	mul.w	r2, r1, r2
 801de42:	1a9b      	subs	r3, r3, r2
 801de44:	2b00      	cmp	r3, #0
 801de46:	d01e      	beq.n	801de86 <_ZL9kf_factoriPi+0x8a>
            switch (p) {
 801de48:	697b      	ldr	r3, [r7, #20]
 801de4a:	2b02      	cmp	r3, #2
 801de4c:	d005      	beq.n	801de5a <_ZL9kf_factoriPi+0x5e>
 801de4e:	697b      	ldr	r3, [r7, #20]
 801de50:	2b04      	cmp	r3, #4
 801de52:	d105      	bne.n	801de60 <_ZL9kf_factoriPi+0x64>
                case 4: p = 2; break;
 801de54:	2302      	movs	r3, #2
 801de56:	617b      	str	r3, [r7, #20]
 801de58:	e006      	b.n	801de68 <_ZL9kf_factoriPi+0x6c>
                case 2: p = 3; break;
 801de5a:	2303      	movs	r3, #3
 801de5c:	617b      	str	r3, [r7, #20]
 801de5e:	e003      	b.n	801de68 <_ZL9kf_factoriPi+0x6c>
                default: p += 2; break;
 801de60:	697b      	ldr	r3, [r7, #20]
 801de62:	3302      	adds	r3, #2
 801de64:	617b      	str	r3, [r7, #20]
 801de66:	bf00      	nop
            }
            if (p > floor_sqrt)
 801de68:	6978      	ldr	r0, [r7, #20]
 801de6a:	f7e2 fb85 	bl	8000578 <__aeabi_i2d>
 801de6e:	4602      	mov	r2, r0
 801de70:	460b      	mov	r3, r1
 801de72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801de76:	f7e2 fe5b 	bl	8000b30 <__aeabi_dcmplt>
 801de7a:	4603      	mov	r3, r0
 801de7c:	2b00      	cmp	r3, #0
 801de7e:	d001      	beq.n	801de84 <_ZL9kf_factoriPi+0x88>
                p = n;          /* no more factors, skip to end */
 801de80:	687b      	ldr	r3, [r7, #4]
 801de82:	617b      	str	r3, [r7, #20]
        while (n % p) {
 801de84:	e7d6      	b.n	801de34 <_ZL9kf_factoriPi+0x38>
        }
        n /= p;
 801de86:	687a      	ldr	r2, [r7, #4]
 801de88:	697b      	ldr	r3, [r7, #20]
 801de8a:	fb92 f3f3 	sdiv	r3, r2, r3
 801de8e:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 801de90:	683b      	ldr	r3, [r7, #0]
 801de92:	1d1a      	adds	r2, r3, #4
 801de94:	603a      	str	r2, [r7, #0]
 801de96:	697a      	ldr	r2, [r7, #20]
 801de98:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 801de9a:	683b      	ldr	r3, [r7, #0]
 801de9c:	1d1a      	adds	r2, r3, #4
 801de9e:	603a      	str	r2, [r7, #0]
 801dea0:	687a      	ldr	r2, [r7, #4]
 801dea2:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 801dea4:	687b      	ldr	r3, [r7, #4]
 801dea6:	2b01      	cmp	r3, #1
 801dea8:	dd00      	ble.n	801deac <_ZL9kf_factoriPi+0xb0>
    do {
 801deaa:	e7c3      	b.n	801de34 <_ZL9kf_factoriPi+0x38>
}
 801deac:	bf00      	nop
 801deae:	3718      	adds	r7, #24
 801deb0:	46bd      	mov	sp, r7
 801deb2:	bd80      	pop	{r7, pc}
 801deb4:	0000      	movs	r0, r0
	...

0801deb8 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 801deb8:	b5b0      	push	{r4, r5, r7, lr}
 801deba:	b090      	sub	sp, #64	; 0x40
 801debc:	af00      	add	r7, sp, #0
 801debe:	60f8      	str	r0, [r7, #12]
 801dec0:	60b9      	str	r1, [r7, #8]
 801dec2:	607a      	str	r2, [r7, #4]
 801dec4:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 801dec6:	2300      	movs	r3, #0
 801dec8:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 801dece:	00db      	lsls	r3, r3, #3
 801ded0:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 801ded2:	683b      	ldr	r3, [r7, #0]
 801ded4:	2b00      	cmp	r3, #0
 801ded6:	d104      	bne.n	801dee2 <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 801ded8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801deda:	f000 fcbd 	bl	801e858 <_Z9ei_mallocj>
 801dede:	63f8      	str	r0, [r7, #60]	; 0x3c
 801dee0:	e00c      	b.n	801defc <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 801dee2:	687b      	ldr	r3, [r7, #4]
 801dee4:	2b00      	cmp	r3, #0
 801dee6:	d006      	beq.n	801def6 <kiss_fft_alloc+0x3e>
 801dee8:	683b      	ldr	r3, [r7, #0]
 801deea:	681b      	ldr	r3, [r3, #0]
 801deec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801deee:	429a      	cmp	r2, r3
 801def0:	d801      	bhi.n	801def6 <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 801def2:	687b      	ldr	r3, [r7, #4]
 801def4:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 801def6:	683b      	ldr	r3, [r7, #0]
 801def8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801defa:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 801defc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801defe:	2b00      	cmp	r3, #0
 801df00:	f000 80a0 	beq.w	801e044 <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 801df04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801df06:	68fa      	ldr	r2, [r7, #12]
 801df08:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 801df0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801df0c:	68ba      	ldr	r2, [r7, #8]
 801df0e:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 801df10:	68bb      	ldr	r3, [r7, #8]
 801df12:	2b00      	cmp	r3, #0
 801df14:	d048      	beq.n	801dfa8 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 801df16:	2300      	movs	r3, #0
 801df18:	63bb      	str	r3, [r7, #56]	; 0x38
 801df1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801df1c:	68fb      	ldr	r3, [r7, #12]
 801df1e:	429a      	cmp	r2, r3
 801df20:	f280 808a 	bge.w	801e038 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 801df24:	a34e      	add	r3, pc, #312	; (adr r3, 801e060 <kiss_fft_alloc+0x1a8>)
 801df26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 801df2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801df30:	f7e2 fb22 	bl	8000578 <__aeabi_i2d>
 801df34:	a34c      	add	r3, pc, #304	; (adr r3, 801e068 <kiss_fft_alloc+0x1b0>)
 801df36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df3a:	f7e2 fb87 	bl	800064c <__aeabi_dmul>
 801df3e:	4602      	mov	r2, r0
 801df40:	460b      	mov	r3, r1
 801df42:	4614      	mov	r4, r2
 801df44:	461d      	mov	r5, r3
 801df46:	68f8      	ldr	r0, [r7, #12]
 801df48:	f7e2 fb16 	bl	8000578 <__aeabi_i2d>
 801df4c:	4602      	mov	r2, r0
 801df4e:	460b      	mov	r3, r1
 801df50:	4620      	mov	r0, r4
 801df52:	4629      	mov	r1, r5
 801df54:	f7e2 fca4 	bl	80008a0 <__aeabi_ddiv>
 801df58:	4602      	mov	r2, r0
 801df5a:	460b      	mov	r3, r1
 801df5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 801df60:	ed97 0b04 	vldr	d0, [r7, #16]
 801df64:	f00b f864 	bl	8029030 <cos>
 801df68:	ec51 0b10 	vmov	r0, r1, d0
 801df6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801df6e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801df72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801df74:	00db      	lsls	r3, r3, #3
 801df76:	18d4      	adds	r4, r2, r3
 801df78:	f7e2 fe60 	bl	8000c3c <__aeabi_d2f>
 801df7c:	4603      	mov	r3, r0
 801df7e:	6023      	str	r3, [r4, #0]
 801df80:	ed97 0b04 	vldr	d0, [r7, #16]
 801df84:	f00b f9a8 	bl	80292d8 <sin>
 801df88:	ec51 0b10 	vmov	r0, r1, d0
 801df8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801df8e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801df92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801df94:	00db      	lsls	r3, r3, #3
 801df96:	18d4      	adds	r4, r2, r3
 801df98:	f7e2 fe50 	bl	8000c3c <__aeabi_d2f>
 801df9c:	4603      	mov	r3, r0
 801df9e:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 801dfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dfa2:	3301      	adds	r3, #1
 801dfa4:	63bb      	str	r3, [r7, #56]	; 0x38
 801dfa6:	e7b8      	b.n	801df1a <kiss_fft_alloc+0x62>
            }
        } else {
            for (i=0;i<nfft;++i) {
 801dfa8:	2300      	movs	r3, #0
 801dfaa:	63bb      	str	r3, [r7, #56]	; 0x38
 801dfac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dfae:	68fb      	ldr	r3, [r7, #12]
 801dfb0:	429a      	cmp	r2, r3
 801dfb2:	da41      	bge.n	801e038 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 801dfb4:	a32a      	add	r3, pc, #168	; (adr r3, 801e060 <kiss_fft_alloc+0x1a8>)
 801dfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 801dfbe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801dfc0:	f7e2 fada 	bl	8000578 <__aeabi_i2d>
 801dfc4:	a32a      	add	r3, pc, #168	; (adr r3, 801e070 <kiss_fft_alloc+0x1b8>)
 801dfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfca:	f7e2 fb3f 	bl	800064c <__aeabi_dmul>
 801dfce:	4602      	mov	r2, r0
 801dfd0:	460b      	mov	r3, r1
 801dfd2:	4614      	mov	r4, r2
 801dfd4:	461d      	mov	r5, r3
 801dfd6:	68f8      	ldr	r0, [r7, #12]
 801dfd8:	f7e2 face 	bl	8000578 <__aeabi_i2d>
 801dfdc:	4602      	mov	r2, r0
 801dfde:	460b      	mov	r3, r1
 801dfe0:	4620      	mov	r0, r4
 801dfe2:	4629      	mov	r1, r5
 801dfe4:	f7e2 fc5c 	bl	80008a0 <__aeabi_ddiv>
 801dfe8:	4602      	mov	r2, r0
 801dfea:	460b      	mov	r3, r1
 801dfec:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 801dff0:	ed97 0b08 	vldr	d0, [r7, #32]
 801dff4:	f00b f81c 	bl	8029030 <cos>
 801dff8:	ec51 0b10 	vmov	r0, r1, d0
 801dffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dffe:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801e002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e004:	00db      	lsls	r3, r3, #3
 801e006:	18d4      	adds	r4, r2, r3
 801e008:	f7e2 fe18 	bl	8000c3c <__aeabi_d2f>
 801e00c:	4603      	mov	r3, r0
 801e00e:	6023      	str	r3, [r4, #0]
 801e010:	ed97 0b08 	vldr	d0, [r7, #32]
 801e014:	f00b f960 	bl	80292d8 <sin>
 801e018:	ec51 0b10 	vmov	r0, r1, d0
 801e01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e01e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801e022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e024:	00db      	lsls	r3, r3, #3
 801e026:	18d4      	adds	r4, r2, r3
 801e028:	f7e2 fe08 	bl	8000c3c <__aeabi_d2f>
 801e02c:	4603      	mov	r3, r0
 801e02e:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 801e030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e032:	3301      	adds	r3, #1
 801e034:	63bb      	str	r3, [r7, #56]	; 0x38
 801e036:	e7b9      	b.n	801dfac <kiss_fft_alloc+0xf4>
            }
        }

        kf_factor(nfft,st->factors);
 801e038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e03a:	3308      	adds	r3, #8
 801e03c:	4619      	mov	r1, r3
 801e03e:	68f8      	ldr	r0, [r7, #12]
 801e040:	f7ff fedc 	bl	801ddfc <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 801e044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e046:	2b00      	cmp	r3, #0
 801e048:	d002      	beq.n	801e050 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 801e04a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e04c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e04e:	601a      	str	r2, [r3, #0]
    }

    return st;
 801e050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801e052:	4618      	mov	r0, r3
 801e054:	3740      	adds	r7, #64	; 0x40
 801e056:	46bd      	mov	sp, r7
 801e058:	bdb0      	pop	{r4, r5, r7, pc}
 801e05a:	bf00      	nop
 801e05c:	f3af 8000 	nop.w
 801e060:	54442d18 	.word	0x54442d18
 801e064:	400921fb 	.word	0x400921fb
 801e068:	54442d18 	.word	0x54442d18
 801e06c:	401921fb 	.word	0x401921fb
 801e070:	54442d18 	.word	0x54442d18
 801e074:	c01921fb 	.word	0xc01921fb

0801e078 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 801e078:	b580      	push	{r7, lr}
 801e07a:	b088      	sub	sp, #32
 801e07c:	af02      	add	r7, sp, #8
 801e07e:	60f8      	str	r0, [r7, #12]
 801e080:	60b9      	str	r1, [r7, #8]
 801e082:	607a      	str	r2, [r7, #4]
 801e084:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 801e086:	68ba      	ldr	r2, [r7, #8]
 801e088:	687b      	ldr	r3, [r7, #4]
 801e08a:	429a      	cmp	r2, r3
 801e08c:	d11d      	bne.n	801e0ca <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 801e08e:	68fb      	ldr	r3, [r7, #12]
 801e090:	681b      	ldr	r3, [r3, #0]
 801e092:	00db      	lsls	r3, r3, #3
 801e094:	4618      	mov	r0, r3
 801e096:	f000 fbdf 	bl	801e858 <_Z9ei_mallocj>
 801e09a:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 801e09c:	68fb      	ldr	r3, [r7, #12]
 801e09e:	3308      	adds	r3, #8
 801e0a0:	68fa      	ldr	r2, [r7, #12]
 801e0a2:	9201      	str	r2, [sp, #4]
 801e0a4:	9300      	str	r3, [sp, #0]
 801e0a6:	683b      	ldr	r3, [r7, #0]
 801e0a8:	2201      	movs	r2, #1
 801e0aa:	68b9      	ldr	r1, [r7, #8]
 801e0ac:	6978      	ldr	r0, [r7, #20]
 801e0ae:	f7ff fe0d 	bl	801dccc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 801e0b2:	68fb      	ldr	r3, [r7, #12]
 801e0b4:	681b      	ldr	r3, [r3, #0]
 801e0b6:	00db      	lsls	r3, r3, #3
 801e0b8:	461a      	mov	r2, r3
 801e0ba:	6979      	ldr	r1, [r7, #20]
 801e0bc:	6878      	ldr	r0, [r7, #4]
 801e0be:	f00e f8e7 	bl	802c290 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 801e0c2:	6978      	ldr	r0, [r7, #20]
 801e0c4:	f000 fbe2 	bl	801e88c <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 801e0c8:	e00a      	b.n	801e0e0 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 801e0ca:	68fb      	ldr	r3, [r7, #12]
 801e0cc:	3308      	adds	r3, #8
 801e0ce:	68fa      	ldr	r2, [r7, #12]
 801e0d0:	9201      	str	r2, [sp, #4]
 801e0d2:	9300      	str	r3, [sp, #0]
 801e0d4:	683b      	ldr	r3, [r7, #0]
 801e0d6:	2201      	movs	r2, #1
 801e0d8:	68b9      	ldr	r1, [r7, #8]
 801e0da:	6878      	ldr	r0, [r7, #4]
 801e0dc:	f7ff fdf6 	bl	801dccc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 801e0e0:	bf00      	nop
 801e0e2:	3718      	adds	r7, #24
 801e0e4:	46bd      	mov	sp, r7
 801e0e6:	bd80      	pop	{r7, pc}

0801e0e8 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 801e0e8:	b580      	push	{r7, lr}
 801e0ea:	b084      	sub	sp, #16
 801e0ec:	af00      	add	r7, sp, #0
 801e0ee:	60f8      	str	r0, [r7, #12]
 801e0f0:	60b9      	str	r1, [r7, #8]
 801e0f2:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 801e0f4:	2301      	movs	r3, #1
 801e0f6:	687a      	ldr	r2, [r7, #4]
 801e0f8:	68b9      	ldr	r1, [r7, #8]
 801e0fa:	68f8      	ldr	r0, [r7, #12]
 801e0fc:	f7ff ffbc 	bl	801e078 <kiss_fft_stride>
}
 801e100:	bf00      	nop
 801e102:	3710      	adds	r7, #16
 801e104:	46bd      	mov	sp, r7
 801e106:	bd80      	pop	{r7, pc}

0801e108 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 801e108:	b5b0      	push	{r4, r5, r7, lr}
 801e10a:	b090      	sub	sp, #64	; 0x40
 801e10c:	af02      	add	r7, sp, #8
 801e10e:	60f8      	str	r0, [r7, #12]
 801e110:	60b9      	str	r1, [r7, #8]
 801e112:	607a      	str	r2, [r7, #4]
 801e114:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 801e116:	2300      	movs	r3, #0
 801e118:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 801e11a:	2300      	movs	r3, #0
 801e11c:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 801e11e:	68fb      	ldr	r3, [r7, #12]
 801e120:	f003 0301 	and.w	r3, r3, #1
 801e124:	2b00      	cmp	r3, #0
 801e126:	d004      	beq.n	801e132 <kiss_fftr_alloc+0x2a>
        ei_printf("FFT length must be even\n");
 801e128:	4885      	ldr	r0, [pc, #532]	; (801e340 <kiss_fftr_alloc+0x238>)
 801e12a:	f7e7 fdbd 	bl	8005ca8 <_Z9ei_printfPKcz>
        return NULL;
 801e12e:	2300      	movs	r3, #0
 801e130:	e0f9      	b.n	801e326 <kiss_fftr_alloc+0x21e>
    }
    nfft >>= 1;
 801e132:	68fb      	ldr	r3, [r7, #12]
 801e134:	105b      	asrs	r3, r3, #1
 801e136:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 801e138:	f107 0314 	add.w	r3, r7, #20
 801e13c:	2200      	movs	r2, #0
 801e13e:	9200      	str	r2, [sp, #0]
 801e140:	2200      	movs	r2, #0
 801e142:	68b9      	ldr	r1, [r7, #8]
 801e144:	68f8      	ldr	r0, [r7, #12]
 801e146:	f7ff feb7 	bl	801deb8 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 801e14a:	68fa      	ldr	r2, [r7, #12]
 801e14c:	4613      	mov	r3, r2
 801e14e:	005b      	lsls	r3, r3, #1
 801e150:	4413      	add	r3, r2
 801e152:	0fda      	lsrs	r2, r3, #31
 801e154:	4413      	add	r3, r2
 801e156:	105b      	asrs	r3, r3, #1
 801e158:	00da      	lsls	r2, r3, #3
 801e15a:	697b      	ldr	r3, [r7, #20]
 801e15c:	4413      	add	r3, r2
 801e15e:	330c      	adds	r3, #12
 801e160:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 801e162:	683b      	ldr	r3, [r7, #0]
 801e164:	2b00      	cmp	r3, #0
 801e166:	d104      	bne.n	801e172 <kiss_fftr_alloc+0x6a>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 801e168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e16a:	f000 fb75 	bl	801e858 <_Z9ei_mallocj>
 801e16e:	6338      	str	r0, [r7, #48]	; 0x30
 801e170:	e009      	b.n	801e186 <kiss_fftr_alloc+0x7e>
    } else {
        if (*lenmem >= memneeded)
 801e172:	683b      	ldr	r3, [r7, #0]
 801e174:	681b      	ldr	r3, [r3, #0]
 801e176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e178:	429a      	cmp	r2, r3
 801e17a:	d801      	bhi.n	801e180 <kiss_fftr_alloc+0x78>
            st = (kiss_fftr_cfg) mem;
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 801e180:	683b      	ldr	r3, [r7, #0]
 801e182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e184:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 801e186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e188:	2b00      	cmp	r3, #0
 801e18a:	d101      	bne.n	801e190 <kiss_fftr_alloc+0x88>
        return NULL;
 801e18c:	2300      	movs	r3, #0
 801e18e:	e0ca      	b.n	801e326 <kiss_fftr_alloc+0x21e>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 801e190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e192:	f103 020c 	add.w	r2, r3, #12
 801e196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e198:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 801e19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e19c:	681a      	ldr	r2, [r3, #0]
 801e19e:	697b      	ldr	r3, [r7, #20]
 801e1a0:	441a      	add	r2, r3
 801e1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e1a4:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 801e1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e1a8:	685a      	ldr	r2, [r3, #4]
 801e1aa:	68fb      	ldr	r3, [r7, #12]
 801e1ac:	00db      	lsls	r3, r3, #3
 801e1ae:	441a      	add	r2, r3
 801e1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e1b2:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 801e1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e1b6:	681a      	ldr	r2, [r3, #0]
 801e1b8:	f107 0314 	add.w	r3, r7, #20
 801e1bc:	2100      	movs	r1, #0
 801e1be:	9100      	str	r1, [sp, #0]
 801e1c0:	68b9      	ldr	r1, [r7, #8]
 801e1c2:	68f8      	ldr	r0, [r7, #12]
 801e1c4:	f7ff fe78 	bl	801deb8 <kiss_fft_alloc>

    if (inverse_fft) {
 801e1c8:	68bb      	ldr	r3, [r7, #8]
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	d052      	beq.n	801e274 <kiss_fftr_alloc+0x16c>
        for (i = 0; i < nfft/2; ++i) {
 801e1ce:	2300      	movs	r3, #0
 801e1d0:	637b      	str	r3, [r7, #52]	; 0x34
 801e1d2:	68fb      	ldr	r3, [r7, #12]
 801e1d4:	0fda      	lsrs	r2, r3, #31
 801e1d6:	4413      	add	r3, r2
 801e1d8:	105b      	asrs	r3, r3, #1
 801e1da:	461a      	mov	r2, r3
 801e1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e1de:	4293      	cmp	r3, r2
 801e1e0:	f280 809a 	bge.w	801e318 <kiss_fftr_alloc+0x210>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 801e1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e1e6:	3301      	adds	r3, #1
 801e1e8:	4618      	mov	r0, r3
 801e1ea:	f7e2 f9c5 	bl	8000578 <__aeabi_i2d>
 801e1ee:	4604      	mov	r4, r0
 801e1f0:	460d      	mov	r5, r1
 801e1f2:	68f8      	ldr	r0, [r7, #12]
 801e1f4:	f7e2 f9c0 	bl	8000578 <__aeabi_i2d>
 801e1f8:	4602      	mov	r2, r0
 801e1fa:	460b      	mov	r3, r1
 801e1fc:	4620      	mov	r0, r4
 801e1fe:	4629      	mov	r1, r5
 801e200:	f7e2 fb4e 	bl	80008a0 <__aeabi_ddiv>
 801e204:	4602      	mov	r2, r0
 801e206:	460b      	mov	r3, r1
 801e208:	4610      	mov	r0, r2
 801e20a:	4619      	mov	r1, r3
 801e20c:	f04f 0200 	mov.w	r2, #0
 801e210:	4b4c      	ldr	r3, [pc, #304]	; (801e344 <kiss_fftr_alloc+0x23c>)
 801e212:	f7e2 f865 	bl	80002e0 <__adddf3>
 801e216:	4602      	mov	r2, r0
 801e218:	460b      	mov	r3, r1
 801e21a:	4610      	mov	r0, r2
 801e21c:	4619      	mov	r1, r3
            double phase =
 801e21e:	a344      	add	r3, pc, #272	; (adr r3, 801e330 <kiss_fftr_alloc+0x228>)
 801e220:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e224:	f7e2 fa12 	bl	800064c <__aeabi_dmul>
 801e228:	4602      	mov	r2, r0
 801e22a:	460b      	mov	r3, r1
 801e22c:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 801e230:	ed97 0b06 	vldr	d0, [r7, #24]
 801e234:	f00a fefc 	bl	8029030 <cos>
 801e238:	ec51 0b10 	vmov	r0, r1, d0
 801e23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e23e:	689a      	ldr	r2, [r3, #8]
 801e240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e242:	00db      	lsls	r3, r3, #3
 801e244:	18d4      	adds	r4, r2, r3
 801e246:	f7e2 fcf9 	bl	8000c3c <__aeabi_d2f>
 801e24a:	4603      	mov	r3, r0
 801e24c:	6023      	str	r3, [r4, #0]
 801e24e:	ed97 0b06 	vldr	d0, [r7, #24]
 801e252:	f00b f841 	bl	80292d8 <sin>
 801e256:	ec51 0b10 	vmov	r0, r1, d0
 801e25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e25c:	689a      	ldr	r2, [r3, #8]
 801e25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e260:	00db      	lsls	r3, r3, #3
 801e262:	18d4      	adds	r4, r2, r3
 801e264:	f7e2 fcea 	bl	8000c3c <__aeabi_d2f>
 801e268:	4603      	mov	r3, r0
 801e26a:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 801e26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e26e:	3301      	adds	r3, #1
 801e270:	637b      	str	r3, [r7, #52]	; 0x34
 801e272:	e7ae      	b.n	801e1d2 <kiss_fftr_alloc+0xca>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 801e274:	2300      	movs	r3, #0
 801e276:	637b      	str	r3, [r7, #52]	; 0x34
 801e278:	68fb      	ldr	r3, [r7, #12]
 801e27a:	0fda      	lsrs	r2, r3, #31
 801e27c:	4413      	add	r3, r2
 801e27e:	105b      	asrs	r3, r3, #1
 801e280:	461a      	mov	r2, r3
 801e282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e284:	4293      	cmp	r3, r2
 801e286:	da47      	bge.n	801e318 <kiss_fftr_alloc+0x210>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 801e288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e28a:	3301      	adds	r3, #1
 801e28c:	4618      	mov	r0, r3
 801e28e:	f7e2 f973 	bl	8000578 <__aeabi_i2d>
 801e292:	4604      	mov	r4, r0
 801e294:	460d      	mov	r5, r1
 801e296:	68f8      	ldr	r0, [r7, #12]
 801e298:	f7e2 f96e 	bl	8000578 <__aeabi_i2d>
 801e29c:	4602      	mov	r2, r0
 801e29e:	460b      	mov	r3, r1
 801e2a0:	4620      	mov	r0, r4
 801e2a2:	4629      	mov	r1, r5
 801e2a4:	f7e2 fafc 	bl	80008a0 <__aeabi_ddiv>
 801e2a8:	4602      	mov	r2, r0
 801e2aa:	460b      	mov	r3, r1
 801e2ac:	4610      	mov	r0, r2
 801e2ae:	4619      	mov	r1, r3
 801e2b0:	f04f 0200 	mov.w	r2, #0
 801e2b4:	4b23      	ldr	r3, [pc, #140]	; (801e344 <kiss_fftr_alloc+0x23c>)
 801e2b6:	f7e2 f813 	bl	80002e0 <__adddf3>
 801e2ba:	4602      	mov	r2, r0
 801e2bc:	460b      	mov	r3, r1
 801e2be:	4610      	mov	r0, r2
 801e2c0:	4619      	mov	r1, r3
            double phase =
 801e2c2:	a31d      	add	r3, pc, #116	; (adr r3, 801e338 <kiss_fftr_alloc+0x230>)
 801e2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2c8:	f7e2 f9c0 	bl	800064c <__aeabi_dmul>
 801e2cc:	4602      	mov	r2, r0
 801e2ce:	460b      	mov	r3, r1
 801e2d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 801e2d4:	ed97 0b08 	vldr	d0, [r7, #32]
 801e2d8:	f00a feaa 	bl	8029030 <cos>
 801e2dc:	ec51 0b10 	vmov	r0, r1, d0
 801e2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e2e2:	689a      	ldr	r2, [r3, #8]
 801e2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e2e6:	00db      	lsls	r3, r3, #3
 801e2e8:	18d4      	adds	r4, r2, r3
 801e2ea:	f7e2 fca7 	bl	8000c3c <__aeabi_d2f>
 801e2ee:	4603      	mov	r3, r0
 801e2f0:	6023      	str	r3, [r4, #0]
 801e2f2:	ed97 0b08 	vldr	d0, [r7, #32]
 801e2f6:	f00a ffef 	bl	80292d8 <sin>
 801e2fa:	ec51 0b10 	vmov	r0, r1, d0
 801e2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e300:	689a      	ldr	r2, [r3, #8]
 801e302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e304:	00db      	lsls	r3, r3, #3
 801e306:	18d4      	adds	r4, r2, r3
 801e308:	f7e2 fc98 	bl	8000c3c <__aeabi_d2f>
 801e30c:	4603      	mov	r3, r0
 801e30e:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 801e310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e312:	3301      	adds	r3, #1
 801e314:	637b      	str	r3, [r7, #52]	; 0x34
 801e316:	e7af      	b.n	801e278 <kiss_fftr_alloc+0x170>
        }
    }

    if (memallocated != NULL) {
 801e318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	d002      	beq.n	801e324 <kiss_fftr_alloc+0x21c>
        *memallocated = memneeded;
 801e31e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e322:	601a      	str	r2, [r3, #0]
    }

    return st;
 801e324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801e326:	4618      	mov	r0, r3
 801e328:	3738      	adds	r7, #56	; 0x38
 801e32a:	46bd      	mov	sp, r7
 801e32c:	bdb0      	pop	{r4, r5, r7, pc}
 801e32e:	bf00      	nop
 801e330:	54442d18 	.word	0x54442d18
 801e334:	400921fb 	.word	0x400921fb
 801e338:	54442d18 	.word	0x54442d18
 801e33c:	c00921fb 	.word	0xc00921fb
 801e340:	0802e174 	.word	0x0802e174
 801e344:	3fe00000 	.word	0x3fe00000

0801e348 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 801e348:	b580      	push	{r7, lr}
 801e34a:	b092      	sub	sp, #72	; 0x48
 801e34c:	af00      	add	r7, sp, #0
 801e34e:	60f8      	str	r0, [r7, #12]
 801e350:	60b9      	str	r1, [r7, #8]
 801e352:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 801e354:	68fb      	ldr	r3, [r7, #12]
 801e356:	681b      	ldr	r3, [r3, #0]
 801e358:	685b      	ldr	r3, [r3, #4]
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	d002      	beq.n	801e364 <kiss_fftr+0x1c>
        ei_printf("kiss fft usage error: improper alloc\n");
 801e35e:	4887      	ldr	r0, [pc, #540]	; (801e57c <kiss_fftr+0x234>)
 801e360:	f7e7 fca2 	bl	8005ca8 <_Z9ei_printfPKcz>
    }

    ncfft = st->substate->nfft;
 801e364:	68fb      	ldr	r3, [r7, #12]
 801e366:	681b      	ldr	r3, [r3, #0]
 801e368:	681b      	ldr	r3, [r3, #0]
 801e36a:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 801e36c:	68fb      	ldr	r3, [r7, #12]
 801e36e:	6818      	ldr	r0, [r3, #0]
 801e370:	68fb      	ldr	r3, [r7, #12]
 801e372:	685b      	ldr	r3, [r3, #4]
 801e374:	461a      	mov	r2, r3
 801e376:	68b9      	ldr	r1, [r7, #8]
 801e378:	f7ff feb6 	bl	801e0e8 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 801e37c:	68fb      	ldr	r3, [r7, #12]
 801e37e:	685b      	ldr	r3, [r3, #4]
 801e380:	681b      	ldr	r3, [r3, #0]
 801e382:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 801e384:	68fb      	ldr	r3, [r7, #12]
 801e386:	685b      	ldr	r3, [r3, #4]
 801e388:	685b      	ldr	r3, [r3, #4]
 801e38a:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 801e38c:	ed97 7a04 	vldr	s14, [r7, #16]
 801e390:	edd7 7a05 	vldr	s15, [r7, #20]
 801e394:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e398:	687b      	ldr	r3, [r7, #4]
 801e39a:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 801e39e:	ed97 7a04 	vldr	s14, [r7, #16]
 801e3a2:	edd7 7a05 	vldr	s15, [r7, #20]
 801e3a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e3a8:	00db      	lsls	r3, r3, #3
 801e3aa:	687a      	ldr	r2, [r7, #4]
 801e3ac:	4413      	add	r3, r2
 801e3ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e3b2:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	f04f 0200 	mov.w	r2, #0
 801e3bc:	605a      	str	r2, [r3, #4]
 801e3be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e3c0:	00db      	lsls	r3, r3, #3
 801e3c2:	687a      	ldr	r2, [r7, #4]
 801e3c4:	4413      	add	r3, r2
 801e3c6:	687a      	ldr	r2, [r7, #4]
 801e3c8:	6852      	ldr	r2, [r2, #4]
 801e3ca:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 801e3cc:	2301      	movs	r3, #1
 801e3ce:	647b      	str	r3, [r7, #68]	; 0x44
 801e3d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e3d2:	0fda      	lsrs	r2, r3, #31
 801e3d4:	4413      	add	r3, r2
 801e3d6:	105b      	asrs	r3, r3, #1
 801e3d8:	461a      	mov	r2, r3
 801e3da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e3dc:	4293      	cmp	r3, r2
 801e3de:	f300 80c9 	bgt.w	801e574 <kiss_fftr+0x22c>
        fpk    = st->tmpbuf[k];
 801e3e2:	68fb      	ldr	r3, [r7, #12]
 801e3e4:	685a      	ldr	r2, [r3, #4]
 801e3e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e3e8:	00db      	lsls	r3, r3, #3
 801e3ea:	441a      	add	r2, r3
 801e3ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e3f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e3f4:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 801e3f8:	68fb      	ldr	r3, [r7, #12]
 801e3fa:	685a      	ldr	r2, [r3, #4]
 801e3fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801e3fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e400:	1acb      	subs	r3, r1, r3
 801e402:	00db      	lsls	r3, r3, #3
 801e404:	4413      	add	r3, r2
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 801e40a:	68fb      	ldr	r3, [r7, #12]
 801e40c:	685a      	ldr	r2, [r3, #4]
 801e40e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801e410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e412:	1acb      	subs	r3, r1, r3
 801e414:	00db      	lsls	r3, r3, #3
 801e416:	4413      	add	r3, r2
 801e418:	edd3 7a01 	vldr	s15, [r3, #4]
 801e41c:	eef1 7a67 	vneg.f32	s15, s15
 801e420:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 801e424:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801e428:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801e42c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e430:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 801e434:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801e438:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801e43c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e440:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 801e444:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801e448:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801e44c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e450:	edc7 7a08 	vstr	s15, [r7, #32]
 801e454:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801e458:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801e45c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e460:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 801e464:	ed97 7a08 	vldr	s14, [r7, #32]
 801e468:	68fb      	ldr	r3, [r7, #12]
 801e46a:	689a      	ldr	r2, [r3, #8]
 801e46c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e46e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801e472:	3b01      	subs	r3, #1
 801e474:	00db      	lsls	r3, r3, #3
 801e476:	4413      	add	r3, r2
 801e478:	edd3 7a00 	vldr	s15, [r3]
 801e47c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e480:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801e484:	68fb      	ldr	r3, [r7, #12]
 801e486:	689a      	ldr	r2, [r3, #8]
 801e488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e48a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801e48e:	3b01      	subs	r3, #1
 801e490:	00db      	lsls	r3, r3, #3
 801e492:	4413      	add	r3, r2
 801e494:	edd3 7a01 	vldr	s15, [r3, #4]
 801e498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e49c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e4a0:	edc7 7a06 	vstr	s15, [r7, #24]
 801e4a4:	ed97 7a08 	vldr	s14, [r7, #32]
 801e4a8:	68fb      	ldr	r3, [r7, #12]
 801e4aa:	689a      	ldr	r2, [r3, #8]
 801e4ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e4ae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801e4b2:	3b01      	subs	r3, #1
 801e4b4:	00db      	lsls	r3, r3, #3
 801e4b6:	4413      	add	r3, r2
 801e4b8:	edd3 7a01 	vldr	s15, [r3, #4]
 801e4bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e4c0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801e4c4:	68fb      	ldr	r3, [r7, #12]
 801e4c6:	689a      	ldr	r2, [r3, #8]
 801e4c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e4ca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801e4ce:	3b01      	subs	r3, #1
 801e4d0:	00db      	lsls	r3, r3, #3
 801e4d2:	4413      	add	r3, r2
 801e4d4:	edd3 7a00 	vldr	s15, [r3]
 801e4d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e4dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e4e0:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 801e4e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801e4e8:	edd7 7a06 	vldr	s15, [r7, #24]
 801e4ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e4f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e4f2:	00db      	lsls	r3, r3, #3
 801e4f4:	687a      	ldr	r2, [r7, #4]
 801e4f6:	4413      	add	r3, r2
 801e4f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801e4fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e500:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 801e504:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801e508:	edd7 7a07 	vldr	s15, [r7, #28]
 801e50c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e512:	00db      	lsls	r3, r3, #3
 801e514:	687a      	ldr	r2, [r7, #4]
 801e516:	4413      	add	r3, r2
 801e518:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801e51c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e520:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 801e524:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801e528:	edd7 7a06 	vldr	s15, [r7, #24]
 801e52c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e530:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e534:	1ad3      	subs	r3, r2, r3
 801e536:	00db      	lsls	r3, r3, #3
 801e538:	687a      	ldr	r2, [r7, #4]
 801e53a:	4413      	add	r3, r2
 801e53c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801e540:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e544:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 801e548:	ed97 7a07 	vldr	s14, [r7, #28]
 801e54c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801e550:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e558:	1ad3      	subs	r3, r2, r3
 801e55a:	00db      	lsls	r3, r3, #3
 801e55c:	687a      	ldr	r2, [r7, #4]
 801e55e:	4413      	add	r3, r2
 801e560:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801e564:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e568:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 801e56c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e56e:	3301      	adds	r3, #1
 801e570:	647b      	str	r3, [r7, #68]	; 0x44
 801e572:	e72d      	b.n	801e3d0 <kiss_fftr+0x88>
    }
}
 801e574:	bf00      	nop
 801e576:	3748      	adds	r7, #72	; 0x48
 801e578:	46bd      	mov	sp, r7
 801e57a:	bd80      	pop	{r7, pc}
 801e57c:	0802e190 	.word	0x0802e190

0801e580 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 801e580:	b580      	push	{r7, lr}
 801e582:	b082      	sub	sp, #8
 801e584:	af00      	add	r7, sp, #0
 801e586:	ed87 0a01 	vstr	s0, [r7, #4]
 801e58a:	ed97 0a01 	vldr	s0, [r7, #4]
 801e58e:	f00b f903 	bl	8029798 <log10f>
 801e592:	eef0 7a40 	vmov.f32	s15, s0
 801e596:	eeb0 0a67 	vmov.f32	s0, s15
 801e59a:	3708      	adds	r7, #8
 801e59c:	46bd      	mov	sp, r7
 801e59e:	bd80      	pop	{r7, pc}

0801e5a0 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 801e5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5a2:	b083      	sub	sp, #12
 801e5a4:	af00      	add	r7, sp, #0
 801e5a6:	ed87 0b00 	vstr	d0, [r7]
 801e5aa:	683c      	ldr	r4, [r7, #0]
 801e5ac:	687b      	ldr	r3, [r7, #4]
 801e5ae:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801e5b2:	2301      	movs	r3, #1
 801e5b4:	461e      	mov	r6, r3
 801e5b6:	f04f 32ff 	mov.w	r2, #4294967295
 801e5ba:	4b10      	ldr	r3, [pc, #64]	; (801e5fc <_ZSt5isinfd+0x5c>)
 801e5bc:	4620      	mov	r0, r4
 801e5be:	4629      	mov	r1, r5
 801e5c0:	f7e2 fade 	bl	8000b80 <__aeabi_dcmpun>
 801e5c4:	4603      	mov	r3, r0
 801e5c6:	2b00      	cmp	r3, #0
 801e5c8:	d10b      	bne.n	801e5e2 <_ZSt5isinfd+0x42>
 801e5ca:	f04f 32ff 	mov.w	r2, #4294967295
 801e5ce:	4b0b      	ldr	r3, [pc, #44]	; (801e5fc <_ZSt5isinfd+0x5c>)
 801e5d0:	4620      	mov	r0, r4
 801e5d2:	4629      	mov	r1, r5
 801e5d4:	f7e2 fab6 	bl	8000b44 <__aeabi_dcmple>
 801e5d8:	4603      	mov	r3, r0
 801e5da:	2b00      	cmp	r3, #0
 801e5dc:	d101      	bne.n	801e5e2 <_ZSt5isinfd+0x42>
 801e5de:	2300      	movs	r3, #0
 801e5e0:	461e      	mov	r6, r3
 801e5e2:	b2f3      	uxtb	r3, r6
 801e5e4:	f083 0301 	eor.w	r3, r3, #1
 801e5e8:	b2db      	uxtb	r3, r3
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	bf14      	ite	ne
 801e5ee:	2301      	movne	r3, #1
 801e5f0:	2300      	moveq	r3, #0
 801e5f2:	b2db      	uxtb	r3, r3
 801e5f4:	4618      	mov	r0, r3
 801e5f6:	370c      	adds	r7, #12
 801e5f8:	46bd      	mov	sp, r7
 801e5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e5fc:	7fefffff 	.word	0x7fefffff

0801e600 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 801e600:	b480      	push	{r7}
 801e602:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 801e604:	2300      	movs	r3, #0
}
 801e606:	4618      	mov	r0, r3
 801e608:	46bd      	mov	sp, r7
 801e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e60e:	4770      	bx	lr

0801e610 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 801e610:	b5b0      	push	{r4, r5, r7, lr}
 801e612:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 801e614:	f7e9 fb68 	bl	8007ce8 <HAL_GetTick>
 801e618:	4603      	mov	r3, r0
 801e61a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e61e:	fb02 f303 	mul.w	r3, r2, r3
 801e622:	2200      	movs	r2, #0
 801e624:	461c      	mov	r4, r3
 801e626:	4615      	mov	r5, r2
 801e628:	4622      	mov	r2, r4
 801e62a:	462b      	mov	r3, r5
}
 801e62c:	4610      	mov	r0, r2
 801e62e:	4619      	mov	r1, r3
 801e630:	bdb0      	pop	{r4, r5, r7, pc}
 801e632:	0000      	movs	r0, r0
 801e634:	0000      	movs	r0, r0
	...

0801e638 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 801e638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e63c:	b08c      	sub	sp, #48	; 0x30
 801e63e:	af00      	add	r7, sp, #0
 801e640:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 801e644:	466b      	mov	r3, sp
 801e646:	4698      	mov	r8, r3
    float n = f;
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 801e64c:	4b7e      	ldr	r3, [pc, #504]	; (801e848 <_Z15ei_printf_floatf+0x210>)
 801e64e:	681b      	ldr	r3, [r3, #0]
 801e650:	1e5e      	subs	r6, r3, #1
 801e652:	623e      	str	r6, [r7, #32]
 801e654:	4633      	mov	r3, r6
 801e656:	3301      	adds	r3, #1
 801e658:	2200      	movs	r2, #0
 801e65a:	461c      	mov	r4, r3
 801e65c:	4615      	mov	r5, r2
 801e65e:	f04f 0200 	mov.w	r2, #0
 801e662:	f04f 0300 	mov.w	r3, #0
 801e666:	00eb      	lsls	r3, r5, #3
 801e668:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801e66c:	00e2      	lsls	r2, r4, #3
 801e66e:	4633      	mov	r3, r6
 801e670:	3301      	adds	r3, #1
 801e672:	2200      	movs	r2, #0
 801e674:	4618      	mov	r0, r3
 801e676:	4611      	mov	r1, r2
 801e678:	f04f 0200 	mov.w	r2, #0
 801e67c:	f04f 0300 	mov.w	r3, #0
 801e680:	00cb      	lsls	r3, r1, #3
 801e682:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801e686:	00c2      	lsls	r2, r0, #3
 801e688:	4633      	mov	r3, r6
 801e68a:	3301      	adds	r3, #1
 801e68c:	3307      	adds	r3, #7
 801e68e:	08db      	lsrs	r3, r3, #3
 801e690:	00db      	lsls	r3, r3, #3
 801e692:	ebad 0d03 	sub.w	sp, sp, r3
 801e696:	466b      	mov	r3, sp
 801e698:	3300      	adds	r3, #0
 801e69a:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 801e69c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801e6a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 801e6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6a8:	d106      	bne.n	801e6b8 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 801e6aa:	69fb      	ldr	r3, [r7, #28]
 801e6ac:	4967      	ldr	r1, [pc, #412]	; (801e84c <_Z15ei_printf_floatf+0x214>)
 801e6ae:	461a      	mov	r2, r3
 801e6b0:	460b      	mov	r3, r1
 801e6b2:	881b      	ldrh	r3, [r3, #0]
 801e6b4:	8013      	strh	r3, [r2, #0]
 801e6b6:	e0b6      	b.n	801e826 <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 801e6b8:	69fb      	ldr	r3, [r7, #28]
 801e6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 801e6bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801e6c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6c8:	bf4c      	ite	mi
 801e6ca:	2301      	movmi	r3, #1
 801e6cc:	2300      	movpl	r3, #0
 801e6ce:	b2db      	uxtb	r3, r3
 801e6d0:	61bb      	str	r3, [r7, #24]
        if (neg) {
 801e6d2:	69bb      	ldr	r3, [r7, #24]
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	d005      	beq.n	801e6e4 <_Z15ei_printf_floatf+0xac>
            n = -n;
 801e6d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801e6dc:	eef1 7a67 	vneg.f32	s15, s15
 801e6e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 801e6e4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 801e6e8:	f7ff ff4a 	bl	801e580 <_ZSt5log10f>
 801e6ec:	eef0 7a40 	vmov.f32	s15, s0
 801e6f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e6f4:	ee17 3a90 	vmov	r3, s15
 801e6f8:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 801e6fa:	69bb      	ldr	r3, [r7, #24]
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	d004      	beq.n	801e70a <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 801e700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e702:	1c5a      	adds	r2, r3, #1
 801e704:	62fa      	str	r2, [r7, #44]	; 0x2c
 801e706:	222d      	movs	r2, #45	; 0x2d
 801e708:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 801e70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e70c:	2b00      	cmp	r3, #0
 801e70e:	dc01      	bgt.n	801e714 <_Z15ei_printf_floatf+0xdc>
            m = 0;
 801e710:	2300      	movs	r3, #0
 801e712:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 801e714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e716:	f7e1 ff41 	bl	800059c <__aeabi_f2d>
 801e71a:	4b4d      	ldr	r3, [pc, #308]	; (801e850 <_Z15ei_printf_floatf+0x218>)
 801e71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e720:	2401      	movs	r4, #1
 801e722:	f7e2 fa23 	bl	8000b6c <__aeabi_dcmpgt>
 801e726:	4603      	mov	r3, r0
 801e728:	2b00      	cmp	r3, #0
 801e72a:	d101      	bne.n	801e730 <_Z15ei_printf_floatf+0xf8>
 801e72c:	2300      	movs	r3, #0
 801e72e:	461c      	mov	r4, r3
 801e730:	b2e3      	uxtb	r3, r4
 801e732:	f083 0301 	eor.w	r3, r3, #1
 801e736:	b2db      	uxtb	r3, r3
 801e738:	2b00      	cmp	r3, #0
 801e73a:	d002      	beq.n	801e742 <_Z15ei_printf_floatf+0x10a>
 801e73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e73e:	2b00      	cmp	r3, #0
 801e740:	db6e      	blt.n	801e820 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 801e742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e744:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 801e840 <_Z15ei_printf_floatf+0x208>
 801e748:	f000 f8ab 	bl	801e8a2 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 801e74c:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 801e750:	f04f 0200 	mov.w	r2, #0
 801e754:	f04f 0300 	mov.w	r3, #0
 801e758:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801e75c:	f7e2 fa06 	bl	8000b6c <__aeabi_dcmpgt>
 801e760:	4603      	mov	r3, r0
 801e762:	2b00      	cmp	r3, #0
 801e764:	d00b      	beq.n	801e77e <_Z15ei_printf_floatf+0x146>
 801e766:	ed97 0b04 	vldr	d0, [r7, #16]
 801e76a:	f7ff ff19 	bl	801e5a0 <_ZSt5isinfd>
 801e76e:	4603      	mov	r3, r0
 801e770:	f083 0301 	eor.w	r3, r3, #1
 801e774:	b2db      	uxtb	r3, r3
 801e776:	2b00      	cmp	r3, #0
 801e778:	d001      	beq.n	801e77e <_Z15ei_printf_floatf+0x146>
 801e77a:	2301      	movs	r3, #1
 801e77c:	e000      	b.n	801e780 <_Z15ei_printf_floatf+0x148>
 801e77e:	2300      	movs	r3, #0
 801e780:	2b00      	cmp	r3, #0
 801e782:	d03a      	beq.n	801e7fa <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 801e784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e786:	f7e1 ff09 	bl	800059c <__aeabi_f2d>
 801e78a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e78e:	f7e2 f887 	bl	80008a0 <__aeabi_ddiv>
 801e792:	4602      	mov	r2, r0
 801e794:	460b      	mov	r3, r1
 801e796:	ec43 2b17 	vmov	d7, r2, r3
 801e79a:	eeb0 0a47 	vmov.f32	s0, s14
 801e79e:	eef0 0a67 	vmov.f32	s1, s15
 801e7a2:	f00a fc99 	bl	80290d8 <floor>
 801e7a6:	ec53 2b10 	vmov	r2, r3, d0
 801e7aa:	4610      	mov	r0, r2
 801e7ac:	4619      	mov	r1, r3
 801e7ae:	f7e2 f9fd 	bl	8000bac <__aeabi_d2iz>
 801e7b2:	4603      	mov	r3, r0
 801e7b4:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 801e7b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e7b8:	f7e1 fef0 	bl	800059c <__aeabi_f2d>
 801e7bc:	4604      	mov	r4, r0
 801e7be:	460d      	mov	r5, r1
 801e7c0:	68f8      	ldr	r0, [r7, #12]
 801e7c2:	f7e1 fed9 	bl	8000578 <__aeabi_i2d>
 801e7c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e7ca:	f7e1 ff3f 	bl	800064c <__aeabi_dmul>
 801e7ce:	4602      	mov	r2, r0
 801e7d0:	460b      	mov	r3, r1
 801e7d2:	4620      	mov	r0, r4
 801e7d4:	4629      	mov	r1, r5
 801e7d6:	f7e1 fd81 	bl	80002dc <__aeabi_dsub>
 801e7da:	4602      	mov	r2, r0
 801e7dc:	460b      	mov	r3, r1
 801e7de:	4610      	mov	r0, r2
 801e7e0:	4619      	mov	r1, r3
 801e7e2:	f7e2 fa2b 	bl	8000c3c <__aeabi_d2f>
 801e7e6:	4603      	mov	r3, r0
 801e7e8:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 801e7ea:	68fb      	ldr	r3, [r7, #12]
 801e7ec:	b2da      	uxtb	r2, r3
 801e7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e7f0:	1c59      	adds	r1, r3, #1
 801e7f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 801e7f4:	3230      	adds	r2, #48	; 0x30
 801e7f6:	b2d2      	uxtb	r2, r2
 801e7f8:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 801e7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7fc:	2b00      	cmp	r3, #0
 801e7fe:	d10b      	bne.n	801e818 <_Z15ei_printf_floatf+0x1e0>
 801e800:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801e804:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e80c:	dd04      	ble.n	801e818 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 801e80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e810:	1c5a      	adds	r2, r3, #1
 801e812:	62fa      	str	r2, [r7, #44]	; 0x2c
 801e814:	222e      	movs	r2, #46	; 0x2e
 801e816:	701a      	strb	r2, [r3, #0]
            m--;
 801e818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e81a:	3b01      	subs	r3, #1
 801e81c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 801e81e:	e779      	b.n	801e714 <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 801e820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e822:	2200      	movs	r2, #0
 801e824:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 801e826:	69f9      	ldr	r1, [r7, #28]
 801e828:	480a      	ldr	r0, [pc, #40]	; (801e854 <_Z15ei_printf_floatf+0x21c>)
 801e82a:	f7e7 fa3d 	bl	8005ca8 <_Z9ei_printfPKcz>
 801e82e:	46c5      	mov	sp, r8
}
 801e830:	bf00      	nop
 801e832:	3730      	adds	r7, #48	; 0x30
 801e834:	46bd      	mov	sp, r7
 801e836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e83a:	bf00      	nop
 801e83c:	f3af 8000 	nop.w
 801e840:	00000000 	.word	0x00000000
 801e844:	40240000 	.word	0x40240000
 801e848:	20000070 	.word	0x20000070
 801e84c:	0802e1b8 	.word	0x0802e1b8
 801e850:	20000068 	.word	0x20000068
 801e854:	0802e1bc 	.word	0x0802e1bc

0801e858 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 801e858:	b580      	push	{r7, lr}
 801e85a:	b082      	sub	sp, #8
 801e85c:	af00      	add	r7, sp, #0
 801e85e:	6078      	str	r0, [r7, #4]
    return malloc(size);
 801e860:	6878      	ldr	r0, [r7, #4]
 801e862:	f00d fd05 	bl	802c270 <malloc>
 801e866:	4603      	mov	r3, r0
}
 801e868:	4618      	mov	r0, r3
 801e86a:	3708      	adds	r7, #8
 801e86c:	46bd      	mov	sp, r7
 801e86e:	bd80      	pop	{r7, pc}

0801e870 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 801e870:	b580      	push	{r7, lr}
 801e872:	b082      	sub	sp, #8
 801e874:	af00      	add	r7, sp, #0
 801e876:	6078      	str	r0, [r7, #4]
 801e878:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 801e87a:	6839      	ldr	r1, [r7, #0]
 801e87c:	6878      	ldr	r0, [r7, #4]
 801e87e:	f00d fcaf 	bl	802c1e0 <calloc>
 801e882:	4603      	mov	r3, r0
}
 801e884:	4618      	mov	r0, r3
 801e886:	3708      	adds	r7, #8
 801e888:	46bd      	mov	sp, r7
 801e88a:	bd80      	pop	{r7, pc}

0801e88c <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 801e88c:	b580      	push	{r7, lr}
 801e88e:	b082      	sub	sp, #8
 801e890:	af00      	add	r7, sp, #0
 801e892:	6078      	str	r0, [r7, #4]
    free(ptr);
 801e894:	6878      	ldr	r0, [r7, #4]
 801e896:	f00d fcf3 	bl	802c280 <free>
}
 801e89a:	bf00      	nop
 801e89c:	3708      	adds	r7, #8
 801e89e:	46bd      	mov	sp, r7
 801e8a0:	bd80      	pop	{r7, pc}

0801e8a2 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 801e8a2:	b580      	push	{r7, lr}
 801e8a4:	b084      	sub	sp, #16
 801e8a6:	af00      	add	r7, sp, #0
 801e8a8:	ed87 0b02 	vstr	d0, [r7, #8]
 801e8ac:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 801e8ae:	6878      	ldr	r0, [r7, #4]
 801e8b0:	f7e1 fe62 	bl	8000578 <__aeabi_i2d>
 801e8b4:	4602      	mov	r2, r0
 801e8b6:	460b      	mov	r3, r1
 801e8b8:	ec43 2b11 	vmov	d1, r2, r3
 801e8bc:	ed97 0b02 	vldr	d0, [r7, #8]
 801e8c0:	f00a fe98 	bl	80295f4 <pow>
 801e8c4:	eeb0 7a40 	vmov.f32	s14, s0
 801e8c8:	eef0 7a60 	vmov.f32	s15, s1
    }
 801e8cc:	eeb0 0a47 	vmov.f32	s0, s14
 801e8d0:	eef0 0a67 	vmov.f32	s1, s15
 801e8d4:	3710      	adds	r7, #16
 801e8d6:	46bd      	mov	sp, r7
 801e8d8:	bd80      	pop	{r7, pc}
	...

0801e8dc <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 801e8dc:	b480      	push	{r7}
 801e8de:	b083      	sub	sp, #12
 801e8e0:	af00      	add	r7, sp, #0
 801e8e2:	4603      	mov	r3, r0
 801e8e4:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 801e8e6:	79fb      	ldrb	r3, [r7, #7]
 801e8e8:	2b10      	cmp	r3, #16
 801e8ea:	d847      	bhi.n	801e97c <TfLiteTypeGetName+0xa0>
 801e8ec:	a201      	add	r2, pc, #4	; (adr r2, 801e8f4 <TfLiteTypeGetName+0x18>)
 801e8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e8f2:	bf00      	nop
 801e8f4:	0801e939 	.word	0x0801e939
 801e8f8:	0801e93d 	.word	0x0801e93d
 801e8fc:	0801e945 	.word	0x0801e945
 801e900:	0801e94d 	.word	0x0801e94d
 801e904:	0801e955 	.word	0x0801e955
 801e908:	0801e969 	.word	0x0801e969
 801e90c:	0801e95d 	.word	0x0801e95d
 801e910:	0801e941 	.word	0x0801e941
 801e914:	0801e961 	.word	0x0801e961
 801e918:	0801e951 	.word	0x0801e951
 801e91c:	0801e96d 	.word	0x0801e96d
 801e920:	0801e971 	.word	0x0801e971
 801e924:	0801e965 	.word	0x0801e965
 801e928:	0801e959 	.word	0x0801e959
 801e92c:	0801e975 	.word	0x0801e975
 801e930:	0801e979 	.word	0x0801e979
 801e934:	0801e949 	.word	0x0801e949
    case kTfLiteNoType:
      return "NOTYPE";
 801e938:	4b14      	ldr	r3, [pc, #80]	; (801e98c <TfLiteTypeGetName+0xb0>)
 801e93a:	e020      	b.n	801e97e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 801e93c:	4b14      	ldr	r3, [pc, #80]	; (801e990 <TfLiteTypeGetName+0xb4>)
 801e93e:	e01e      	b.n	801e97e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 801e940:	4b14      	ldr	r3, [pc, #80]	; (801e994 <TfLiteTypeGetName+0xb8>)
 801e942:	e01c      	b.n	801e97e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 801e944:	4b14      	ldr	r3, [pc, #80]	; (801e998 <TfLiteTypeGetName+0xbc>)
 801e946:	e01a      	b.n	801e97e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 801e948:	4b14      	ldr	r3, [pc, #80]	; (801e99c <TfLiteTypeGetName+0xc0>)
 801e94a:	e018      	b.n	801e97e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 801e94c:	4b14      	ldr	r3, [pc, #80]	; (801e9a0 <TfLiteTypeGetName+0xc4>)
 801e94e:	e016      	b.n	801e97e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 801e950:	4b14      	ldr	r3, [pc, #80]	; (801e9a4 <TfLiteTypeGetName+0xc8>)
 801e952:	e014      	b.n	801e97e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 801e954:	4b14      	ldr	r3, [pc, #80]	; (801e9a8 <TfLiteTypeGetName+0xcc>)
 801e956:	e012      	b.n	801e97e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 801e958:	4b14      	ldr	r3, [pc, #80]	; (801e9ac <TfLiteTypeGetName+0xd0>)
 801e95a:	e010      	b.n	801e97e <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 801e95c:	4b14      	ldr	r3, [pc, #80]	; (801e9b0 <TfLiteTypeGetName+0xd4>)
 801e95e:	e00e      	b.n	801e97e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 801e960:	4b14      	ldr	r3, [pc, #80]	; (801e9b4 <TfLiteTypeGetName+0xd8>)
 801e962:	e00c      	b.n	801e97e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 801e964:	4b14      	ldr	r3, [pc, #80]	; (801e9b8 <TfLiteTypeGetName+0xdc>)
 801e966:	e00a      	b.n	801e97e <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 801e968:	4b14      	ldr	r3, [pc, #80]	; (801e9bc <TfLiteTypeGetName+0xe0>)
 801e96a:	e008      	b.n	801e97e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 801e96c:	4b14      	ldr	r3, [pc, #80]	; (801e9c0 <TfLiteTypeGetName+0xe4>)
 801e96e:	e006      	b.n	801e97e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 801e970:	4b14      	ldr	r3, [pc, #80]	; (801e9c4 <TfLiteTypeGetName+0xe8>)
 801e972:	e004      	b.n	801e97e <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 801e974:	4b14      	ldr	r3, [pc, #80]	; (801e9c8 <TfLiteTypeGetName+0xec>)
 801e976:	e002      	b.n	801e97e <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 801e978:	4b14      	ldr	r3, [pc, #80]	; (801e9cc <TfLiteTypeGetName+0xf0>)
 801e97a:	e000      	b.n	801e97e <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 801e97c:	4b14      	ldr	r3, [pc, #80]	; (801e9d0 <TfLiteTypeGetName+0xf4>)
}
 801e97e:	4618      	mov	r0, r3
 801e980:	370c      	adds	r7, #12
 801e982:	46bd      	mov	sp, r7
 801e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e988:	4770      	bx	lr
 801e98a:	bf00      	nop
 801e98c:	0802e1c0 	.word	0x0802e1c0
 801e990:	0802e1c8 	.word	0x0802e1c8
 801e994:	0802e1d0 	.word	0x0802e1d0
 801e998:	0802e1d8 	.word	0x0802e1d8
 801e99c:	0802e1e0 	.word	0x0802e1e0
 801e9a0:	0802e1e8 	.word	0x0802e1e8
 801e9a4:	0802e1f0 	.word	0x0802e1f0
 801e9a8:	0802e1f8 	.word	0x0802e1f8
 801e9ac:	0802e200 	.word	0x0802e200
 801e9b0:	0802e208 	.word	0x0802e208
 801e9b4:	0802e210 	.word	0x0802e210
 801e9b8:	0802e21c 	.word	0x0802e21c
 801e9bc:	0802e228 	.word	0x0802e228
 801e9c0:	0802e230 	.word	0x0802e230
 801e9c4:	0802e238 	.word	0x0802e238
 801e9c8:	0802e240 	.word	0x0802e240
 801e9cc:	0802e24c 	.word	0x0802e24c
 801e9d0:	0802e254 	.word	0x0802e254

0801e9d4 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 801e9d4:	b480      	push	{r7}
 801e9d6:	af00      	add	r7, sp, #0
 801e9d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801e9dc:	4618      	mov	r0, r3
 801e9de:	46bd      	mov	sp, r7
 801e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9e4:	4770      	bx	lr
	...

0801e9e8 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 801e9e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e9ec:	b088      	sub	sp, #32
 801e9ee:	af00      	add	r7, sp, #0
 801e9f0:	ed87 0b02 	vstr	d0, [r7, #8]
 801e9f4:	6078      	str	r0, [r7, #4]
 801e9f6:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 801e9f8:	f04f 0200 	mov.w	r2, #0
 801e9fc:	f04f 0300 	mov.w	r3, #0
 801ea00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801ea04:	f7e2 f88a 	bl	8000b1c <__aeabi_dcmpeq>
 801ea08:	4603      	mov	r3, r0
 801ea0a:	2b00      	cmp	r3, #0
 801ea0c:	d006      	beq.n	801ea1c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	2200      	movs	r2, #0
 801ea12:	601a      	str	r2, [r3, #0]
    *shift = 0;
 801ea14:	683b      	ldr	r3, [r7, #0]
 801ea16:	2200      	movs	r2, #0
 801ea18:	601a      	str	r2, [r3, #0]
    return;
 801ea1a:	e068      	b.n	801eaee <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 801ea1c:	6838      	ldr	r0, [r7, #0]
 801ea1e:	ed97 0b02 	vldr	d0, [r7, #8]
 801ea22:	f00a fbd9 	bl	80291d8 <frexp>
 801ea26:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 801ea2a:	f04f 0200 	mov.w	r2, #0
 801ea2e:	4b32      	ldr	r3, [pc, #200]	; (801eaf8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 801ea30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801ea34:	f7e1 fe0a 	bl	800064c <__aeabi_dmul>
 801ea38:	4602      	mov	r2, r0
 801ea3a:	460b      	mov	r3, r1
 801ea3c:	ec43 2b17 	vmov	d7, r2, r3
 801ea40:	eeb0 0a47 	vmov.f32	s0, s14
 801ea44:	eef0 0a67 	vmov.f32	s1, s15
 801ea48:	f000 f97b 	bl	801ed42 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 801ea4c:	ec53 2b10 	vmov	r2, r3, d0
 801ea50:	4610      	mov	r0, r2
 801ea52:	4619      	mov	r1, r3
 801ea54:	f7e2 f9aa 	bl	8000dac <__aeabi_d2lz>
 801ea58:	4602      	mov	r2, r0
 801ea5a:	460b      	mov	r3, r1
 801ea5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 801ea60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ea64:	4925      	ldr	r1, [pc, #148]	; (801eafc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 801ea66:	428a      	cmp	r2, r1
 801ea68:	f173 0300 	sbcs.w	r3, r3, #0
 801ea6c:	db01      	blt.n	801ea72 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 801ea6e:	f00d fb91 	bl	802c194 <abort>
  if (q_fixed == (1ll << 31)) {
 801ea72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ea76:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 801ea7a:	430b      	orrs	r3, r1
 801ea7c:	d118      	bne.n	801eab0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 801ea7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ea82:	0fd9      	lsrs	r1, r3, #31
 801ea84:	2000      	movs	r0, #0
 801ea86:	468a      	mov	sl, r1
 801ea88:	4683      	mov	fp, r0
 801ea8a:	eb1a 0402 	adds.w	r4, sl, r2
 801ea8e:	eb4b 0503 	adc.w	r5, fp, r3
 801ea92:	f04f 0200 	mov.w	r2, #0
 801ea96:	f04f 0300 	mov.w	r3, #0
 801ea9a:	0862      	lsrs	r2, r4, #1
 801ea9c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 801eaa0:	106b      	asrs	r3, r5, #1
 801eaa2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 801eaa6:	683b      	ldr	r3, [r7, #0]
 801eaa8:	681b      	ldr	r3, [r3, #0]
 801eaaa:	1c5a      	adds	r2, r3, #1
 801eaac:	683b      	ldr	r3, [r7, #0]
 801eaae:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 801eab0:	f7ff ff90 	bl	801e9d4 <_ZNSt14numeric_limitsIlE3maxEv>
 801eab4:	4603      	mov	r3, r0
 801eab6:	17da      	asrs	r2, r3, #31
 801eab8:	4698      	mov	r8, r3
 801eaba:	4691      	mov	r9, r2
 801eabc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801eac0:	4590      	cmp	r8, r2
 801eac2:	eb79 0303 	sbcs.w	r3, r9, r3
 801eac6:	da01      	bge.n	801eacc <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 801eac8:	f00d fb64 	bl	802c194 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 801eacc:	683b      	ldr	r3, [r7, #0]
 801eace:	681b      	ldr	r3, [r3, #0]
 801ead0:	f113 0f1f 	cmn.w	r3, #31
 801ead4:	da08      	bge.n	801eae8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 801ead6:	683b      	ldr	r3, [r7, #0]
 801ead8:	2200      	movs	r2, #0
 801eada:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 801eadc:	f04f 0200 	mov.w	r2, #0
 801eae0:	f04f 0300 	mov.w	r3, #0
 801eae4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 801eae8:	69ba      	ldr	r2, [r7, #24]
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	601a      	str	r2, [r3, #0]
}
 801eaee:	3720      	adds	r7, #32
 801eaf0:	46bd      	mov	sp, r7
 801eaf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801eaf6:	bf00      	nop
 801eaf8:	41e00000 	.word	0x41e00000
 801eafc:	80000001 	.word	0x80000001

0801eb00 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 801eb00:	b580      	push	{r7, lr}
 801eb02:	b084      	sub	sp, #16
 801eb04:	af00      	add	r7, sp, #0
 801eb06:	ed87 0b02 	vstr	d0, [r7, #8]
 801eb0a:	6078      	str	r0, [r7, #4]
 801eb0c:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 801eb0e:	f04f 0200 	mov.w	r2, #0
 801eb12:	4b0d      	ldr	r3, [pc, #52]	; (801eb48 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 801eb14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801eb18:	f7e2 f828 	bl	8000b6c <__aeabi_dcmpgt>
 801eb1c:	4603      	mov	r3, r0
 801eb1e:	2b00      	cmp	r3, #0
 801eb20:	d101      	bne.n	801eb26 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 801eb22:	f00d fb37 	bl	802c194 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 801eb26:	6839      	ldr	r1, [r7, #0]
 801eb28:	6878      	ldr	r0, [r7, #4]
 801eb2a:	ed97 0b02 	vldr	d0, [r7, #8]
 801eb2e:	f7ff ff5b 	bl	801e9e8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 801eb32:	683b      	ldr	r3, [r7, #0]
 801eb34:	681b      	ldr	r3, [r3, #0]
 801eb36:	2b00      	cmp	r3, #0
 801eb38:	da01      	bge.n	801eb3e <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 801eb3a:	f00d fb2b 	bl	802c194 <abort>
}
 801eb3e:	bf00      	nop
 801eb40:	3710      	adds	r7, #16
 801eb42:	46bd      	mov	sp, r7
 801eb44:	bd80      	pop	{r7, pc}
 801eb46:	bf00      	nop
 801eb48:	3ff00000 	.word	0x3ff00000

0801eb4c <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801eb4c:	b580      	push	{r7, lr}
 801eb4e:	b082      	sub	sp, #8
 801eb50:	af00      	add	r7, sp, #0
 801eb52:	6078      	str	r0, [r7, #4]
 801eb54:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801eb56:	683b      	ldr	r3, [r7, #0]
 801eb58:	e9d3 0100 	ldrd	r0, r1, [r3]
 801eb5c:	687b      	ldr	r3, [r7, #4]
 801eb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb62:	f7e1 ffe5 	bl	8000b30 <__aeabi_dcmplt>
 801eb66:	4603      	mov	r3, r0
 801eb68:	2b00      	cmp	r3, #0
 801eb6a:	d001      	beq.n	801eb70 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 801eb6c:	683b      	ldr	r3, [r7, #0]
 801eb6e:	e000      	b.n	801eb72 <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 801eb70:	687b      	ldr	r3, [r7, #4]
    }
 801eb72:	4618      	mov	r0, r3
 801eb74:	3708      	adds	r7, #8
 801eb76:	46bd      	mov	sp, r7
 801eb78:	bd80      	pop	{r7, pc}
 801eb7a:	0000      	movs	r0, r0
 801eb7c:	0000      	movs	r0, r0
	...

0801eb80 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 801eb80:	b5b0      	push	{r4, r5, r7, lr}
 801eb82:	b08e      	sub	sp, #56	; 0x38
 801eb84:	af00      	add	r7, sp, #0
 801eb86:	ed87 0b06 	vstr	d0, [r7, #24]
 801eb8a:	ed87 1b04 	vstr	d1, [r7, #16]
 801eb8e:	60f8      	str	r0, [r7, #12]
 801eb90:	60b9      	str	r1, [r7, #8]
 801eb92:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 801eb94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801eb98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801eb9c:	f7e1 fd56 	bl	800064c <__aeabi_dmul>
 801eba0:	4602      	mov	r2, r0
 801eba2:	460b      	mov	r3, r1
 801eba4:	4614      	mov	r4, r2
 801eba6:	461d      	mov	r5, r3
 801eba8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801ebac:	68fb      	ldr	r3, [r7, #12]
 801ebae:	fa22 f303 	lsr.w	r3, r2, r3
 801ebb2:	4618      	mov	r0, r3
 801ebb4:	f7e1 fce0 	bl	8000578 <__aeabi_i2d>
 801ebb8:	4602      	mov	r2, r0
 801ebba:	460b      	mov	r3, r1
 801ebbc:	4620      	mov	r0, r4
 801ebbe:	4629      	mov	r1, r5
 801ebc0:	f7e1 fd44 	bl	800064c <__aeabi_dmul>
 801ebc4:	4602      	mov	r2, r0
 801ebc6:	460b      	mov	r3, r1
 801ebc8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801ebcc:	a30e      	add	r3, pc, #56	; (adr r3, 801ec08 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 801ebce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebd2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801ebd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801ebda:	f107 0320 	add.w	r3, r7, #32
 801ebde:	4611      	mov	r1, r2
 801ebe0:	4618      	mov	r0, r3
 801ebe2:	f7ff ffb3 	bl	801eb4c <_ZSt3minIdERKT_S2_S2_>
 801ebe6:	4603      	mov	r3, r0
 801ebe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 801ebf0:	6879      	ldr	r1, [r7, #4]
 801ebf2:	68b8      	ldr	r0, [r7, #8]
 801ebf4:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801ebf8:	f7ff ff82 	bl	801eb00 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 801ebfc:	bf00      	nop
 801ebfe:	3738      	adds	r7, #56	; 0x38
 801ec00:	46bd      	mov	sp, r7
 801ec02:	bdb0      	pop	{r4, r5, r7, pc}
 801ec04:	f3af 8000 	nop.w
 801ec08:	ffc00000 	.word	0xffc00000
 801ec0c:	41dfffff 	.word	0x41dfffff

0801ec10 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 801ec10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec14:	b087      	sub	sp, #28
 801ec16:	af00      	add	r7, sp, #0
 801ec18:	60f8      	str	r0, [r7, #12]
 801ec1a:	60b9      	str	r1, [r7, #8]
 801ec1c:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 801ec1e:	2201      	movs	r2, #1
 801ec20:	68fb      	ldr	r3, [r7, #12]
 801ec22:	fa02 f303 	lsl.w	r3, r2, r3
 801ec26:	3b01      	subs	r3, #1
 801ec28:	4618      	mov	r0, r3
 801ec2a:	f7e1 fca5 	bl	8000578 <__aeabi_i2d>
 801ec2e:	4682      	mov	sl, r0
 801ec30:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801ec32:	687a      	ldr	r2, [r7, #4]
 801ec34:	68fb      	ldr	r3, [r7, #12]
 801ec36:	1ad1      	subs	r1, r2, r3
 801ec38:	f04f 0201 	mov.w	r2, #1
 801ec3c:	f04f 0300 	mov.w	r3, #0
 801ec40:	f1a1 0620 	sub.w	r6, r1, #32
 801ec44:	f1c1 0020 	rsb	r0, r1, #32
 801ec48:	fa03 f901 	lsl.w	r9, r3, r1
 801ec4c:	fa02 f606 	lsl.w	r6, r2, r6
 801ec50:	ea49 0906 	orr.w	r9, r9, r6
 801ec54:	fa22 f000 	lsr.w	r0, r2, r0
 801ec58:	ea49 0900 	orr.w	r9, r9, r0
 801ec5c:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 801ec60:	4640      	mov	r0, r8
 801ec62:	4649      	mov	r1, r9
 801ec64:	f7e1 fcc4 	bl	80005f0 <__aeabi_l2d>
 801ec68:	4602      	mov	r2, r0
 801ec6a:	460b      	mov	r3, r1
 801ec6c:	4650      	mov	r0, sl
 801ec6e:	4659      	mov	r1, fp
 801ec70:	f7e1 fcec 	bl	800064c <__aeabi_dmul>
 801ec74:	4602      	mov	r2, r0
 801ec76:	460b      	mov	r3, r1
 801ec78:	4690      	mov	r8, r2
 801ec7a:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 801ec7c:	f04f 0201 	mov.w	r2, #1
 801ec80:	f04f 0300 	mov.w	r3, #0
 801ec84:	68b9      	ldr	r1, [r7, #8]
 801ec86:	f1a1 0620 	sub.w	r6, r1, #32
 801ec8a:	f1c1 0020 	rsb	r0, r1, #32
 801ec8e:	fa03 f501 	lsl.w	r5, r3, r1
 801ec92:	fa02 f606 	lsl.w	r6, r2, r6
 801ec96:	4335      	orrs	r5, r6
 801ec98:	fa22 f000 	lsr.w	r0, r2, r0
 801ec9c:	4305      	orrs	r5, r0
 801ec9e:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801eca2:	4620      	mov	r0, r4
 801eca4:	4629      	mov	r1, r5
 801eca6:	f7e1 fca3 	bl	80005f0 <__aeabi_l2d>
 801ecaa:	4602      	mov	r2, r0
 801ecac:	460b      	mov	r3, r1
  const double max_input_rescaled =
 801ecae:	4640      	mov	r0, r8
 801ecb0:	4649      	mov	r1, r9
 801ecb2:	f7e1 fdf5 	bl	80008a0 <__aeabi_ddiv>
 801ecb6:	4602      	mov	r2, r0
 801ecb8:	460b      	mov	r3, r1
 801ecba:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 801ecbe:	ed97 0b04 	vldr	d0, [r7, #16]
 801ecc2:	f00a fa09 	bl	80290d8 <floor>
 801ecc6:	ec53 2b10 	vmov	r2, r3, d0
 801ecca:	4610      	mov	r0, r2
 801eccc:	4619      	mov	r1, r3
 801ecce:	f7e1 ff6d 	bl	8000bac <__aeabi_d2iz>
 801ecd2:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 801ecd4:	4618      	mov	r0, r3
 801ecd6:	371c      	adds	r7, #28
 801ecd8:	46bd      	mov	sp, r7
 801ecda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ecde <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801ecde:	b480      	push	{r7}
 801ece0:	b083      	sub	sp, #12
 801ece2:	af00      	add	r7, sp, #0
 801ece4:	6078      	str	r0, [r7, #4]
 801ece6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801ece8:	683b      	ldr	r3, [r7, #0]
 801ecea:	ed93 7a00 	vldr	s14, [r3]
 801ecee:	687b      	ldr	r3, [r7, #4]
 801ecf0:	edd3 7a00 	vldr	s15, [r3]
 801ecf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ecf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ecfc:	d501      	bpl.n	801ed02 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 801ecfe:	683b      	ldr	r3, [r7, #0]
 801ed00:	e000      	b.n	801ed04 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 801ed02:	687b      	ldr	r3, [r7, #4]
    }
 801ed04:	4618      	mov	r0, r3
 801ed06:	370c      	adds	r7, #12
 801ed08:	46bd      	mov	sp, r7
 801ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed0e:	4770      	bx	lr

0801ed10 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801ed10:	b480      	push	{r7}
 801ed12:	b083      	sub	sp, #12
 801ed14:	af00      	add	r7, sp, #0
 801ed16:	6078      	str	r0, [r7, #4]
 801ed18:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801ed1a:	687b      	ldr	r3, [r7, #4]
 801ed1c:	ed93 7a00 	vldr	s14, [r3]
 801ed20:	683b      	ldr	r3, [r7, #0]
 801ed22:	edd3 7a00 	vldr	s15, [r3]
 801ed26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ed2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed2e:	d501      	bpl.n	801ed34 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 801ed30:	683b      	ldr	r3, [r7, #0]
 801ed32:	e000      	b.n	801ed36 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 801ed34:	687b      	ldr	r3, [r7, #4]
    }
 801ed36:	4618      	mov	r0, r3
 801ed38:	370c      	adds	r7, #12
 801ed3a:	46bd      	mov	sp, r7
 801ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed40:	4770      	bx	lr

0801ed42 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 801ed42:	b580      	push	{r7, lr}
 801ed44:	b082      	sub	sp, #8
 801ed46:	af00      	add	r7, sp, #0
 801ed48:	ed87 0b00 	vstr	d0, [r7]
 801ed4c:	ed97 0b00 	vldr	d0, [r7]
 801ed50:	f00a fa7a 	bl	8029248 <round>
 801ed54:	eeb0 7a40 	vmov.f32	s14, s0
 801ed58:	eef0 7a60 	vmov.f32	s15, s1
 801ed5c:	eeb0 0a47 	vmov.f32	s0, s14
 801ed60:	eef0 0a67 	vmov.f32	s1, s15
 801ed64:	3708      	adds	r7, #8
 801ed66:	46bd      	mov	sp, r7
 801ed68:	bd80      	pop	{r7, pc}

0801ed6a <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 801ed6a:	b580      	push	{r7, lr}
 801ed6c:	b082      	sub	sp, #8
 801ed6e:	af00      	add	r7, sp, #0
 801ed70:	ed87 0a01 	vstr	s0, [r7, #4]
 801ed74:	ed97 0a01 	vldr	s0, [r7, #4]
 801ed78:	f7e2 fb7a 	bl	8001470 <_ZSt5roundf>
 801ed7c:	eef0 7a40 	vmov.f32	s15, s0
 801ed80:	eeb0 0a67 	vmov.f32	s0, s15
 801ed84:	3708      	adds	r7, #8
 801ed86:	46bd      	mov	sp, r7
 801ed88:	bd80      	pop	{r7, pc}

0801ed8a <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 801ed8a:	b480      	push	{r7}
 801ed8c:	af00      	add	r7, sp, #0
 801ed8e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 801ed92:	4618      	mov	r0, r3
 801ed94:	46bd      	mov	sp, r7
 801ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed9a:	4770      	bx	lr

0801ed9c <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 801ed9c:	b480      	push	{r7}
 801ed9e:	af00      	add	r7, sp, #0
 801eda0:	237f      	movs	r3, #127	; 0x7f
 801eda2:	4618      	mov	r0, r3
 801eda4:	46bd      	mov	sp, r7
 801eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edaa:	4770      	bx	lr

0801edac <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 801edac:	b480      	push	{r7}
 801edae:	af00      	add	r7, sp, #0
 801edb0:	2300      	movs	r3, #0
 801edb2:	4618      	mov	r0, r3
 801edb4:	46bd      	mov	sp, r7
 801edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edba:	4770      	bx	lr

0801edbc <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 801edbc:	b480      	push	{r7}
 801edbe:	af00      	add	r7, sp, #0
 801edc0:	23ff      	movs	r3, #255	; 0xff
 801edc2:	4618      	mov	r0, r3
 801edc4:	46bd      	mov	sp, r7
 801edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edca:	4770      	bx	lr

0801edcc <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 801edcc:	b480      	push	{r7}
 801edce:	af00      	add	r7, sp, #0
 801edd0:	4b02      	ldr	r3, [pc, #8]	; (801eddc <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 801edd2:	4618      	mov	r0, r3
 801edd4:	46bd      	mov	sp, r7
 801edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edda:	4770      	bx	lr
 801eddc:	ffff8000 	.word	0xffff8000

0801ede0 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 801ede0:	b480      	push	{r7}
 801ede2:	af00      	add	r7, sp, #0
 801ede4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ede8:	4618      	mov	r0, r3
 801edea:	46bd      	mov	sp, r7
 801edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edf0:	4770      	bx	lr

0801edf2 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 801edf2:	b480      	push	{r7}
 801edf4:	b083      	sub	sp, #12
 801edf6:	af00      	add	r7, sp, #0
 801edf8:	6078      	str	r0, [r7, #4]
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	689b      	ldr	r3, [r3, #8]
 801edfe:	681b      	ldr	r3, [r3, #0]
 801ee00:	4618      	mov	r0, r3
 801ee02:	370c      	adds	r7, #12
 801ee04:	46bd      	mov	sp, r7
 801ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee0a:	4770      	bx	lr

0801ee0c <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 801ee0c:	b480      	push	{r7}
 801ee0e:	b083      	sub	sp, #12
 801ee10:	af00      	add	r7, sp, #0
 801ee12:	6078      	str	r0, [r7, #4]
 801ee14:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 801ee16:	687b      	ldr	r3, [r7, #4]
 801ee18:	689a      	ldr	r2, [r3, #8]
 801ee1a:	683b      	ldr	r3, [r7, #0]
 801ee1c:	009b      	lsls	r3, r3, #2
 801ee1e:	4413      	add	r3, r2
 801ee20:	685b      	ldr	r3, [r3, #4]
}
 801ee22:	4618      	mov	r0, r3
 801ee24:	370c      	adds	r7, #12
 801ee26:	46bd      	mov	sp, r7
 801ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee2c:	4770      	bx	lr

0801ee2e <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
 801ee2e:	b4b0      	push	{r4, r5, r7}
 801ee30:	b087      	sub	sp, #28
 801ee32:	af00      	add	r7, sp, #0
 801ee34:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 801ee36:	f04f 0001 	mov.w	r0, #1
 801ee3a:	f04f 0100 	mov.w	r1, #0
 801ee3e:	e9c7 0104 	strd	r0, r1, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 801ee42:	2100      	movs	r1, #0
 801ee44:	60f9      	str	r1, [r7, #12]
 801ee46:	6879      	ldr	r1, [r7, #4]
 801ee48:	6809      	ldr	r1, [r1, #0]
 801ee4a:	68f8      	ldr	r0, [r7, #12]
 801ee4c:	4288      	cmp	r0, r1
 801ee4e:	da1b      	bge.n	801ee88 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 801ee50:	6878      	ldr	r0, [r7, #4]
 801ee52:	68f9      	ldr	r1, [r7, #12]
 801ee54:	0089      	lsls	r1, r1, #2
 801ee56:	4401      	add	r1, r0
 801ee58:	6849      	ldr	r1, [r1, #4]
 801ee5a:	17c8      	asrs	r0, r1, #31
 801ee5c:	460c      	mov	r4, r1
 801ee5e:	4605      	mov	r5, r0
 801ee60:	6979      	ldr	r1, [r7, #20]
 801ee62:	fb04 f001 	mul.w	r0, r4, r1
 801ee66:	6939      	ldr	r1, [r7, #16]
 801ee68:	fb05 f101 	mul.w	r1, r5, r1
 801ee6c:	4401      	add	r1, r0
 801ee6e:	6938      	ldr	r0, [r7, #16]
 801ee70:	fba0 2304 	umull	r2, r3, r0, r4
 801ee74:	4419      	add	r1, r3
 801ee76:	460b      	mov	r3, r1
 801ee78:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801ee7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 801ee80:	68f9      	ldr	r1, [r7, #12]
 801ee82:	3101      	adds	r1, #1
 801ee84:	60f9      	str	r1, [r7, #12]
 801ee86:	e7de      	b.n	801ee46 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 801ee88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 801ee8c:	4610      	mov	r0, r2
 801ee8e:	4619      	mov	r1, r3
 801ee90:	371c      	adds	r7, #28
 801ee92:	46bd      	mov	sp, r7
 801ee94:	bcb0      	pop	{r4, r5, r7}
 801ee96:	4770      	bx	lr

0801ee98 <_ZN6tflite11NumElementsEPK12TfLiteTensor>:

inline int64_t NumElements(const TfLiteTensor* t) {
 801ee98:	b580      	push	{r7, lr}
 801ee9a:	b082      	sub	sp, #8
 801ee9c:	af00      	add	r7, sp, #0
 801ee9e:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 801eea0:	687b      	ldr	r3, [r7, #4]
 801eea2:	689b      	ldr	r3, [r3, #8]
 801eea4:	4618      	mov	r0, r3
 801eea6:	f7ff ffc2 	bl	801ee2e <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 801eeaa:	4602      	mov	r2, r0
 801eeac:	460b      	mov	r3, r1
}
 801eeae:	4610      	mov	r0, r2
 801eeb0:	4619      	mov	r1, r3
 801eeb2:	3708      	adds	r7, #8
 801eeb4:	46bd      	mov	sp, r7
 801eeb6:	bd80      	pop	{r7, pc}

0801eeb8 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 801eeb8:	b480      	push	{r7}
 801eeba:	b083      	sub	sp, #12
 801eebc:	af00      	add	r7, sp, #0
 801eebe:	ed87 0b00 	vstr	d0, [r7]
 801eec2:	683a      	ldr	r2, [r7, #0]
 801eec4:	6879      	ldr	r1, [r7, #4]
 801eec6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801eeca:	ec43 2b17 	vmov	d7, r2, r3
 801eece:	eeb0 0a47 	vmov.f32	s0, s14
 801eed2:	eef0 0a67 	vmov.f32	s1, s15
 801eed6:	370c      	adds	r7, #12
 801eed8:	46bd      	mov	sp, r7
 801eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eede:	4770      	bx	lr

0801eee0 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 801eee0:	b580      	push	{r7, lr}
 801eee2:	b082      	sub	sp, #8
 801eee4:	af00      	add	r7, sp, #0
 801eee6:	6078      	str	r0, [r7, #4]
 801eee8:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 801eeea:	687b      	ldr	r3, [r7, #4]
 801eeec:	689b      	ldr	r3, [r3, #8]
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	d005      	beq.n	801eefe <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 801eef2:	687b      	ldr	r3, [r7, #4]
 801eef4:	689a      	ldr	r2, [r3, #8]
 801eef6:	683b      	ldr	r3, [r7, #0]
 801eef8:	019b      	lsls	r3, r3, #6
 801eefa:	4413      	add	r3, r2
 801eefc:	e006      	b.n	801ef0c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 801eefe:	687b      	ldr	r3, [r7, #4]
 801ef00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ef02:	6839      	ldr	r1, [r7, #0]
 801ef04:	6878      	ldr	r0, [r7, #4]
 801ef06:	4798      	blx	r3
 801ef08:	4603      	mov	r3, r0
 801ef0a:	bf00      	nop
  }
}
 801ef0c:	4618      	mov	r0, r3
 801ef0e:	3708      	adds	r7, #8
 801ef10:	46bd      	mov	sp, r7
 801ef12:	bd80      	pop	{r7, pc}

0801ef14 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 801ef14:	b480      	push	{r7}
 801ef16:	b087      	sub	sp, #28
 801ef18:	af00      	add	r7, sp, #0
 801ef1a:	60f8      	str	r0, [r7, #12]
 801ef1c:	60b9      	str	r1, [r7, #8]
 801ef1e:	607a      	str	r2, [r7, #4]
 801ef20:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 801ef22:	68bb      	ldr	r3, [r7, #8]
 801ef24:	2b00      	cmp	r3, #0
 801ef26:	db0f      	blt.n	801ef48 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 801ef28:	68ba      	ldr	r2, [r7, #8]
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	429a      	cmp	r2, r3
 801ef2e:	da0b      	bge.n	801ef48 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 801ef30:	68bb      	ldr	r3, [r7, #8]
 801ef32:	009b      	lsls	r3, r3, #2
 801ef34:	683a      	ldr	r2, [r7, #0]
 801ef36:	4413      	add	r3, r2
 801ef38:	681b      	ldr	r3, [r3, #0]
 801ef3a:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 801ef3c:	697b      	ldr	r3, [r7, #20]
 801ef3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ef42:	d001      	beq.n	801ef48 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 801ef44:	697b      	ldr	r3, [r7, #20]
 801ef46:	e001      	b.n	801ef4c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 801ef48:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ef4c:	4618      	mov	r0, r3
 801ef4e:	371c      	adds	r7, #28
 801ef50:	46bd      	mov	sp, r7
 801ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef56:	4770      	bx	lr

0801ef58 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 801ef58:	b580      	push	{r7, lr}
 801ef5a:	b086      	sub	sp, #24
 801ef5c:	af00      	add	r7, sp, #0
 801ef5e:	60f8      	str	r0, [r7, #12]
 801ef60:	60b9      	str	r1, [r7, #8]
 801ef62:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 801ef64:	68bb      	ldr	r3, [r7, #8]
 801ef66:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 801ef68:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 801ef6a:	68bb      	ldr	r3, [r7, #8]
 801ef6c:	681b      	ldr	r3, [r3, #0]
 801ef6e:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801ef70:	6879      	ldr	r1, [r7, #4]
 801ef72:	68f8      	ldr	r0, [r7, #12]
 801ef74:	f7ff ffce 	bl	801ef14 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801ef78:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801ef7a:	697b      	ldr	r3, [r7, #20]
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	da01      	bge.n	801ef84 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 801ef80:	2300      	movs	r3, #0
 801ef82:	e005      	b.n	801ef90 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 801ef84:	6979      	ldr	r1, [r7, #20]
 801ef86:	68f8      	ldr	r0, [r7, #12]
 801ef88:	f7ff ffaa 	bl	801eee0 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 801ef8c:	4603      	mov	r3, r0
 801ef8e:	bf00      	nop
}
 801ef90:	4618      	mov	r0, r3
 801ef92:	3718      	adds	r7, #24
 801ef94:	46bd      	mov	sp, r7
 801ef96:	bd80      	pop	{r7, pc}

0801ef98 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 801ef98:	b580      	push	{r7, lr}
 801ef9a:	b084      	sub	sp, #16
 801ef9c:	af00      	add	r7, sp, #0
 801ef9e:	60f8      	str	r0, [r7, #12]
 801efa0:	60b9      	str	r1, [r7, #8]
 801efa2:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 801efa4:	687a      	ldr	r2, [r7, #4]
 801efa6:	68b9      	ldr	r1, [r7, #8]
 801efa8:	68f8      	ldr	r0, [r7, #12]
 801efaa:	f7ff ffd5 	bl	801ef58 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 801efae:	4603      	mov	r3, r0
}
 801efb0:	4618      	mov	r0, r3
 801efb2:	3710      	adds	r7, #16
 801efb4:	46bd      	mov	sp, r7
 801efb6:	bd80      	pop	{r7, pc}

0801efb8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 801efb8:	b580      	push	{r7, lr}
 801efba:	b086      	sub	sp, #24
 801efbc:	af00      	add	r7, sp, #0
 801efbe:	60f8      	str	r0, [r7, #12]
 801efc0:	60b9      	str	r1, [r7, #8]
 801efc2:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 801efc4:	68bb      	ldr	r3, [r7, #8]
 801efc6:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 801efc8:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 801efca:	68bb      	ldr	r3, [r7, #8]
 801efcc:	685b      	ldr	r3, [r3, #4]
 801efce:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801efd0:	6879      	ldr	r1, [r7, #4]
 801efd2:	68f8      	ldr	r0, [r7, #12]
 801efd4:	f7ff ff9e 	bl	801ef14 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801efd8:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801efda:	697b      	ldr	r3, [r7, #20]
 801efdc:	2b00      	cmp	r3, #0
 801efde:	da01      	bge.n	801efe4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 801efe0:	2300      	movs	r3, #0
 801efe2:	e005      	b.n	801eff0 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 801efe4:	6979      	ldr	r1, [r7, #20]
 801efe6:	68f8      	ldr	r0, [r7, #12]
 801efe8:	f7ff ff7a 	bl	801eee0 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 801efec:	4603      	mov	r3, r0
 801efee:	bf00      	nop
}
 801eff0:	4618      	mov	r0, r3
 801eff2:	3718      	adds	r7, #24
 801eff4:	46bd      	mov	sp, r7
 801eff6:	bd80      	pop	{r7, pc}

0801eff8 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 801eff8:	b580      	push	{r7, lr}
 801effa:	b084      	sub	sp, #16
 801effc:	af00      	add	r7, sp, #0
 801effe:	60f8      	str	r0, [r7, #12]
 801f000:	60b9      	str	r1, [r7, #8]
 801f002:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 801f004:	687a      	ldr	r2, [r7, #4]
 801f006:	68b9      	ldr	r1, [r7, #8]
 801f008:	68f8      	ldr	r0, [r7, #12]
 801f00a:	f7ff ffc5 	bl	801ef98 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801f00e:	4603      	mov	r3, r0
}
 801f010:	4618      	mov	r0, r3
 801f012:	3710      	adds	r7, #16
 801f014:	46bd      	mov	sp, r7
 801f016:	bd80      	pop	{r7, pc}

0801f018 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 801f018:	b5b0      	push	{r4, r5, r7, lr}
 801f01a:	b09c      	sub	sp, #112	; 0x70
 801f01c:	af04      	add	r7, sp, #16
 801f01e:	60f8      	str	r0, [r7, #12]
 801f020:	60b9      	str	r1, [r7, #8]
 801f022:	607a      	str	r2, [r7, #4]
 801f024:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 801f026:	68bb      	ldr	r3, [r7, #8]
 801f028:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f02c:	2b01      	cmp	r3, #1
 801f02e:	d013      	beq.n	801f058 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 801f030:	68fb      	ldr	r3, [r7, #12]
 801f032:	695c      	ldr	r4, [r3, #20]
 801f034:	68bb      	ldr	r3, [r7, #8]
 801f036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f03a:	461a      	mov	r2, r3
 801f03c:	2301      	movs	r3, #1
 801f03e:	9303      	str	r3, [sp, #12]
 801f040:	9202      	str	r2, [sp, #8]
 801f042:	4b98      	ldr	r3, [pc, #608]	; (801f2a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 801f044:	9301      	str	r3, [sp, #4]
 801f046:	4b98      	ldr	r3, [pc, #608]	; (801f2a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 801f048:	9300      	str	r3, [sp, #0]
 801f04a:	23e0      	movs	r3, #224	; 0xe0
 801f04c:	4a97      	ldr	r2, [pc, #604]	; (801f2ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 801f04e:	4998      	ldr	r1, [pc, #608]	; (801f2b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 801f050:	68f8      	ldr	r0, [r7, #12]
 801f052:	47a0      	blx	r4
 801f054:	2301      	movs	r3, #1
 801f056:	e173      	b.n	801f340 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 801f058:	687b      	ldr	r3, [r7, #4]
 801f05a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f05e:	2b01      	cmp	r3, #1
 801f060:	d013      	beq.n	801f08a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 801f062:	68fb      	ldr	r3, [r7, #12]
 801f064:	695c      	ldr	r4, [r3, #20]
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f06c:	461a      	mov	r2, r3
 801f06e:	2301      	movs	r3, #1
 801f070:	9303      	str	r3, [sp, #12]
 801f072:	9202      	str	r2, [sp, #8]
 801f074:	4b8b      	ldr	r3, [pc, #556]	; (801f2a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 801f076:	9301      	str	r3, [sp, #4]
 801f078:	4b8e      	ldr	r3, [pc, #568]	; (801f2b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 801f07a:	9300      	str	r3, [sp, #0]
 801f07c:	23e2      	movs	r3, #226	; 0xe2
 801f07e:	4a8b      	ldr	r2, [pc, #556]	; (801f2ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 801f080:	498b      	ldr	r1, [pc, #556]	; (801f2b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 801f082:	68f8      	ldr	r0, [r7, #12]
 801f084:	47a0      	blx	r4
 801f086:	2301      	movs	r3, #1
 801f088:	e15a      	b.n	801f340 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f08e:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 801f090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f092:	2b00      	cmp	r3, #0
 801f094:	d10a      	bne.n	801f0ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 801f096:	68fb      	ldr	r3, [r7, #12]
 801f098:	695c      	ldr	r4, [r3, #20]
 801f09a:	4b87      	ldr	r3, [pc, #540]	; (801f2b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 801f09c:	9300      	str	r3, [sp, #0]
 801f09e:	23ed      	movs	r3, #237	; 0xed
 801f0a0:	4a82      	ldr	r2, [pc, #520]	; (801f2ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 801f0a2:	4986      	ldr	r1, [pc, #536]	; (801f2bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 801f0a4:	68f8      	ldr	r0, [r7, #12]
 801f0a6:	47a0      	blx	r4
 801f0a8:	2301      	movs	r3, #1
 801f0aa:	e149      	b.n	801f340 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 801f0ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f0ae:	681b      	ldr	r3, [r3, #0]
 801f0b0:	2b00      	cmp	r3, #0
 801f0b2:	d10a      	bne.n	801f0ca <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 801f0b4:	68fb      	ldr	r3, [r7, #12]
 801f0b6:	695c      	ldr	r4, [r3, #20]
 801f0b8:	4b81      	ldr	r3, [pc, #516]	; (801f2c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 801f0ba:	9300      	str	r3, [sp, #0]
 801f0bc:	23ee      	movs	r3, #238	; 0xee
 801f0be:	4a7b      	ldr	r2, [pc, #492]	; (801f2ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 801f0c0:	497e      	ldr	r1, [pc, #504]	; (801f2bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 801f0c2:	68f8      	ldr	r0, [r7, #12]
 801f0c4:	47a0      	blx	r4
 801f0c6:	2301      	movs	r3, #1
 801f0c8:	e13a      	b.n	801f340 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 801f0ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f0cc:	681b      	ldr	r3, [r3, #0]
 801f0ce:	681b      	ldr	r3, [r3, #0]
 801f0d0:	2b01      	cmp	r3, #1
 801f0d2:	bfcc      	ite	gt
 801f0d4:	2301      	movgt	r3, #1
 801f0d6:	2300      	movle	r3, #0
 801f0d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 801f0dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801f0e0:	2b00      	cmp	r3, #0
 801f0e2:	d067      	beq.n	801f1b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 801f0e4:	68bb      	ldr	r3, [r7, #8]
 801f0e6:	781b      	ldrb	r3, [r3, #0]
 801f0e8:	2b09      	cmp	r3, #9
 801f0ea:	d00e      	beq.n	801f10a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 801f0ec:	68bb      	ldr	r3, [r7, #8]
 801f0ee:	781b      	ldrb	r3, [r3, #0]
 801f0f0:	2b07      	cmp	r3, #7
 801f0f2:	d00a      	beq.n	801f10a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 801f0f4:	68fb      	ldr	r3, [r7, #12]
 801f0f6:	695c      	ldr	r4, [r3, #20]
 801f0f8:	4b72      	ldr	r3, [pc, #456]	; (801f2c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 801f0fa:	9300      	str	r3, [sp, #0]
 801f0fc:	23f2      	movs	r3, #242	; 0xf2
 801f0fe:	4a6b      	ldr	r2, [pc, #428]	; (801f2ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 801f100:	496e      	ldr	r1, [pc, #440]	; (801f2bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 801f102:	68f8      	ldr	r0, [r7, #12]
 801f104:	47a0      	blx	r4
 801f106:	2301      	movs	r3, #1
 801f108:	e11a      	b.n	801f340 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 801f10a:	687b      	ldr	r3, [r7, #4]
 801f10c:	781b      	ldrb	r3, [r3, #0]
 801f10e:	2b09      	cmp	r3, #9
 801f110:	d012      	beq.n	801f138 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 801f112:	68fb      	ldr	r3, [r7, #12]
 801f114:	695c      	ldr	r4, [r3, #20]
 801f116:	687b      	ldr	r3, [r7, #4]
 801f118:	781b      	ldrb	r3, [r3, #0]
 801f11a:	461a      	mov	r2, r3
 801f11c:	2309      	movs	r3, #9
 801f11e:	9303      	str	r3, [sp, #12]
 801f120:	9202      	str	r2, [sp, #8]
 801f122:	4b69      	ldr	r3, [pc, #420]	; (801f2c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 801f124:	9301      	str	r3, [sp, #4]
 801f126:	4b69      	ldr	r3, [pc, #420]	; (801f2cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 801f128:	9300      	str	r3, [sp, #0]
 801f12a:	23f4      	movs	r3, #244	; 0xf4
 801f12c:	4a5f      	ldr	r2, [pc, #380]	; (801f2ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 801f12e:	4960      	ldr	r1, [pc, #384]	; (801f2b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 801f130:	68f8      	ldr	r0, [r7, #12]
 801f132:	47a0      	blx	r4
 801f134:	2301      	movs	r3, #1
 801f136:	e103      	b.n	801f340 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 801f138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f13a:	681b      	ldr	r3, [r3, #0]
 801f13c:	681b      	ldr	r3, [r3, #0]
 801f13e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f142:	429a      	cmp	r2, r3
 801f144:	d013      	beq.n	801f16e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 801f146:	68fb      	ldr	r3, [r7, #12]
 801f148:	695c      	ldr	r4, [r3, #20]
 801f14a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f14c:	681b      	ldr	r3, [r3, #0]
 801f14e:	681b      	ldr	r3, [r3, #0]
 801f150:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f154:	9203      	str	r2, [sp, #12]
 801f156:	9302      	str	r3, [sp, #8]
 801f158:	4b5d      	ldr	r3, [pc, #372]	; (801f2d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 801f15a:	9301      	str	r3, [sp, #4]
 801f15c:	4b5d      	ldr	r3, [pc, #372]	; (801f2d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 801f15e:	9300      	str	r3, [sp, #0]
 801f160:	23f5      	movs	r3, #245	; 0xf5
 801f162:	4a52      	ldr	r2, [pc, #328]	; (801f2ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 801f164:	4952      	ldr	r1, [pc, #328]	; (801f2b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 801f166:	68f8      	ldr	r0, [r7, #12]
 801f168:	47a0      	blx	r4
 801f16a:	2301      	movs	r3, #1
 801f16c:	e0e8      	b.n	801f340 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(
 801f16e:	687b      	ldr	r3, [r7, #4]
 801f170:	689a      	ldr	r2, [r3, #8]
 801f172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f174:	689b      	ldr	r3, [r3, #8]
 801f176:	009b      	lsls	r3, r3, #2
 801f178:	4413      	add	r3, r2
 801f17a:	685b      	ldr	r3, [r3, #4]
 801f17c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f180:	429a      	cmp	r2, r3
 801f182:	d017      	beq.n	801f1b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 801f184:	68fb      	ldr	r3, [r7, #12]
 801f186:	695c      	ldr	r4, [r3, #20]
 801f188:	687b      	ldr	r3, [r7, #4]
 801f18a:	689a      	ldr	r2, [r3, #8]
 801f18c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f18e:	689b      	ldr	r3, [r3, #8]
 801f190:	009b      	lsls	r3, r3, #2
 801f192:	4413      	add	r3, r2
 801f194:	685b      	ldr	r3, [r3, #4]
 801f196:	9303      	str	r3, [sp, #12]
 801f198:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801f19c:	9302      	str	r3, [sp, #8]
 801f19e:	4b4e      	ldr	r3, [pc, #312]	; (801f2d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 801f1a0:	9301      	str	r3, [sp, #4]
 801f1a2:	4b4b      	ldr	r3, [pc, #300]	; (801f2d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 801f1a4:	9300      	str	r3, [sp, #0]
 801f1a6:	23f6      	movs	r3, #246	; 0xf6
 801f1a8:	4a40      	ldr	r2, [pc, #256]	; (801f2ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 801f1aa:	4941      	ldr	r1, [pc, #260]	; (801f2b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 801f1ac:	68f8      	ldr	r0, [r7, #12]
 801f1ae:	47a0      	blx	r4
 801f1b0:	2301      	movs	r3, #1
 801f1b2:	e0c5      	b.n	801f340 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 801f1b4:	68bb      	ldr	r3, [r7, #8]
 801f1b6:	68db      	ldr	r3, [r3, #12]
 801f1b8:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 801f1ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f1bc:	68db      	ldr	r3, [r3, #12]
 801f1be:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 801f1c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	3304      	adds	r3, #4
 801f1c6:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 801f1c8:	2300      	movs	r3, #0
 801f1ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 801f1cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f1ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801f1d2:	429a      	cmp	r2, r3
 801f1d4:	da47      	bge.n	801f266 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 801f1d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801f1da:	2b00      	cmp	r3, #0
 801f1dc:	d005      	beq.n	801f1ea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
 801f1de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f1e0:	009b      	lsls	r3, r3, #2
 801f1e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801f1e4:	4413      	add	r3, r2
 801f1e6:	681b      	ldr	r3, [r3, #0]
 801f1e8:	e001      	b.n	801f1ee <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d6>
 801f1ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f1ec:	681b      	ldr	r3, [r3, #0]
 801f1ee:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 801f1f0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801f1f2:	f7e1 f9d3 	bl	800059c <__aeabi_f2d>
 801f1f6:	4602      	mov	r2, r0
 801f1f8:	460b      	mov	r3, r1
 801f1fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 801f1fe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801f200:	f7e1 f9cc 	bl	800059c <__aeabi_f2d>
 801f204:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801f208:	f7e1 fa20 	bl	800064c <__aeabi_dmul>
 801f20c:	4602      	mov	r2, r0
 801f20e:	460b      	mov	r3, r1
 801f210:	4614      	mov	r4, r2
 801f212:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 801f214:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f216:	f7e1 f9c1 	bl	800059c <__aeabi_f2d>
 801f21a:	4602      	mov	r2, r0
 801f21c:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 801f21e:	4620      	mov	r0, r4
 801f220:	4629      	mov	r1, r5
 801f222:	f7e1 fb3d 	bl	80008a0 <__aeabi_ddiv>
 801f226:	4602      	mov	r2, r0
 801f228:	460b      	mov	r3, r1
 801f22a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 801f22e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801f232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f236:	4611      	mov	r1, r2
 801f238:	4618      	mov	r0, r3
 801f23a:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801f23e:	f7ff fbd3 	bl	801e9e8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 801f242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f244:	009b      	lsls	r3, r3, #2
 801f246:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801f24a:	4413      	add	r3, r2
 801f24c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f24e:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 801f250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f252:	009b      	lsls	r3, r3, #2
 801f254:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801f258:	4413      	add	r3, r2
 801f25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f25c:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 801f25e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f260:	3301      	adds	r3, #1
 801f262:	65fb      	str	r3, [r7, #92]	; 0x5c
 801f264:	e7b2      	b.n	801f1cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 801f266:	68bb      	ldr	r3, [r7, #8]
 801f268:	781b      	ldrb	r3, [r3, #0]
 801f26a:	2b03      	cmp	r3, #3
 801f26c:	d146      	bne.n	801f2fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 801f26e:	f04f 0200 	mov.w	r2, #0
 801f272:	f04f 0300 	mov.w	r3, #0
 801f276:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 801f27a:	f107 0318 	add.w	r3, r7, #24
 801f27e:	9301      	str	r3, [sp, #4]
 801f280:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f282:	9300      	str	r3, [sp, #0]
 801f284:	683b      	ldr	r3, [r7, #0]
 801f286:	687a      	ldr	r2, [r7, #4]
 801f288:	68b9      	ldr	r1, [r7, #8]
 801f28a:	68f8      	ldr	r0, [r7, #12]
 801f28c:	f000 f85c 	bl	801f348 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 801f290:	4603      	mov	r3, r0
 801f292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801f296:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f29a:	2b00      	cmp	r3, #0
 801f29c:	d01e      	beq.n	801f2dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 801f29e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f2a2:	e04d      	b.n	801f340 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
 801f2a4:	0802e374 	.word	0x0802e374
 801f2a8:	0802e390 	.word	0x0802e390
 801f2ac:	0802e2c4 	.word	0x0802e2c4
 801f2b0:	0802e358 	.word	0x0802e358
 801f2b4:	0802e3ac 	.word	0x0802e3ac
 801f2b8:	0802e3e0 	.word	0x0802e3e0
 801f2bc:	0802e3c8 	.word	0x0802e3c8
 801f2c0:	0802e3f4 	.word	0x0802e3f4
 801f2c4:	0802e410 	.word	0x0802e410
 801f2c8:	0802e44c 	.word	0x0802e44c
 801f2cc:	0802e458 	.word	0x0802e458
 801f2d0:	0802e468 	.word	0x0802e468
 801f2d4:	0802e478 	.word	0x0802e478
 801f2d8:	0802e49c 	.word	0x0802e49c
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 801f2dc:	ed97 7b06 	vldr	d7, [r7, #24]
 801f2e0:	f107 0314 	add.w	r3, r7, #20
 801f2e4:	4619      	mov	r1, r3
 801f2e6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 801f2e8:	eeb0 0a47 	vmov.f32	s0, s14
 801f2ec:	eef0 0a67 	vmov.f32	s1, s15
 801f2f0:	f7ff fb7a 	bl	801e9e8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 801f2f4:	697b      	ldr	r3, [r7, #20]
 801f2f6:	425a      	negs	r2, r3
 801f2f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f2fa:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 801f2fc:	68bb      	ldr	r3, [r7, #8]
 801f2fe:	781b      	ldrb	r3, [r3, #0]
 801f300:	2b09      	cmp	r3, #9
 801f302:	d007      	beq.n	801f314 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 801f304:	68bb      	ldr	r3, [r7, #8]
 801f306:	781b      	ldrb	r3, [r3, #0]
 801f308:	2b03      	cmp	r3, #3
 801f30a:	d003      	beq.n	801f314 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 801f30c:	68bb      	ldr	r3, [r7, #8]
 801f30e:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 801f310:	2b07      	cmp	r3, #7
 801f312:	d114      	bne.n	801f33e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 801f314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801f316:	7819      	ldrb	r1, [r3, #0]
 801f318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801f31c:	9300      	str	r3, [sp, #0]
 801f31e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801f322:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801f324:	68f8      	ldr	r0, [r7, #12]
 801f326:	f000 f99b 	bl	801f660 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 801f32a:	4603      	mov	r3, r0
 801f32c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 801f330:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801f334:	2b00      	cmp	r3, #0
 801f336:	d002      	beq.n	801f33e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
 801f338:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801f33c:	e000      	b.n	801f340 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 801f33e:	2300      	movs	r3, #0
}
 801f340:	4618      	mov	r0, r3
 801f342:	3760      	adds	r7, #96	; 0x60
 801f344:	46bd      	mov	sp, r7
 801f346:	bdb0      	pop	{r4, r5, r7, pc}

0801f348 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801f348:	b5b0      	push	{r4, r5, r7, lr}
 801f34a:	b08e      	sub	sp, #56	; 0x38
 801f34c:	af02      	add	r7, sp, #8
 801f34e:	60f8      	str	r0, [r7, #12]
 801f350:	60b9      	str	r1, [r7, #8]
 801f352:	607a      	str	r2, [r7, #4]
 801f354:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801f356:	68bb      	ldr	r3, [r7, #8]
 801f358:	68db      	ldr	r3, [r3, #12]
 801f35a:	4618      	mov	r0, r3
 801f35c:	f7e1 f91e 	bl	800059c <__aeabi_f2d>
 801f360:	4604      	mov	r4, r0
 801f362:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 801f364:	687b      	ldr	r3, [r7, #4]
 801f366:	68db      	ldr	r3, [r3, #12]
 801f368:	4618      	mov	r0, r3
 801f36a:	f7e1 f917 	bl	800059c <__aeabi_f2d>
 801f36e:	4602      	mov	r2, r0
 801f370:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801f372:	4620      	mov	r0, r4
 801f374:	4629      	mov	r1, r5
 801f376:	f7e1 f969 	bl	800064c <__aeabi_dmul>
 801f37a:	4602      	mov	r2, r0
 801f37c:	460b      	mov	r3, r1
 801f37e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 801f382:	683b      	ldr	r3, [r7, #0]
 801f384:	2b00      	cmp	r3, #0
 801f386:	d04b      	beq.n	801f420 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 801f388:	683b      	ldr	r3, [r7, #0]
 801f38a:	68db      	ldr	r3, [r3, #12]
 801f38c:	4618      	mov	r0, r3
 801f38e:	f7e1 f905 	bl	800059c <__aeabi_f2d>
 801f392:	4602      	mov	r2, r0
 801f394:	460b      	mov	r3, r1
 801f396:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 801f39a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801f39e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801f3a2:	f7e0 ff9b 	bl	80002dc <__aeabi_dsub>
 801f3a6:	4602      	mov	r2, r0
 801f3a8:	460b      	mov	r3, r1
 801f3aa:	ec43 2b17 	vmov	d7, r2, r3
 801f3ae:	eeb0 0a47 	vmov.f32	s0, s14
 801f3b2:	eef0 0a67 	vmov.f32	s1, s15
 801f3b6:	f7ff fd7f 	bl	801eeb8 <_ZSt3absd>
 801f3ba:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 801f3be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f3c0:	68db      	ldr	r3, [r3, #12]
 801f3c2:	4618      	mov	r0, r3
 801f3c4:	f7e1 f8ea 	bl	800059c <__aeabi_f2d>
 801f3c8:	4602      	mov	r2, r0
 801f3ca:	460b      	mov	r3, r1
 801f3cc:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 801f3d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801f3d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801f3d8:	f7e1 fa62 	bl	80008a0 <__aeabi_ddiv>
 801f3dc:	4602      	mov	r2, r0
 801f3de:	460b      	mov	r3, r1
 801f3e0:	4610      	mov	r0, r2
 801f3e2:	4619      	mov	r1, r3
 801f3e4:	2301      	movs	r3, #1
 801f3e6:	461c      	mov	r4, r3
 801f3e8:	a318      	add	r3, pc, #96	; (adr r3, 801f44c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 801f3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3ee:	f7e1 fba9 	bl	8000b44 <__aeabi_dcmple>
 801f3f2:	4603      	mov	r3, r0
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	d101      	bne.n	801f3fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 801f3f8:	2300      	movs	r3, #0
 801f3fa:	461c      	mov	r4, r3
 801f3fc:	b2e3      	uxtb	r3, r4
 801f3fe:	f083 0301 	eor.w	r3, r3, #1
 801f402:	b2db      	uxtb	r3, r3
 801f404:	2b00      	cmp	r3, #0
 801f406:	d00b      	beq.n	801f420 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 801f408:	68fb      	ldr	r3, [r7, #12]
 801f40a:	695c      	ldr	r4, [r3, #20]
 801f40c:	4b0c      	ldr	r3, [pc, #48]	; (801f440 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 801f40e:	9300      	str	r3, [sp, #0]
 801f410:	f44f 73a2 	mov.w	r3, #324	; 0x144
 801f414:	4a0b      	ldr	r2, [pc, #44]	; (801f444 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 801f416:	490c      	ldr	r1, [pc, #48]	; (801f448 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 801f418:	68f8      	ldr	r0, [r7, #12]
 801f41a:	47a0      	blx	r4
 801f41c:	2301      	movs	r3, #1
 801f41e:	e009      	b.n	801f434 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 801f420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f422:	9300      	str	r3, [sp, #0]
 801f424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f426:	687a      	ldr	r2, [r7, #4]
 801f428:	68b9      	ldr	r1, [r7, #8]
 801f42a:	68f8      	ldr	r0, [r7, #12]
 801f42c:	f000 f812 	bl	801f454 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 801f430:	4603      	mov	r3, r0
                                          multiplier);
 801f432:	bf00      	nop
}
 801f434:	4618      	mov	r0, r3
 801f436:	3730      	adds	r7, #48	; 0x30
 801f438:	46bd      	mov	sp, r7
 801f43a:	bdb0      	pop	{r4, r5, r7, pc}
 801f43c:	f3af 8000 	nop.w
 801f440:	0802e4dc 	.word	0x0802e4dc
 801f444:	0802e2c4 	.word	0x0802e2c4
 801f448:	0802e3c8 	.word	0x0802e3c8
 801f44c:	47ae147b 	.word	0x47ae147b
 801f450:	3f947ae1 	.word	0x3f947ae1

0801f454 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801f454:	b590      	push	{r4, r7, lr}
 801f456:	b089      	sub	sp, #36	; 0x24
 801f458:	af02      	add	r7, sp, #8
 801f45a:	60f8      	str	r0, [r7, #12]
 801f45c:	60b9      	str	r1, [r7, #8]
 801f45e:	607a      	str	r2, [r7, #4]
 801f460:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 801f462:	68bb      	ldr	r3, [r7, #8]
 801f464:	ed93 7a03 	vldr	s14, [r3, #12]
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	edd3 7a03 	vldr	s15, [r3, #12]
 801f46e:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 801f472:	ee17 0a90 	vmov	r0, s15
 801f476:	f7e1 f891 	bl	800059c <__aeabi_f2d>
 801f47a:	4602      	mov	r2, r0
 801f47c:	460b      	mov	r3, r1
 801f47e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 801f482:	2301      	movs	r3, #1
 801f484:	461c      	mov	r4, r3
 801f486:	f04f 0200 	mov.w	r2, #0
 801f48a:	f04f 0300 	mov.w	r3, #0
 801f48e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801f492:	f7e1 fb61 	bl	8000b58 <__aeabi_dcmpge>
 801f496:	4603      	mov	r3, r0
 801f498:	2b00      	cmp	r3, #0
 801f49a:	d101      	bne.n	801f4a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 801f49c:	2300      	movs	r3, #0
 801f49e:	461c      	mov	r4, r3
 801f4a0:	b2e3      	uxtb	r3, r4
 801f4a2:	f083 0301 	eor.w	r3, r3, #1
 801f4a6:	b2db      	uxtb	r3, r3
 801f4a8:	2b00      	cmp	r3, #0
 801f4aa:	d00b      	beq.n	801f4c4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 801f4ac:	68fb      	ldr	r3, [r7, #12]
 801f4ae:	695c      	ldr	r4, [r3, #20]
 801f4b0:	4b0f      	ldr	r3, [pc, #60]	; (801f4f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 801f4b2:	9300      	str	r3, [sp, #0]
 801f4b4:	f240 1351 	movw	r3, #337	; 0x151
 801f4b8:	4a0e      	ldr	r2, [pc, #56]	; (801f4f4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 801f4ba:	490f      	ldr	r1, [pc, #60]	; (801f4f8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 801f4bc:	68f8      	ldr	r0, [r7, #12]
 801f4be:	47a0      	blx	r4
 801f4c0:	2301      	movs	r3, #1
 801f4c2:	e010      	b.n	801f4e6 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 801f4c4:	683b      	ldr	r3, [r7, #0]
 801f4c6:	68db      	ldr	r3, [r3, #12]
 801f4c8:	4618      	mov	r0, r3
 801f4ca:	f7e1 f867 	bl	800059c <__aeabi_f2d>
 801f4ce:	4602      	mov	r2, r0
 801f4d0:	460b      	mov	r3, r1
 801f4d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801f4d6:	f7e1 f9e3 	bl	80008a0 <__aeabi_ddiv>
 801f4da:	4602      	mov	r2, r0
 801f4dc:	460b      	mov	r3, r1
 801f4de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801f4e0:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 801f4e4:	2300      	movs	r3, #0
}
 801f4e6:	4618      	mov	r0, r3
 801f4e8:	371c      	adds	r7, #28
 801f4ea:	46bd      	mov	sp, r7
 801f4ec:	bd90      	pop	{r4, r7, pc}
 801f4ee:	bf00      	nop
 801f4f0:	0802e500 	.word	0x0802e500
 801f4f4:	0802e2c4 	.word	0x0802e2c4
 801f4f8:	0802e3c8 	.word	0x0802e3c8

0801f4fc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 801f4fc:	b580      	push	{r7, lr}
 801f4fe:	b082      	sub	sp, #8
 801f500:	af00      	add	r7, sp, #0
 801f502:	6078      	str	r0, [r7, #4]
 801f504:	ed87 0a00 	vstr	s0, [r7]
 801f508:	687b      	ldr	r3, [r7, #4]
 801f50a:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 801f50e:	ed97 7a00 	vldr	s14, [r7]
 801f512:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801f516:	eeb0 0a66 	vmov.f32	s0, s13
 801f51a:	f7ff fc26 	bl	801ed6a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801f51e:	eef0 7a40 	vmov.f32	s15, s0
 801f522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f526:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 801f52e:	4413      	add	r3, r2
  };
 801f530:	4618      	mov	r0, r3
 801f532:	3708      	adds	r7, #8
 801f534:	46bd      	mov	sp, r7
 801f536:	bd80      	pop	{r7, pc}

0801f538 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 801f538:	b580      	push	{r7, lr}
 801f53a:	b08e      	sub	sp, #56	; 0x38
 801f53c:	af00      	add	r7, sp, #0
 801f53e:	60b9      	str	r1, [r7, #8]
 801f540:	607a      	str	r2, [r7, #4]
 801f542:	603b      	str	r3, [r7, #0]
 801f544:	4603      	mov	r3, r0
 801f546:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 801f548:	683b      	ldr	r3, [r7, #0]
 801f54a:	68db      	ldr	r3, [r3, #12]
 801f54c:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 801f54e:	683b      	ldr	r3, [r7, #0]
 801f550:	691b      	ldr	r3, [r3, #16]
 801f552:	633b      	str	r3, [r7, #48]	; 0x30
  };
 801f554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f556:	617b      	str	r3, [r7, #20]
 801f558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f55a:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 801f55c:	7bfb      	ldrb	r3, [r7, #15]
 801f55e:	2b01      	cmp	r3, #1
 801f560:	d118      	bne.n	801f594 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 801f562:	f107 0314 	add.w	r3, r7, #20
 801f566:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 801f65c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801f56a:	4618      	mov	r0, r3
 801f56c:	f7ff ffc6 	bl	801f4fc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801f570:	4603      	mov	r3, r0
 801f572:	61fb      	str	r3, [r7, #28]
 801f574:	f107 021c 	add.w	r2, r7, #28
 801f578:	f107 0308 	add.w	r3, r7, #8
 801f57c:	4611      	mov	r1, r2
 801f57e:	4618      	mov	r0, r3
 801f580:	f000 f8ea 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 801f584:	4603      	mov	r3, r0
 801f586:	681a      	ldr	r2, [r3, #0]
 801f588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f58a:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801f58c:	687a      	ldr	r2, [r7, #4]
 801f58e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f590:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 801f592:	e05f      	b.n	801f654 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 801f594:	7bfb      	ldrb	r3, [r7, #15]
 801f596:	2b03      	cmp	r3, #3
 801f598:	d129      	bne.n	801f5ee <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 801f59a:	f107 0314 	add.w	r3, r7, #20
 801f59e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 801f65c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801f5a2:	4618      	mov	r0, r3
 801f5a4:	f7ff ffaa 	bl	801f4fc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801f5a8:	4603      	mov	r3, r0
 801f5aa:	623b      	str	r3, [r7, #32]
 801f5ac:	f107 0220 	add.w	r2, r7, #32
 801f5b0:	f107 0308 	add.w	r3, r7, #8
 801f5b4:	4611      	mov	r1, r2
 801f5b6:	4618      	mov	r0, r3
 801f5b8:	f000 f8ce 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 801f5bc:	4603      	mov	r3, r0
 801f5be:	681a      	ldr	r2, [r3, #0]
 801f5c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f5c2:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 801f5c4:	f107 0314 	add.w	r3, r7, #20
 801f5c8:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801f5cc:	4618      	mov	r0, r3
 801f5ce:	f7ff ff95 	bl	801f4fc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801f5d2:	4603      	mov	r3, r0
 801f5d4:	627b      	str	r3, [r7, #36]	; 0x24
 801f5d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801f5da:	1d3b      	adds	r3, r7, #4
 801f5dc:	4611      	mov	r1, r2
 801f5de:	4618      	mov	r0, r3
 801f5e0:	f000 f8a6 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 801f5e4:	4603      	mov	r3, r0
 801f5e6:	681a      	ldr	r2, [r3, #0]
 801f5e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f5ea:	601a      	str	r2, [r3, #0]
}
 801f5ec:	e032      	b.n	801f654 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 801f5ee:	7bfb      	ldrb	r3, [r7, #15]
 801f5f0:	2b02      	cmp	r3, #2
 801f5f2:	d129      	bne.n	801f648 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 801f5f4:	f107 0314 	add.w	r3, r7, #20
 801f5f8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801f5fc:	4618      	mov	r0, r3
 801f5fe:	f7ff ff7d 	bl	801f4fc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801f602:	4603      	mov	r3, r0
 801f604:	62bb      	str	r3, [r7, #40]	; 0x28
 801f606:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801f60a:	f107 0308 	add.w	r3, r7, #8
 801f60e:	4611      	mov	r1, r2
 801f610:	4618      	mov	r0, r3
 801f612:	f000 f8a1 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 801f616:	4603      	mov	r3, r0
 801f618:	681a      	ldr	r2, [r3, #0]
 801f61a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f61c:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 801f61e:	f107 0314 	add.w	r3, r7, #20
 801f622:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f626:	4618      	mov	r0, r3
 801f628:	f7ff ff68 	bl	801f4fc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801f62c:	4603      	mov	r3, r0
 801f62e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f630:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801f634:	1d3b      	adds	r3, r7, #4
 801f636:	4611      	mov	r1, r2
 801f638:	4618      	mov	r0, r3
 801f63a:	f000 f879 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 801f63e:	4603      	mov	r3, r0
 801f640:	681a      	ldr	r2, [r3, #0]
 801f642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f644:	601a      	str	r2, [r3, #0]
}
 801f646:	e005      	b.n	801f654 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 801f648:	68ba      	ldr	r2, [r7, #8]
 801f64a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f64c:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801f64e:	687a      	ldr	r2, [r7, #4]
 801f650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f652:	601a      	str	r2, [r3, #0]
}
 801f654:	bf00      	nop
 801f656:	3738      	adds	r7, #56	; 0x38
 801f658:	46bd      	mov	sp, r7
 801f65a:	bd80      	pop	{r7, pc}
 801f65c:	00000000 	.word	0x00000000

0801f660 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 801f660:	b590      	push	{r4, r7, lr}
 801f662:	b089      	sub	sp, #36	; 0x24
 801f664:	af02      	add	r7, sp, #8
 801f666:	60f8      	str	r0, [r7, #12]
 801f668:	607a      	str	r2, [r7, #4]
 801f66a:	603b      	str	r3, [r7, #0]
 801f66c:	460b      	mov	r3, r1
 801f66e:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 801f670:	2300      	movs	r3, #0
 801f672:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 801f674:	2300      	movs	r3, #0
 801f676:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 801f678:	687b      	ldr	r3, [r7, #4]
 801f67a:	781b      	ldrb	r3, [r3, #0]
 801f67c:	2b03      	cmp	r3, #3
 801f67e:	d108      	bne.n	801f692 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 801f680:	f7ff fb94 	bl	801edac <_ZNSt14numeric_limitsIhE3minEv>
 801f684:	4603      	mov	r3, r0
 801f686:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 801f688:	f7ff fb98 	bl	801edbc <_ZNSt14numeric_limitsIhE3maxEv>
 801f68c:	4603      	mov	r3, r0
 801f68e:	613b      	str	r3, [r7, #16]
 801f690:	e025      	b.n	801f6de <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 801f692:	687b      	ldr	r3, [r7, #4]
 801f694:	781b      	ldrb	r3, [r3, #0]
 801f696:	2b09      	cmp	r3, #9
 801f698:	d108      	bne.n	801f6ac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 801f69a:	f7ff fb76 	bl	801ed8a <_ZNSt14numeric_limitsIaE3minEv>
 801f69e:	4603      	mov	r3, r0
 801f6a0:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 801f6a2:	f7ff fb7b 	bl	801ed9c <_ZNSt14numeric_limitsIaE3maxEv>
 801f6a6:	4603      	mov	r3, r0
 801f6a8:	613b      	str	r3, [r7, #16]
 801f6aa:	e018      	b.n	801f6de <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 801f6ac:	687b      	ldr	r3, [r7, #4]
 801f6ae:	781b      	ldrb	r3, [r3, #0]
 801f6b0:	2b07      	cmp	r3, #7
 801f6b2:	d108      	bne.n	801f6c6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 801f6b4:	f7ff fb8a 	bl	801edcc <_ZNSt14numeric_limitsIsE3minEv>
 801f6b8:	4603      	mov	r3, r0
 801f6ba:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 801f6bc:	f7ff fb90 	bl	801ede0 <_ZNSt14numeric_limitsIsE3maxEv>
 801f6c0:	4603      	mov	r3, r0
 801f6c2:	613b      	str	r3, [r7, #16]
 801f6c4:	e00b      	b.n	801f6de <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 801f6c6:	68fb      	ldr	r3, [r7, #12]
 801f6c8:	695c      	ldr	r4, [r3, #20]
 801f6ca:	4b0c      	ldr	r3, [pc, #48]	; (801f6fc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 801f6cc:	9300      	str	r3, [sp, #0]
 801f6ce:	f44f 73c2 	mov.w	r3, #388	; 0x184
 801f6d2:	4a0b      	ldr	r2, [pc, #44]	; (801f700 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 801f6d4:	490b      	ldr	r1, [pc, #44]	; (801f704 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 801f6d6:	68f8      	ldr	r0, [r7, #12]
 801f6d8:	47a0      	blx	r4
 801f6da:	2301      	movs	r3, #1
 801f6dc:	e00a      	b.n	801f6f4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 801f6de:	7af8      	ldrb	r0, [r7, #11]
 801f6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f6e2:	9301      	str	r3, [sp, #4]
 801f6e4:	683b      	ldr	r3, [r7, #0]
 801f6e6:	9300      	str	r3, [sp, #0]
 801f6e8:	687b      	ldr	r3, [r7, #4]
 801f6ea:	693a      	ldr	r2, [r7, #16]
 801f6ec:	6979      	ldr	r1, [r7, #20]
 801f6ee:	f7ff ff23 	bl	801f538 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 801f6f2:	2300      	movs	r3, #0
}
 801f6f4:	4618      	mov	r0, r3
 801f6f6:	371c      	adds	r7, #28
 801f6f8:	46bd      	mov	sp, r7
 801f6fa:	bd90      	pop	{r4, r7, pc}
 801f6fc:	0802e51c 	.word	0x0802e51c
 801f700:	0802e2c4 	.word	0x0802e2c4
 801f704:	0802e3c8 	.word	0x0802e3c8

0801f708 <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801f708:	b480      	push	{r7}
 801f70a:	b083      	sub	sp, #12
 801f70c:	af00      	add	r7, sp, #0
 801f70e:	6078      	str	r0, [r7, #4]
 801f710:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801f712:	687b      	ldr	r3, [r7, #4]
 801f714:	681a      	ldr	r2, [r3, #0]
 801f716:	683b      	ldr	r3, [r7, #0]
 801f718:	681b      	ldr	r3, [r3, #0]
 801f71a:	429a      	cmp	r2, r3
 801f71c:	da01      	bge.n	801f722 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 801f71e:	683b      	ldr	r3, [r7, #0]
 801f720:	e000      	b.n	801f724 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 801f722:	687b      	ldr	r3, [r7, #4]
    }
 801f724:	4618      	mov	r0, r3
 801f726:	370c      	adds	r7, #12
 801f728:	46bd      	mov	sp, r7
 801f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f72e:	4770      	bx	lr

0801f730 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801f730:	b480      	push	{r7}
 801f732:	b083      	sub	sp, #12
 801f734:	af00      	add	r7, sp, #0
 801f736:	6078      	str	r0, [r7, #4]
 801f738:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801f73a:	683b      	ldr	r3, [r7, #0]
 801f73c:	681a      	ldr	r2, [r3, #0]
 801f73e:	687b      	ldr	r3, [r7, #4]
 801f740:	681b      	ldr	r3, [r3, #0]
 801f742:	429a      	cmp	r2, r3
 801f744:	da01      	bge.n	801f74a <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 801f746:	683b      	ldr	r3, [r7, #0]
 801f748:	e000      	b.n	801f74c <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 801f74a:	687b      	ldr	r3, [r7, #4]
    }
 801f74c:	4618      	mov	r0, r3
 801f74e:	370c      	adds	r7, #12
 801f750:	46bd      	mov	sp, r7
 801f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f756:	4770      	bx	lr

0801f758 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801f758:	b480      	push	{r7}
 801f75a:	b083      	sub	sp, #12
 801f75c:	af00      	add	r7, sp, #0
 801f75e:	6078      	str	r0, [r7, #4]
 801f760:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801f762:	687b      	ldr	r3, [r7, #4]
 801f764:	681a      	ldr	r2, [r3, #0]
 801f766:	683b      	ldr	r3, [r7, #0]
 801f768:	681b      	ldr	r3, [r3, #0]
 801f76a:	429a      	cmp	r2, r3
 801f76c:	da01      	bge.n	801f772 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 801f76e:	683b      	ldr	r3, [r7, #0]
 801f770:	e000      	b.n	801f774 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 801f772:	687b      	ldr	r3, [r7, #4]
    }
 801f774:	4618      	mov	r0, r3
 801f776:	370c      	adds	r7, #12
 801f778:	46bd      	mov	sp, r7
 801f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f77e:	4770      	bx	lr

0801f780 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 801f780:	b480      	push	{r7}
 801f782:	b083      	sub	sp, #12
 801f784:	af00      	add	r7, sp, #0
 801f786:	6078      	str	r0, [r7, #4]
 801f788:	687b      	ldr	r3, [r7, #4]
 801f78a:	2200      	movs	r2, #0
 801f78c:	601a      	str	r2, [r3, #0]
 801f78e:	687b      	ldr	r3, [r7, #4]
 801f790:	4618      	mov	r0, r3
 801f792:	370c      	adds	r7, #12
 801f794:	46bd      	mov	sp, r7
 801f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f79a:	4770      	bx	lr

0801f79c <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 801f79c:	b580      	push	{r7, lr}
 801f79e:	b084      	sub	sp, #16
 801f7a0:	af00      	add	r7, sp, #0
 801f7a2:	60f8      	str	r0, [r7, #12]
 801f7a4:	60b9      	str	r1, [r7, #8]
 801f7a6:	607a      	str	r2, [r7, #4]
 801f7a8:	68fb      	ldr	r3, [r7, #12]
 801f7aa:	2200      	movs	r2, #0
 801f7ac:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 801f7ae:	687a      	ldr	r2, [r7, #4]
 801f7b0:	68b9      	ldr	r1, [r7, #8]
 801f7b2:	68f8      	ldr	r0, [r7, #12]
 801f7b4:	f000 f866 	bl	801f884 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 801f7b8:	68fb      	ldr	r3, [r7, #12]
 801f7ba:	4618      	mov	r0, r3
 801f7bc:	3710      	adds	r7, #16
 801f7be:	46bd      	mov	sp, r7
 801f7c0:	bd80      	pop	{r7, pc}

0801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 801f7c2:	b580      	push	{r7, lr}
 801f7c4:	b082      	sub	sp, #8
 801f7c6:	af00      	add	r7, sp, #0
 801f7c8:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	681b      	ldr	r3, [r3, #0]
 801f7ce:	2b05      	cmp	r3, #5
 801f7d0:	dd08      	ble.n	801f7e4 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 801f7d2:	687b      	ldr	r3, [r7, #4]
 801f7d4:	685b      	ldr	r3, [r3, #4]
 801f7d6:	2b00      	cmp	r3, #0
 801f7d8:	d004      	beq.n	801f7e4 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 801f7da:	687b      	ldr	r3, [r7, #4]
 801f7dc:	685b      	ldr	r3, [r3, #4]
 801f7de:	4618      	mov	r0, r3
 801f7e0:	f009 fb4c 	bl	8028e7c <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 801f7e4:	687b      	ldr	r3, [r7, #4]
 801f7e6:	4618      	mov	r0, r3
 801f7e8:	3708      	adds	r7, #8
 801f7ea:	46bd      	mov	sp, r7
 801f7ec:	bd80      	pop	{r7, pc}

0801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 801f7ee:	b480      	push	{r7}
 801f7f0:	b083      	sub	sp, #12
 801f7f2:	af00      	add	r7, sp, #0
 801f7f4:	6078      	str	r0, [r7, #4]
 801f7f6:	687b      	ldr	r3, [r7, #4]
 801f7f8:	681b      	ldr	r3, [r3, #0]
 801f7fa:	4618      	mov	r0, r3
 801f7fc:	370c      	adds	r7, #12
 801f7fe:	46bd      	mov	sp, r7
 801f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f804:	4770      	bx	lr

0801f806 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 801f806:	b480      	push	{r7}
 801f808:	b083      	sub	sp, #12
 801f80a:	af00      	add	r7, sp, #0
 801f80c:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801f80e:	687b      	ldr	r3, [r7, #4]
 801f810:	681b      	ldr	r3, [r3, #0]
 801f812:	2b05      	cmp	r3, #5
 801f814:	dd02      	ble.n	801f81c <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 801f816:	687b      	ldr	r3, [r7, #4]
 801f818:	685b      	ldr	r3, [r3, #4]
 801f81a:	e001      	b.n	801f820 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 801f81c:	687b      	ldr	r3, [r7, #4]
 801f81e:	3304      	adds	r3, #4
  }
 801f820:	4618      	mov	r0, r3
 801f822:	370c      	adds	r7, #12
 801f824:	46bd      	mov	sp, r7
 801f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f82a:	4770      	bx	lr

0801f82c <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 801f82c:	b580      	push	{r7, lr}
 801f82e:	b082      	sub	sp, #8
 801f830:	af00      	add	r7, sp, #0
 801f832:	6078      	str	r0, [r7, #4]
 801f834:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 801f836:	687b      	ldr	r3, [r7, #4]
 801f838:	681b      	ldr	r3, [r3, #0]
 801f83a:	2b05      	cmp	r3, #5
 801f83c:	dd08      	ble.n	801f850 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 801f83e:	687b      	ldr	r3, [r7, #4]
 801f840:	685b      	ldr	r3, [r3, #4]
 801f842:	2b00      	cmp	r3, #0
 801f844:	d004      	beq.n	801f850 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 801f846:	687b      	ldr	r3, [r7, #4]
 801f848:	685b      	ldr	r3, [r3, #4]
 801f84a:	4618      	mov	r0, r3
 801f84c:	f009 fb16 	bl	8028e7c <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 801f850:	687b      	ldr	r3, [r7, #4]
 801f852:	683a      	ldr	r2, [r7, #0]
 801f854:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 801f856:	683b      	ldr	r3, [r7, #0]
 801f858:	2b05      	cmp	r3, #5
 801f85a:	dd0f      	ble.n	801f87c <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 801f85c:	683b      	ldr	r3, [r7, #0]
 801f85e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 801f862:	4293      	cmp	r3, r2
 801f864:	d201      	bcs.n	801f86a <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 801f866:	009b      	lsls	r3, r3, #2
 801f868:	e001      	b.n	801f86e <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 801f86a:	f04f 33ff 	mov.w	r3, #4294967295
 801f86e:	4618      	mov	r0, r3
 801f870:	f009 fb17 	bl	8028ea2 <_Znaj>
 801f874:	4603      	mov	r3, r0
 801f876:	461a      	mov	r2, r3
 801f878:	687b      	ldr	r3, [r7, #4]
 801f87a:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 801f87c:	bf00      	nop
 801f87e:	3708      	adds	r7, #8
 801f880:	46bd      	mov	sp, r7
 801f882:	bd80      	pop	{r7, pc}

0801f884 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 801f884:	b580      	push	{r7, lr}
 801f886:	b086      	sub	sp, #24
 801f888:	af00      	add	r7, sp, #0
 801f88a:	60f8      	str	r0, [r7, #12]
 801f88c:	60b9      	str	r1, [r7, #8]
 801f88e:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 801f890:	68b9      	ldr	r1, [r7, #8]
 801f892:	68f8      	ldr	r0, [r7, #12]
 801f894:	f7ff ffca 	bl	801f82c <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 801f898:	68f8      	ldr	r0, [r7, #12]
 801f89a:	f7ff ffb4 	bl	801f806 <_ZN6tflite12RuntimeShape8DimsDataEv>
 801f89e:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 801f8a0:	68bb      	ldr	r3, [r7, #8]
 801f8a2:	009b      	lsls	r3, r3, #2
 801f8a4:	461a      	mov	r2, r3
 801f8a6:	6879      	ldr	r1, [r7, #4]
 801f8a8:	6978      	ldr	r0, [r7, #20]
 801f8aa:	f00c fcf1 	bl	802c290 <memcpy>
  }
 801f8ae:	bf00      	nop
 801f8b0:	3718      	adds	r7, #24
 801f8b2:	46bd      	mov	sp, r7
 801f8b4:	bd80      	pop	{r7, pc}

0801f8b6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 801f8b6:	b580      	push	{r7, lr}
 801f8b8:	b086      	sub	sp, #24
 801f8ba:	af00      	add	r7, sp, #0
 801f8bc:	6078      	str	r0, [r7, #4]
 801f8be:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 801f8c0:	683b      	ldr	r3, [r7, #0]
 801f8c2:	2b00      	cmp	r3, #0
 801f8c4:	d103      	bne.n	801f8ce <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 801f8c6:	6878      	ldr	r0, [r7, #4]
 801f8c8:	f7ff ff5a 	bl	801f780 <_ZN6tflite12RuntimeShapeC1Ev>
 801f8cc:	e00d      	b.n	801f8ea <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 801f8ce:	683b      	ldr	r3, [r7, #0]
 801f8d0:	689b      	ldr	r3, [r3, #8]
 801f8d2:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 801f8d4:	697b      	ldr	r3, [r7, #20]
 801f8d6:	681b      	ldr	r3, [r3, #0]
 801f8d8:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801f8da:	697b      	ldr	r3, [r7, #20]
 801f8dc:	3304      	adds	r3, #4
 801f8de:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 801f8e0:	68fa      	ldr	r2, [r7, #12]
 801f8e2:	6939      	ldr	r1, [r7, #16]
 801f8e4:	6878      	ldr	r0, [r7, #4]
 801f8e6:	f7ff ff59 	bl	801f79c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801f8ea:	6878      	ldr	r0, [r7, #4]
 801f8ec:	3718      	adds	r7, #24
 801f8ee:	46bd      	mov	sp, r7
 801f8f0:	bd80      	pop	{r7, pc}
	...

0801f8f4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
  return aligned_size;
}

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 801f8f4:	b480      	push	{r7}
 801f8f6:	b083      	sub	sp, #12
 801f8f8:	af00      	add	r7, sp, #0
 801f8fa:	4603      	mov	r3, r0
 801f8fc:	6039      	str	r1, [r7, #0]
 801f8fe:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 801f900:	79fb      	ldrb	r3, [r7, #7]
 801f902:	3b01      	subs	r3, #1
 801f904:	2b0f      	cmp	r3, #15
 801f906:	d857      	bhi.n	801f9b8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc4>
 801f908:	a201      	add	r2, pc, #4	; (adr r2, 801f910 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 801f90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f90e:	bf00      	nop
 801f910:	0801f959 	.word	0x0801f959
 801f914:	0801f971 	.word	0x0801f971
 801f918:	0801f981 	.word	0x0801f981
 801f91c:	0801f991 	.word	0x0801f991
 801f920:	0801f9b9 	.word	0x0801f9b9
 801f924:	0801f9a1 	.word	0x0801f9a1
 801f928:	0801f969 	.word	0x0801f969
 801f92c:	0801f9a9 	.word	0x0801f9a9
 801f930:	0801f989 	.word	0x0801f989
 801f934:	0801f951 	.word	0x0801f951
 801f938:	0801f961 	.word	0x0801f961
 801f93c:	0801f9b1 	.word	0x0801f9b1
 801f940:	0801f999 	.word	0x0801f999
 801f944:	0801f9b9 	.word	0x0801f9b9
 801f948:	0801f9b9 	.word	0x0801f9b9
 801f94c:	0801f979 	.word	0x0801f979
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 801f950:	683b      	ldr	r3, [r7, #0]
 801f952:	2202      	movs	r2, #2
 801f954:	601a      	str	r2, [r3, #0]
      break;
 801f956:	e031      	b.n	801f9bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat32:
      *size = sizeof(float);
 801f958:	683b      	ldr	r3, [r7, #0]
 801f95a:	2204      	movs	r2, #4
 801f95c:	601a      	str	r2, [r3, #0]
      break;
 801f95e:	e02d      	b.n	801f9bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat64:
      *size = sizeof(double);
 801f960:	683b      	ldr	r3, [r7, #0]
 801f962:	2208      	movs	r2, #8
 801f964:	601a      	str	r2, [r3, #0]
      break;
 801f966:	e029      	b.n	801f9bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 801f968:	683b      	ldr	r3, [r7, #0]
 801f96a:	2202      	movs	r2, #2
 801f96c:	601a      	str	r2, [r3, #0]
      break;
 801f96e:	e025      	b.n	801f9bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 801f970:	683b      	ldr	r3, [r7, #0]
 801f972:	2204      	movs	r2, #4
 801f974:	601a      	str	r2, [r3, #0]
      break;
 801f976:	e021      	b.n	801f9bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 801f978:	683b      	ldr	r3, [r7, #0]
 801f97a:	2204      	movs	r2, #4
 801f97c:	601a      	str	r2, [r3, #0]
      break;
 801f97e:	e01d      	b.n	801f9bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 801f980:	683b      	ldr	r3, [r7, #0]
 801f982:	2201      	movs	r2, #1
 801f984:	601a      	str	r2, [r3, #0]
      break;
 801f986:	e019      	b.n	801f9bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 801f988:	683b      	ldr	r3, [r7, #0]
 801f98a:	2201      	movs	r2, #1
 801f98c:	601a      	str	r2, [r3, #0]
      break;
 801f98e:	e015      	b.n	801f9bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 801f990:	683b      	ldr	r3, [r7, #0]
 801f992:	2208      	movs	r2, #8
 801f994:	601a      	str	r2, [r3, #0]
      break;
 801f996:	e011      	b.n	801f9bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 801f998:	683b      	ldr	r3, [r7, #0]
 801f99a:	2208      	movs	r2, #8
 801f99c:	601a      	str	r2, [r3, #0]
      break;
 801f99e:	e00d      	b.n	801f9bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteBool:
      *size = sizeof(bool);
 801f9a0:	683b      	ldr	r3, [r7, #0]
 801f9a2:	2201      	movs	r2, #1
 801f9a4:	601a      	str	r2, [r3, #0]
      break;
 801f9a6:	e009      	b.n	801f9bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 801f9a8:	683b      	ldr	r3, [r7, #0]
 801f9aa:	2208      	movs	r2, #8
 801f9ac:	601a      	str	r2, [r3, #0]
      break;
 801f9ae:	e005      	b.n	801f9bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 801f9b0:	683b      	ldr	r3, [r7, #0]
 801f9b2:	2210      	movs	r2, #16
 801f9b4:	601a      	str	r2, [r3, #0]
      break;
 801f9b6:	e001      	b.n	801f9bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    default:
      return kTfLiteError;
 801f9b8:	2301      	movs	r3, #1
 801f9ba:	e000      	b.n	801f9be <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xca>
  }
  return kTfLiteOk;
 801f9bc:	2300      	movs	r3, #0
}
 801f9be:	4618      	mov	r0, r3
 801f9c0:	370c      	adds	r7, #12
 801f9c2:	46bd      	mov	sp, r7
 801f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9c8:	4770      	bx	lr
 801f9ca:	bf00      	nop

0801f9cc <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/kernels/op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 801f9cc:	b480      	push	{r7}
 801f9ce:	b085      	sub	sp, #20
 801f9d0:	af00      	add	r7, sp, #0
 801f9d2:	6078      	str	r0, [r7, #4]
  int result = 1;
 801f9d4:	2301      	movs	r3, #1
 801f9d6:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 801f9d8:	2300      	movs	r3, #0
 801f9da:	60bb      	str	r3, [r7, #8]
 801f9dc:	687b      	ldr	r3, [r7, #4]
 801f9de:	681b      	ldr	r3, [r3, #0]
 801f9e0:	68ba      	ldr	r2, [r7, #8]
 801f9e2:	429a      	cmp	r2, r3
 801f9e4:	da0c      	bge.n	801fa00 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 801f9e6:	687a      	ldr	r2, [r7, #4]
 801f9e8:	68bb      	ldr	r3, [r7, #8]
 801f9ea:	009b      	lsls	r3, r3, #2
 801f9ec:	4413      	add	r3, r2
 801f9ee:	685a      	ldr	r2, [r3, #4]
 801f9f0:	68fb      	ldr	r3, [r7, #12]
 801f9f2:	fb02 f303 	mul.w	r3, r2, r3
 801f9f6:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 801f9f8:	68bb      	ldr	r3, [r7, #8]
 801f9fa:	3301      	adds	r3, #1
 801f9fc:	60bb      	str	r3, [r7, #8]
 801f9fe:	e7ed      	b.n	801f9dc <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 801fa00:	68fb      	ldr	r3, [r7, #12]
}
 801fa02:	4618      	mov	r0, r3
 801fa04:	3714      	adds	r7, #20
 801fa06:	46bd      	mov	sp, r7
 801fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa0c:	4770      	bx	lr

0801fa0e <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 801fa0e:	b480      	push	{r7}
 801fa10:	af00      	add	r7, sp, #0
 801fa12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801fa16:	4618      	mov	r0, r3
 801fa18:	46bd      	mov	sp, r7
 801fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa1e:	4770      	bx	lr

0801fa20 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 801fa20:	b480      	push	{r7}
 801fa22:	af00      	add	r7, sp, #0
 801fa24:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801fa28:	ee07 3a90 	vmov	s15, r3
 801fa2c:	eeb0 0a67 	vmov.f32	s0, s15
 801fa30:	46bd      	mov	sp, r7
 801fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa36:	4770      	bx	lr

0801fa38 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 801fa38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801fa3c:	b092      	sub	sp, #72	; 0x48
 801fa3e:	af00      	add	r7, sp, #0
 801fa40:	61f8      	str	r0, [r7, #28]
 801fa42:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 801fa44:	69fa      	ldr	r2, [r7, #28]
 801fa46:	69bb      	ldr	r3, [r7, #24]
 801fa48:	429a      	cmp	r2, r3
 801fa4a:	d107      	bne.n	801fa5c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 801fa4c:	f7ff ffdf 	bl	801fa0e <_ZNSt14numeric_limitsIlE3minEv>
 801fa50:	4602      	mov	r2, r0
 801fa52:	69fb      	ldr	r3, [r7, #28]
 801fa54:	4293      	cmp	r3, r2
 801fa56:	d101      	bne.n	801fa5c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 801fa58:	2301      	movs	r3, #1
 801fa5a:	e000      	b.n	801fa5e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 801fa5c:	2300      	movs	r3, #0
 801fa5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 801fa62:	69fb      	ldr	r3, [r7, #28]
 801fa64:	17da      	asrs	r2, r3, #31
 801fa66:	60bb      	str	r3, [r7, #8]
 801fa68:	60fa      	str	r2, [r7, #12]
 801fa6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801fa6e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 801fa72:	69bb      	ldr	r3, [r7, #24]
 801fa74:	17da      	asrs	r2, r3, #31
 801fa76:	603b      	str	r3, [r7, #0]
 801fa78:	607a      	str	r2, [r7, #4]
 801fa7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fa7e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 801fa82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fa84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fa86:	fb03 f202 	mul.w	r2, r3, r2
 801fa8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fa8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801fa8e:	fb01 f303 	mul.w	r3, r1, r3
 801fa92:	4413      	add	r3, r2
 801fa94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801fa96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fa98:	fba1 4502 	umull	r4, r5, r1, r2
 801fa9c:	442b      	add	r3, r5
 801fa9e:	461d      	mov	r5, r3
 801faa0:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 801faa4:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 801faa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801faac:	2b00      	cmp	r3, #0
 801faae:	db02      	blt.n	801fab6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 801fab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801fab4:	e000      	b.n	801fab8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 801fab6:	4b1a      	ldr	r3, [pc, #104]	; (801fb20 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 801fab8:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 801faba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fabc:	17da      	asrs	r2, r3, #31
 801fabe:	4698      	mov	r8, r3
 801fac0:	4691      	mov	r9, r2
 801fac2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801fac6:	eb18 0102 	adds.w	r1, r8, r2
 801faca:	6139      	str	r1, [r7, #16]
 801facc:	eb49 0303 	adc.w	r3, r9, r3
 801fad0:	617b      	str	r3, [r7, #20]
 801fad2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801fad6:	2b00      	cmp	r3, #0
 801fad8:	da07      	bge.n	801faea <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 801fada:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fade:	eb12 0a01 	adds.w	sl, r2, r1
 801fae2:	f143 0b00 	adc.w	fp, r3, #0
 801fae6:	4652      	mov	r2, sl
 801fae8:	465b      	mov	r3, fp
 801faea:	f04f 0000 	mov.w	r0, #0
 801faee:	f04f 0100 	mov.w	r1, #0
 801faf2:	0fd0      	lsrs	r0, r2, #31
 801faf4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801faf8:	17d9      	asrs	r1, r3, #31
 801fafa:	4602      	mov	r2, r0
 801fafc:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 801fafe:	4613      	mov	r3, r2
 801fb00:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 801fb02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801fb06:	2b00      	cmp	r3, #0
 801fb08:	d003      	beq.n	801fb12 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 801fb0a:	f7fe ff63 	bl	801e9d4 <_ZNSt14numeric_limitsIlE3maxEv>
 801fb0e:	4603      	mov	r3, r0
 801fb10:	e000      	b.n	801fb14 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 801fb12:	6a3b      	ldr	r3, [r7, #32]
}
 801fb14:	4618      	mov	r0, r3
 801fb16:	3748      	adds	r7, #72	; 0x48
 801fb18:	46bd      	mov	sp, r7
 801fb1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801fb1e:	bf00      	nop
 801fb20:	c0000001 	.word	0xc0000001

0801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 801fb24:	b580      	push	{r7, lr}
 801fb26:	b082      	sub	sp, #8
 801fb28:	af00      	add	r7, sp, #0
 801fb2a:	6078      	str	r0, [r7, #4]
 801fb2c:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 801fb2e:	683b      	ldr	r3, [r7, #0]
 801fb30:	2b00      	cmp	r3, #0
 801fb32:	da01      	bge.n	801fb38 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 801fb34:	f00c fb2e 	bl	802c194 <abort>
    TFLITE_DCHECK_LT(i, size_);
 801fb38:	687b      	ldr	r3, [r7, #4]
 801fb3a:	681b      	ldr	r3, [r3, #0]
 801fb3c:	683a      	ldr	r2, [r7, #0]
 801fb3e:	429a      	cmp	r2, r3
 801fb40:	db01      	blt.n	801fb46 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 801fb42:	f00c fb27 	bl	802c194 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 801fb46:	687b      	ldr	r3, [r7, #4]
 801fb48:	681b      	ldr	r3, [r3, #0]
 801fb4a:	2b05      	cmp	r3, #5
 801fb4c:	dd06      	ble.n	801fb5c <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 801fb4e:	687b      	ldr	r3, [r7, #4]
 801fb50:	685a      	ldr	r2, [r3, #4]
 801fb52:	683b      	ldr	r3, [r7, #0]
 801fb54:	009b      	lsls	r3, r3, #2
 801fb56:	4413      	add	r3, r2
 801fb58:	681b      	ldr	r3, [r3, #0]
 801fb5a:	e004      	b.n	801fb66 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 801fb5c:	687a      	ldr	r2, [r7, #4]
 801fb5e:	683b      	ldr	r3, [r7, #0]
 801fb60:	009b      	lsls	r3, r3, #2
 801fb62:	4413      	add	r3, r2
 801fb64:	685b      	ldr	r3, [r3, #4]
  }
 801fb66:	4618      	mov	r0, r3
 801fb68:	3708      	adds	r7, #8
 801fb6a:	46bd      	mov	sp, r7
 801fb6c:	bd80      	pop	{r7, pc}

0801fb6e <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 801fb6e:	b480      	push	{r7}
 801fb70:	b083      	sub	sp, #12
 801fb72:	af00      	add	r7, sp, #0
 801fb74:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801fb76:	687b      	ldr	r3, [r7, #4]
 801fb78:	681b      	ldr	r3, [r3, #0]
 801fb7a:	2b05      	cmp	r3, #5
 801fb7c:	dd02      	ble.n	801fb84 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 801fb7e:	687b      	ldr	r3, [r7, #4]
 801fb80:	685b      	ldr	r3, [r3, #4]
 801fb82:	e001      	b.n	801fb88 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 801fb84:	687b      	ldr	r3, [r7, #4]
 801fb86:	3304      	adds	r3, #4
  }
 801fb88:	4618      	mov	r0, r3
 801fb8a:	370c      	adds	r7, #12
 801fb8c:	46bd      	mov	sp, r7
 801fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb92:	4770      	bx	lr

0801fb94 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 801fb94:	b580      	push	{r7, lr}
 801fb96:	b086      	sub	sp, #24
 801fb98:	af00      	add	r7, sp, #0
 801fb9a:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 801fb9c:	2301      	movs	r3, #1
 801fb9e:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 801fba0:	6878      	ldr	r0, [r7, #4]
 801fba2:	f7ff ffe4 	bl	801fb6e <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801fba6:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 801fba8:	2300      	movs	r3, #0
 801fbaa:	613b      	str	r3, [r7, #16]
 801fbac:	687b      	ldr	r3, [r7, #4]
 801fbae:	681b      	ldr	r3, [r3, #0]
 801fbb0:	693a      	ldr	r2, [r7, #16]
 801fbb2:	429a      	cmp	r2, r3
 801fbb4:	da0c      	bge.n	801fbd0 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 801fbb6:	693b      	ldr	r3, [r7, #16]
 801fbb8:	009b      	lsls	r3, r3, #2
 801fbba:	68fa      	ldr	r2, [r7, #12]
 801fbbc:	4413      	add	r3, r2
 801fbbe:	681a      	ldr	r2, [r3, #0]
 801fbc0:	697b      	ldr	r3, [r7, #20]
 801fbc2:	fb02 f303 	mul.w	r3, r2, r3
 801fbc6:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 801fbc8:	693b      	ldr	r3, [r7, #16]
 801fbca:	3301      	adds	r3, #1
 801fbcc:	613b      	str	r3, [r7, #16]
 801fbce:	e7ed      	b.n	801fbac <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 801fbd0:	697b      	ldr	r3, [r7, #20]
  }
 801fbd2:	4618      	mov	r0, r3
 801fbd4:	3718      	adds	r7, #24
 801fbd6:	46bd      	mov	sp, r7
 801fbd8:	bd80      	pop	{r7, pc}

0801fbda <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 801fbda:	b590      	push	{r4, r7, lr}
 801fbdc:	b085      	sub	sp, #20
 801fbde:	af00      	add	r7, sp, #0
 801fbe0:	6078      	str	r0, [r7, #4]
 801fbe2:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 801fbe4:	6878      	ldr	r0, [r7, #4]
 801fbe6:	f7ff fe02 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801fbea:	4604      	mov	r4, r0
 801fbec:	6838      	ldr	r0, [r7, #0]
 801fbee:	f7ff fdfe 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801fbf2:	4603      	mov	r3, r0
 801fbf4:	429c      	cmp	r4, r3
 801fbf6:	d001      	beq.n	801fbfc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 801fbf8:	f00c facc 	bl	802c194 <abort>
  const int dims_count = shape.DimensionsCount();
 801fbfc:	6878      	ldr	r0, [r7, #4]
 801fbfe:	f7ff fdf6 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801fc02:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 801fc04:	2300      	movs	r3, #0
 801fc06:	60fb      	str	r3, [r7, #12]
 801fc08:	68fa      	ldr	r2, [r7, #12]
 801fc0a:	68bb      	ldr	r3, [r7, #8]
 801fc0c:	429a      	cmp	r2, r3
 801fc0e:	da11      	bge.n	801fc34 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 801fc10:	68f9      	ldr	r1, [r7, #12]
 801fc12:	6878      	ldr	r0, [r7, #4]
 801fc14:	f7ff ff86 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 801fc18:	4604      	mov	r4, r0
 801fc1a:	68f9      	ldr	r1, [r7, #12]
 801fc1c:	6838      	ldr	r0, [r7, #0]
 801fc1e:	f7ff ff81 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 801fc22:	4603      	mov	r3, r0
 801fc24:	429c      	cmp	r4, r3
 801fc26:	d001      	beq.n	801fc2c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 801fc28:	f00c fab4 	bl	802c194 <abort>
  for (int i = 0; i < dims_count; ++i) {
 801fc2c:	68fb      	ldr	r3, [r7, #12]
 801fc2e:	3301      	adds	r3, #1
 801fc30:	60fb      	str	r3, [r7, #12]
 801fc32:	e7e9      	b.n	801fc08 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 801fc34:	6878      	ldr	r0, [r7, #4]
 801fc36:	f7ff ffad 	bl	801fb94 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801fc3a:	4603      	mov	r3, r0
}
 801fc3c:	4618      	mov	r0, r3
 801fc3e:	3714      	adds	r7, #20
 801fc40:	46bd      	mov	sp, r7
 801fc42:	bd90      	pop	{r4, r7, pc}

0801fc44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 801fc44:	b580      	push	{r7, lr}
 801fc46:	b086      	sub	sp, #24
 801fc48:	af00      	add	r7, sp, #0
 801fc4a:	60f8      	str	r0, [r7, #12]
 801fc4c:	60b9      	str	r1, [r7, #8]
 801fc4e:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 801fc50:	687b      	ldr	r3, [r7, #4]
 801fc52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc56:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 801fc58:	687b      	ldr	r3, [r7, #4]
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	dc02      	bgt.n	801fc64 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 801fc5e:	687b      	ldr	r3, [r7, #4]
 801fc60:	425b      	negs	r3, r3
 801fc62:	e000      	b.n	801fc66 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 801fc64:	2300      	movs	r3, #0
 801fc66:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 801fc68:	68fa      	ldr	r2, [r7, #12]
 801fc6a:	697b      	ldr	r3, [r7, #20]
 801fc6c:	fa02 f303 	lsl.w	r3, r2, r3
 801fc70:	68b9      	ldr	r1, [r7, #8]
 801fc72:	4618      	mov	r0, r3
 801fc74:	f7ff fee0 	bl	801fa38 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801fc78:	4603      	mov	r3, r0
 801fc7a:	6939      	ldr	r1, [r7, #16]
 801fc7c:	4618      	mov	r0, r3
 801fc7e:	f000 fb4b 	bl	8020318 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801fc82:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 801fc84:	4618      	mov	r0, r3
 801fc86:	3718      	adds	r7, #24
 801fc88:	46bd      	mov	sp, r7
 801fc8a:	bd80      	pop	{r7, pc}

0801fc8c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 801fc8c:	b580      	push	{r7, lr}
 801fc8e:	b084      	sub	sp, #16
 801fc90:	af00      	add	r7, sp, #0
 801fc92:	60f8      	str	r0, [r7, #12]
 801fc94:	60b9      	str	r1, [r7, #8]
 801fc96:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801fc98:	68fb      	ldr	r3, [r7, #12]
 801fc9a:	2b00      	cmp	r3, #0
 801fc9c:	d101      	bne.n	801fca2 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801fc9e:	f00c fa79 	bl	802c194 <abort>
  TFLITE_DCHECK(node != nullptr);
 801fca2:	68bb      	ldr	r3, [r7, #8]
 801fca4:	2b00      	cmp	r3, #0
 801fca6:	d101      	bne.n	801fcac <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801fca8:	f00c fa74 	bl	802c194 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 801fcac:	68fb      	ldr	r3, [r7, #12]
 801fcae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fcb0:	68bb      	ldr	r3, [r7, #8]
 801fcb2:	6819      	ldr	r1, [r3, #0]
 801fcb4:	687b      	ldr	r3, [r7, #4]
 801fcb6:	009b      	lsls	r3, r3, #2
 801fcb8:	440b      	add	r3, r1
 801fcba:	685b      	ldr	r3, [r3, #4]
 801fcbc:	4619      	mov	r1, r3
 801fcbe:	68f8      	ldr	r0, [r7, #12]
 801fcc0:	4790      	blx	r2
 801fcc2:	4603      	mov	r3, r0
}
 801fcc4:	4618      	mov	r0, r3
 801fcc6:	3710      	adds	r7, #16
 801fcc8:	46bd      	mov	sp, r7
 801fcca:	bd80      	pop	{r7, pc}

0801fccc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 801fccc:	b580      	push	{r7, lr}
 801fcce:	b084      	sub	sp, #16
 801fcd0:	af00      	add	r7, sp, #0
 801fcd2:	60f8      	str	r0, [r7, #12]
 801fcd4:	60b9      	str	r1, [r7, #8]
 801fcd6:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 801fcd8:	687a      	ldr	r2, [r7, #4]
 801fcda:	68b9      	ldr	r1, [r7, #8]
 801fcdc:	68f8      	ldr	r0, [r7, #12]
 801fcde:	f7ff ffd5 	bl	801fc8c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801fce2:	4603      	mov	r3, r0
}
 801fce4:	4618      	mov	r0, r3
 801fce6:	3710      	adds	r7, #16
 801fce8:	46bd      	mov	sp, r7
 801fcea:	bd80      	pop	{r7, pc}

0801fcec <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 801fcec:	b580      	push	{r7, lr}
 801fcee:	b084      	sub	sp, #16
 801fcf0:	af00      	add	r7, sp, #0
 801fcf2:	60f8      	str	r0, [r7, #12]
 801fcf4:	60b9      	str	r1, [r7, #8]
 801fcf6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801fcf8:	68fb      	ldr	r3, [r7, #12]
 801fcfa:	2b00      	cmp	r3, #0
 801fcfc:	d101      	bne.n	801fd02 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801fcfe:	f00c fa49 	bl	802c194 <abort>
  TFLITE_DCHECK(node != nullptr);
 801fd02:	68bb      	ldr	r3, [r7, #8]
 801fd04:	2b00      	cmp	r3, #0
 801fd06:	d101      	bne.n	801fd0c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801fd08:	f00c fa44 	bl	802c194 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 801fd0c:	68fb      	ldr	r3, [r7, #12]
 801fd0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fd10:	68bb      	ldr	r3, [r7, #8]
 801fd12:	6859      	ldr	r1, [r3, #4]
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	009b      	lsls	r3, r3, #2
 801fd18:	440b      	add	r3, r1
 801fd1a:	685b      	ldr	r3, [r3, #4]
 801fd1c:	4619      	mov	r1, r3
 801fd1e:	68f8      	ldr	r0, [r7, #12]
 801fd20:	4790      	blx	r2
 801fd22:	4603      	mov	r3, r0
}
 801fd24:	4618      	mov	r0, r3
 801fd26:	3710      	adds	r7, #16
 801fd28:	46bd      	mov	sp, r7
 801fd2a:	bd80      	pop	{r7, pc}

0801fd2c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 801fd2c:	b580      	push	{r7, lr}
 801fd2e:	b08a      	sub	sp, #40	; 0x28
 801fd30:	af00      	add	r7, sp, #0
 801fd32:	60f8      	str	r0, [r7, #12]
 801fd34:	60b9      	str	r1, [r7, #8]
 801fd36:	607a      	str	r2, [r7, #4]
 801fd38:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801fd3a:	6879      	ldr	r1, [r7, #4]
 801fd3c:	68f8      	ldr	r0, [r7, #12]
 801fd3e:	f7ff ff4c 	bl	801fbda <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801fd42:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 801fd44:	2300      	movs	r3, #0
 801fd46:	627b      	str	r3, [r7, #36]	; 0x24
 801fd48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fd4a:	6a3b      	ldr	r3, [r7, #32]
 801fd4c:	429a      	cmp	r2, r3
 801fd4e:	da1d      	bge.n	801fd8c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 801fd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd52:	009b      	lsls	r3, r3, #2
 801fd54:	68ba      	ldr	r2, [r7, #8]
 801fd56:	4413      	add	r3, r2
 801fd58:	681b      	ldr	r3, [r3, #0]
 801fd5a:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 801fd5c:	f04f 0300 	mov.w	r3, #0
 801fd60:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 801fd62:	edd7 7a07 	vldr	s15, [r7, #28]
 801fd66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd6e:	d501      	bpl.n	801fd74 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 801fd70:	69bb      	ldr	r3, [r7, #24]
 801fd72:	e000      	b.n	801fd76 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 801fd74:	69fb      	ldr	r3, [r7, #28]
 801fd76:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 801fd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd7a:	009b      	lsls	r3, r3, #2
 801fd7c:	683a      	ldr	r2, [r7, #0]
 801fd7e:	4413      	add	r3, r2
 801fd80:	697a      	ldr	r2, [r7, #20]
 801fd82:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801fd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd86:	3301      	adds	r3, #1
 801fd88:	627b      	str	r3, [r7, #36]	; 0x24
 801fd8a:	e7dd      	b.n	801fd48 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801fd8c:	bf00      	nop
 801fd8e:	3728      	adds	r7, #40	; 0x28
 801fd90:	46bd      	mov	sp, r7
 801fd92:	bd80      	pop	{r7, pc}

0801fd94 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 801fd94:	b580      	push	{r7, lr}
 801fd96:	b08a      	sub	sp, #40	; 0x28
 801fd98:	af00      	add	r7, sp, #0
 801fd9a:	60f8      	str	r0, [r7, #12]
 801fd9c:	60b9      	str	r1, [r7, #8]
 801fd9e:	607a      	str	r2, [r7, #4]
 801fda0:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801fda2:	6879      	ldr	r1, [r7, #4]
 801fda4:	68f8      	ldr	r0, [r7, #12]
 801fda6:	f7ff ff18 	bl	801fbda <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801fdaa:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 801fdac:	2300      	movs	r3, #0
 801fdae:	627b      	str	r3, [r7, #36]	; 0x24
 801fdb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fdb2:	6a3b      	ldr	r3, [r7, #32]
 801fdb4:	429a      	cmp	r2, r3
 801fdb6:	da2a      	bge.n	801fe0e <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 801fdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fdba:	009b      	lsls	r3, r3, #2
 801fdbc:	68ba      	ldr	r2, [r7, #8]
 801fdbe:	4413      	add	r3, r2
 801fdc0:	681b      	ldr	r3, [r3, #0]
 801fdc2:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 801fdc4:	4b14      	ldr	r3, [pc, #80]	; (801fe18 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 801fdc6:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 801fdc8:	f04f 0300 	mov.w	r3, #0
 801fdcc:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 801fdce:	edd7 7a07 	vldr	s15, [r7, #28]
 801fdd2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 801fdd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801fdda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdde:	dd01      	ble.n	801fde4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 801fde0:	69bb      	ldr	r3, [r7, #24]
 801fde2:	e009      	b.n	801fdf8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801fde4:	edd7 7a07 	vldr	s15, [r7, #28]
 801fde8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fdec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdf0:	d501      	bpl.n	801fdf6 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 801fdf2:	697b      	ldr	r3, [r7, #20]
 801fdf4:	e000      	b.n	801fdf8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801fdf6:	69fb      	ldr	r3, [r7, #28]
 801fdf8:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 801fdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fdfc:	009b      	lsls	r3, r3, #2
 801fdfe:	683a      	ldr	r2, [r7, #0]
 801fe00:	4413      	add	r3, r2
 801fe02:	693a      	ldr	r2, [r7, #16]
 801fe04:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801fe06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe08:	3301      	adds	r3, #1
 801fe0a:	627b      	str	r3, [r7, #36]	; 0x24
 801fe0c:	e7d0      	b.n	801fdb0 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801fe0e:	bf00      	nop
 801fe10:	3728      	adds	r7, #40	; 0x28
 801fe12:	46bd      	mov	sp, r7
 801fe14:	bd80      	pop	{r7, pc}
 801fe16:	bf00      	nop
 801fe18:	40c00000 	.word	0x40c00000

0801fe1c <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 801fe1c:	b580      	push	{r7, lr}
 801fe1e:	b084      	sub	sp, #16
 801fe20:	af00      	add	r7, sp, #0
 801fe22:	60f8      	str	r0, [r7, #12]
 801fe24:	60b9      	str	r1, [r7, #8]
 801fe26:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801fe28:	68fb      	ldr	r3, [r7, #12]
 801fe2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fe2c:	2b00      	cmp	r3, #0
 801fe2e:	d101      	bne.n	801fe34 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 801fe30:	f00c f9b0 	bl	802c194 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 801fe34:	68fb      	ldr	r3, [r7, #12]
 801fe36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fe38:	211c      	movs	r1, #28
 801fe3a:	68f8      	ldr	r0, [r7, #12]
 801fe3c:	4798      	blx	r3
 801fe3e:	4603      	mov	r3, r0
}
 801fe40:	4618      	mov	r0, r3
 801fe42:	3710      	adds	r7, #16
 801fe44:	46bd      	mov	sp, r7
 801fe46:	bd80      	pop	{r7, pc}

0801fe48 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 801fe48:	b590      	push	{r4, r7, lr}
 801fe4a:	b089      	sub	sp, #36	; 0x24
 801fe4c:	af02      	add	r7, sp, #8
 801fe4e:	6078      	str	r0, [r7, #4]
 801fe50:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801fe52:	683b      	ldr	r3, [r7, #0]
 801fe54:	691b      	ldr	r3, [r3, #16]
 801fe56:	2b00      	cmp	r3, #0
 801fe58:	d101      	bne.n	801fe5e <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801fe5a:	f00c f99b 	bl	802c194 <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 801fe5e:	683b      	ldr	r3, [r7, #0]
 801fe60:	691b      	ldr	r3, [r3, #16]
 801fe62:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801fe64:	2200      	movs	r2, #0
 801fe66:	6839      	ldr	r1, [r7, #0]
 801fe68:	6878      	ldr	r0, [r7, #4]
 801fe6a:	f7ff f895 	bl	801ef98 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801fe6e:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 801fe70:	693b      	ldr	r3, [r7, #16]
 801fe72:	2b00      	cmp	r3, #0
 801fe74:	d10a      	bne.n	801fe8c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801fe76:	687b      	ldr	r3, [r7, #4]
 801fe78:	695c      	ldr	r4, [r3, #20]
 801fe7a:	4b1a      	ldr	r3, [pc, #104]	; (801fee4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 801fe7c:	9300      	str	r3, [sp, #0]
 801fe7e:	238e      	movs	r3, #142	; 0x8e
 801fe80:	4a19      	ldr	r2, [pc, #100]	; (801fee8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801fe82:	491a      	ldr	r1, [pc, #104]	; (801feec <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 801fe84:	6878      	ldr	r0, [r7, #4]
 801fe86:	47a0      	blx	r4
 801fe88:	2301      	movs	r3, #1
 801fe8a:	e027      	b.n	801fedc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801fe8c:	2200      	movs	r2, #0
 801fe8e:	6839      	ldr	r1, [r7, #0]
 801fe90:	6878      	ldr	r0, [r7, #4]
 801fe92:	f7ff f891 	bl	801efb8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801fe96:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 801fe98:	68fb      	ldr	r3, [r7, #12]
 801fe9a:	2b00      	cmp	r3, #0
 801fe9c:	d10a      	bne.n	801feb4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 801fe9e:	687b      	ldr	r3, [r7, #4]
 801fea0:	695c      	ldr	r4, [r3, #20]
 801fea2:	4b13      	ldr	r3, [pc, #76]	; (801fef0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 801fea4:	9300      	str	r3, [sp, #0]
 801fea6:	2390      	movs	r3, #144	; 0x90
 801fea8:	4a0f      	ldr	r2, [pc, #60]	; (801fee8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801feaa:	4910      	ldr	r1, [pc, #64]	; (801feec <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 801feac:	6878      	ldr	r0, [r7, #4]
 801feae:	47a0      	blx	r4
 801feb0:	2301      	movs	r3, #1
 801feb2:	e013      	b.n	801fedc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 801feb4:	693b      	ldr	r3, [r7, #16]
 801feb6:	781b      	ldrb	r3, [r3, #0]
 801feb8:	2b09      	cmp	r3, #9
 801feba:	d105      	bne.n	801fec8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 801febc:	697a      	ldr	r2, [r7, #20]
 801febe:	68f9      	ldr	r1, [r7, #12]
 801fec0:	6938      	ldr	r0, [r7, #16]
 801fec2:	f000 fa9d 	bl	8020400 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 801fec6:	e008      	b.n	801feda <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 801fec8:	693b      	ldr	r3, [r7, #16]
 801feca:	781b      	ldrb	r3, [r3, #0]
 801fecc:	2b03      	cmp	r3, #3
 801fece:	d104      	bne.n	801feda <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 801fed0:	697a      	ldr	r2, [r7, #20]
 801fed2:	68f9      	ldr	r1, [r7, #12]
 801fed4:	6938      	ldr	r0, [r7, #16]
 801fed6:	f000 fb35 	bl	8020544 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 801feda:	2300      	movs	r3, #0
}
 801fedc:	4618      	mov	r0, r3
 801fede:	371c      	adds	r7, #28
 801fee0:	46bd      	mov	sp, r7
 801fee2:	bd90      	pop	{r4, r7, pc}
 801fee4:	0802e648 	.word	0x0802e648
 801fee8:	0802e59c 	.word	0x0802e59c
 801feec:	0802e630 	.word	0x0802e630
 801fef0:	0802e65c 	.word	0x0802e65c

0801fef4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 801fef4:	b590      	push	{r4, r7, lr}
 801fef6:	b0ad      	sub	sp, #180	; 0xb4
 801fef8:	af02      	add	r7, sp, #8
 801fefa:	6078      	str	r0, [r7, #4]
 801fefc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801fefe:	683b      	ldr	r3, [r7, #0]
 801ff00:	691b      	ldr	r3, [r3, #16]
 801ff02:	2b00      	cmp	r3, #0
 801ff04:	d101      	bne.n	801ff0a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 801ff06:	f00c f945 	bl	802c194 <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 801ff0a:	683b      	ldr	r3, [r7, #0]
 801ff0c:	691b      	ldr	r3, [r3, #16]
 801ff0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801ff12:	2200      	movs	r2, #0
 801ff14:	6839      	ldr	r1, [r7, #0]
 801ff16:	6878      	ldr	r0, [r7, #4]
 801ff18:	f7ff fed8 	bl	801fccc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801ff1c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801ff20:	2200      	movs	r2, #0
 801ff22:	6839      	ldr	r1, [r7, #0]
 801ff24:	6878      	ldr	r0, [r7, #4]
 801ff26:	f7ff fee1 	bl	801fcec <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801ff2a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801ff2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ff32:	7a1b      	ldrb	r3, [r3, #8]
 801ff34:	2b09      	cmp	r3, #9
 801ff36:	d032      	beq.n	801ff9e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801ff38:	2b09      	cmp	r3, #9
 801ff3a:	f300 808c 	bgt.w	8020056 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 801ff3e:	2b01      	cmp	r3, #1
 801ff40:	d002      	beq.n	801ff48 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 801ff42:	2b03      	cmp	r3, #3
 801ff44:	d059      	beq.n	801fffa <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 801ff46:	e086      	b.n	8020056 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 801ff48:	f107 030c 	add.w	r3, r7, #12
 801ff4c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801ff50:	4618      	mov	r0, r3
 801ff52:	f003 fc38 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801ff56:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801ff5a:	f000 fb95 	bl	8020688 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801ff5e:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 801ff60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff64:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801ff68:	4618      	mov	r0, r3
 801ff6a:	f003 fc2c 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801ff6e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801ff72:	f000 fb98 	bl	80206a6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801ff76:	4603      	mov	r3, r0
 801ff78:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801ff7c:	f107 000c 	add.w	r0, r7, #12
 801ff80:	4621      	mov	r1, r4
 801ff82:	f7ff fed3 	bl	801fd2c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 801ff86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff8a:	4618      	mov	r0, r3
 801ff8c:	f7ff fc19 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801ff90:	f107 030c 	add.w	r3, r7, #12
 801ff94:	4618      	mov	r0, r3
 801ff96:	f7ff fc14 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 801ff9a:	2300      	movs	r3, #0
 801ff9c:	e069      	b.n	8020072 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801ff9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ffa2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801ffa6:	4618      	mov	r0, r3
 801ffa8:	f003 fc0d 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 801ffac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801ffb0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801ffb4:	4618      	mov	r0, r3
 801ffb6:	f003 fc06 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801ffba:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801ffbe:	f000 fb83 	bl	80206c8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801ffc2:	4604      	mov	r4, r0
 801ffc4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801ffc8:	f000 fb8d 	bl	80206e6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801ffcc:	4603      	mov	r3, r0
 801ffce:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801ffd2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801ffd6:	9300      	str	r3, [sp, #0]
 801ffd8:	4623      	mov	r3, r4
 801ffda:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801ffde:	f000 fb93 	bl	8020708 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 801ffe2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801ffe6:	4618      	mov	r0, r3
 801ffe8:	f7ff fbeb 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801ffec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801fff0:	4618      	mov	r0, r3
 801fff2:	f7ff fbe6 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801fff6:	2300      	movs	r3, #0
 801fff8:	e03b      	b.n	8020072 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801fffa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801fffe:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8020002:	4618      	mov	r0, r3
 8020004:	f003 fbdf 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 8020008:	f107 0384 	add.w	r3, r7, #132	; 0x84
 802000c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8020010:	4618      	mov	r0, r3
 8020012:	f003 fbd8 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8020016:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 802001a:	f000 fbc1 	bl	80207a0 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 802001e:	4604      	mov	r4, r0
 8020020:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8020024:	f000 fbcb 	bl	80207be <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8020028:	4603      	mov	r3, r0
 802002a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 802002e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8020032:	9300      	str	r3, [sp, #0]
 8020034:	4623      	mov	r3, r4
 8020036:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 802003a:	f000 fbd1 	bl	80207e0 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 802003e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8020042:	4618      	mov	r0, r3
 8020044:	f7ff fbbd 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8020048:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802004c:	4618      	mov	r0, r3
 802004e:	f7ff fbb8 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 8020052:	2300      	movs	r3, #0
 8020054:	e00d      	b.n	8020072 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 8020056:	687b      	ldr	r3, [r7, #4]
 8020058:	695c      	ldr	r4, [r3, #20]
 802005a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802005e:	7a1b      	ldrb	r3, [r3, #8]
 8020060:	4618      	mov	r0, r3
 8020062:	f7fe fc3b 	bl	801e8dc <TfLiteTypeGetName>
 8020066:	4603      	mov	r3, r0
 8020068:	461a      	mov	r2, r3
 802006a:	4904      	ldr	r1, [pc, #16]	; (802007c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 802006c:	6878      	ldr	r0, [r7, #4]
 802006e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8020070:	2301      	movs	r3, #1
    }
  }
}
 8020072:	4618      	mov	r0, r3
 8020074:	37ac      	adds	r7, #172	; 0xac
 8020076:	46bd      	mov	sp, r7
 8020078:	bd90      	pop	{r4, r7, pc}
 802007a:	bf00      	nop
 802007c:	0802e670 	.word	0x0802e670

08020080 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 8020080:	b580      	push	{r7, lr}
 8020082:	b084      	sub	sp, #16
 8020084:	af00      	add	r7, sp, #0
 8020086:	60f8      	str	r0, [r7, #12]
 8020088:	60b9      	str	r1, [r7, #8]
 802008a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 802008c:	68fb      	ldr	r3, [r7, #12]
 802008e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020090:	2b00      	cmp	r3, #0
 8020092:	d101      	bne.n	8020098 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 8020094:	f00c f87e 	bl	802c194 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 8020098:	68fb      	ldr	r3, [r7, #12]
 802009a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802009c:	2104      	movs	r1, #4
 802009e:	68f8      	ldr	r0, [r7, #12]
 80200a0:	4798      	blx	r3
 80200a2:	4603      	mov	r3, r0
}
 80200a4:	4618      	mov	r0, r3
 80200a6:	3710      	adds	r7, #16
 80200a8:	46bd      	mov	sp, r7
 80200aa:	bd80      	pop	{r7, pc}

080200ac <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 80200ac:	b590      	push	{r4, r7, lr}
 80200ae:	b087      	sub	sp, #28
 80200b0:	af02      	add	r7, sp, #8
 80200b2:	6078      	str	r0, [r7, #4]
 80200b4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80200b6:	683b      	ldr	r3, [r7, #0]
 80200b8:	691b      	ldr	r3, [r3, #16]
 80200ba:	2b00      	cmp	r3, #0
 80200bc:	d101      	bne.n	80200c2 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 80200be:	f00c f869 	bl	802c194 <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 80200c2:	683b      	ldr	r3, [r7, #0]
 80200c4:	691b      	ldr	r3, [r3, #16]
 80200c6:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80200c8:	2200      	movs	r2, #0
 80200ca:	6839      	ldr	r1, [r7, #0]
 80200cc:	6878      	ldr	r0, [r7, #4]
 80200ce:	f7fe ff63 	bl	801ef98 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80200d2:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 80200d4:	68bb      	ldr	r3, [r7, #8]
 80200d6:	2b00      	cmp	r3, #0
 80200d8:	d10a      	bne.n	80200f0 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 80200da:	687b      	ldr	r3, [r7, #4]
 80200dc:	695c      	ldr	r4, [r3, #20]
 80200de:	4b20      	ldr	r3, [pc, #128]	; (8020160 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 80200e0:	9300      	str	r3, [sp, #0]
 80200e2:	23cd      	movs	r3, #205	; 0xcd
 80200e4:	4a1f      	ldr	r2, [pc, #124]	; (8020164 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 80200e6:	4920      	ldr	r1, [pc, #128]	; (8020168 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 80200e8:	6878      	ldr	r0, [r7, #4]
 80200ea:	47a0      	blx	r4
 80200ec:	2301      	movs	r3, #1
 80200ee:	e033      	b.n	8020158 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 80200f0:	68bb      	ldr	r3, [r7, #8]
 80200f2:	781b      	ldrb	r3, [r3, #0]
 80200f4:	2b09      	cmp	r3, #9
 80200f6:	d115      	bne.n	8020124 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 80200f8:	68bb      	ldr	r3, [r7, #8]
 80200fa:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 80200fe:	68bb      	ldr	r3, [r7, #8]
 8020100:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 8020102:	4618      	mov	r0, r3
 8020104:	eef0 0a67 	vmov.f32	s1, s15
 8020108:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 802010c:	f000 fbb3 	bl	8020876 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 8020110:	4603      	mov	r3, r0
 8020112:	461a      	mov	r2, r3
 8020114:	68fb      	ldr	r3, [r7, #12]
 8020116:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 8020118:	68bb      	ldr	r3, [r7, #8]
 802011a:	691b      	ldr	r3, [r3, #16]
 802011c:	b25a      	sxtb	r2, r3
 802011e:	68fb      	ldr	r3, [r7, #12]
 8020120:	705a      	strb	r2, [r3, #1]
 8020122:	e018      	b.n	8020156 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 8020124:	68bb      	ldr	r3, [r7, #8]
 8020126:	781b      	ldrb	r3, [r3, #0]
 8020128:	2b03      	cmp	r3, #3
 802012a:	d114      	bne.n	8020156 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 802012c:	68bb      	ldr	r3, [r7, #8]
 802012e:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 8020132:	68bb      	ldr	r3, [r7, #8]
 8020134:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 8020136:	4618      	mov	r0, r3
 8020138:	eef0 0a67 	vmov.f32	s1, s15
 802013c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8020140:	f000 fbe8 	bl	8020914 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 8020144:	4603      	mov	r3, r0
 8020146:	461a      	mov	r2, r3
 8020148:	68fb      	ldr	r3, [r7, #12]
 802014a:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 802014c:	68bb      	ldr	r3, [r7, #8]
 802014e:	691b      	ldr	r3, [r3, #16]
 8020150:	b2da      	uxtb	r2, r3
 8020152:	68fb      	ldr	r3, [r7, #12]
 8020154:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 8020156:	2300      	movs	r3, #0
}
 8020158:	4618      	mov	r0, r3
 802015a:	3714      	adds	r7, #20
 802015c:	46bd      	mov	sp, r7
 802015e:	bd90      	pop	{r4, r7, pc}
 8020160:	0802e648 	.word	0x0802e648
 8020164:	0802e59c 	.word	0x0802e59c
 8020168:	0802e630 	.word	0x0802e630

0802016c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 802016c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802016e:	b0ad      	sub	sp, #180	; 0xb4
 8020170:	af02      	add	r7, sp, #8
 8020172:	6078      	str	r0, [r7, #4]
 8020174:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8020176:	683b      	ldr	r3, [r7, #0]
 8020178:	691b      	ldr	r3, [r3, #16]
 802017a:	2b00      	cmp	r3, #0
 802017c:	d101      	bne.n	8020182 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 802017e:	f00c f809 	bl	802c194 <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 8020182:	683b      	ldr	r3, [r7, #0]
 8020184:	691b      	ldr	r3, [r3, #16]
 8020186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 802018a:	2200      	movs	r2, #0
 802018c:	6839      	ldr	r1, [r7, #0]
 802018e:	6878      	ldr	r0, [r7, #4]
 8020190:	f7ff fd9c 	bl	801fccc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8020194:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8020198:	2200      	movs	r2, #0
 802019a:	6839      	ldr	r1, [r7, #0]
 802019c:	6878      	ldr	r0, [r7, #4]
 802019e:	f7ff fda5 	bl	801fcec <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80201a2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 80201a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80201aa:	7a1b      	ldrb	r3, [r3, #8]
 80201ac:	2b09      	cmp	r3, #9
 80201ae:	d032      	beq.n	8020216 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 80201b0:	2b09      	cmp	r3, #9
 80201b2:	f300 809c 	bgt.w	80202ee <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 80201b6:	2b01      	cmp	r3, #1
 80201b8:	d002      	beq.n	80201c0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 80201ba:	2b03      	cmp	r3, #3
 80201bc:	d062      	beq.n	8020284 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 80201be:	e096      	b.n	80202ee <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 80201c0:	f107 030c 	add.w	r3, r7, #12
 80201c4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80201c8:	4618      	mov	r0, r3
 80201ca:	f003 fafc 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80201ce:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80201d2:	f000 fa59 	bl	8020688 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80201d6:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 80201d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80201dc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80201e0:	4618      	mov	r0, r3
 80201e2:	f003 faf0 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 80201e6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80201ea:	f000 fa5c 	bl	80206a6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80201ee:	4603      	mov	r3, r0
 80201f0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80201f4:	f107 000c 	add.w	r0, r7, #12
 80201f8:	4621      	mov	r1, r4
 80201fa:	f7ff fdcb 	bl	801fd94 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 80201fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020202:	4618      	mov	r0, r3
 8020204:	f7ff fadd 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 8020208:	f107 030c 	add.w	r3, r7, #12
 802020c:	4618      	mov	r0, r3
 802020e:	f7ff fad8 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 8020212:	2300      	movs	r3, #0
 8020214:	e079      	b.n	802030a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8020216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802021a:	f993 4001 	ldrsb.w	r4, [r3, #1]
 802021e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8020222:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 8020226:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802022a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 802022e:	4618      	mov	r0, r3
 8020230:	f003 fac9 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8020234:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8020238:	f000 fa46 	bl	80206c8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802023c:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 802023e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8020242:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8020246:	4618      	mov	r0, r3
 8020248:	f003 fabd 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 802024c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8020250:	f000 fa49 	bl	80206e6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8020254:	4603      	mov	r3, r0
 8020256:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 802025a:	9301      	str	r3, [sp, #4]
 802025c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8020260:	9300      	str	r3, [sp, #0]
 8020262:	4633      	mov	r3, r6
 8020264:	4629      	mov	r1, r5
 8020266:	4620      	mov	r0, r4
 8020268:	f000 fba3 	bl	80209b2 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 802026c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8020270:	4618      	mov	r0, r3
 8020272:	f7ff faa6 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 8020276:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802027a:	4618      	mov	r0, r3
 802027c:	f7ff faa1 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 8020280:	2300      	movs	r3, #0
 8020282:	e042      	b.n	802030a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8020284:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8020288:	78dc      	ldrb	r4, [r3, #3]
 802028a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802028e:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 8020290:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8020294:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8020298:	4618      	mov	r0, r3
 802029a:	f003 fa94 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 802029e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80202a2:	f000 fa7d 	bl	80207a0 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80202a6:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 80202a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80202ac:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80202b0:	4618      	mov	r0, r3
 80202b2:	f003 fa88 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 80202b6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80202ba:	f000 fa80 	bl	80207be <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 80202be:	4603      	mov	r3, r0
 80202c0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80202c4:	9301      	str	r3, [sp, #4]
 80202c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80202ca:	9300      	str	r3, [sp, #0]
 80202cc:	4633      	mov	r3, r6
 80202ce:	4629      	mov	r1, r5
 80202d0:	4620      	mov	r0, r4
 80202d2:	f000 fbad 	bl	8020a30 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 80202d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80202da:	4618      	mov	r0, r3
 80202dc:	f7ff fa71 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 80202e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80202e4:	4618      	mov	r0, r3
 80202e6:	f7ff fa6c 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 80202ea:	2300      	movs	r3, #0
 80202ec:	e00d      	b.n	802030a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 80202ee:	687b      	ldr	r3, [r7, #4]
 80202f0:	695c      	ldr	r4, [r3, #20]
 80202f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80202f6:	7a1b      	ldrb	r3, [r3, #8]
 80202f8:	4618      	mov	r0, r3
 80202fa:	f7fe faef 	bl	801e8dc <TfLiteTypeGetName>
 80202fe:	4603      	mov	r3, r0
 8020300:	461a      	mov	r2, r3
 8020302:	4904      	ldr	r1, [pc, #16]	; (8020314 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 8020304:	6878      	ldr	r0, [r7, #4]
 8020306:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8020308:	2301      	movs	r3, #1
    }
  }
}
 802030a:	4618      	mov	r0, r3
 802030c:	37ac      	adds	r7, #172	; 0xac
 802030e:	46bd      	mov	sp, r7
 8020310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020312:	bf00      	nop
 8020314:	0802e670 	.word	0x0802e670

08020318 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8020318:	b5f0      	push	{r4, r5, r6, r7, lr}
 802031a:	b089      	sub	sp, #36	; 0x24
 802031c:	af00      	add	r7, sp, #0
 802031e:	6078      	str	r0, [r7, #4]
 8020320:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8020322:	6839      	ldr	r1, [r7, #0]
 8020324:	2900      	cmp	r1, #0
 8020326:	da06      	bge.n	8020336 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8020328:	4b31      	ldr	r3, [pc, #196]	; (80203f0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 802032a:	4a32      	ldr	r2, [pc, #200]	; (80203f4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 802032c:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8020330:	4831      	ldr	r0, [pc, #196]	; (80203f8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8020332:	f00b ff37 	bl	802c1a4 <__assert_func>
  assert(exponent <= 31);
 8020336:	6839      	ldr	r1, [r7, #0]
 8020338:	291f      	cmp	r1, #31
 802033a:	dd06      	ble.n	802034a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 802033c:	4b2f      	ldr	r3, [pc, #188]	; (80203fc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 802033e:	4a2d      	ldr	r2, [pc, #180]	; (80203f4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8020340:	f240 1167 	movw	r1, #359	; 0x167
 8020344:	482c      	ldr	r0, [pc, #176]	; (80203f8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8020346:	f00b ff2d 	bl	802c1a4 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 802034a:	f04f 0001 	mov.w	r0, #1
 802034e:	f04f 0100 	mov.w	r1, #0
 8020352:	683c      	ldr	r4, [r7, #0]
 8020354:	f1a4 0620 	sub.w	r6, r4, #32
 8020358:	f1c4 0520 	rsb	r5, r4, #32
 802035c:	fa01 f304 	lsl.w	r3, r1, r4
 8020360:	fa00 f606 	lsl.w	r6, r0, r6
 8020364:	4333      	orrs	r3, r6
 8020366:	fa20 f505 	lsr.w	r5, r0, r5
 802036a:	432b      	orrs	r3, r5
 802036c:	fa00 f204 	lsl.w	r2, r0, r4
 8020370:	4613      	mov	r3, r2
 8020372:	3b01      	subs	r3, #1
 8020374:	4618      	mov	r0, r3
 8020376:	f000 fb93 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802037a:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 802037c:	2000      	movs	r0, #0
 802037e:	f000 fb8f 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8020382:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8020384:	2001      	movs	r0, #1
 8020386:	f000 fb8b 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802038a:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 802038c:	69f9      	ldr	r1, [r7, #28]
 802038e:	6878      	ldr	r0, [r7, #4]
 8020390:	f000 fb91 	bl	8020ab6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8020394:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8020396:	2101      	movs	r1, #1
 8020398:	69f8      	ldr	r0, [r7, #28]
 802039a:	f000 fb9a 	bl	8020ad2 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 802039e:	4604      	mov	r4, r0
 80203a0:	69b9      	ldr	r1, [r7, #24]
 80203a2:	6878      	ldr	r0, [r7, #4]
 80203a4:	f000 fba4 	bl	8020af0 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80203a8:	4603      	mov	r3, r0
 80203aa:	6979      	ldr	r1, [r7, #20]
 80203ac:	4618      	mov	r0, r3
 80203ae:	f000 fb82 	bl	8020ab6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80203b2:	4603      	mov	r3, r0
 80203b4:	4619      	mov	r1, r3
 80203b6:	4620      	mov	r0, r4
 80203b8:	f000 fbae 	bl	8020b18 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80203bc:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 80203be:	6839      	ldr	r1, [r7, #0]
 80203c0:	6878      	ldr	r0, [r7, #4]
 80203c2:	f000 fb86 	bl	8020ad2 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 80203c6:	4604      	mov	r4, r0
 80203c8:	68f9      	ldr	r1, [r7, #12]
 80203ca:	6938      	ldr	r0, [r7, #16]
 80203cc:	f000 fbb2 	bl	8020b34 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80203d0:	4603      	mov	r3, r0
 80203d2:	6979      	ldr	r1, [r7, #20]
 80203d4:	4618      	mov	r0, r3
 80203d6:	f000 fb6e 	bl	8020ab6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80203da:	4603      	mov	r3, r0
 80203dc:	4619      	mov	r1, r3
 80203de:	4620      	mov	r0, r4
 80203e0:	f000 fb9a 	bl	8020b18 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80203e4:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 80203e6:	4618      	mov	r0, r3
 80203e8:	3724      	adds	r7, #36	; 0x24
 80203ea:	46bd      	mov	sp, r7
 80203ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80203ee:	bf00      	nop
 80203f0:	0802e6dc 	.word	0x0802e6dc
 80203f4:	0802e6ec 	.word	0x0802e6ec
 80203f8:	0802e748 	.word	0x0802e748
 80203fc:	0802e7dc 	.word	0x0802e7dc

08020400 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8020400:	b590      	push	{r4, r7, lr}
 8020402:	b099      	sub	sp, #100	; 0x64
 8020404:	af00      	add	r7, sp, #0
 8020406:	60f8      	str	r0, [r7, #12]
 8020408:	60b9      	str	r1, [r7, #8]
 802040a:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 802040c:	f04f 0300 	mov.w	r3, #0
 8020410:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 8020412:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8020416:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 8020418:	68fb      	ldr	r3, [r7, #12]
 802041a:	ed93 7a03 	vldr	s14, [r3, #12]
 802041e:	68bb      	ldr	r3, [r7, #8]
 8020420:	edd3 7a03 	vldr	s15, [r3, #12]
 8020424:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 8020428:	ee16 0a90 	vmov	r0, s13
 802042c:	f7e0 f8b6 	bl	800059c <__aeabi_f2d>
 8020430:	4602      	mov	r2, r0
 8020432:	460b      	mov	r3, r1
 8020434:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 8020438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802043c:	68f9      	ldr	r1, [r7, #12]
 802043e:	4618      	mov	r0, r3
 8020440:	f7ff fa39 	bl	801f8b6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8020444:	f107 0310 	add.w	r3, r7, #16
 8020448:	68b9      	ldr	r1, [r7, #8]
 802044a:	4618      	mov	r0, r3
 802044c:	f7ff fa33 	bl	801f8b6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 8020450:	687b      	ldr	r3, [r7, #4]
 8020452:	f103 0214 	add.w	r2, r3, #20
 8020456:	687b      	ldr	r3, [r7, #4]
 8020458:	3318      	adds	r3, #24
 802045a:	4619      	mov	r1, r3
 802045c:	4610      	mov	r0, r2
 802045e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8020462:	f7fe fac1 	bl	801e9e8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 8020466:	f7fe fc90 	bl	801ed8a <_ZNSt14numeric_limitsIaE3minEv>
 802046a:	4603      	mov	r3, r0
 802046c:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 802046e:	68bb      	ldr	r3, [r7, #8]
 8020470:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8020472:	68bb      	ldr	r3, [r7, #8]
 8020474:	edd3 7a03 	vldr	s15, [r3, #12]
 8020478:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 802047c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8020480:	eeb0 0a66 	vmov.f32	s0, s13
 8020484:	f009 f84c 	bl	8029520 <roundf>
 8020488:	eef0 7a40 	vmov.f32	s15, s0
 802048c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020490:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 8020494:	4423      	add	r3, r4
 8020496:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8020498:	f107 0244 	add.w	r2, r7, #68	; 0x44
 802049c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80204a0:	4611      	mov	r1, r2
 80204a2:	4618      	mov	r0, r3
 80204a4:	f7ff f958 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 80204a8:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 80204aa:	681a      	ldr	r2, [r3, #0]
 80204ac:	687b      	ldr	r3, [r7, #4]
 80204ae:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 80204b0:	f7ff fab6 	bl	801fa20 <_ZNSt14numeric_limitsIfE8infinityEv>
 80204b4:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 80204b8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80204bc:	eef4 7a47 	vcmp.f32	s15, s14
 80204c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204c4:	d103      	bne.n	80204ce <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 80204c6:	f7fe fc69 	bl	801ed9c <_ZNSt14numeric_limitsIaE3maxEv>
 80204ca:	4603      	mov	r3, r0
 80204cc:	e022      	b.n	8020514 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 80204ce:	f7fe fc65 	bl	801ed9c <_ZNSt14numeric_limitsIaE3maxEv>
 80204d2:	4603      	mov	r3, r0
 80204d4:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 80204d6:	68bb      	ldr	r3, [r7, #8]
 80204d8:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 80204da:	68bb      	ldr	r3, [r7, #8]
 80204dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80204e0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80204e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80204e8:	eeb0 0a66 	vmov.f32	s0, s13
 80204ec:	f009 f818 	bl	8029520 <roundf>
 80204f0:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 80204f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80204f8:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 80204fc:	4423      	add	r3, r4
 80204fe:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 8020500:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8020504:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8020508:	4611      	mov	r1, r2
 802050a:	4618      	mov	r0, r3
 802050c:	f7ff f910 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 8020510:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8020512:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 8020514:	687a      	ldr	r2, [r7, #4]
 8020516:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 8020518:	68fb      	ldr	r3, [r7, #12]
 802051a:	691a      	ldr	r2, [r3, #16]
 802051c:	687b      	ldr	r3, [r7, #4]
 802051e:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 8020520:	68bb      	ldr	r3, [r7, #8]
 8020522:	691a      	ldr	r2, [r3, #16]
 8020524:	687b      	ldr	r3, [r7, #4]
 8020526:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 8020528:	f107 0310 	add.w	r3, r7, #16
 802052c:	4618      	mov	r0, r3
 802052e:	f7ff f948 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 8020532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8020536:	4618      	mov	r0, r3
 8020538:	f7ff f943 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 802053c:	bf00      	nop
 802053e:	3764      	adds	r7, #100	; 0x64
 8020540:	46bd      	mov	sp, r7
 8020542:	bd90      	pop	{r4, r7, pc}

08020544 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8020544:	b590      	push	{r4, r7, lr}
 8020546:	b099      	sub	sp, #100	; 0x64
 8020548:	af00      	add	r7, sp, #0
 802054a:	60f8      	str	r0, [r7, #12]
 802054c:	60b9      	str	r1, [r7, #8]
 802054e:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 8020550:	f04f 0300 	mov.w	r3, #0
 8020554:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 8020556:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 802055a:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 802055c:	68fb      	ldr	r3, [r7, #12]
 802055e:	ed93 7a03 	vldr	s14, [r3, #12]
 8020562:	68bb      	ldr	r3, [r7, #8]
 8020564:	edd3 7a03 	vldr	s15, [r3, #12]
 8020568:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 802056c:	ee16 0a90 	vmov	r0, s13
 8020570:	f7e0 f814 	bl	800059c <__aeabi_f2d>
 8020574:	4602      	mov	r2, r0
 8020576:	460b      	mov	r3, r1
 8020578:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 802057c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8020580:	68f9      	ldr	r1, [r7, #12]
 8020582:	4618      	mov	r0, r3
 8020584:	f7ff f997 	bl	801f8b6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8020588:	f107 0310 	add.w	r3, r7, #16
 802058c:	68b9      	ldr	r1, [r7, #8]
 802058e:	4618      	mov	r0, r3
 8020590:	f7ff f991 	bl	801f8b6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 8020594:	687b      	ldr	r3, [r7, #4]
 8020596:	f103 0214 	add.w	r2, r3, #20
 802059a:	687b      	ldr	r3, [r7, #4]
 802059c:	3318      	adds	r3, #24
 802059e:	4619      	mov	r1, r3
 80205a0:	4610      	mov	r0, r2
 80205a2:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80205a6:	f7fe fa1f 	bl	801e9e8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 80205aa:	f7fe fbff 	bl	801edac <_ZNSt14numeric_limitsIhE3minEv>
 80205ae:	4603      	mov	r3, r0
 80205b0:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 80205b2:	68bb      	ldr	r3, [r7, #8]
 80205b4:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80205b6:	68bb      	ldr	r3, [r7, #8]
 80205b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80205bc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80205c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80205c4:	eeb0 0a66 	vmov.f32	s0, s13
 80205c8:	f008 ffaa 	bl	8029520 <roundf>
 80205cc:	eef0 7a40 	vmov.f32	s15, s0
 80205d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80205d4:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 80205d8:	4423      	add	r3, r4
 80205da:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80205dc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80205e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80205e4:	4611      	mov	r1, r2
 80205e6:	4618      	mov	r0, r3
 80205e8:	f7ff f8b6 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 80205ec:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 80205ee:	681a      	ldr	r2, [r3, #0]
 80205f0:	687b      	ldr	r3, [r7, #4]
 80205f2:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 80205f4:	f7ff fa14 	bl	801fa20 <_ZNSt14numeric_limitsIfE8infinityEv>
 80205f8:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 80205fc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8020600:	eef4 7a47 	vcmp.f32	s15, s14
 8020604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020608:	d103      	bne.n	8020612 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 802060a:	f7fe fbd7 	bl	801edbc <_ZNSt14numeric_limitsIhE3maxEv>
 802060e:	4603      	mov	r3, r0
 8020610:	e022      	b.n	8020658 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 8020612:	f7fe fbd3 	bl	801edbc <_ZNSt14numeric_limitsIhE3maxEv>
 8020616:	4603      	mov	r3, r0
 8020618:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 802061a:	68bb      	ldr	r3, [r7, #8]
 802061c:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 802061e:	68bb      	ldr	r3, [r7, #8]
 8020620:	edd3 7a03 	vldr	s15, [r3, #12]
 8020624:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8020628:	eec7 6a27 	vdiv.f32	s13, s14, s15
 802062c:	eeb0 0a66 	vmov.f32	s0, s13
 8020630:	f008 ff76 	bl	8029520 <roundf>
 8020634:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 8020638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802063c:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 8020640:	4423      	add	r3, r4
 8020642:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 8020644:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8020648:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802064c:	4611      	mov	r1, r2
 802064e:	4618      	mov	r0, r3
 8020650:	f7ff f86e 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 8020654:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8020656:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 8020658:	687a      	ldr	r2, [r7, #4]
 802065a:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 802065c:	68fb      	ldr	r3, [r7, #12]
 802065e:	691a      	ldr	r2, [r3, #16]
 8020660:	687b      	ldr	r3, [r7, #4]
 8020662:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 8020664:	68bb      	ldr	r3, [r7, #8]
 8020666:	691a      	ldr	r2, [r3, #16]
 8020668:	687b      	ldr	r3, [r7, #4]
 802066a:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 802066c:	f107 0310 	add.w	r3, r7, #16
 8020670:	4618      	mov	r0, r3
 8020672:	f7ff f8a6 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 8020676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802067a:	4618      	mov	r0, r3
 802067c:	f7ff f8a1 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8020680:	bf00      	nop
 8020682:	3764      	adds	r7, #100	; 0x64
 8020684:	46bd      	mov	sp, r7
 8020686:	bd90      	pop	{r4, r7, pc}

08020688 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8020688:	b580      	push	{r7, lr}
 802068a:	b082      	sub	sp, #8
 802068c:	af00      	add	r7, sp, #0
 802068e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8020690:	687b      	ldr	r3, [r7, #4]
 8020692:	2b00      	cmp	r3, #0
 8020694:	d101      	bne.n	802069a <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 8020696:	f00b fd7d 	bl	802c194 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 802069a:	687b      	ldr	r3, [r7, #4]
 802069c:	681b      	ldr	r3, [r3, #0]
}
 802069e:	4618      	mov	r0, r3
 80206a0:	3708      	adds	r7, #8
 80206a2:	46bd      	mov	sp, r7
 80206a4:	bd80      	pop	{r7, pc}

080206a6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80206a6:	b480      	push	{r7}
 80206a8:	b083      	sub	sp, #12
 80206aa:	af00      	add	r7, sp, #0
 80206ac:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80206ae:	687b      	ldr	r3, [r7, #4]
 80206b0:	2b00      	cmp	r3, #0
 80206b2:	d002      	beq.n	80206ba <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 80206b4:	687b      	ldr	r3, [r7, #4]
 80206b6:	681b      	ldr	r3, [r3, #0]
 80206b8:	e000      	b.n	80206bc <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 80206ba:	2300      	movs	r3, #0
}
 80206bc:	4618      	mov	r0, r3
 80206be:	370c      	adds	r7, #12
 80206c0:	46bd      	mov	sp, r7
 80206c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206c6:	4770      	bx	lr

080206c8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80206c8:	b580      	push	{r7, lr}
 80206ca:	b082      	sub	sp, #8
 80206cc:	af00      	add	r7, sp, #0
 80206ce:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80206d0:	687b      	ldr	r3, [r7, #4]
 80206d2:	2b00      	cmp	r3, #0
 80206d4:	d101      	bne.n	80206da <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 80206d6:	f00b fd5d 	bl	802c194 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80206da:	687b      	ldr	r3, [r7, #4]
 80206dc:	681b      	ldr	r3, [r3, #0]
}
 80206de:	4618      	mov	r0, r3
 80206e0:	3708      	adds	r7, #8
 80206e2:	46bd      	mov	sp, r7
 80206e4:	bd80      	pop	{r7, pc}

080206e6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80206e6:	b480      	push	{r7}
 80206e8:	b083      	sub	sp, #12
 80206ea:	af00      	add	r7, sp, #0
 80206ec:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80206ee:	687b      	ldr	r3, [r7, #4]
 80206f0:	2b00      	cmp	r3, #0
 80206f2:	d002      	beq.n	80206fa <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 80206f4:	687b      	ldr	r3, [r7, #4]
 80206f6:	681b      	ldr	r3, [r3, #0]
 80206f8:	e000      	b.n	80206fc <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 80206fa:	2300      	movs	r3, #0
}
 80206fc:	4618      	mov	r0, r3
 80206fe:	370c      	adds	r7, #12
 8020700:	46bd      	mov	sp, r7
 8020702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020706:	4770      	bx	lr

08020708 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 8020708:	b590      	push	{r4, r7, lr}
 802070a:	b089      	sub	sp, #36	; 0x24
 802070c:	af00      	add	r7, sp, #0
 802070e:	60f8      	str	r0, [r7, #12]
 8020710:	60b9      	str	r1, [r7, #8]
 8020712:	607a      	str	r2, [r7, #4]
 8020714:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8020716:	6879      	ldr	r1, [r7, #4]
 8020718:	68b8      	ldr	r0, [r7, #8]
 802071a:	f7ff fa5e 	bl	801fbda <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 802071e:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8020720:	2300      	movs	r3, #0
 8020722:	61fb      	str	r3, [r7, #28]
 8020724:	69fa      	ldr	r2, [r7, #28]
 8020726:	69bb      	ldr	r3, [r7, #24]
 8020728:	429a      	cmp	r2, r3
 802072a:	da35      	bge.n	8020798 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 802072c:	69fb      	ldr	r3, [r7, #28]
 802072e:	683a      	ldr	r2, [r7, #0]
 8020730:	4413      	add	r3, r2
 8020732:	f993 3000 	ldrsb.w	r3, [r3]
 8020736:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 8020738:	68fb      	ldr	r3, [r7, #12]
 802073a:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 802073c:	68fb      	ldr	r3, [r7, #12]
 802073e:	68db      	ldr	r3, [r3, #12]
 8020740:	697a      	ldr	r2, [r7, #20]
 8020742:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 8020744:	68fb      	ldr	r3, [r7, #12]
 8020746:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 8020748:	68fb      	ldr	r3, [r7, #12]
 802074a:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 802074c:	461a      	mov	r2, r3
 802074e:	f7ff fa79 	bl	801fc44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8020752:	4603      	mov	r3, r0
        data.params.output_offset +
 8020754:	4423      	add	r3, r4
    int32_t clamped =
 8020756:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 8020758:	68fb      	ldr	r3, [r7, #12]
 802075a:	3304      	adds	r3, #4
 802075c:	f107 0210 	add.w	r2, r7, #16
 8020760:	4611      	mov	r1, r2
 8020762:	4618      	mov	r0, r3
 8020764:	f7fe fff8 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 8020768:	4603      	mov	r3, r0
 802076a:	681b      	ldr	r3, [r3, #0]
 802076c:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 802076e:	68fb      	ldr	r3, [r7, #12]
 8020770:	3308      	adds	r3, #8
 8020772:	f107 0210 	add.w	r2, r7, #16
 8020776:	4611      	mov	r1, r2
 8020778:	4618      	mov	r0, r3
 802077a:	f7fe ffd9 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 802077e:	4603      	mov	r3, r0
 8020780:	681b      	ldr	r3, [r3, #0]
 8020782:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8020784:	6939      	ldr	r1, [r7, #16]
 8020786:	69fb      	ldr	r3, [r7, #28]
 8020788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802078a:	4413      	add	r3, r2
 802078c:	b24a      	sxtb	r2, r1
 802078e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8020790:	69fb      	ldr	r3, [r7, #28]
 8020792:	3301      	adds	r3, #1
 8020794:	61fb      	str	r3, [r7, #28]
 8020796:	e7c5      	b.n	8020724 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8020798:	bf00      	nop
 802079a:	3724      	adds	r7, #36	; 0x24
 802079c:	46bd      	mov	sp, r7
 802079e:	bd90      	pop	{r4, r7, pc}

080207a0 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80207a0:	b580      	push	{r7, lr}
 80207a2:	b082      	sub	sp, #8
 80207a4:	af00      	add	r7, sp, #0
 80207a6:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80207a8:	687b      	ldr	r3, [r7, #4]
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	d101      	bne.n	80207b2 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 80207ae:	f00b fcf1 	bl	802c194 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80207b2:	687b      	ldr	r3, [r7, #4]
 80207b4:	681b      	ldr	r3, [r3, #0]
}
 80207b6:	4618      	mov	r0, r3
 80207b8:	3708      	adds	r7, #8
 80207ba:	46bd      	mov	sp, r7
 80207bc:	bd80      	pop	{r7, pc}

080207be <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80207be:	b480      	push	{r7}
 80207c0:	b083      	sub	sp, #12
 80207c2:	af00      	add	r7, sp, #0
 80207c4:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80207c6:	687b      	ldr	r3, [r7, #4]
 80207c8:	2b00      	cmp	r3, #0
 80207ca:	d002      	beq.n	80207d2 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 80207cc:	687b      	ldr	r3, [r7, #4]
 80207ce:	681b      	ldr	r3, [r3, #0]
 80207d0:	e000      	b.n	80207d4 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 80207d2:	2300      	movs	r3, #0
}
 80207d4:	4618      	mov	r0, r3
 80207d6:	370c      	adds	r7, #12
 80207d8:	46bd      	mov	sp, r7
 80207da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207de:	4770      	bx	lr

080207e0 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 80207e0:	b590      	push	{r4, r7, lr}
 80207e2:	b089      	sub	sp, #36	; 0x24
 80207e4:	af00      	add	r7, sp, #0
 80207e6:	60f8      	str	r0, [r7, #12]
 80207e8:	60b9      	str	r1, [r7, #8]
 80207ea:	607a      	str	r2, [r7, #4]
 80207ec:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80207ee:	6879      	ldr	r1, [r7, #4]
 80207f0:	68b8      	ldr	r0, [r7, #8]
 80207f2:	f7ff f9f2 	bl	801fbda <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80207f6:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 80207f8:	2300      	movs	r3, #0
 80207fa:	61fb      	str	r3, [r7, #28]
 80207fc:	69fa      	ldr	r2, [r7, #28]
 80207fe:	69bb      	ldr	r3, [r7, #24]
 8020800:	429a      	cmp	r2, r3
 8020802:	da34      	bge.n	802086e <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8020804:	69fb      	ldr	r3, [r7, #28]
 8020806:	683a      	ldr	r2, [r7, #0]
 8020808:	4413      	add	r3, r2
 802080a:	781b      	ldrb	r3, [r3, #0]
 802080c:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 802080e:	68fb      	ldr	r3, [r7, #12]
 8020810:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8020812:	68fb      	ldr	r3, [r7, #12]
 8020814:	68db      	ldr	r3, [r3, #12]
 8020816:	697a      	ldr	r2, [r7, #20]
 8020818:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 802081a:	68fb      	ldr	r3, [r7, #12]
 802081c:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 802081e:	68fb      	ldr	r3, [r7, #12]
 8020820:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8020822:	461a      	mov	r2, r3
 8020824:	f7ff fa0e 	bl	801fc44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8020828:	4603      	mov	r3, r0
        data.params.output_offset +
 802082a:	4423      	add	r3, r4
    int32_t clamped =
 802082c:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 802082e:	68fb      	ldr	r3, [r7, #12]
 8020830:	3304      	adds	r3, #4
 8020832:	f107 0210 	add.w	r2, r7, #16
 8020836:	4611      	mov	r1, r2
 8020838:	4618      	mov	r0, r3
 802083a:	f7fe ff8d 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 802083e:	4603      	mov	r3, r0
 8020840:	681b      	ldr	r3, [r3, #0]
 8020842:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	3308      	adds	r3, #8
 8020848:	f107 0210 	add.w	r2, r7, #16
 802084c:	4611      	mov	r1, r2
 802084e:	4618      	mov	r0, r3
 8020850:	f7fe ff6e 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 8020854:	4603      	mov	r3, r0
 8020856:	681b      	ldr	r3, [r3, #0]
 8020858:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 802085a:	6939      	ldr	r1, [r7, #16]
 802085c:	69fb      	ldr	r3, [r7, #28]
 802085e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020860:	4413      	add	r3, r2
 8020862:	b2ca      	uxtb	r2, r1
 8020864:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8020866:	69fb      	ldr	r3, [r7, #28]
 8020868:	3301      	adds	r3, #1
 802086a:	61fb      	str	r3, [r7, #28]
 802086c:	e7c6      	b.n	80207fc <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 802086e:	bf00      	nop
 8020870:	3724      	adds	r7, #36	; 0x24
 8020872:	46bd      	mov	sp, r7
 8020874:	bd90      	pop	{r4, r7, pc}

08020876 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8020876:	b5b0      	push	{r4, r5, r7, lr}
 8020878:	b088      	sub	sp, #32
 802087a:	af00      	add	r7, sp, #0
 802087c:	ed87 0a03 	vstr	s0, [r7, #12]
 8020880:	edc7 0a02 	vstr	s1, [r7, #8]
 8020884:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8020886:	ed97 7a03 	vldr	s14, [r7, #12]
 802088a:	edd7 7a02 	vldr	s15, [r7, #8]
 802088e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8020892:	ee16 0a90 	vmov	r0, s13
 8020896:	f7df fe81 	bl	800059c <__aeabi_f2d>
 802089a:	4602      	mov	r2, r0
 802089c:	460b      	mov	r3, r1
 802089e:	ec43 2b10 	vmov	d0, r2, r3
 80208a2:	f008 fcd1 	bl	8029248 <round>
 80208a6:	ec55 4b10 	vmov	r4, r5, d0
 80208aa:	6878      	ldr	r0, [r7, #4]
 80208ac:	f7df fe64 	bl	8000578 <__aeabi_i2d>
 80208b0:	4602      	mov	r2, r0
 80208b2:	460b      	mov	r3, r1
 80208b4:	4620      	mov	r0, r4
 80208b6:	4629      	mov	r1, r5
 80208b8:	f7df fd12 	bl	80002e0 <__adddf3>
 80208bc:	4602      	mov	r2, r0
 80208be:	460b      	mov	r3, r1
 80208c0:	4610      	mov	r0, r2
 80208c2:	4619      	mov	r1, r3
 80208c4:	f7e0 f972 	bl	8000bac <__aeabi_d2iz>
 80208c8:	4603      	mov	r3, r0
 80208ca:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 80208cc:	f7fe fa5d 	bl	801ed8a <_ZNSt14numeric_limitsIaE3minEv>
 80208d0:	4603      	mov	r3, r0
 80208d2:	61bb      	str	r3, [r7, #24]
 80208d4:	f107 0214 	add.w	r2, r7, #20
 80208d8:	f107 0318 	add.w	r3, r7, #24
 80208dc:	4611      	mov	r1, r2
 80208de:	4618      	mov	r0, r3
 80208e0:	f7fe ff3a 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 80208e4:	4603      	mov	r3, r0
  result =
 80208e6:	681b      	ldr	r3, [r3, #0]
 80208e8:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 80208ea:	f7fe fa57 	bl	801ed9c <_ZNSt14numeric_limitsIaE3maxEv>
 80208ee:	4603      	mov	r3, r0
 80208f0:	61fb      	str	r3, [r7, #28]
 80208f2:	f107 0214 	add.w	r2, r7, #20
 80208f6:	f107 031c 	add.w	r3, r7, #28
 80208fa:	4611      	mov	r1, r2
 80208fc:	4618      	mov	r0, r3
 80208fe:	f7fe ff17 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 8020902:	4603      	mov	r3, r0
  result =
 8020904:	681b      	ldr	r3, [r3, #0]
 8020906:	617b      	str	r3, [r7, #20]
  return result;
 8020908:	697b      	ldr	r3, [r7, #20]
 802090a:	b25b      	sxtb	r3, r3
}
 802090c:	4618      	mov	r0, r3
 802090e:	3720      	adds	r7, #32
 8020910:	46bd      	mov	sp, r7
 8020912:	bdb0      	pop	{r4, r5, r7, pc}

08020914 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8020914:	b5b0      	push	{r4, r5, r7, lr}
 8020916:	b088      	sub	sp, #32
 8020918:	af00      	add	r7, sp, #0
 802091a:	ed87 0a03 	vstr	s0, [r7, #12]
 802091e:	edc7 0a02 	vstr	s1, [r7, #8]
 8020922:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8020924:	ed97 7a03 	vldr	s14, [r7, #12]
 8020928:	edd7 7a02 	vldr	s15, [r7, #8]
 802092c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8020930:	ee16 0a90 	vmov	r0, s13
 8020934:	f7df fe32 	bl	800059c <__aeabi_f2d>
 8020938:	4602      	mov	r2, r0
 802093a:	460b      	mov	r3, r1
 802093c:	ec43 2b10 	vmov	d0, r2, r3
 8020940:	f008 fc82 	bl	8029248 <round>
 8020944:	ec55 4b10 	vmov	r4, r5, d0
 8020948:	6878      	ldr	r0, [r7, #4]
 802094a:	f7df fe15 	bl	8000578 <__aeabi_i2d>
 802094e:	4602      	mov	r2, r0
 8020950:	460b      	mov	r3, r1
 8020952:	4620      	mov	r0, r4
 8020954:	4629      	mov	r1, r5
 8020956:	f7df fcc3 	bl	80002e0 <__adddf3>
 802095a:	4602      	mov	r2, r0
 802095c:	460b      	mov	r3, r1
 802095e:	4610      	mov	r0, r2
 8020960:	4619      	mov	r1, r3
 8020962:	f7e0 f923 	bl	8000bac <__aeabi_d2iz>
 8020966:	4603      	mov	r3, r0
 8020968:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 802096a:	f7fe fa1f 	bl	801edac <_ZNSt14numeric_limitsIhE3minEv>
 802096e:	4603      	mov	r3, r0
 8020970:	61bb      	str	r3, [r7, #24]
 8020972:	f107 0214 	add.w	r2, r7, #20
 8020976:	f107 0318 	add.w	r3, r7, #24
 802097a:	4611      	mov	r1, r2
 802097c:	4618      	mov	r0, r3
 802097e:	f7fe feeb 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 8020982:	4603      	mov	r3, r0
  result =
 8020984:	681b      	ldr	r3, [r3, #0]
 8020986:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8020988:	f7fe fa18 	bl	801edbc <_ZNSt14numeric_limitsIhE3maxEv>
 802098c:	4603      	mov	r3, r0
 802098e:	61fb      	str	r3, [r7, #28]
 8020990:	f107 0214 	add.w	r2, r7, #20
 8020994:	f107 031c 	add.w	r3, r7, #28
 8020998:	4611      	mov	r1, r2
 802099a:	4618      	mov	r0, r3
 802099c:	f7fe fec8 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 80209a0:	4603      	mov	r3, r0
  result =
 80209a2:	681b      	ldr	r3, [r3, #0]
 80209a4:	617b      	str	r3, [r7, #20]
  return result;
 80209a6:	697b      	ldr	r3, [r7, #20]
 80209a8:	b2db      	uxtb	r3, r3
}
 80209aa:	4618      	mov	r0, r3
 80209ac:	3720      	adds	r7, #32
 80209ae:	46bd      	mov	sp, r7
 80209b0:	bdb0      	pop	{r4, r5, r7, pc}

080209b2 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 80209b2:	b580      	push	{r7, lr}
 80209b4:	b088      	sub	sp, #32
 80209b6:	af00      	add	r7, sp, #0
 80209b8:	60ba      	str	r2, [r7, #8]
 80209ba:	607b      	str	r3, [r7, #4]
 80209bc:	4603      	mov	r3, r0
 80209be:	73fb      	strb	r3, [r7, #15]
 80209c0:	460b      	mov	r3, r1
 80209c2:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80209c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80209c6:	68b8      	ldr	r0, [r7, #8]
 80209c8:	f7ff f907 	bl	801fbda <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80209cc:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 80209ce:	2300      	movs	r3, #0
 80209d0:	61fb      	str	r3, [r7, #28]
 80209d2:	69fa      	ldr	r2, [r7, #28]
 80209d4:	69bb      	ldr	r3, [r7, #24]
 80209d6:	429a      	cmp	r2, r3
 80209d8:	da26      	bge.n	8020a28 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 80209da:	69fb      	ldr	r3, [r7, #28]
 80209dc:	687a      	ldr	r2, [r7, #4]
 80209de:	4413      	add	r3, r2
 80209e0:	781b      	ldrb	r3, [r3, #0]
 80209e2:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 80209e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80209e8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80209ec:	429a      	cmp	r2, r3
 80209ee:	dd04      	ble.n	80209fa <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 80209f0:	f107 030e 	add.w	r3, r7, #14
 80209f4:	f993 3000 	ldrsb.w	r3, [r3]
 80209f8:	e00c      	b.n	8020a14 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 80209fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80209fe:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8020a02:	429a      	cmp	r2, r3
 8020a04:	da04      	bge.n	8020a10 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 8020a06:	f107 030f 	add.w	r3, r7, #15
 8020a0a:	f993 3000 	ldrsb.w	r3, [r3]
 8020a0e:	e001      	b.n	8020a14 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8020a10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020a14:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8020a16:	69fb      	ldr	r3, [r7, #28]
 8020a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020a1a:	4413      	add	r3, r2
 8020a1c:	7dba      	ldrb	r2, [r7, #22]
 8020a1e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8020a20:	69fb      	ldr	r3, [r7, #28]
 8020a22:	3301      	adds	r3, #1
 8020a24:	61fb      	str	r3, [r7, #28]
 8020a26:	e7d4      	b.n	80209d2 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8020a28:	bf00      	nop
 8020a2a:	3720      	adds	r7, #32
 8020a2c:	46bd      	mov	sp, r7
 8020a2e:	bd80      	pop	{r7, pc}

08020a30 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8020a30:	b580      	push	{r7, lr}
 8020a32:	b088      	sub	sp, #32
 8020a34:	af00      	add	r7, sp, #0
 8020a36:	60ba      	str	r2, [r7, #8]
 8020a38:	607b      	str	r3, [r7, #4]
 8020a3a:	4603      	mov	r3, r0
 8020a3c:	73fb      	strb	r3, [r7, #15]
 8020a3e:	460b      	mov	r3, r1
 8020a40:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8020a42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020a44:	68b8      	ldr	r0, [r7, #8]
 8020a46:	f7ff f8c8 	bl	801fbda <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8020a4a:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8020a4c:	2300      	movs	r3, #0
 8020a4e:	61fb      	str	r3, [r7, #28]
 8020a50:	69fa      	ldr	r2, [r7, #28]
 8020a52:	69bb      	ldr	r3, [r7, #24]
 8020a54:	429a      	cmp	r2, r3
 8020a56:	da1f      	bge.n	8020a98 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 8020a58:	69fb      	ldr	r3, [r7, #28]
 8020a5a:	687a      	ldr	r2, [r7, #4]
 8020a5c:	4413      	add	r3, r2
 8020a5e:	781b      	ldrb	r3, [r3, #0]
 8020a60:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8020a62:	7bbb      	ldrb	r3, [r7, #14]
 8020a64:	7dfa      	ldrb	r2, [r7, #23]
 8020a66:	429a      	cmp	r2, r3
 8020a68:	d903      	bls.n	8020a72 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 8020a6a:	f107 030e 	add.w	r3, r7, #14
 8020a6e:	781b      	ldrb	r3, [r3, #0]
 8020a70:	e008      	b.n	8020a84 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8020a72:	7bfb      	ldrb	r3, [r7, #15]
 8020a74:	7dfa      	ldrb	r2, [r7, #23]
 8020a76:	429a      	cmp	r2, r3
 8020a78:	d203      	bcs.n	8020a82 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 8020a7a:	f107 030f 	add.w	r3, r7, #15
 8020a7e:	781b      	ldrb	r3, [r3, #0]
 8020a80:	e000      	b.n	8020a84 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8020a82:	7dfb      	ldrb	r3, [r7, #23]
 8020a84:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8020a86:	69fb      	ldr	r3, [r7, #28]
 8020a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020a8a:	4413      	add	r3, r2
 8020a8c:	7dba      	ldrb	r2, [r7, #22]
 8020a8e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8020a90:	69fb      	ldr	r3, [r7, #28]
 8020a92:	3301      	adds	r3, #1
 8020a94:	61fb      	str	r3, [r7, #28]
 8020a96:	e7db      	b.n	8020a50 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8020a98:	bf00      	nop
 8020a9a:	3720      	adds	r7, #32
 8020a9c:	46bd      	mov	sp, r7
 8020a9e:	bd80      	pop	{r7, pc}

08020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8020aa0:	b480      	push	{r7}
 8020aa2:	b083      	sub	sp, #12
 8020aa4:	af00      	add	r7, sp, #0
 8020aa6:	6078      	str	r0, [r7, #4]
  return x;
 8020aa8:	687b      	ldr	r3, [r7, #4]
}
 8020aaa:	4618      	mov	r0, r3
 8020aac:	370c      	adds	r7, #12
 8020aae:	46bd      	mov	sp, r7
 8020ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ab4:	4770      	bx	lr

08020ab6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8020ab6:	b480      	push	{r7}
 8020ab8:	b083      	sub	sp, #12
 8020aba:	af00      	add	r7, sp, #0
 8020abc:	6078      	str	r0, [r7, #4]
 8020abe:	6039      	str	r1, [r7, #0]
  return a & b;
 8020ac0:	687a      	ldr	r2, [r7, #4]
 8020ac2:	683b      	ldr	r3, [r7, #0]
 8020ac4:	4013      	ands	r3, r2
}
 8020ac6:	4618      	mov	r0, r3
 8020ac8:	370c      	adds	r7, #12
 8020aca:	46bd      	mov	sp, r7
 8020acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ad0:	4770      	bx	lr

08020ad2 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8020ad2:	b480      	push	{r7}
 8020ad4:	b083      	sub	sp, #12
 8020ad6:	af00      	add	r7, sp, #0
 8020ad8:	6078      	str	r0, [r7, #4]
 8020ada:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8020adc:	687a      	ldr	r2, [r7, #4]
 8020ade:	683b      	ldr	r3, [r7, #0]
 8020ae0:	fa42 f303 	asr.w	r3, r2, r3
}
 8020ae4:	4618      	mov	r0, r3
 8020ae6:	370c      	adds	r7, #12
 8020ae8:	46bd      	mov	sp, r7
 8020aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aee:	4770      	bx	lr

08020af0 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8020af0:	b580      	push	{r7, lr}
 8020af2:	b082      	sub	sp, #8
 8020af4:	af00      	add	r7, sp, #0
 8020af6:	6078      	str	r0, [r7, #4]
 8020af8:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8020afa:	687a      	ldr	r2, [r7, #4]
 8020afc:	683b      	ldr	r3, [r7, #0]
 8020afe:	429a      	cmp	r2, r3
 8020b00:	bfb4      	ite	lt
 8020b02:	2301      	movlt	r3, #1
 8020b04:	2300      	movge	r3, #0
 8020b06:	b2db      	uxtb	r3, r3
 8020b08:	4618      	mov	r0, r3
 8020b0a:	f000 f827 	bl	8020b5c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8020b0e:	4603      	mov	r3, r0
}
 8020b10:	4618      	mov	r0, r3
 8020b12:	3708      	adds	r7, #8
 8020b14:	46bd      	mov	sp, r7
 8020b16:	bd80      	pop	{r7, pc}

08020b18 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8020b18:	b480      	push	{r7}
 8020b1a:	b083      	sub	sp, #12
 8020b1c:	af00      	add	r7, sp, #0
 8020b1e:	6078      	str	r0, [r7, #4]
 8020b20:	6039      	str	r1, [r7, #0]
  return a + b;
 8020b22:	687a      	ldr	r2, [r7, #4]
 8020b24:	683b      	ldr	r3, [r7, #0]
 8020b26:	4413      	add	r3, r2
}
 8020b28:	4618      	mov	r0, r3
 8020b2a:	370c      	adds	r7, #12
 8020b2c:	46bd      	mov	sp, r7
 8020b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b32:	4770      	bx	lr

08020b34 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8020b34:	b580      	push	{r7, lr}
 8020b36:	b082      	sub	sp, #8
 8020b38:	af00      	add	r7, sp, #0
 8020b3a:	6078      	str	r0, [r7, #4]
 8020b3c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8020b3e:	687a      	ldr	r2, [r7, #4]
 8020b40:	683b      	ldr	r3, [r7, #0]
 8020b42:	429a      	cmp	r2, r3
 8020b44:	bfcc      	ite	gt
 8020b46:	2301      	movgt	r3, #1
 8020b48:	2300      	movle	r3, #0
 8020b4a:	b2db      	uxtb	r3, r3
 8020b4c:	4618      	mov	r0, r3
 8020b4e:	f000 f805 	bl	8020b5c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8020b52:	4603      	mov	r3, r0
}
 8020b54:	4618      	mov	r0, r3
 8020b56:	3708      	adds	r7, #8
 8020b58:	46bd      	mov	sp, r7
 8020b5a:	bd80      	pop	{r7, pc}

08020b5c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8020b5c:	b580      	push	{r7, lr}
 8020b5e:	b082      	sub	sp, #8
 8020b60:	af00      	add	r7, sp, #0
 8020b62:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	d004      	beq.n	8020b74 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8020b6a:	2000      	movs	r0, #0
 8020b6c:	f000 f807 	bl	8020b7e <_ZN8gemmlowp6BitNotIlEET_S1_>
 8020b70:	4603      	mov	r3, r0
 8020b72:	e000      	b.n	8020b76 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8020b74:	2300      	movs	r3, #0
}
 8020b76:	4618      	mov	r0, r3
 8020b78:	3708      	adds	r7, #8
 8020b7a:	46bd      	mov	sp, r7
 8020b7c:	bd80      	pop	{r7, pc}

08020b7e <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8020b7e:	b480      	push	{r7}
 8020b80:	b083      	sub	sp, #12
 8020b82:	af00      	add	r7, sp, #0
 8020b84:	6078      	str	r0, [r7, #4]
  return ~a;
 8020b86:	687b      	ldr	r3, [r7, #4]
 8020b88:	43db      	mvns	r3, r3
}
 8020b8a:	4618      	mov	r0, r3
 8020b8c:	370c      	adds	r7, #12
 8020b8e:	46bd      	mov	sp, r7
 8020b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b94:	4770      	bx	lr
	...

08020b98 <_ZNSt14numeric_limitsIfE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8020b98:	b480      	push	{r7}
 8020b9a:	af00      	add	r7, sp, #0
 8020b9c:	4b04      	ldr	r3, [pc, #16]	; (8020bb0 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8020b9e:	ee07 3a90 	vmov	s15, r3
 8020ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8020ba6:	46bd      	mov	sp, r7
 8020ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bac:	4770      	bx	lr
 8020bae:	bf00      	nop
 8020bb0:	7f7fffff 	.word	0x7f7fffff

08020bb4 <_ZNSt14numeric_limitsIfE6lowestEv>:
      lowest() noexcept { return -__FLT_MAX__; }
 8020bb4:	b480      	push	{r7}
 8020bb6:	af00      	add	r7, sp, #0
 8020bb8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8020bbc:	ee07 3a90 	vmov	s15, r3
 8020bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8020bc4:	46bd      	mov	sp, r7
 8020bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bca:	4770      	bx	lr

08020bcc <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }
 8020bcc:	b480      	push	{r7}
 8020bce:	b083      	sub	sp, #12
 8020bd0:	af00      	add	r7, sp, #0
 8020bd2:	6078      	str	r0, [r7, #4]
 8020bd4:	687b      	ldr	r3, [r7, #4]
 8020bd6:	3304      	adds	r3, #4
 8020bd8:	4618      	mov	r0, r3
 8020bda:	370c      	adds	r7, #12
 8020bdc:	46bd      	mov	sp, r7
 8020bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020be2:	4770      	bx	lr

08020be4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 8020be4:	b580      	push	{r7, lr}
 8020be6:	b086      	sub	sp, #24
 8020be8:	af00      	add	r7, sp, #0
 8020bea:	60f8      	str	r0, [r7, #12]
 8020bec:	60b9      	str	r1, [r7, #8]
 8020bee:	607a      	str	r2, [r7, #4]
 8020bf0:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8020bf2:	68f8      	ldr	r0, [r7, #12]
 8020bf4:	f7fe fdfb 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8020bf8:	4603      	mov	r3, r0
 8020bfa:	2b04      	cmp	r3, #4
 8020bfc:	d001      	beq.n	8020c02 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 8020bfe:	f00b fac9 	bl	802c194 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 8020c02:	68f8      	ldr	r0, [r7, #12]
 8020c04:	f7ff ffe2 	bl	8020bcc <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 8020c08:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8020c0a:	68bb      	ldr	r3, [r7, #8]
 8020c0c:	2b00      	cmp	r3, #0
 8020c0e:	db04      	blt.n	8020c1a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 8020c10:	697b      	ldr	r3, [r7, #20]
 8020c12:	681b      	ldr	r3, [r3, #0]
 8020c14:	68ba      	ldr	r2, [r7, #8]
 8020c16:	429a      	cmp	r2, r3
 8020c18:	db01      	blt.n	8020c1e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 8020c1a:	f00b fabb 	bl	802c194 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8020c1e:	687b      	ldr	r3, [r7, #4]
 8020c20:	2b00      	cmp	r3, #0
 8020c22:	db05      	blt.n	8020c30 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 8020c24:	697b      	ldr	r3, [r7, #20]
 8020c26:	3304      	adds	r3, #4
 8020c28:	681b      	ldr	r3, [r3, #0]
 8020c2a:	687a      	ldr	r2, [r7, #4]
 8020c2c:	429a      	cmp	r2, r3
 8020c2e:	db01      	blt.n	8020c34 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 8020c30:	f00b fab0 	bl	802c194 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8020c34:	683b      	ldr	r3, [r7, #0]
 8020c36:	2b00      	cmp	r3, #0
 8020c38:	db05      	blt.n	8020c46 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 8020c3a:	697b      	ldr	r3, [r7, #20]
 8020c3c:	3308      	adds	r3, #8
 8020c3e:	681b      	ldr	r3, [r3, #0]
 8020c40:	683a      	ldr	r2, [r7, #0]
 8020c42:	429a      	cmp	r2, r3
 8020c44:	db01      	blt.n	8020c4a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 8020c46:	f00b faa5 	bl	802c194 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8020c4a:	6a3b      	ldr	r3, [r7, #32]
 8020c4c:	2b00      	cmp	r3, #0
 8020c4e:	db05      	blt.n	8020c5c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 8020c50:	697b      	ldr	r3, [r7, #20]
 8020c52:	330c      	adds	r3, #12
 8020c54:	681b      	ldr	r3, [r3, #0]
 8020c56:	6a3a      	ldr	r2, [r7, #32]
 8020c58:	429a      	cmp	r2, r3
 8020c5a:	db01      	blt.n	8020c60 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 8020c5c:	f00b fa9a 	bl	802c194 <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 8020c60:	697b      	ldr	r3, [r7, #20]
 8020c62:	3304      	adds	r3, #4
 8020c64:	681b      	ldr	r3, [r3, #0]
 8020c66:	68ba      	ldr	r2, [r7, #8]
 8020c68:	fb03 f202 	mul.w	r2, r3, r2
 8020c6c:	687b      	ldr	r3, [r7, #4]
 8020c6e:	4413      	add	r3, r2
 8020c70:	697a      	ldr	r2, [r7, #20]
 8020c72:	3208      	adds	r2, #8
 8020c74:	6812      	ldr	r2, [r2, #0]
 8020c76:	fb03 f202 	mul.w	r2, r3, r2
 8020c7a:	683b      	ldr	r3, [r7, #0]
 8020c7c:	4413      	add	r3, r2
 8020c7e:	697a      	ldr	r2, [r7, #20]
 8020c80:	320c      	adds	r2, #12
 8020c82:	6812      	ldr	r2, [r2, #0]
 8020c84:	fb03 f202 	mul.w	r2, r3, r2
 8020c88:	6a3b      	ldr	r3, [r7, #32]
 8020c8a:	4413      	add	r3, r2
}
 8020c8c:	4618      	mov	r0, r3
 8020c8e:	3718      	adds	r7, #24
 8020c90:	46bd      	mov	sp, r7
 8020c92:	bd80      	pop	{r7, pc}

08020c94 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 8020c94:	b580      	push	{r7, lr}
 8020c96:	b084      	sub	sp, #16
 8020c98:	af00      	add	r7, sp, #0
 8020c9a:	ed87 0a03 	vstr	s0, [r7, #12]
 8020c9e:	edc7 0a02 	vstr	s1, [r7, #8]
 8020ca2:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 8020ca6:	f107 0208 	add.w	r2, r7, #8
 8020caa:	f107 030c 	add.w	r3, r7, #12
 8020cae:	4611      	mov	r1, r2
 8020cb0:	4618      	mov	r0, r3
 8020cb2:	f7fe f82d 	bl	801ed10 <_ZSt3maxIfERKT_S2_S2_>
 8020cb6:	4602      	mov	r2, r0
 8020cb8:	1d3b      	adds	r3, r7, #4
 8020cba:	4619      	mov	r1, r3
 8020cbc:	4610      	mov	r0, r2
 8020cbe:	f7fe f80e 	bl	801ecde <_ZSt3minIfERKT_S2_S2_>
 8020cc2:	4603      	mov	r3, r0
 8020cc4:	681b      	ldr	r3, [r3, #0]
 8020cc6:	ee07 3a90 	vmov	s15, r3
}
 8020cca:	eeb0 0a67 	vmov.f32	s0, s15
 8020cce:	3710      	adds	r7, #16
 8020cd0:	46bd      	mov	sp, r7
 8020cd2:	bd80      	pop	{r7, pc}

08020cd4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8020cd4:	b580      	push	{r7, lr}
 8020cd6:	b084      	sub	sp, #16
 8020cd8:	af00      	add	r7, sp, #0
 8020cda:	4603      	mov	r3, r0
 8020cdc:	60b9      	str	r1, [r7, #8]
 8020cde:	607a      	str	r2, [r7, #4]
 8020ce0:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8020ce2:	7bfb      	ldrb	r3, [r7, #15]
 8020ce4:	2b01      	cmp	r3, #1
 8020ce6:	d10b      	bne.n	8020d00 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8020ce8:	68bb      	ldr	r3, [r7, #8]
 8020cea:	f04f 0200 	mov.w	r2, #0
 8020cee:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8020cf0:	f7ff ff52 	bl	8020b98 <_ZNSt14numeric_limitsIfE3maxEv>
 8020cf4:	eef0 7a40 	vmov.f32	s15, s0
 8020cf8:	687b      	ldr	r3, [r7, #4]
 8020cfa:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8020cfe:	e023      	b.n	8020d48 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8020d00:	7bfb      	ldrb	r3, [r7, #15]
 8020d02:	2b03      	cmp	r3, #3
 8020d04:	d107      	bne.n	8020d16 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8020d06:	68bb      	ldr	r3, [r7, #8]
 8020d08:	f04f 0200 	mov.w	r2, #0
 8020d0c:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8020d0e:	687b      	ldr	r3, [r7, #4]
 8020d10:	4a0f      	ldr	r2, [pc, #60]	; (8020d50 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8020d12:	601a      	str	r2, [r3, #0]
}
 8020d14:	e018      	b.n	8020d48 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8020d16:	7bfb      	ldrb	r3, [r7, #15]
 8020d18:	2b02      	cmp	r3, #2
 8020d1a:	d107      	bne.n	8020d2c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8020d1c:	68bb      	ldr	r3, [r7, #8]
 8020d1e:	4a0d      	ldr	r2, [pc, #52]	; (8020d54 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8020d20:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8020d22:	687b      	ldr	r3, [r7, #4]
 8020d24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8020d28:	601a      	str	r2, [r3, #0]
}
 8020d2a:	e00d      	b.n	8020d48 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8020d2c:	f7ff ff42 	bl	8020bb4 <_ZNSt14numeric_limitsIfE6lowestEv>
 8020d30:	eef0 7a40 	vmov.f32	s15, s0
 8020d34:	68bb      	ldr	r3, [r7, #8]
 8020d36:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8020d3a:	f7ff ff2d 	bl	8020b98 <_ZNSt14numeric_limitsIfE3maxEv>
 8020d3e:	eef0 7a40 	vmov.f32	s15, s0
 8020d42:	687b      	ldr	r3, [r7, #4]
 8020d44:	edc3 7a00 	vstr	s15, [r3]
}
 8020d48:	bf00      	nop
 8020d4a:	3710      	adds	r7, #16
 8020d4c:	46bd      	mov	sp, r7
 8020d4e:	bd80      	pop	{r7, pc}
 8020d50:	40c00000 	.word	0x40c00000
 8020d54:	bf800000 	.word	0xbf800000

08020d58 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8020d58:	b480      	push	{r7}
 8020d5a:	b083      	sub	sp, #12
 8020d5c:	af00      	add	r7, sp, #0
 8020d5e:	6078      	str	r0, [r7, #4]
 8020d60:	687b      	ldr	r3, [r7, #4]
 8020d62:	681b      	ldr	r3, [r3, #0]
 8020d64:	681b      	ldr	r3, [r3, #0]
 8020d66:	4618      	mov	r0, r3
 8020d68:	370c      	adds	r7, #12
 8020d6a:	46bd      	mov	sp, r7
 8020d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d70:	4770      	bx	lr

08020d72 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 8020d72:	b480      	push	{r7}
 8020d74:	b083      	sub	sp, #12
 8020d76:	af00      	add	r7, sp, #0
 8020d78:	6078      	str	r0, [r7, #4]
 8020d7a:	687b      	ldr	r3, [r7, #4]
 8020d7c:	685b      	ldr	r3, [r3, #4]
 8020d7e:	681b      	ldr	r3, [r3, #0]
 8020d80:	4618      	mov	r0, r3
 8020d82:	370c      	adds	r7, #12
 8020d84:	46bd      	mov	sp, r7
 8020d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d8a:	4770      	bx	lr

08020d8c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8020d8c:	b580      	push	{r7, lr}
 8020d8e:	b082      	sub	sp, #8
 8020d90:	af00      	add	r7, sp, #0
 8020d92:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8020d94:	687b      	ldr	r3, [r7, #4]
 8020d96:	2b00      	cmp	r3, #0
 8020d98:	d101      	bne.n	8020d9e <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8020d9a:	f00b f9fb 	bl	802c194 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8020d9e:	687b      	ldr	r3, [r7, #4]
 8020da0:	681b      	ldr	r3, [r3, #0]
}
 8020da2:	4618      	mov	r0, r3
 8020da4:	3708      	adds	r7, #8
 8020da6:	46bd      	mov	sp, r7
 8020da8:	bd80      	pop	{r7, pc}

08020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 8020daa:	b590      	push	{r4, r7, lr}
 8020dac:	b087      	sub	sp, #28
 8020dae:	af00      	add	r7, sp, #0
 8020db0:	60f8      	str	r0, [r7, #12]
 8020db2:	60b9      	str	r1, [r7, #8]
 8020db4:	607a      	str	r2, [r7, #4]
 8020db6:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8020db8:	68b9      	ldr	r1, [r7, #8]
 8020dba:	68f8      	ldr	r0, [r7, #12]
 8020dbc:	f7fe feb2 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8020dc0:	4604      	mov	r4, r0
 8020dc2:	6839      	ldr	r1, [r7, #0]
 8020dc4:	6878      	ldr	r0, [r7, #4]
 8020dc6:	f7fe fead 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8020dca:	4603      	mov	r3, r0
 8020dcc:	429c      	cmp	r4, r3
 8020dce:	d001      	beq.n	8020dd4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8020dd0:	f00b f9e0 	bl	802c194 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8020dd4:	68b9      	ldr	r1, [r7, #8]
 8020dd6:	68f8      	ldr	r0, [r7, #12]
 8020dd8:	f7fe fea4 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8020ddc:	4603      	mov	r3, r0
 8020dde:	613b      	str	r3, [r7, #16]
 8020de0:	6839      	ldr	r1, [r7, #0]
 8020de2:	6878      	ldr	r0, [r7, #4]
 8020de4:	f7fe fe9e 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8020de8:	4603      	mov	r3, r0
 8020dea:	617b      	str	r3, [r7, #20]
 8020dec:	f107 0214 	add.w	r2, r7, #20
 8020df0:	f107 0310 	add.w	r3, r7, #16
 8020df4:	4611      	mov	r1, r2
 8020df6:	4618      	mov	r0, r3
 8020df8:	f7fe fc9a 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 8020dfc:	4603      	mov	r3, r0
 8020dfe:	681b      	ldr	r3, [r3, #0]
}
 8020e00:	4618      	mov	r0, r3
 8020e02:	371c      	adds	r7, #28
 8020e04:	46bd      	mov	sp, r7
 8020e06:	bd90      	pop	{r4, r7, pc}

08020e08 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 8020e08:	b590      	push	{r4, r7, lr}
 8020e0a:	ed2d 8b02 	vpush	{d8}
 8020e0e:	b0a9      	sub	sp, #164	; 0xa4
 8020e10:	af02      	add	r7, sp, #8
 8020e12:	60f8      	str	r0, [r7, #12]
 8020e14:	60b9      	str	r1, [r7, #8]
 8020e16:	607a      	str	r2, [r7, #4]
 8020e18:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 8020e1a:	68fb      	ldr	r3, [r7, #12]
 8020e1c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8020e20:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 8020e22:	68fb      	ldr	r3, [r7, #12]
 8020e24:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8020e28:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 8020e2a:	68fb      	ldr	r3, [r7, #12]
 8020e2c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8020e30:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 8020e32:	68fb      	ldr	r3, [r7, #12]
 8020e34:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8020e38:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 8020e3a:	68fb      	ldr	r3, [r7, #12]
 8020e3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020e40:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 8020e42:	68fb      	ldr	r3, [r7, #12]
 8020e44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020e48:	65fb      	str	r3, [r7, #92]	; 0x5c
  const float output_activation_min = params.float_activation_min;
 8020e4a:	68fb      	ldr	r3, [r7, #12]
 8020e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020e4e:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_max = params.float_activation_max;
 8020e50:	68fb      	ldr	r3, [r7, #12]
 8020e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020e54:	657b      	str	r3, [r7, #84]	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8020e56:	68b8      	ldr	r0, [r7, #8]
 8020e58:	f7fe fcc9 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8020e5c:	4603      	mov	r3, r0
 8020e5e:	2b04      	cmp	r3, #4
 8020e60:	d001      	beq.n	8020e66 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5e>
 8020e62:	f00b f997 	bl	802c194 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8020e66:	6838      	ldr	r0, [r7, #0]
 8020e68:	f7fe fcc1 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8020e6c:	4603      	mov	r3, r0
 8020e6e:	2b04      	cmp	r3, #4
 8020e70:	d001      	beq.n	8020e76 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6e>
 8020e72:	f00b f98f 	bl	802c194 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8020e76:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8020e7a:	f7fe fcb8 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8020e7e:	4603      	mov	r3, r0
 8020e80:	2b04      	cmp	r3, #4
 8020e82:	d001      	beq.n	8020e88 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x80>
 8020e84:	f00b f986 	bl	802c194 <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8020e88:	2300      	movs	r3, #0
 8020e8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8020e8e:	2100      	movs	r1, #0
 8020e90:	68b8      	ldr	r0, [r7, #8]
 8020e92:	f7ff ff8a 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8020e96:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8020e98:	2303      	movs	r3, #3
 8020e9a:	683a      	ldr	r2, [r7, #0]
 8020e9c:	2103      	movs	r1, #3
 8020e9e:	68b8      	ldr	r0, [r7, #8]
 8020ea0:	f7ff ff83 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8020ea4:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8020ea6:	2303      	movs	r3, #3
 8020ea8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8020eac:	2100      	movs	r1, #0
 8020eae:	6838      	ldr	r0, [r7, #0]
 8020eb0:	f7ff ff7b 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8020eb4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (bias_data) {
 8020eb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8020eba:	2b00      	cmp	r3, #0
 8020ebc:	d009      	beq.n	8020ed2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8020ebe:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8020ec2:	f7fe fe67 	bl	801fb94 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8020ec6:	4602      	mov	r2, r0
 8020ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020eca:	4293      	cmp	r3, r2
 8020ecc:	d001      	beq.n	8020ed2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
 8020ece:	f00b f961 	bl	802c194 <abort>
  }
  const int input_height = input_shape.Dims(1);
 8020ed2:	2101      	movs	r1, #1
 8020ed4:	68b8      	ldr	r0, [r7, #8]
 8020ed6:	f7fe fe25 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8020eda:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 8020edc:	2102      	movs	r1, #2
 8020ede:	68b8      	ldr	r0, [r7, #8]
 8020ee0:	f7fe fe20 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8020ee4:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_height = filter_shape.Dims(1);
 8020ee6:	2101      	movs	r1, #1
 8020ee8:	6838      	ldr	r0, [r7, #0]
 8020eea:	f7fe fe1b 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8020eee:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_width = filter_shape.Dims(2);
 8020ef0:	2102      	movs	r1, #2
 8020ef2:	6838      	ldr	r0, [r7, #0]
 8020ef4:	f7fe fe16 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8020ef8:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
 8020efa:	2101      	movs	r1, #1
 8020efc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8020f00:	f7fe fe10 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8020f04:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
 8020f06:	2102      	movs	r1, #2
 8020f08:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8020f0c:	f7fe fe0a 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8020f10:	6338      	str	r0, [r7, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
 8020f12:	2300      	movs	r3, #0
 8020f14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8020f18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8020f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020f1e:	429a      	cmp	r2, r3
 8020f20:	f280 80f0 	bge.w	8021104 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2fc>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8020f24:	2300      	movs	r3, #0
 8020f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8020f2a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8020f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020f30:	429a      	cmp	r2, r3
 8020f32:	f280 80e1 	bge.w	80210f8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2f0>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 8020f36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8020f3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8020f3c:	fb03 f202 	mul.w	r2, r3, r2
 8020f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020f42:	1ad3      	subs	r3, r2, r3
 8020f44:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8020f46:	2300      	movs	r3, #0
 8020f48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8020f4c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8020f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f52:	429a      	cmp	r2, r3
 8020f54:	f280 80ca 	bge.w	80210ec <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2e4>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 8020f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8020f5c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8020f5e:	fb03 f202 	mul.w	r2, r3, r2
 8020f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8020f64:	1ad3      	subs	r3, r2, r3
 8020f66:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8020f68:	2300      	movs	r3, #0
 8020f6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8020f6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8020f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020f74:	429a      	cmp	r2, r3
 8020f76:	f280 80b3 	bge.w	80210e0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d8>
          float total = 0.f;
 8020f7a:	f04f 0300 	mov.w	r3, #0
 8020f7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8020f82:	2300      	movs	r3, #0
 8020f84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8020f88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8020f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020f8e:	429a      	cmp	r2, r3
 8020f90:	da6d      	bge.n	802106e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x266>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 8020f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8020f94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8020f98:	fb02 f303 	mul.w	r3, r2, r3
 8020f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020f9e:	4413      	add	r3, r2
 8020fa0:	627b      	str	r3, [r7, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8020fa2:	2300      	movs	r3, #0
 8020fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8020fa6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8020fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020faa:	429a      	cmp	r2, r3
 8020fac:	da59      	bge.n	8021062 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x25a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8020fae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8020fb0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8020fb2:	fb02 f303 	mul.w	r3, r2, r3
 8020fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020fb8:	4413      	add	r3, r2
 8020fba:	623b      	str	r3, [r7, #32]

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8020fbc:	6a3b      	ldr	r3, [r7, #32]
 8020fbe:	2b00      	cmp	r3, #0
 8020fc0:	db0c      	blt.n	8020fdc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8020fc2:	6a3a      	ldr	r2, [r7, #32]
 8020fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020fc6:	429a      	cmp	r2, r3
 8020fc8:	da08      	bge.n	8020fdc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8020fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020fcc:	2b00      	cmp	r3, #0
 8020fce:	db05      	blt.n	8020fdc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8020fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020fd4:	429a      	cmp	r2, r3
 8020fd6:	da01      	bge.n	8020fdc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8020fd8:	2301      	movs	r3, #1
 8020fda:	e000      	b.n	8020fde <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d6>
 8020fdc:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 8020fde:	77fb      	strb	r3, [r7, #31]
                  (in_y < input_height);

              if (!is_point_inside_image) {
 8020fe0:	7ffb      	ldrb	r3, [r7, #31]
 8020fe2:	f083 0301 	eor.w	r3, r3, #1
 8020fe6:	b2db      	uxtb	r3, r3
 8020fe8:	2b00      	cmp	r3, #0
 8020fea:	d135      	bne.n	8021058 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x250>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8020fec:	2300      	movs	r3, #0
 8020fee:	67bb      	str	r3, [r7, #120]	; 0x78
 8020ff0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8020ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020ff4:	429a      	cmp	r2, r3
 8020ff6:	da30      	bge.n	802105a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x252>
                float input_value = input_data[Offset(input_shape, batch, in_y,
 8020ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8020ffa:	9300      	str	r3, [sp, #0]
 8020ffc:	6a3b      	ldr	r3, [r7, #32]
 8020ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021000:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8021004:	68b8      	ldr	r0, [r7, #8]
 8021006:	f7ff fded 	bl	8020be4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 802100a:	4603      	mov	r3, r0
                                                      in_x, in_channel)];
 802100c:	009b      	lsls	r3, r3, #2
 802100e:	687a      	ldr	r2, [r7, #4]
 8021010:	4413      	add	r3, r2
 8021012:	681b      	ldr	r3, [r3, #0]
 8021014:	61bb      	str	r3, [r7, #24]
                float filter_value = filter_data[Offset(
 8021016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021018:	9300      	str	r3, [sp, #0]
 802101a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802101c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8021020:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8021024:	6838      	ldr	r0, [r7, #0]
 8021026:	f7ff fddd 	bl	8020be4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 802102a:	4603      	mov	r3, r0
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 802102c:	009b      	lsls	r3, r3, #2
 802102e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8021032:	4413      	add	r3, r2
 8021034:	681b      	ldr	r3, [r3, #0]
 8021036:	617b      	str	r3, [r7, #20]
                total += (input_value * filter_value);
 8021038:	ed97 7a06 	vldr	s14, [r7, #24]
 802103c:	edd7 7a05 	vldr	s15, [r7, #20]
 8021040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021044:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8021048:	ee77 7a27 	vadd.f32	s15, s14, s15
 802104c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8021050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021052:	3301      	adds	r3, #1
 8021054:	67bb      	str	r3, [r7, #120]	; 0x78
 8021056:	e7cb      	b.n	8020ff0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
                continue;
 8021058:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 802105a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802105c:	3301      	adds	r3, #1
 802105e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8021060:	e7a1      	b.n	8020fa6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x19e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8021062:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021066:	3301      	adds	r3, #1
 8021068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802106c:	e78c      	b.n	8020f88 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x180>
              }
            }
          }
          float bias_value = 0.0f;
 802106e:	f04f 0300 	mov.w	r3, #0
 8021072:	677b      	str	r3, [r7, #116]	; 0x74
          if (bias_data) {
 8021074:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8021078:	2b00      	cmp	r3, #0
 802107a:	d007      	beq.n	802108c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x284>
            bias_value = bias_data[out_channel];
 802107c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021080:	009b      	lsls	r3, r3, #2
 8021082:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8021086:	4413      	add	r3, r2
 8021088:	681b      	ldr	r3, [r3, #0]
 802108a:	677b      	str	r3, [r7, #116]	; 0x74
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 802108c:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8021090:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8021094:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8021098:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802109c:	9300      	str	r3, [sp, #0]
 802109e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80210a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80210a6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80210aa:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80210ae:	f7ff fd99 	bl	8020be4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80210b2:	4603      	mov	r3, r0
 80210b4:	009b      	lsls	r3, r3, #2
 80210b6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80210ba:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 80210bc:	ed97 1a15 	vldr	s2, [r7, #84]	; 0x54
 80210c0:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 80210c4:	eeb0 0a48 	vmov.f32	s0, s16
 80210c8:	f7ff fde4 	bl	8020c94 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 80210cc:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 80210d0:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 80210d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80210d8:	3301      	adds	r3, #1
 80210da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80210de:	e746      	b.n	8020f6e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x166>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80210e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80210e4:	3301      	adds	r3, #1
 80210e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80210ea:	e72f      	b.n	8020f4c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x144>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80210ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80210f0:	3301      	adds	r3, #1
 80210f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80210f6:	e718      	b.n	8020f2a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
  for (int batch = 0; batch < batches; ++batch) {
 80210f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80210fc:	3301      	adds	r3, #1
 80210fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8021102:	e709      	b.n	8020f18 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x110>
                                           output_activation_max);
        }
      }
    }
  }
}
 8021104:	bf00      	nop
 8021106:	379c      	adds	r7, #156	; 0x9c
 8021108:	46bd      	mov	sp, r7
 802110a:	ecbd 8b02 	vpop	{d8}
 802110e:	bd90      	pop	{r4, r7, pc}

08021110 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8021110:	b590      	push	{r4, r7, lr}
 8021112:	b0a9      	sub	sp, #164	; 0xa4
 8021114:	af02      	add	r7, sp, #8
 8021116:	60f8      	str	r0, [r7, #12]
 8021118:	60b9      	str	r1, [r7, #8]
 802111a:	607a      	str	r2, [r7, #4]
 802111c:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 802111e:	68fb      	ldr	r3, [r7, #12]
 8021120:	695b      	ldr	r3, [r3, #20]
 8021122:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 8021124:	68fb      	ldr	r3, [r7, #12]
 8021126:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 802112a:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 802112c:	68fb      	ldr	r3, [r7, #12]
 802112e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8021132:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 8021134:	68fb      	ldr	r3, [r7, #12]
 8021136:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 802113a:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 802113c:	68fb      	ldr	r3, [r7, #12]
 802113e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8021142:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 8021144:	68fb      	ldr	r3, [r7, #12]
 8021146:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802114a:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 802114c:	68fb      	ldr	r3, [r7, #12]
 802114e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8021152:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_offset = params.output_offset;
 8021154:	68fb      	ldr	r3, [r7, #12]
 8021156:	69db      	ldr	r3, [r3, #28]
 8021158:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 802115a:	68fb      	ldr	r3, [r7, #12]
 802115c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802115e:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8021160:	68fb      	ldr	r3, [r7, #12]
 8021162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021164:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8021166:	69ba      	ldr	r2, [r7, #24]
 8021168:	697b      	ldr	r3, [r7, #20]
 802116a:	429a      	cmp	r2, r3
 802116c:	dd01      	ble.n	8021172 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 802116e:	f00b f811 	bl	802c194 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8021172:	6838      	ldr	r0, [r7, #0]
 8021174:	f7fe fb3b 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8021178:	4603      	mov	r3, r0
 802117a:	2b04      	cmp	r3, #4
 802117c:	d001      	beq.n	8021182 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 802117e:	f00b f809 	bl	802c194 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8021182:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8021186:	f7fe fb32 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802118a:	4603      	mov	r3, r0
 802118c:	2b04      	cmp	r3, #4
 802118e:	d001      	beq.n	8021194 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 8021190:	f00b f800 	bl	802c194 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8021194:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8021198:	f7fe fb29 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802119c:	4603      	mov	r3, r0
 802119e:	2b04      	cmp	r3, #4
 80211a0:	d001      	beq.n	80211a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 80211a2:	f00a fff7 	bl	802c194 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80211a6:	2300      	movs	r3, #0
 80211a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80211ac:	2100      	movs	r1, #0
 80211ae:	6838      	ldr	r0, [r7, #0]
 80211b0:	f7ff fdfb 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80211b4:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 80211b6:	2303      	movs	r3, #3
 80211b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80211bc:	2103      	movs	r1, #3
 80211be:	6838      	ldr	r0, [r7, #0]
 80211c0:	f7ff fdf3 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80211c4:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 80211c6:	2303      	movs	r3, #3
 80211c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80211cc:	2100      	movs	r1, #0
 80211ce:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80211d2:	f7ff fdea 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80211d6:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 80211d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80211dc:	2b00      	cmp	r3, #0
 80211de:	d009      	beq.n	80211f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80211e0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80211e4:	f7fe fcd6 	bl	801fb94 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80211e8:	4602      	mov	r2, r0
 80211ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80211ec:	4293      	cmp	r3, r2
 80211ee:	d001      	beq.n	80211f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 80211f0:	f00a ffd0 	bl	802c194 <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 80211f4:	2101      	movs	r1, #1
 80211f6:	6838      	ldr	r0, [r7, #0]
 80211f8:	f7fe fc94 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 80211fc:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 80211fe:	2102      	movs	r1, #2
 8021200:	6838      	ldr	r0, [r7, #0]
 8021202:	f7fe fc8f 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8021206:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 8021208:	2101      	movs	r1, #1
 802120a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 802120e:	f7fe fc89 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8021212:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 8021214:	2102      	movs	r1, #2
 8021216:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 802121a:	f7fe fc83 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 802121e:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 8021220:	2101      	movs	r1, #1
 8021222:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8021226:	f7fe fc7d 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 802122a:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 802122c:	2102      	movs	r1, #2
 802122e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8021232:	f7fe fc77 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8021236:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 8021238:	2300      	movs	r3, #0
 802123a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 802123e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8021242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021244:	429a      	cmp	r2, r3
 8021246:	f280 8113 	bge.w	8021470 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x360>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 802124a:	2300      	movs	r3, #0
 802124c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8021250:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8021254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021256:	429a      	cmp	r2, r3
 8021258:	f280 8104 	bge.w	8021464 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x354>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 802125c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8021260:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8021262:	fb03 f202 	mul.w	r2, r3, r2
 8021266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021268:	1ad3      	subs	r3, r2, r3
 802126a:	637b      	str	r3, [r7, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 802126c:	2300      	movs	r3, #0
 802126e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8021272:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8021276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021278:	429a      	cmp	r2, r3
 802127a:	f280 80ed 	bge.w	8021458 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x348>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 802127e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021282:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8021284:	fb03 f202 	mul.w	r2, r3, r2
 8021288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802128a:	1ad3      	subs	r3, r2, r3
 802128c:	633b      	str	r3, [r7, #48]	; 0x30
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 802128e:	2300      	movs	r3, #0
 8021290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8021294:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8021298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802129a:	429a      	cmp	r2, r3
 802129c:	f280 80d6 	bge.w	802144c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33c>
          int32_t acc = 0;
 80212a0:	2300      	movs	r3, #0
 80212a2:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80212a4:	2300      	movs	r3, #0
 80212a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80212aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80212ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80212b0:	429a      	cmp	r2, r3
 80212b2:	da76      	bge.n	80213a2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 80212b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80212b6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80212ba:	fb02 f303 	mul.w	r3, r2, r3
 80212be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80212c0:	4413      	add	r3, r2
 80212c2:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80212c4:	2300      	movs	r3, #0
 80212c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80212ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80212ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80212d0:	429a      	cmp	r2, r3
 80212d2:	da60      	bge.n	8021396 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x286>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 80212d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80212d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80212da:	fb02 f303 	mul.w	r3, r2, r3
 80212de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80212e0:	4413      	add	r3, r2
 80212e2:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 80212e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80212e6:	2b00      	cmp	r3, #0
 80212e8:	db0c      	blt.n	8021304 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 80212ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80212ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80212ee:	429a      	cmp	r2, r3
 80212f0:	da08      	bge.n	8021304 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 80212f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	db05      	blt.n	8021304 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 80212f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80212fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80212fc:	429a      	cmp	r2, r3
 80212fe:	da01      	bge.n	8021304 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8021300:	2301      	movs	r3, #1
 8021302:	e000      	b.n	8021306 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f6>
 8021304:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 8021306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 802130a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802130e:	f083 0301 	eor.w	r3, r3, #1
 8021312:	b2db      	uxtb	r3, r3
 8021314:	2b00      	cmp	r3, #0
 8021316:	d137      	bne.n	8021388 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x278>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8021318:	2300      	movs	r3, #0
 802131a:	67fb      	str	r3, [r7, #124]	; 0x7c
 802131c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 802131e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021320:	429a      	cmp	r2, r3
 8021322:	da32      	bge.n	802138a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x27a>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 8021324:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021326:	9300      	str	r3, [sp, #0]
 8021328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802132a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802132c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8021330:	6838      	ldr	r0, [r7, #0]
 8021332:	f7ff fc57 	bl	8020be4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8021336:	4603      	mov	r3, r0
 8021338:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 802133a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802133e:	4413      	add	r3, r2
 8021340:	f993 3000 	ldrsb.w	r3, [r3]
 8021344:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 8021346:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021348:	9300      	str	r3, [sp, #0]
 802134a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802134e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8021352:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8021356:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 802135a:	f7ff fc43 	bl	8020be4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 802135e:	4603      	mov	r3, r0
 8021360:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 8021362:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8021366:	4413      	add	r3, r2
 8021368:	f993 3000 	ldrsb.w	r3, [r3]
 802136c:	61fb      	str	r3, [r7, #28]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 802136e:	6a3a      	ldr	r2, [r7, #32]
 8021370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021372:	4413      	add	r3, r2
 8021374:	69fa      	ldr	r2, [r7, #28]
 8021376:	fb03 f202 	mul.w	r2, r3, r2
 802137a:	693b      	ldr	r3, [r7, #16]
 802137c:	4413      	add	r3, r2
 802137e:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8021380:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021382:	3301      	adds	r3, #1
 8021384:	67fb      	str	r3, [r7, #124]	; 0x7c
 8021386:	e7c9      	b.n	802131c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
                continue;
 8021388:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 802138a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802138e:	3301      	adds	r3, #1
 8021390:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8021394:	e799      	b.n	80212ca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ba>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8021396:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802139a:	3301      	adds	r3, #1
 802139c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80213a0:	e783      	b.n	80212aa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
              }
            }
          }

          if (bias_data) {
 80213a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80213a6:	2b00      	cmp	r3, #0
 80213a8:	d009      	beq.n	80213be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ae>
            acc += bias_data[out_channel];
 80213aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80213ae:	009b      	lsls	r3, r3, #2
 80213b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80213b4:	4413      	add	r3, r2
 80213b6:	681a      	ldr	r2, [r3, #0]
 80213b8:	693b      	ldr	r3, [r7, #16]
 80213ba:	4413      	add	r3, r2
 80213bc:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 80213be:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 80213c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80213c4:	009b      	lsls	r3, r3, #2
 80213c6:	68ba      	ldr	r2, [r7, #8]
 80213c8:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 80213ca:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 80213cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80213d0:	009b      	lsls	r3, r3, #2
 80213d2:	687a      	ldr	r2, [r7, #4]
 80213d4:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 80213d6:	681b      	ldr	r3, [r3, #0]
 80213d8:	461a      	mov	r2, r3
 80213da:	f7fe fc33 	bl	801fc44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80213de:	4603      	mov	r3, r0
 80213e0:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 80213e2:	693a      	ldr	r2, [r7, #16]
 80213e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80213e6:	4413      	add	r3, r2
 80213e8:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 80213ea:	f107 0218 	add.w	r2, r7, #24
 80213ee:	f107 0310 	add.w	r3, r7, #16
 80213f2:	4611      	mov	r1, r2
 80213f4:	4618      	mov	r0, r3
 80213f6:	f7fe f9af 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 80213fa:	4603      	mov	r3, r0
 80213fc:	681b      	ldr	r3, [r3, #0]
 80213fe:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 8021400:	f107 0214 	add.w	r2, r7, #20
 8021404:	f107 0310 	add.w	r3, r7, #16
 8021408:	4611      	mov	r1, r2
 802140a:	4618      	mov	r0, r3
 802140c:	f7fe f990 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 8021410:	4603      	mov	r3, r0
 8021412:	681b      	ldr	r3, [r3, #0]
 8021414:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8021416:	693c      	ldr	r4, [r7, #16]
 8021418:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802141c:	9300      	str	r3, [sp, #0]
 802141e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021422:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8021426:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 802142a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 802142e:	f7ff fbd9 	bl	8020be4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8021432:	4603      	mov	r3, r0
 8021434:	461a      	mov	r2, r3
 8021436:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 802143a:	4413      	add	r3, r2
 802143c:	b262      	sxtb	r2, r4
 802143e:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8021440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021444:	3301      	adds	r3, #1
 8021446:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802144a:	e723      	b.n	8021294 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 802144c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021450:	3301      	adds	r3, #1
 8021452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8021456:	e70c      	b.n	8021272 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8021458:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802145c:	3301      	adds	r3, #1
 802145e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8021462:	e6f5      	b.n	8021250 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x140>
  for (int batch = 0; batch < batches; ++batch) {
 8021464:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8021468:	3301      	adds	r3, #1
 802146a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 802146e:	e6e6      	b.n	802123e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 8021470:	bf00      	nop
 8021472:	379c      	adds	r7, #156	; 0x9c
 8021474:	46bd      	mov	sp, r7
 8021476:	bd90      	pop	{r4, r7, pc}

08021478 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8021478:	b580      	push	{r7, lr}
 802147a:	b084      	sub	sp, #16
 802147c:	af00      	add	r7, sp, #0
 802147e:	60f8      	str	r0, [r7, #12]
 8021480:	60b9      	str	r1, [r7, #8]
 8021482:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8021484:	68fb      	ldr	r3, [r7, #12]
 8021486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021488:	2b00      	cmp	r3, #0
 802148a:	d101      	bne.n	8021490 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 802148c:	f00a fe82 	bl	802c194 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8021490:	68fb      	ldr	r3, [r7, #12]
 8021492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021494:	2138      	movs	r1, #56	; 0x38
 8021496:	68f8      	ldr	r0, [r7, #12]
 8021498:	4798      	blx	r3
 802149a:	4603      	mov	r3, r0
}
 802149c:	4618      	mov	r0, r3
 802149e:	3710      	adds	r7, #16
 80214a0:	46bd      	mov	sp, r7
 80214a2:	bd80      	pop	{r7, pc}

080214a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80214a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80214a6:	b0b7      	sub	sp, #220	; 0xdc
 80214a8:	af08      	add	r7, sp, #32
 80214aa:	60f8      	str	r0, [r7, #12]
 80214ac:	60b9      	str	r1, [r7, #8]
  TFLITE_DCHECK(node->user_data != nullptr);
 80214ae:	68bb      	ldr	r3, [r7, #8]
 80214b0:	691b      	ldr	r3, [r3, #16]
 80214b2:	2b00      	cmp	r3, #0
 80214b4:	d101      	bne.n	80214ba <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 80214b6:	f00a fe6d 	bl	802c194 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80214ba:	68bb      	ldr	r3, [r7, #8]
 80214bc:	695b      	ldr	r3, [r3, #20]
 80214be:	2b00      	cmp	r3, #0
 80214c0:	d101      	bne.n	80214c6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 80214c2:	f00a fe67 	bl	802c194 <abort>

  int32_t buf_size = 0;
 80214c6:	2300      	movs	r3, #0
 80214c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const auto& params =
 80214cc:	68bb      	ldr	r3, [r7, #8]
 80214ce:	695b      	ldr	r3, [r3, #20]
 80214d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  OpData* data = static_cast<OpData*>(node->user_data);
 80214d4:	68bb      	ldr	r3, [r7, #8]
 80214d6:	691b      	ldr	r3, [r3, #16]
 80214d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 80214dc:	4ba2      	ldr	r3, [pc, #648]	; (8021768 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
 80214de:	681b      	ldr	r3, [r3, #0]
 80214e0:	461a      	mov	r2, r3
 80214e2:	68b9      	ldr	r1, [r7, #8]
 80214e4:	68f8      	ldr	r0, [r7, #12]
 80214e6:	f7fd fd57 	bl	801ef98 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80214ea:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 80214ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80214f2:	2b00      	cmp	r3, #0
 80214f4:	d10a      	bne.n	802150c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
 80214f6:	68fb      	ldr	r3, [r7, #12]
 80214f8:	695c      	ldr	r4, [r3, #20]
 80214fa:	4b9c      	ldr	r3, [pc, #624]	; (802176c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
 80214fc:	9300      	str	r3, [sp, #0]
 80214fe:	233d      	movs	r3, #61	; 0x3d
 8021500:	4a9b      	ldr	r2, [pc, #620]	; (8021770 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 8021502:	499c      	ldr	r1, [pc, #624]	; (8021774 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 8021504:	68f8      	ldr	r0, [r7, #12]
 8021506:	47a0      	blx	r4
 8021508:	2401      	movs	r4, #1
 802150a:	e128      	b.n	802175e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 802150c:	4b9a      	ldr	r3, [pc, #616]	; (8021778 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 802150e:	681b      	ldr	r3, [r3, #0]
 8021510:	461a      	mov	r2, r3
 8021512:	68b9      	ldr	r1, [r7, #8]
 8021514:	68f8      	ldr	r0, [r7, #12]
 8021516:	f7fd fd3f 	bl	801ef98 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802151a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  TF_LITE_ENSURE(context, filter != nullptr);
 802151e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8021522:	2b00      	cmp	r3, #0
 8021524:	d10a      	bne.n	802153c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x98>
 8021526:	68fb      	ldr	r3, [r7, #12]
 8021528:	695c      	ldr	r4, [r3, #20]
 802152a:	4b94      	ldr	r3, [pc, #592]	; (802177c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 802152c:	9300      	str	r3, [sp, #0]
 802152e:	233f      	movs	r3, #63	; 0x3f
 8021530:	4a8f      	ldr	r2, [pc, #572]	; (8021770 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 8021532:	4990      	ldr	r1, [pc, #576]	; (8021774 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 8021534:	68f8      	ldr	r0, [r7, #12]
 8021536:	47a0      	blx	r4
 8021538:	2401      	movs	r4, #1
 802153a:	e110      	b.n	802175e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 802153c:	4b90      	ldr	r3, [pc, #576]	; (8021780 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 802153e:	681b      	ldr	r3, [r3, #0]
 8021540:	461a      	mov	r2, r3
 8021542:	68b9      	ldr	r1, [r7, #8]
 8021544:	68f8      	ldr	r0, [r7, #12]
 8021546:	f7fd fd37 	bl	801efb8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 802154a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TF_LITE_ENSURE(context, output != nullptr);
 802154e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8021552:	2b00      	cmp	r3, #0
 8021554:	d10a      	bne.n	802156c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
 8021556:	68fb      	ldr	r3, [r7, #12]
 8021558:	695c      	ldr	r4, [r3, #20]
 802155a:	4b8a      	ldr	r3, [pc, #552]	; (8021784 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 802155c:	9300      	str	r3, [sp, #0]
 802155e:	2341      	movs	r3, #65	; 0x41
 8021560:	4a83      	ldr	r2, [pc, #524]	; (8021770 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 8021562:	4984      	ldr	r1, [pc, #528]	; (8021774 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 8021564:	68f8      	ldr	r0, [r7, #12]
 8021566:	47a0      	blx	r4
 8021568:	2401      	movs	r4, #1
 802156a:	e0f8      	b.n	802175e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>

  RuntimeShape input_shape = GetTensorShape(input);
 802156c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8021570:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8021574:	4618      	mov	r0, r3
 8021576:	f7fe f99e 	bl	801f8b6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 802157a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802157e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8021582:	4618      	mov	r0, r3
 8021584:	f7fe f997 	bl	801f8b6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

  // Initialize cmsis_nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 8021588:	f107 0268 	add.w	r2, r7, #104	; 0x68
 802158c:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8021590:	2300      	movs	r3, #0
 8021592:	2100      	movs	r1, #0
 8021594:	f7ff fc09 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8021598:	4603      	mov	r3, r0
 802159a:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.h = input->dims->data[1];
 802159c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80215a0:	689b      	ldr	r3, [r3, #8]
 80215a2:	689b      	ldr	r3, [r3, #8]
 80215a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.w = input->dims->data[2];
 80215a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80215aa:	689b      	ldr	r3, [r3, #8]
 80215ac:	68db      	ldr	r3, [r3, #12]
 80215ae:	663b      	str	r3, [r7, #96]	; 0x60
  input_dims.c = input_shape.Dims(3);
 80215b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80215b4:	2103      	movs	r1, #3
 80215b6:	4618      	mov	r0, r3
 80215b8:	f7fe fab4 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 80215bc:	4603      	mov	r3, r0
 80215be:	667b      	str	r3, [r7, #100]	; 0x64

  // Initialize cmsis_nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
 80215c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80215c4:	2103      	movs	r1, #3
 80215c6:	4618      	mov	r0, r3
 80215c8:	f7fe faac 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 80215cc:	4603      	mov	r3, r0
 80215ce:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.h = filter->dims->data[1];
 80215d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80215d4:	689b      	ldr	r3, [r3, #8]
 80215d6:	689b      	ldr	r3, [r3, #8]
 80215d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.w = filter->dims->data[2];
 80215da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80215de:	689b      	ldr	r3, [r3, #8]
 80215e0:	68db      	ldr	r3, [r3, #12]
 80215e2:	653b      	str	r3, [r7, #80]	; 0x50
  filter_dims.c = input_dims.c;
 80215e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80215e6:	657b      	str	r3, [r7, #84]	; 0x54

  // Initialize cmsis_nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
 80215e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80215ea:	63bb      	str	r3, [r7, #56]	; 0x38
  output_dims.h = output->dims->data[1];
 80215ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80215f0:	689b      	ldr	r3, [r3, #8]
 80215f2:	689b      	ldr	r3, [r3, #8]
 80215f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  output_dims.w = output->dims->data[2];
 80215f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80215fa:	689b      	ldr	r3, [r3, #8]
 80215fc:	68db      	ldr	r3, [r3, #12]
 80215fe:	643b      	str	r3, [r7, #64]	; 0x40
  output_dims.c = output_shape.Dims(3);
 8021600:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8021604:	2103      	movs	r1, #3
 8021606:	4618      	mov	r0, r3
 8021608:	f7fe fa8c 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 802160c:	4603      	mov	r3, r0
 802160e:	647b      	str	r3, [r7, #68]	; 0x44
  // Dynamically allocate per-channel quantization parameters.
  // TODO(#42883): This allocation is done even for non-int8 cases to get around
  // a bug in kernel_util.cc which incorrectly uses per_channel_output_shift in
  // non-int8 cases. Protect this section with a if (input->type == kTfLiteInt8)
  // when the issue is fixed.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 8021610:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8021614:	689a      	ldr	r2, [r3, #8]
 8021616:	4b5c      	ldr	r3, [pc, #368]	; (8021788 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 8021618:	681b      	ldr	r3, [r3, #0]
 802161a:	009b      	lsls	r3, r3, #2
 802161c:	4413      	add	r3, r2
 802161e:	685b      	ldr	r3, [r3, #4]
 8021620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  data->reference_op_data.per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8021624:	68fb      	ldr	r3, [r7, #12]
 8021626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 8021628:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 802162c:	0092      	lsls	r2, r2, #2
 802162e:	4611      	mov	r1, r2
 8021630:	68f8      	ldr	r0, [r7, #12]
 8021632:	4798      	blx	r3
 8021634:	4602      	mov	r2, r0
  data->reference_op_data.per_channel_output_multiplier =
 8021636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802163a:	625a      	str	r2, [r3, #36]	; 0x24
  data->reference_op_data.per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 802163c:	68fb      	ldr	r3, [r7, #12]
 802163e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 8021640:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8021644:	0092      	lsls	r2, r2, #2
 8021646:	4611      	mov	r1, r2
 8021648:	68f8      	ldr	r0, [r7, #12]
 802164a:	4798      	blx	r3
 802164c:	4602      	mov	r2, r0
  data->reference_op_data.per_channel_output_shift =
 802164e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8021652:	629a      	str	r2, [r3, #40]	; 0x28

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 8021654:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021656:	607b      	str	r3, [r7, #4]
 8021658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802165a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802165c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 802165e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8021660:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8021662:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 8021666:	782d      	ldrb	r5, [r5, #0]
 8021668:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 802166c:	9606      	str	r6, [sp, #24]
 802166e:	9505      	str	r5, [sp, #20]
 8021670:	9404      	str	r4, [sp, #16]
 8021672:	9003      	str	r0, [sp, #12]
 8021674:	9102      	str	r1, [sp, #8]
 8021676:	9201      	str	r2, [sp, #4]
 8021678:	9300      	str	r3, [sp, #0]
 802167a:	687b      	ldr	r3, [r7, #4]
 802167c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8021680:	68b9      	ldr	r1, [r7, #8]
 8021682:	68f8      	ldr	r0, [r7, #12]
 8021684:	f000 fd7c 	bl	8022180 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 8021688:	4603      	mov	r3, r0
 802168a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 802168e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8021692:	2b00      	cmp	r3, #0
 8021694:	d002      	beq.n	802169c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>
 8021696:	f897 409b 	ldrb.w	r4, [r7, #155]	; 0x9b
 802169a:	e056      	b.n	802174a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a6>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
 802169c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80216a0:	781b      	ldrb	r3, [r3, #0]
 80216a2:	2b09      	cmp	r3, #9
 80216a4:	d134      	bne.n	8021710 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26c>
    // Initialize cmsis_nn convolution parameters
    cmsis_nn_conv_params conv_params;
    conv_params.input_offset = -input->params.zero_point;
 80216a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80216aa:	691b      	ldr	r3, [r3, #16]
 80216ac:	425b      	negs	r3, r3
 80216ae:	613b      	str	r3, [r7, #16]
    conv_params.output_offset = output->params.zero_point;
 80216b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80216b4:	691b      	ldr	r3, [r3, #16]
 80216b6:	617b      	str	r3, [r7, #20]
    conv_params.stride.h = params.stride_height;
 80216b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80216bc:	689b      	ldr	r3, [r3, #8]
 80216be:	61fb      	str	r3, [r7, #28]
    conv_params.stride.w = params.stride_width;
 80216c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80216c4:	685b      	ldr	r3, [r3, #4]
 80216c6:	61bb      	str	r3, [r7, #24]
    conv_params.dilation.h = params.dilation_height_factor;
 80216c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80216cc:	695b      	ldr	r3, [r3, #20]
 80216ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_params.dilation.w = params.dilation_width_factor;
 80216d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80216d4:	691b      	ldr	r3, [r3, #16]
 80216d6:	62bb      	str	r3, [r7, #40]	; 0x28
    conv_params.padding.h = data->reference_op_data.padding.height;
 80216d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80216dc:	685b      	ldr	r3, [r3, #4]
 80216de:	627b      	str	r3, [r7, #36]	; 0x24
    conv_params.padding.w = data->reference_op_data.padding.width;
 80216e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80216e4:	681b      	ldr	r3, [r3, #0]
 80216e6:	623b      	str	r3, [r7, #32]
    conv_params.activation.min = data->reference_op_data.output_activation_min;
 80216e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80216ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80216ee:	633b      	str	r3, [r7, #48]	; 0x30
    conv_params.activation.max = data->reference_op_data.output_activation_max;
 80216f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80216f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216f6:	637b      	str	r3, [r7, #52]	; 0x34

    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 80216f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80216fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8021700:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8021704:	f107 0010 	add.w	r0, r7, #16
 8021708:	f7ed f94d 	bl	800e9a6 <arm_convolve_wrapper_s8_get_buffer_size>
 802170c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
        &conv_params, &input_dims, &filter_dims, &output_dims);
  }

  if (buf_size > 0) {
 8021710:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8021714:	2b00      	cmp	r3, #0
 8021716:	dd12      	ble.n	802173e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x29a>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8021718:	68fb      	ldr	r3, [r7, #12]
 802171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802171c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8021720:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8021724:	3234      	adds	r2, #52	; 0x34
 8021726:	68f8      	ldr	r0, [r7, #12]
 8021728:	4798      	blx	r3
 802172a:	4603      	mov	r3, r0
 802172c:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8021730:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8021734:	2b00      	cmp	r3, #0
 8021736:	d007      	beq.n	8021748 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>
 8021738:	f897 409a 	ldrb.w	r4, [r7, #154]	; 0x9a
 802173c:	e005      	b.n	802174a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a6>
        context, buf_size, &data->buffer_idx));
  } else {
    data->buffer_idx = -1;
 802173e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8021742:	f04f 32ff 	mov.w	r2, #4294967295
 8021746:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 8021748:	2400      	movs	r4, #0
  RuntimeShape output_shape = GetTensorShape(output);
 802174a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802174e:	4618      	mov	r0, r3
 8021750:	f7fe f837 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
 8021754:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8021758:	4618      	mov	r0, r3
 802175a:	f7fe f832 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 802175e:	4623      	mov	r3, r4
 8021760:	4618      	mov	r0, r3
 8021762:	37bc      	adds	r7, #188	; 0xbc
 8021764:	46bd      	mov	sp, r7
 8021766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021768:	080309d8 	.word	0x080309d8
 802176c:	0802e890 	.word	0x0802e890
 8021770:	0802e7ec 	.word	0x0802e7ec
 8021774:	0802e878 	.word	0x0802e878
 8021778:	080309dc 	.word	0x080309dc
 802177c:	0802e8a4 	.word	0x0802e8a4
 8021780:	080309e4 	.word	0x080309e4
 8021784:	0802e8b8 	.word	0x0802e8b8
 8021788:	080309e8 	.word	0x080309e8

0802178c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>:

TfLiteStatus EvalQuantizedPerChannel(
    TfLiteContext* context, TfLiteNode* node, const TfLiteConvParams& params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output, TfLiteEvalTensor* im2col) {
 802178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802178e:	b0ef      	sub	sp, #444	; 0x1bc
 8021790:	af08      	add	r7, sp, #32
 8021792:	f507 74cc 	add.w	r4, r7, #408	; 0x198
 8021796:	f5a4 74c2 	sub.w	r4, r4, #388	; 0x184
 802179a:	6020      	str	r0, [r4, #0]
 802179c:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80217a0:	f5a0 70c4 	sub.w	r0, r0, #392	; 0x188
 80217a4:	6001      	str	r1, [r0, #0]
 80217a6:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80217aa:	f5a1 71c6 	sub.w	r1, r1, #396	; 0x18c
 80217ae:	600a      	str	r2, [r1, #0]
 80217b0:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80217b4:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 80217b8:	6013      	str	r3, [r2, #0]
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
 80217ba:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80217be:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80217c2:	681b      	ldr	r3, [r3, #0]
 80217c4:	695b      	ldr	r3, [r3, #20]
 80217c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  conv_params.dilation.w = params.dilation_width_factor;
 80217ca:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80217ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80217d2:	681b      	ldr	r3, [r3, #0]
 80217d4:	691b      	ldr	r3, [r3, #16]
 80217d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 80217da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80217de:	2b01      	cmp	r3, #1
 80217e0:	f040 81d2 	bne.w	8021b88 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x3fc>
 80217e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80217e8:	2b01      	cmp	r3, #1
 80217ea:	f040 81cd 	bne.w	8021b88 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x3fc>
    // Initialize cmsis_nn convolution parameters
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 80217ee:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80217f2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80217f6:	681b      	ldr	r3, [r3, #0]
 80217f8:	691b      	ldr	r3, [r3, #16]
 80217fa:	425b      	negs	r3, r3
 80217fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 8021800:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021804:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8021808:	681b      	ldr	r3, [r3, #0]
 802180a:	699b      	ldr	r3, [r3, #24]
 802180c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    conv_params.stride.h = params.stride_height;
 8021810:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021814:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8021818:	681b      	ldr	r3, [r3, #0]
 802181a:	689b      	ldr	r3, [r3, #8]
 802181c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    conv_params.stride.w = params.stride_width;
 8021820:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021824:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8021828:	681b      	ldr	r3, [r3, #0]
 802182a:	685b      	ldr	r3, [r3, #4]
 802182c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    conv_params.padding.h = data.reference_op_data.padding.height;
 8021830:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021834:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8021838:	681b      	ldr	r3, [r3, #0]
 802183a:	685b      	ldr	r3, [r3, #4]
 802183c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    conv_params.padding.w = data.reference_op_data.padding.width;
 8021840:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021844:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8021848:	681b      	ldr	r3, [r3, #0]
 802184a:	681b      	ldr	r3, [r3, #0]
 802184c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    conv_params.activation.min = data.reference_op_data.output_activation_min;
 8021850:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021854:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8021858:	681b      	ldr	r3, [r3, #0]
 802185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802185c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 8021860:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021864:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8021868:	681b      	ldr	r3, [r3, #0]
 802186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802186c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    // Initialize cmsis_nn per channel quantization parameters
    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier = const_cast<int32_t*>(
        data.reference_op_data.per_channel_output_multiplier);
 8021870:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021874:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8021878:	681b      	ldr	r3, [r3, #0]
 802187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    quant_params.multiplier = const_cast<int32_t*>(
 802187c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    quant_params.shift =
        const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);
 8021880:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021884:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8021888:	681b      	ldr	r3, [r3, #0]
 802188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    quant_params.shift =
 802188c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8021890:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8021894:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8021898:	4618      	mov	r0, r3
 802189a:	f001 ff94 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 802189e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80218a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80218a6:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 80218aa:	4618      	mov	r0, r3
 80218ac:	f001 ff8b 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80218b0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80218b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80218b8:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80218bc:	4618      	mov	r0, r3
 80218be:	f001 ff82 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 80218c2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80218c6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80218ca:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 80218ce:	4618      	mov	r0, r3
 80218d0:	f001 ff79 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    // Consistency check.
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 80218d4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80218d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80218dc:	429a      	cmp	r2, r3
 80218de:	dd01      	ble.n	80218e4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x158>
 80218e0:	f00a fc58 	bl	802c194 <abort>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80218e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80218e8:	4618      	mov	r0, r3
 80218ea:	f7fd ff80 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80218ee:	4603      	mov	r3, r0
 80218f0:	2b04      	cmp	r3, #4
 80218f2:	d001      	beq.n	80218f8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x16c>
 80218f4:	f00a fc4e 	bl	802c194 <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 80218f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80218fc:	4618      	mov	r0, r3
 80218fe:	f7fd ff76 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8021902:	4603      	mov	r3, r0
 8021904:	2b04      	cmp	r3, #4
 8021906:	d001      	beq.n	802190c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x180>
 8021908:	f00a fc44 	bl	802c194 <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 802190c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8021910:	4618      	mov	r0, r3
 8021912:	f7fd ff6c 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8021916:	4603      	mov	r3, r0
 8021918:	2b04      	cmp	r3, #4
 802191a:	d001      	beq.n	8021920 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x194>
 802191c:	f00a fc3a 	bl	802c194 <abort>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 8021920:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8021924:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8021928:	2300      	movs	r3, #0
 802192a:	2100      	movs	r1, #0
 802192c:	f7ff fa3d 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8021930:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8021934:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8021938:	f107 0094 	add.w	r0, r7, #148	; 0x94
 802193c:	2303      	movs	r3, #3
 802193e:	2103      	movs	r1, #3
 8021940:	f7ff fa33 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8021944:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8021948:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 802194c:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8021950:	2303      	movs	r3, #3
 8021952:	2100      	movs	r1, #0
 8021954:	f7ff fa29 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8021958:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 802195c:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8021960:	f7fe feb2 	bl	80206c8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8021964:	4603      	mov	r3, r0
 8021966:	2b00      	cmp	r3, #0
 8021968:	bf14      	ite	ne
 802196a:	2301      	movne	r3, #1
 802196c:	2300      	moveq	r3, #0
 802196e:	b2db      	uxtb	r3, r3
 8021970:	2b00      	cmp	r3, #0
 8021972:	d00b      	beq.n	802198c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x200>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8021974:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8021978:	4618      	mov	r0, r3
 802197a:	f7fe f90b 	bl	801fb94 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 802197e:	4602      	mov	r2, r0
 8021980:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8021984:	4293      	cmp	r3, r2
 8021986:	d001      	beq.n	802198c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x200>
 8021988:	f00a fc04 	bl	802c194 <abort>
    }

    // Initialize cmsis_nn dimensions
    // Input
    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 802198c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021990:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8021994:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8021998:	601a      	str	r2, [r3, #0]
    input_dims.h = input_shape.Dims(1);
 802199a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 802199e:	2101      	movs	r1, #1
 80219a0:	4618      	mov	r0, r3
 80219a2:	f7fe f8bf 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 80219a6:	4602      	mov	r2, r0
 80219a8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80219ac:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80219b0:	605a      	str	r2, [r3, #4]
    input_dims.w = input_shape.Dims(2);
 80219b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80219b6:	2102      	movs	r1, #2
 80219b8:	4618      	mov	r0, r3
 80219ba:	f7fe f8b3 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 80219be:	4602      	mov	r2, r0
 80219c0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80219c4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80219c8:	609a      	str	r2, [r3, #8]
    input_dims.c = input_depth;
 80219ca:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80219ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80219d2:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80219d6:	60da      	str	r2, [r3, #12]

    // Filter
    cmsis_nn_dims filter_dims;
    filter_dims.n = output_depth;
 80219d8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80219dc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80219e0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80219e4:	601a      	str	r2, [r3, #0]
    filter_dims.h = filter_shape.Dims(1);
 80219e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80219ea:	2101      	movs	r1, #1
 80219ec:	4618      	mov	r0, r3
 80219ee:	f7fe f899 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 80219f2:	4602      	mov	r2, r0
 80219f4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80219f8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80219fc:	605a      	str	r2, [r3, #4]
    filter_dims.w = filter_shape.Dims(2);
 80219fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8021a02:	2102      	movs	r1, #2
 8021a04:	4618      	mov	r0, r3
 8021a06:	f7fe f88d 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8021a0a:	4602      	mov	r2, r0
 8021a0c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021a10:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8021a14:	609a      	str	r2, [r3, #8]
    filter_dims.c = input_depth;
 8021a16:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021a1a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8021a1e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8021a22:	60da      	str	r2, [r3, #12]

    // Bias
    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 8021a24:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021a28:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8021a2c:	2201      	movs	r2, #1
 8021a2e:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 8021a30:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021a34:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8021a38:	2201      	movs	r2, #1
 8021a3a:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 8021a3c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021a40:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8021a44:	2201      	movs	r2, #1
 8021a46:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 8021a48:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021a4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8021a50:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8021a54:	60da      	str	r2, [r3, #12]

    // Output
    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 8021a56:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021a5a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8021a5e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8021a62:	601a      	str	r2, [r3, #0]
    output_dims.h = output_shape.Dims(1);
 8021a64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8021a68:	2101      	movs	r1, #1
 8021a6a:	4618      	mov	r0, r3
 8021a6c:	f7fe f85a 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8021a70:	4602      	mov	r2, r0
 8021a72:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021a76:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8021a7a:	605a      	str	r2, [r3, #4]
    output_dims.w = output_shape.Dims(2);
 8021a7c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8021a80:	2102      	movs	r1, #2
 8021a82:	4618      	mov	r0, r3
 8021a84:	f7fe f84e 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8021a88:	4602      	mov	r2, r0
 8021a8a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021a8e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8021a92:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 8021a94:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021a98:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8021a9c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8021aa0:	60da      	str	r2, [r3, #12]

    // Initialize cmsis_nn context
    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 8021aa2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021aa6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8021aaa:	2200      	movs	r2, #0
 8021aac:	601a      	str	r2, [r3, #0]
    ctx.size = 0;
 8021aae:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021ab2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8021ab6:	2200      	movs	r2, #0
 8021ab8:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 8021aba:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021abe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8021ac2:	681b      	ldr	r3, [r3, #0]
 8021ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021ac6:	2b00      	cmp	r3, #0
 8021ac8:	db17      	blt.n	8021afa <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x36e>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8021aca:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021ace:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8021ad2:	681b      	ldr	r3, [r3, #0]
 8021ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021ad6:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8021ada:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 8021ade:	6812      	ldr	r2, [r2, #0]
 8021ae0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8021ae2:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8021ae6:	f5a2 72c2 	sub.w	r2, r2, #388	; 0x184
 8021aea:	6810      	ldr	r0, [r2, #0]
 8021aec:	4798      	blx	r3
 8021aee:	4602      	mov	r2, r0
 8021af0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021af4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8021af8:	601a      	str	r2, [r3, #0]
      // arm_convolve_wrapper_s8_get_buffer_size
    }

    // arm_convolve_wrapper_s8 dispatches the optimized kernel accordingly with
    // the parameters passed
    TFLITE_DCHECK_EQ(
 8021afa:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 8021afe:	f7fe fde3 	bl	80206c8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8021b02:	4605      	mov	r5, r0
 8021b04:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8021b08:	f7fe fdde 	bl	80206c8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8021b0c:	4606      	mov	r6, r0
 8021b0e:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8021b12:	f7ff f93b 	bl	8020d8c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8021b16:	6078      	str	r0, [r7, #4]
 8021b18:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8021b1c:	f7fe fde3 	bl	80206e6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8021b20:	4603      	mov	r3, r0
 8021b22:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8021b26:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8021b2a:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8021b2e:	f107 001c 	add.w	r0, r7, #28
 8021b32:	9306      	str	r3, [sp, #24]
 8021b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021b38:	9305      	str	r3, [sp, #20]
 8021b3a:	687b      	ldr	r3, [r7, #4]
 8021b3c:	9304      	str	r3, [sp, #16]
 8021b3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8021b42:	9303      	str	r3, [sp, #12]
 8021b44:	9602      	str	r6, [sp, #8]
 8021b46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8021b4a:	9301      	str	r3, [sp, #4]
 8021b4c:	9500      	str	r5, [sp, #0]
 8021b4e:	4623      	mov	r3, r4
 8021b50:	f7ec fea9 	bl	800e8a6 <arm_convolve_wrapper_s8>
 8021b54:	4603      	mov	r3, r0
 8021b56:	2b00      	cmp	r3, #0
 8021b58:	d001      	beq.n	8021b5e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x3d2>
 8021b5a:	f00a fb1b 	bl	802c194 <abort>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 8021b5e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8021b62:	4618      	mov	r0, r3
 8021b64:	f7fd fe2d 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8021b68:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8021b6c:	4618      	mov	r0, r3
 8021b6e:	f7fd fe28 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8021b72:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8021b76:	4618      	mov	r0, r3
 8021b78:	f7fd fe23 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8021b7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8021b80:	4618      	mov	r0, r3
 8021b82:	f7fd fe1e 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
            &ctx, &conv_params, &quant_params, &input_dims,
            tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
 8021b86:	e075      	b.n	8021c74 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x4e8>
  } else {
    reference_integer_ops::ConvPerChannel(
        ConvParamsQuantized(params, data.reference_op_data),
 8021b88:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021b8c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8021b90:	681a      	ldr	r2, [r3, #0]
 8021b92:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8021b96:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021b9a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8021b9e:	6819      	ldr	r1, [r3, #0]
 8021ba0:	f000 fa9d 	bl	80220de <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
 8021ba4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021ba8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8021bac:	681b      	ldr	r3, [r3, #0]
 8021bae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        data.reference_op_data.per_channel_output_shift,
 8021bb0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021bb4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8021bb8:	681b      	ldr	r3, [r3, #0]
 8021bba:	6a9d      	ldr	r5, [r3, #40]	; 0x28
        tflite::micro::GetTensorShape(input),
 8021bbc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8021bc0:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8021bc4:	4618      	mov	r0, r3
 8021bc6:	f001 fdfe 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 8021bca:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 8021bce:	f7fe fd7b 	bl	80206c8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8021bd2:	4606      	mov	r6, r0
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 8021bd4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8021bd8:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8021bdc:	4618      	mov	r0, r3
 8021bde:	f001 fdf2 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 8021be2:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8021be6:	f7fe fd6f 	bl	80206c8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8021bea:	6078      	str	r0, [r7, #4]
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 8021bec:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8021bf0:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8021bf4:	4618      	mov	r0, r3
 8021bf6:	f001 fde6 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 8021bfa:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8021bfe:	f7ff f8c5 	bl	8020d8c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8021c02:	6038      	str	r0, [r7, #0]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 8021c04:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8021c08:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8021c0c:	4618      	mov	r0, r3
 8021c0e:	f001 fdda 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 8021c12:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8021c16:	f7fe fd66 	bl	80206e6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8021c1a:	4603      	mov	r3, r0
 8021c1c:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8021c20:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8021c24:	9306      	str	r3, [sp, #24]
 8021c26:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8021c2a:	9305      	str	r3, [sp, #20]
 8021c2c:	683b      	ldr	r3, [r7, #0]
 8021c2e:	9304      	str	r3, [sp, #16]
 8021c30:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8021c34:	9303      	str	r3, [sp, #12]
 8021c36:	687b      	ldr	r3, [r7, #4]
 8021c38:	9302      	str	r3, [sp, #8]
 8021c3a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8021c3e:	9301      	str	r3, [sp, #4]
 8021c40:	9600      	str	r6, [sp, #0]
 8021c42:	4613      	mov	r3, r2
 8021c44:	462a      	mov	r2, r5
 8021c46:	4621      	mov	r1, r4
 8021c48:	f7ff fa62 	bl	8021110 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 8021c4c:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8021c50:	4618      	mov	r0, r3
 8021c52:	f7fd fdb6 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 8021c56:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8021c5a:	4618      	mov	r0, r3
 8021c5c:	f7fd fdb1 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 8021c60:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8021c64:	4618      	mov	r0, r3
 8021c66:	f7fd fdac 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 8021c6a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8021c6e:	4618      	mov	r0, r3
 8021c70:	f7fd fda7 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
 8021c74:	2300      	movs	r3, #0
}
 8021c76:	4618      	mov	r0, r3
 8021c78:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8021c7c:	46bd      	mov	sp, r7
 8021c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021c80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8021c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c84:	b0bc      	sub	sp, #240	; 0xf0
 8021c86:	af08      	add	r7, sp, #32
 8021c88:	6078      	str	r0, [r7, #4]
 8021c8a:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 8021c8c:	4b8b      	ldr	r3, [pc, #556]	; (8021ebc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23c>)
 8021c8e:	681b      	ldr	r3, [r3, #0]
 8021c90:	461a      	mov	r2, r3
 8021c92:	6839      	ldr	r1, [r7, #0]
 8021c94:	6878      	ldr	r0, [r7, #4]
 8021c96:	f7fe f819 	bl	801fccc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8021c9a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 8021c9e:	4b88      	ldr	r3, [pc, #544]	; (8021ec0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>)
 8021ca0:	681b      	ldr	r3, [r3, #0]
 8021ca2:	461a      	mov	r2, r3
 8021ca4:	6839      	ldr	r1, [r7, #0]
 8021ca6:	6878      	ldr	r0, [r7, #4]
 8021ca8:	f7fe f810 	bl	801fccc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8021cac:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 8021cb0:	6838      	ldr	r0, [r7, #0]
 8021cb2:	f7ff f851 	bl	8020d58 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8021cb6:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 8021cb8:	2b03      	cmp	r3, #3
 8021cba:	d108      	bne.n	8021cce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4e>
 8021cbc:	4b81      	ldr	r3, [pc, #516]	; (8021ec4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>)
 8021cbe:	681b      	ldr	r3, [r3, #0]
 8021cc0:	461a      	mov	r2, r3
 8021cc2:	6839      	ldr	r1, [r7, #0]
 8021cc4:	6878      	ldr	r0, [r7, #4]
 8021cc6:	f7fe f801 	bl	801fccc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8021cca:	4603      	mov	r3, r0
 8021ccc:	e000      	b.n	8021cd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x50>
 8021cce:	2300      	movs	r3, #0
          : nullptr;
 8021cd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 8021cd4:	4b7c      	ldr	r3, [pc, #496]	; (8021ec8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x248>)
 8021cd6:	681b      	ldr	r3, [r3, #0]
 8021cd8:	461a      	mov	r2, r3
 8021cda:	6839      	ldr	r1, [r7, #0]
 8021cdc:	6878      	ldr	r0, [r7, #4]
 8021cde:	f7fe f805 	bl	801fcec <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8021ce2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

  TFLITE_DCHECK(node->builtin_data != nullptr);
 8021ce6:	683b      	ldr	r3, [r7, #0]
 8021ce8:	695b      	ldr	r3, [r3, #20]
 8021cea:	2b00      	cmp	r3, #0
 8021cec:	d101      	bne.n	8021cf2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
 8021cee:	f00a fa51 	bl	802c194 <abort>
  const auto& params =
 8021cf2:	683b      	ldr	r3, [r7, #0]
 8021cf4:	695b      	ldr	r3, [r3, #20]
 8021cf6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 8021cfa:	683b      	ldr	r3, [r7, #0]
 8021cfc:	691b      	ldr	r3, [r3, #16]
 8021cfe:	2b00      	cmp	r3, #0
 8021d00:	d101      	bne.n	8021d06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
 8021d02:	f00a fa47 	bl	802c194 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8021d06:	683b      	ldr	r3, [r7, #0]
 8021d08:	691b      	ldr	r3, [r3, #16]
 8021d0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8021d0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8021d12:	7a1a      	ldrb	r2, [r3, #8]
 8021d14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8021d18:	7a1b      	ldrb	r3, [r3, #8]
 8021d1a:	429a      	cmp	r2, r3
 8021d1c:	d016      	beq.n	8021d4c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>
 8021d1e:	687b      	ldr	r3, [r7, #4]
 8021d20:	695c      	ldr	r4, [r3, #20]
 8021d22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8021d26:	7a1b      	ldrb	r3, [r3, #8]
 8021d28:	461a      	mov	r2, r3
 8021d2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8021d2e:	7a1b      	ldrb	r3, [r3, #8]
 8021d30:	9303      	str	r3, [sp, #12]
 8021d32:	9202      	str	r2, [sp, #8]
 8021d34:	4b65      	ldr	r3, [pc, #404]	; (8021ecc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24c>)
 8021d36:	9301      	str	r3, [sp, #4]
 8021d38:	4b65      	ldr	r3, [pc, #404]	; (8021ed0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>)
 8021d3a:	9300      	str	r3, [sp, #0]
 8021d3c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8021d40:	4a64      	ldr	r2, [pc, #400]	; (8021ed4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>)
 8021d42:	4965      	ldr	r1, [pc, #404]	; (8021ed8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x258>)
 8021d44:	6878      	ldr	r0, [r7, #4]
 8021d46:	47a0      	blx	r4
 8021d48:	2301      	movs	r3, #1
 8021d4a:	e0b1      	b.n	8021eb0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8021d4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8021d50:	7a1a      	ldrb	r2, [r3, #8]
 8021d52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8021d56:	7a1b      	ldrb	r3, [r3, #8]
 8021d58:	429a      	cmp	r2, r3
 8021d5a:	d006      	beq.n	8021d6a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
 8021d5c:	687b      	ldr	r3, [r7, #4]
 8021d5e:	695b      	ldr	r3, [r3, #20]
 8021d60:	495e      	ldr	r1, [pc, #376]	; (8021edc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25c>)
 8021d62:	6878      	ldr	r0, [r7, #4]
 8021d64:	4798      	blx	r3
 8021d66:	2301      	movs	r3, #1
 8021d68:	e0a2      	b.n	8021eb0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
                     "Hybrid models are not supported on TFLite Micro.");

  switch (input->type) {  // Already know in/out types are same.
 8021d6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8021d6e:	7a1b      	ldrb	r3, [r3, #8]
 8021d70:	2b01      	cmp	r3, #1
 8021d72:	d002      	beq.n	8021d7a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 8021d74:	2b09      	cmp	r3, #9
 8021d76:	d073      	beq.n	8021e60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>
 8021d78:	e08a      	b.n	8021e90 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x210>
    case kTfLiteFloat32: {
      tflite::reference_ops::Conv(
          ConvParamsFloat(params, data.reference_op_data),
 8021d7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8021d7e:	f107 0308 	add.w	r3, r7, #8
 8021d82:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8021d86:	4618      	mov	r0, r3
 8021d88:	f000 f96d 	bl	8022066 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
 8021d8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021d90:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8021d94:	4618      	mov	r0, r3
 8021d96:	f001 fd16 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8021d9a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8021d9e:	f7fe fc73 	bl	8020688 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8021da2:	4680      	mov	r8, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 8021da4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8021da8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8021dac:	4618      	mov	r0, r3
 8021dae:	f001 fd0a 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8021db2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8021db6:	f7fe fc67 	bl	8020688 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8021dba:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 8021dbc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8021dc0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8021dc4:	4618      	mov	r0, r3
 8021dc6:	f001 fcfe 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8021dca:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8021dce:	f7fe fc5b 	bl	8020688 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8021dd2:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 8021dd4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8021dd8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8021ddc:	4618      	mov	r0, r3
 8021dde:	f001 fcf2 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8021de2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8021de6:	f7fe fc5e 	bl	80206a6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8021dea:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(output),
          tflite::micro::GetTensorShape(nullptr), nullptr);
 8021dec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8021df0:	2100      	movs	r1, #0
 8021df2:	4618      	mov	r0, r3
 8021df4:	f001 fce7 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8021df8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8021dfc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8021e00:	f107 0008 	add.w	r0, r7, #8
 8021e04:	2300      	movs	r3, #0
 8021e06:	9306      	str	r3, [sp, #24]
 8021e08:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8021e0c:	9305      	str	r3, [sp, #20]
 8021e0e:	9604      	str	r6, [sp, #16]
 8021e10:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8021e14:	9303      	str	r3, [sp, #12]
 8021e16:	9502      	str	r5, [sp, #8]
 8021e18:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8021e1c:	9301      	str	r3, [sp, #4]
 8021e1e:	9400      	str	r4, [sp, #0]
 8021e20:	4613      	mov	r3, r2
 8021e22:	4642      	mov	r2, r8
 8021e24:	f7fe fff0 	bl	8020e08 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
          tflite::micro::GetTensorShape(nullptr), nullptr);
 8021e28:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8021e2c:	4618      	mov	r0, r3
 8021e2e:	f7fd fcc8 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
 8021e32:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8021e36:	4618      	mov	r0, r3
 8021e38:	f7fd fcc3 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 8021e3c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8021e40:	4618      	mov	r0, r3
 8021e42:	f7fd fcbe 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8021e46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8021e4a:	4618      	mov	r0, r3
 8021e4c:	f7fd fcb9 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8021e50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021e54:	4618      	mov	r0, r3
 8021e56:	f7fd fcb4 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8021e5a:	bf00      	nop
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
 8021e5c:	2300      	movs	r3, #0
 8021e5e:	e027      	b.n	8021eb0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
 8021e60:	2300      	movs	r3, #0
 8021e62:	9304      	str	r3, [sp, #16]
 8021e64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8021e68:	9303      	str	r3, [sp, #12]
 8021e6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8021e6e:	9302      	str	r3, [sp, #8]
 8021e70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8021e74:	9301      	str	r3, [sp, #4]
 8021e76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8021e7a:	9300      	str	r3, [sp, #0]
 8021e7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8021e80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021e84:	6839      	ldr	r1, [r7, #0]
 8021e86:	6878      	ldr	r0, [r7, #4]
 8021e88:	f7ff fc80 	bl	802178c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>
 8021e8c:	4603      	mov	r3, r0
                                     bias, output, nullptr);
 8021e8e:	e00f      	b.n	8021eb0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8021e90:	687b      	ldr	r3, [r7, #4]
 8021e92:	695c      	ldr	r4, [r3, #20]
 8021e94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8021e98:	7a1b      	ldrb	r3, [r3, #8]
 8021e9a:	4618      	mov	r0, r3
 8021e9c:	f7fc fd1e 	bl	801e8dc <TfLiteTypeGetName>
 8021ea0:	4602      	mov	r2, r0
 8021ea2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8021ea6:	7a1b      	ldrb	r3, [r3, #8]
 8021ea8:	490d      	ldr	r1, [pc, #52]	; (8021ee0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x260>)
 8021eaa:	6878      	ldr	r0, [r7, #4]
 8021eac:	47a0      	blx	r4
      return kTfLiteError;
 8021eae:	2301      	movs	r3, #1
}
 8021eb0:	4618      	mov	r0, r3
 8021eb2:	37d0      	adds	r7, #208	; 0xd0
 8021eb4:	46bd      	mov	sp, r7
 8021eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021eba:	bf00      	nop
 8021ebc:	080309d8 	.word	0x080309d8
 8021ec0:	080309dc 	.word	0x080309dc
 8021ec4:	080309e0 	.word	0x080309e0
 8021ec8:	080309e4 	.word	0x080309e4
 8021ecc:	0802e8e8 	.word	0x0802e8e8
 8021ed0:	0802e8f8 	.word	0x0802e8f8
 8021ed4:	0802e7ec 	.word	0x0802e7ec
 8021ed8:	0802e8cc 	.word	0x0802e8cc
 8021edc:	0802e904 	.word	0x0802e904
 8021ee0:	0802e9c4 	.word	0x0802e9c4

08021ee4 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 8021ee4:	b4b0      	push	{r4, r5, r7}
 8021ee6:	b083      	sub	sp, #12
 8021ee8:	af00      	add	r7, sp, #0
 8021eea:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8021eec:	687b      	ldr	r3, [r7, #4]
 8021eee:	4a07      	ldr	r2, [pc, #28]	; (8021f0c <_ZN6tflite16Register_CONV_2DEv+0x28>)
 8021ef0:	461c      	mov	r4, r3
 8021ef2:	4615      	mov	r5, r2
 8021ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021ef8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8021efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8021f00:	6878      	ldr	r0, [r7, #4]
 8021f02:	370c      	adds	r7, #12
 8021f04:	46bd      	mov	sp, r7
 8021f06:	bcb0      	pop	{r4, r5, r7}
 8021f08:	4770      	bx	lr
 8021f0a:	bf00      	nop
 8021f0c:	0802e9e0 	.word	0x0802e9e0

08021f10 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 8021f10:	b480      	push	{r7}
 8021f12:	b087      	sub	sp, #28
 8021f14:	af00      	add	r7, sp, #0
 8021f16:	60f8      	str	r0, [r7, #12]
 8021f18:	60b9      	str	r1, [r7, #8]
 8021f1a:	607a      	str	r2, [r7, #4]
 8021f1c:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8021f1e:	683b      	ldr	r3, [r7, #0]
 8021f20:	3b01      	subs	r3, #1
 8021f22:	68ba      	ldr	r2, [r7, #8]
 8021f24:	fb02 f303 	mul.w	r3, r2, r3
 8021f28:	3301      	adds	r3, #1
 8021f2a:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8021f2c:	6a3b      	ldr	r3, [r7, #32]
 8021f2e:	3b01      	subs	r3, #1
 8021f30:	68fa      	ldr	r2, [r7, #12]
 8021f32:	fb03 f202 	mul.w	r2, r3, r2
 8021f36:	697b      	ldr	r3, [r7, #20]
 8021f38:	441a      	add	r2, r3
  int total_padding =
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	1ad3      	subs	r3, r2, r3
 8021f3e:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 8021f40:	693b      	ldr	r3, [r7, #16]
 8021f42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021f46:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 8021f48:	693b      	ldr	r3, [r7, #16]
 8021f4a:	2b00      	cmp	r3, #0
 8021f4c:	f003 0301 	and.w	r3, r3, #1
 8021f50:	bfb8      	it	lt
 8021f52:	425b      	neglt	r3, r3
 8021f54:	461a      	mov	r2, r3
 8021f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f58:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 8021f5a:	693b      	ldr	r3, [r7, #16]
 8021f5c:	0fda      	lsrs	r2, r3, #31
 8021f5e:	4413      	add	r3, r2
 8021f60:	105b      	asrs	r3, r3, #1
}
 8021f62:	4618      	mov	r0, r3
 8021f64:	371c      	adds	r7, #28
 8021f66:	46bd      	mov	sp, r7
 8021f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f6c:	4770      	bx	lr

08021f6e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 8021f6e:	b480      	push	{r7}
 8021f70:	b087      	sub	sp, #28
 8021f72:	af00      	add	r7, sp, #0
 8021f74:	60b9      	str	r1, [r7, #8]
 8021f76:	607a      	str	r2, [r7, #4]
 8021f78:	603b      	str	r3, [r7, #0]
 8021f7a:	4603      	mov	r3, r0
 8021f7c:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8021f7e:	687b      	ldr	r3, [r7, #4]
 8021f80:	3b01      	subs	r3, #1
 8021f82:	6a3a      	ldr	r2, [r7, #32]
 8021f84:	fb02 f303 	mul.w	r3, r2, r3
 8021f88:	3301      	adds	r3, #1
 8021f8a:	617b      	str	r3, [r7, #20]

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 8021f8c:	683b      	ldr	r3, [r7, #0]
 8021f8e:	2b00      	cmp	r3, #0
 8021f90:	d101      	bne.n	8021f96 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x28>
 8021f92:	2300      	movs	r3, #0
 8021f94:	e017      	b.n	8021fc6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>

  switch (padding) {
 8021f96:	7bfb      	ldrb	r3, [r7, #15]
 8021f98:	2b01      	cmp	r3, #1
 8021f9a:	d002      	beq.n	8021fa2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x34>
 8021f9c:	2b02      	cmp	r3, #2
 8021f9e:	d008      	beq.n	8021fb2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x44>
 8021fa0:	e010      	b.n	8021fc4 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x56>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 8021fa2:	68ba      	ldr	r2, [r7, #8]
 8021fa4:	683b      	ldr	r3, [r7, #0]
 8021fa6:	4413      	add	r3, r2
 8021fa8:	1e5a      	subs	r2, r3, #1
 8021faa:	683b      	ldr	r3, [r7, #0]
 8021fac:	fb92 f3f3 	sdiv	r3, r2, r3
 8021fb0:	e009      	b.n	8021fc6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 8021fb2:	68ba      	ldr	r2, [r7, #8]
 8021fb4:	683b      	ldr	r3, [r7, #0]
 8021fb6:	441a      	add	r2, r3
 8021fb8:	697b      	ldr	r3, [r7, #20]
 8021fba:	1ad2      	subs	r2, r2, r3
 8021fbc:	683b      	ldr	r3, [r7, #0]
 8021fbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8021fc2:	e000      	b.n	8021fc6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    default:
      return 0;
 8021fc4:	2300      	movs	r3, #0
  }
}
 8021fc6:	4618      	mov	r0, r3
 8021fc8:	371c      	adds	r7, #28
 8021fca:	46bd      	mov	sp, r7
 8021fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fd0:	4770      	bx	lr

08021fd2 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 8021fd2:	b580      	push	{r7, lr}
 8021fd4:	b088      	sub	sp, #32
 8021fd6:	af02      	add	r7, sp, #8
 8021fd8:	60f8      	str	r0, [r7, #12]
 8021fda:	60b9      	str	r1, [r7, #8]
 8021fdc:	607a      	str	r2, [r7, #4]
 8021fde:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 8021fe0:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8021fe4:	6a3b      	ldr	r3, [r7, #32]
 8021fe6:	9300      	str	r3, [sp, #0]
 8021fe8:	687b      	ldr	r3, [r7, #4]
 8021fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021fee:	f7ff ffbe 	bl	8021f6e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8021ff2:	4602      	mov	r2, r0
 8021ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021ff6:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 8021ff8:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8021ffc:	683b      	ldr	r3, [r7, #0]
 8021ffe:	9300      	str	r3, [sp, #0]
 8022000:	68bb      	ldr	r3, [r7, #8]
 8022002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8022006:	f7ff ffb2 	bl	8021f6e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 802200a:	4602      	mov	r2, r0
 802200c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802200e:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 8022010:	2300      	movs	r3, #0
 8022012:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 8022014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022016:	681b      	ldr	r3, [r3, #0]
 8022018:	f107 0214 	add.w	r2, r7, #20
 802201c:	9201      	str	r2, [sp, #4]
 802201e:	9300      	str	r3, [sp, #0]
 8022020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022024:	6839      	ldr	r1, [r7, #0]
 8022026:	68b8      	ldr	r0, [r7, #8]
 8022028:	f7ff ff72 	bl	8021f10 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 802202c:	4602      	mov	r2, r0
  padding_values.height =
 802202e:	68fb      	ldr	r3, [r7, #12]
 8022030:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 8022032:	697a      	ldr	r2, [r7, #20]
 8022034:	68fb      	ldr	r3, [r7, #12]
 8022036:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 8022038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802203a:	681b      	ldr	r3, [r3, #0]
 802203c:	f107 0214 	add.w	r2, r7, #20
 8022040:	9201      	str	r2, [sp, #4]
 8022042:	9300      	str	r3, [sp, #0]
 8022044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022048:	6a39      	ldr	r1, [r7, #32]
 802204a:	6878      	ldr	r0, [r7, #4]
 802204c:	f7ff ff60 	bl	8021f10 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8022050:	4602      	mov	r2, r0
  padding_values.width =
 8022052:	68fb      	ldr	r3, [r7, #12]
 8022054:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 8022056:	697a      	ldr	r2, [r7, #20]
 8022058:	68fb      	ldr	r3, [r7, #12]
 802205a:	609a      	str	r2, [r3, #8]
  return padding_values;
 802205c:	bf00      	nop
}
 802205e:	68f8      	ldr	r0, [r7, #12]
 8022060:	3718      	adds	r7, #24
 8022062:	46bd      	mov	sp, r7
 8022064:	bd80      	pop	{r7, pc}

08022066 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
const int kConvQuantizedDimension = 0;

// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
 8022066:	b580      	push	{r7, lr}
 8022068:	b084      	sub	sp, #16
 802206a:	af00      	add	r7, sp, #0
 802206c:	60f8      	str	r0, [r7, #12]
 802206e:	60b9      	str	r1, [r7, #8]
 8022070:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 8022072:	68bb      	ldr	r3, [r7, #8]
 8022074:	7b18      	ldrb	r0, [r3, #12]
 8022076:	68fb      	ldr	r3, [r7, #12]
 8022078:	f103 0234 	add.w	r2, r3, #52	; 0x34
 802207c:	68fb      	ldr	r3, [r7, #12]
 802207e:	3330      	adds	r3, #48	; 0x30
 8022080:	4619      	mov	r1, r3
 8022082:	f7fe fe27 	bl	8020cd4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8022086:	68bb      	ldr	r3, [r7, #8]
 8022088:	781b      	ldrb	r3, [r3, #0]
 802208a:	4618      	mov	r0, r3
 802208c:	f001 fbbd 	bl	802380a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8022090:	4603      	mov	r3, r0
 8022092:	461a      	mov	r2, r3
 8022094:	68fb      	ldr	r3, [r7, #12]
 8022096:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 8022098:	687b      	ldr	r3, [r7, #4]
 802209a:	681b      	ldr	r3, [r3, #0]
 802209c:	b21a      	sxth	r2, r3
 802209e:	68fb      	ldr	r3, [r7, #12]
 80220a0:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 80220a2:	687b      	ldr	r3, [r7, #4]
 80220a4:	685b      	ldr	r3, [r3, #4]
 80220a6:	b21a      	sxth	r2, r3
 80220a8:	68fb      	ldr	r3, [r7, #12]
 80220aa:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 80220ac:	68bb      	ldr	r3, [r7, #8]
 80220ae:	685b      	ldr	r3, [r3, #4]
 80220b0:	b21a      	sxth	r2, r3
 80220b2:	68fb      	ldr	r3, [r7, #12]
 80220b4:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 80220b6:	68bb      	ldr	r3, [r7, #8]
 80220b8:	689b      	ldr	r3, [r3, #8]
 80220ba:	b21a      	sxth	r2, r3
 80220bc:	68fb      	ldr	r3, [r7, #12]
 80220be:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 80220c0:	68bb      	ldr	r3, [r7, #8]
 80220c2:	691b      	ldr	r3, [r3, #16]
 80220c4:	b21a      	sxth	r2, r3
 80220c6:	68fb      	ldr	r3, [r7, #12]
 80220c8:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 80220ca:	68bb      	ldr	r3, [r7, #8]
 80220cc:	695b      	ldr	r3, [r3, #20]
 80220ce:	b21a      	sxth	r2, r3
 80220d0:	68fb      	ldr	r3, [r7, #12]
 80220d2:	821a      	strh	r2, [r3, #16]
  return op_params;
 80220d4:	bf00      	nop
}
 80220d6:	68f8      	ldr	r0, [r7, #12]
 80220d8:	3710      	adds	r7, #16
 80220da:	46bd      	mov	sp, r7
 80220dc:	bd80      	pop	{r7, pc}

080220de <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
 80220de:	b580      	push	{r7, lr}
 80220e0:	b084      	sub	sp, #16
 80220e2:	af00      	add	r7, sp, #0
 80220e4:	60f8      	str	r0, [r7, #12]
 80220e6:	60b9      	str	r1, [r7, #8]
 80220e8:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 80220ea:	687b      	ldr	r3, [r7, #4]
 80220ec:	691b      	ldr	r3, [r3, #16]
 80220ee:	425a      	negs	r2, r3
 80220f0:	68fb      	ldr	r3, [r7, #12]
 80220f2:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 80220f4:	687b      	ldr	r3, [r7, #4]
 80220f6:	695b      	ldr	r3, [r3, #20]
 80220f8:	425a      	negs	r2, r3
 80220fa:	68fb      	ldr	r3, [r7, #12]
 80220fc:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 80220fe:	687b      	ldr	r3, [r7, #4]
 8022100:	699a      	ldr	r2, [r3, #24]
 8022102:	68fb      	ldr	r3, [r7, #12]
 8022104:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 8022106:	687b      	ldr	r3, [r7, #4]
 8022108:	69da      	ldr	r2, [r3, #28]
 802210a:	68fb      	ldr	r3, [r7, #12]
 802210c:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 802210e:	687b      	ldr	r3, [r7, #4]
 8022110:	6a1b      	ldr	r3, [r3, #32]
 8022112:	425a      	negs	r2, r3
 8022114:	68fb      	ldr	r3, [r7, #12]
 8022116:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8022118:	68bb      	ldr	r3, [r7, #8]
 802211a:	781b      	ldrb	r3, [r3, #0]
 802211c:	4618      	mov	r0, r3
 802211e:	f001 fb74 	bl	802380a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8022122:	4603      	mov	r3, r0
 8022124:	461a      	mov	r2, r3
 8022126:	68fb      	ldr	r3, [r7, #12]
 8022128:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 802212a:	687b      	ldr	r3, [r7, #4]
 802212c:	685b      	ldr	r3, [r3, #4]
 802212e:	b21a      	sxth	r2, r3
 8022130:	68fb      	ldr	r3, [r7, #12]
 8022132:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 8022134:	687b      	ldr	r3, [r7, #4]
 8022136:	681b      	ldr	r3, [r3, #0]
 8022138:	b21a      	sxth	r2, r3
 802213a:	68fb      	ldr	r3, [r7, #12]
 802213c:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 802213e:	68bb      	ldr	r3, [r7, #8]
 8022140:	689b      	ldr	r3, [r3, #8]
 8022142:	b21a      	sxth	r2, r3
 8022144:	68fb      	ldr	r3, [r7, #12]
 8022146:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 8022148:	68bb      	ldr	r3, [r7, #8]
 802214a:	685b      	ldr	r3, [r3, #4]
 802214c:	b21a      	sxth	r2, r3
 802214e:	68fb      	ldr	r3, [r7, #12]
 8022150:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 8022152:	68bb      	ldr	r3, [r7, #8]
 8022154:	695b      	ldr	r3, [r3, #20]
 8022156:	b21a      	sxth	r2, r3
 8022158:	68fb      	ldr	r3, [r7, #12]
 802215a:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 802215c:	68bb      	ldr	r3, [r7, #8]
 802215e:	691b      	ldr	r3, [r3, #16]
 8022160:	b21a      	sxth	r2, r3
 8022162:	68fb      	ldr	r3, [r7, #12]
 8022164:	81da      	strh	r2, [r3, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 8022166:	687b      	ldr	r3, [r7, #4]
 8022168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802216a:	68fb      	ldr	r3, [r7, #12]
 802216c:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 802216e:	687b      	ldr	r3, [r7, #4]
 8022170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8022172:	68fb      	ldr	r3, [r7, #12]
 8022174:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 8022176:	bf00      	nop
}
 8022178:	68f8      	ldr	r0, [r7, #12]
 802217a:	3710      	adds	r7, #16
 802217c:	46bd      	mov	sp, r7
 802217e:	bd80      	pop	{r7, pc}

08022180 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 8022180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022182:	b09d      	sub	sp, #116	; 0x74
 8022184:	af0a      	add	r7, sp, #40	; 0x28
 8022186:	6278      	str	r0, [r7, #36]	; 0x24
 8022188:	6239      	str	r1, [r7, #32]
 802218a:	61fa      	str	r2, [r7, #28]
 802218c:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 802218e:	6a3b      	ldr	r3, [r7, #32]
 8022190:	681b      	ldr	r3, [r3, #0]
 8022192:	681b      	ldr	r3, [r3, #0]
 8022194:	2b03      	cmp	r3, #3
 8022196:	bf0c      	ite	eq
 8022198:	2301      	moveq	r3, #1
 802219a:	2300      	movne	r3, #0
 802219c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 80221a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80221a4:	f083 0301 	eor.w	r3, r3, #1
 80221a8:	b2db      	uxtb	r3, r3
 80221aa:	2b00      	cmp	r3, #0
 80221ac:	d00f      	beq.n	80221ce <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 80221ae:	6a3b      	ldr	r3, [r7, #32]
 80221b0:	681b      	ldr	r3, [r3, #0]
 80221b2:	681b      	ldr	r3, [r3, #0]
 80221b4:	2b02      	cmp	r3, #2
 80221b6:	d00a      	beq.n	80221ce <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 80221b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221ba:	695c      	ldr	r4, [r3, #20]
 80221bc:	4b68      	ldr	r3, [pc, #416]	; (8022360 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e0>)
 80221be:	9300      	str	r3, [sp, #0]
 80221c0:	2356      	movs	r3, #86	; 0x56
 80221c2:	4a68      	ldr	r2, [pc, #416]	; (8022364 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 80221c4:	4968      	ldr	r1, [pc, #416]	; (8022368 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 80221c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80221c8:	47a0      	blx	r4
 80221ca:	2301      	movs	r3, #1
 80221cc:	e0c4      	b.n	8022358 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 80221ce:	6a3b      	ldr	r3, [r7, #32]
 80221d0:	685b      	ldr	r3, [r3, #4]
 80221d2:	681b      	ldr	r3, [r3, #0]
 80221d4:	2b01      	cmp	r3, #1
 80221d6:	d012      	beq.n	80221fe <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 80221d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221da:	695c      	ldr	r4, [r3, #20]
 80221dc:	6a3b      	ldr	r3, [r7, #32]
 80221de:	685b      	ldr	r3, [r3, #4]
 80221e0:	681b      	ldr	r3, [r3, #0]
 80221e2:	2201      	movs	r2, #1
 80221e4:	9203      	str	r2, [sp, #12]
 80221e6:	9302      	str	r3, [sp, #8]
 80221e8:	4b60      	ldr	r3, [pc, #384]	; (802236c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ec>)
 80221ea:	9301      	str	r3, [sp, #4]
 80221ec:	4b60      	ldr	r3, [pc, #384]	; (8022370 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 80221ee:	9300      	str	r3, [sp, #0]
 80221f0:	2357      	movs	r3, #87	; 0x57
 80221f2:	4a5c      	ldr	r2, [pc, #368]	; (8022364 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 80221f4:	495f      	ldr	r1, [pc, #380]	; (8022374 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 80221f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80221f8:	47a0      	blx	r4
 80221fa:	2301      	movs	r3, #1
 80221fc:	e0ac      	b.n	8022358 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 80221fe:	69fb      	ldr	r3, [r7, #28]
 8022200:	781b      	ldrb	r3, [r3, #0]
 8022202:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 8022206:	69fb      	ldr	r3, [r7, #28]
 8022208:	6899      	ldr	r1, [r3, #8]
 802220a:	69fb      	ldr	r3, [r7, #28]
 802220c:	685c      	ldr	r4, [r3, #4]
 802220e:	69fb      	ldr	r3, [r7, #28]
 8022210:	695d      	ldr	r5, [r3, #20]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 8022212:	69fb      	ldr	r3, [r7, #28]
 8022214:	691b      	ldr	r3, [r3, #16]
      padding, &out_height, &out_width);
 8022216:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8022218:	f107 0008 	add.w	r0, r7, #8
 802221c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8022220:	9207      	str	r2, [sp, #28]
 8022222:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8022226:	9206      	str	r2, [sp, #24]
 8022228:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 802222c:	9205      	str	r2, [sp, #20]
 802222e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8022230:	9204      	str	r2, [sp, #16]
 8022232:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8022234:	9203      	str	r2, [sp, #12]
 8022236:	69ba      	ldr	r2, [r7, #24]
 8022238:	9202      	str	r2, [sp, #8]
 802223a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802223c:	9201      	str	r2, [sp, #4]
 802223e:	9300      	str	r3, [sp, #0]
 8022240:	462b      	mov	r3, r5
 8022242:	4622      	mov	r2, r4
 8022244:	f7ff fec5 	bl	8021fd2 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8022248:	4634      	mov	r4, r6
 802224a:	f107 0308 	add.w	r3, r7, #8
 802224e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8022250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 8022254:	2200      	movs	r2, #0
 8022256:	6a39      	ldr	r1, [r7, #32]
 8022258:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802225a:	f7fc fe9d 	bl	801ef98 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802225e:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 8022260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022262:	2b00      	cmp	r3, #0
 8022264:	d10a      	bne.n	802227c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xfc>
 8022266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022268:	695c      	ldr	r4, [r3, #20]
 802226a:	4b43      	ldr	r3, [pc, #268]	; (8022378 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 802226c:	9300      	str	r3, [sp, #0]
 802226e:	2361      	movs	r3, #97	; 0x61
 8022270:	4a3c      	ldr	r2, [pc, #240]	; (8022364 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8022272:	493d      	ldr	r1, [pc, #244]	; (8022368 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8022274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022276:	47a0      	blx	r4
 8022278:	2301      	movs	r3, #1
 802227a:	e06d      	b.n	8022358 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 802227c:	2201      	movs	r2, #1
 802227e:	6a39      	ldr	r1, [r7, #32]
 8022280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022282:	f7fc fe89 	bl	801ef98 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8022286:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 8022288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802228a:	2b00      	cmp	r3, #0
 802228c:	d10a      	bne.n	80222a4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x124>
 802228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022290:	695c      	ldr	r4, [r3, #20]
 8022292:	4b3a      	ldr	r3, [pc, #232]	; (802237c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 8022294:	9300      	str	r3, [sp, #0]
 8022296:	2363      	movs	r3, #99	; 0x63
 8022298:	4a32      	ldr	r2, [pc, #200]	; (8022364 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 802229a:	4933      	ldr	r1, [pc, #204]	; (8022368 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 802229c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802229e:	47a0      	blx	r4
 80222a0:	2301      	movs	r3, #1
 80222a2:	e059      	b.n	8022358 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 80222a4:	2202      	movs	r2, #2
 80222a6:	6a39      	ldr	r1, [r7, #32]
 80222a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80222aa:	f7fc fea5 	bl	801eff8 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 80222ae:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 80222b0:	2200      	movs	r2, #0
 80222b2:	6a39      	ldr	r1, [r7, #32]
 80222b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80222b6:	f7fc fe7f 	bl	801efb8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80222ba:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 80222bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80222be:	2b00      	cmp	r3, #0
 80222c0:	d10a      	bne.n	80222d8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x158>
 80222c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222c4:	695c      	ldr	r4, [r3, #20]
 80222c6:	4b2e      	ldr	r3, [pc, #184]	; (8022380 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 80222c8:	9300      	str	r3, [sp, #0]
 80222ca:	2367      	movs	r3, #103	; 0x67
 80222cc:	4a25      	ldr	r2, [pc, #148]	; (8022364 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 80222ce:	4926      	ldr	r1, [pc, #152]	; (8022368 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 80222d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80222d2:	47a0      	blx	r4
 80222d4:	2301      	movs	r3, #1
 80222d6:	e03f      	b.n	8022358 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 80222d8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80222dc:	2b01      	cmp	r3, #1
 80222de:	d02e      	beq.n	802233e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 80222e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80222e2:	689b      	ldr	r3, [r3, #8]
 80222e4:	685b      	ldr	r3, [r3, #4]
 80222e6:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 80222e8:	69fb      	ldr	r3, [r7, #28]
 80222ea:	330c      	adds	r3, #12
 80222ec:	607b      	str	r3, [r7, #4]
 80222ee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80222f0:	321c      	adds	r2, #28
 80222f2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80222f4:	3120      	adds	r1, #32
 80222f6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80222f8:	302c      	adds	r0, #44	; 0x2c
 80222fa:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 80222fc:	3430      	adds	r4, #48	; 0x30
 80222fe:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 8022300:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8022302:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8022304:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8022306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022308:	9308      	str	r3, [sp, #32]
 802230a:	9607      	str	r6, [sp, #28]
 802230c:	9506      	str	r5, [sp, #24]
 802230e:	9405      	str	r4, [sp, #20]
 8022310:	9004      	str	r0, [sp, #16]
 8022312:	9103      	str	r1, [sp, #12]
 8022314:	9202      	str	r2, [sp, #8]
 8022316:	687b      	ldr	r3, [r7, #4]
 8022318:	9301      	str	r3, [sp, #4]
 802231a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802231c:	9300      	str	r3, [sp, #0]
 802231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8022322:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8022324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022326:	f7fc fe77 	bl	801f018 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 802232a:	4603      	mov	r3, r0
 802232c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8022330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8022334:	2b00      	cmp	r3, #0
 8022336:	d002      	beq.n	802233e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
 8022338:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802233c:	e00c      	b.n	8022358 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 802233e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022340:	691a      	ldr	r2, [r3, #16]
 8022342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8022344:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 8022346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022348:	691a      	ldr	r2, [r3, #16]
 802234a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802234c:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 802234e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022350:	691a      	ldr	r2, [r3, #16]
 8022352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8022354:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 8022356:	2300      	movs	r3, #0
}
 8022358:	4618      	mov	r0, r3
 802235a:	374c      	adds	r7, #76	; 0x4c
 802235c:	46bd      	mov	sp, r7
 802235e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022360:	0802ebbc 	.word	0x0802ebbc
 8022364:	0802eb10 	.word	0x0802eb10
 8022368:	0802eba4 	.word	0x0802eba4
 802236c:	0802ebfc 	.word	0x0802ebfc
 8022370:	0802ec00 	.word	0x0802ec00
 8022374:	0802ebe0 	.word	0x0802ebe0
 8022378:	0802ec14 	.word	0x0802ec14
 802237c:	0802ec28 	.word	0x0802ec28
 8022380:	0802ec3c 	.word	0x0802ec3c

08022384 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8022384:	b580      	push	{r7, lr}
 8022386:	b082      	sub	sp, #8
 8022388:	af00      	add	r7, sp, #0
 802238a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 802238c:	687b      	ldr	r3, [r7, #4]
 802238e:	2b00      	cmp	r3, #0
 8022390:	d101      	bne.n	8022396 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 8022392:	f009 feff 	bl	802c194 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8022396:	687b      	ldr	r3, [r7, #4]
 8022398:	681b      	ldr	r3, [r3, #0]
}
 802239a:	4618      	mov	r0, r3
 802239c:	3708      	adds	r7, #8
 802239e:	46bd      	mov	sp, r7
 80223a0:	bd80      	pop	{r7, pc}

080223a2 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 80223a2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80223a6:	b090      	sub	sp, #64	; 0x40
 80223a8:	af00      	add	r7, sp, #0
 80223aa:	61f8      	str	r0, [r7, #28]
 80223ac:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 80223ae:	69fb      	ldr	r3, [r7, #28]
 80223b0:	17da      	asrs	r2, r3, #31
 80223b2:	613b      	str	r3, [r7, #16]
 80223b4:	617a      	str	r2, [r7, #20]
 80223b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80223ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 80223be:	69bb      	ldr	r3, [r7, #24]
 80223c0:	17da      	asrs	r2, r3, #31
 80223c2:	60bb      	str	r3, [r7, #8]
 80223c4:	60fa      	str	r2, [r7, #12]
 80223c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80223ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 80223ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80223d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80223d6:	1886      	adds	r6, r0, r2
 80223d8:	603e      	str	r6, [r7, #0]
 80223da:	eb41 0303 	adc.w	r3, r1, r3
 80223de:	607b      	str	r3, [r7, #4]
 80223e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80223e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 80223e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80223ec:	2b00      	cmp	r3, #0
 80223ee:	db04      	blt.n	80223fa <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 80223f0:	f04f 0201 	mov.w	r2, #1
 80223f4:	f04f 0300 	mov.w	r3, #0
 80223f8:	e003      	b.n	8022402 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 80223fa:	f04f 32ff 	mov.w	r2, #4294967295
 80223fe:	f04f 33ff 	mov.w	r3, #4294967295
 8022402:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8022406:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802240a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802240e:	eb10 0802 	adds.w	r8, r0, r2
 8022412:	eb41 0903 	adc.w	r9, r1, r3
 8022416:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 802241a:	2200      	movs	r2, #0
 802241c:	469a      	mov	sl, r3
 802241e:	4693      	mov	fp, r2
 8022420:	eb1a 0408 	adds.w	r4, sl, r8
 8022424:	eb4b 0509 	adc.w	r5, fp, r9
 8022428:	f04f 0200 	mov.w	r2, #0
 802242c:	f04f 0300 	mov.w	r3, #0
 8022430:	0862      	lsrs	r2, r4, #1
 8022432:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8022436:	106b      	asrs	r3, r5, #1
 8022438:	4613      	mov	r3, r2
}
 802243a:	4618      	mov	r0, r3
 802243c:	3740      	adds	r7, #64	; 0x40
 802243e:	46bd      	mov	sp, r7
 8022440:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8022444:	4770      	bx	lr

08022446 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 8022446:	b580      	push	{r7, lr}
 8022448:	b084      	sub	sp, #16
 802244a:	af00      	add	r7, sp, #0
 802244c:	60f8      	str	r0, [r7, #12]
 802244e:	60b9      	str	r1, [r7, #8]
 8022450:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 8022452:	68fa      	ldr	r2, [r7, #12]
 8022454:	687b      	ldr	r3, [r7, #4]
 8022456:	fa02 f303 	lsl.w	r3, r2, r3
 802245a:	68b9      	ldr	r1, [r7, #8]
 802245c:	4618      	mov	r0, r3
 802245e:	f7fd faeb 	bl	801fa38 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8022462:	4603      	mov	r3, r0
}
 8022464:	4618      	mov	r0, r3
 8022466:	3710      	adds	r7, #16
 8022468:	46bd      	mov	sp, r7
 802246a:	bd80      	pop	{r7, pc}

0802246c <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 802246c:	b580      	push	{r7, lr}
 802246e:	b088      	sub	sp, #32
 8022470:	af00      	add	r7, sp, #0
 8022472:	60f8      	str	r0, [r7, #12]
 8022474:	60b9      	str	r1, [r7, #8]
 8022476:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 8022478:	68fb      	ldr	r3, [r7, #12]
 802247a:	4618      	mov	r0, r3
 802247c:	f000 f821 	bl	80224c2 <_ZN6tflite17CountLeadingZerosImEEiT_>
 8022480:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 8022482:	68ba      	ldr	r2, [r7, #8]
 8022484:	69fb      	ldr	r3, [r7, #28]
 8022486:	1ad2      	subs	r2, r2, r3
 8022488:	687b      	ldr	r3, [r7, #4]
 802248a:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 802248c:	68fa      	ldr	r2, [r7, #12]
 802248e:	69fb      	ldr	r3, [r7, #28]
 8022490:	fa02 f303 	lsl.w	r3, r2, r3
 8022494:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 8022498:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 802249a:	69b8      	ldr	r0, [r7, #24]
 802249c:	f000 f823 	bl	80224e6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80224a0:	4603      	mov	r3, r0
 80224a2:	4618      	mov	r0, r3
 80224a4:	f000 f830 	bl	8022508 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 80224a8:	4603      	mov	r3, r0
 80224aa:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 80224ac:	f107 0314 	add.w	r3, r7, #20
 80224b0:	4618      	mov	r0, r3
 80224b2:	f000 f889 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80224b6:	4603      	mov	r3, r0
 80224b8:	681b      	ldr	r3, [r3, #0]
}
 80224ba:	4618      	mov	r0, r3
 80224bc:	3720      	adds	r7, #32
 80224be:	46bd      	mov	sp, r7
 80224c0:	bd80      	pop	{r7, pc}

080224c2 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 80224c2:	b480      	push	{r7}
 80224c4:	b083      	sub	sp, #12
 80224c6:	af00      	add	r7, sp, #0
 80224c8:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 80224ca:	687b      	ldr	r3, [r7, #4]
 80224cc:	2b00      	cmp	r3, #0
 80224ce:	d003      	beq.n	80224d8 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 80224d0:	687b      	ldr	r3, [r7, #4]
 80224d2:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 80224d6:	e000      	b.n	80224da <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 80224d8:	2320      	movs	r3, #32
}
 80224da:	4618      	mov	r0, r3
 80224dc:	370c      	adds	r7, #12
 80224de:	46bd      	mov	sp, r7
 80224e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224e4:	4770      	bx	lr

080224e6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 80224e6:	b580      	push	{r7, lr}
 80224e8:	b084      	sub	sp, #16
 80224ea:	af00      	add	r7, sp, #0
 80224ec:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 80224ee:	f107 030c 	add.w	r3, r7, #12
 80224f2:	4618      	mov	r0, r3
 80224f4:	f000 f868 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80224f8:	4602      	mov	r2, r0
 80224fa:	687b      	ldr	r3, [r7, #4]
 80224fc:	6013      	str	r3, [r2, #0]
    return retval;
 80224fe:	68fb      	ldr	r3, [r7, #12]
  }
 8022500:	4618      	mov	r0, r3
 8022502:	3710      	adds	r7, #16
 8022504:	46bd      	mov	sp, r7
 8022506:	bd80      	pop	{r7, pc}

08022508 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 8022508:	b580      	push	{r7, lr}
 802250a:	b08a      	sub	sp, #40	; 0x28
 802250c:	af00      	add	r7, sp, #0
 802250e:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 8022510:	f000 f879 	bl	8022606 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8022514:	4603      	mov	r3, r0
 8022516:	4619      	mov	r1, r3
 8022518:	6878      	ldr	r0, [r7, #4]
 802251a:	f000 f87f 	bl	802261c <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802251e:	4603      	mov	r3, r0
 8022520:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 8022522:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 8022526:	f000 f8ab 	bl	8022680 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 802252a:	4603      	mov	r3, r0
 802252c:	4618      	mov	r0, r3
 802252e:	f000 f893 	bl	8022658 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8022532:	4603      	mov	r3, r0
 8022534:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 8022536:	4823      	ldr	r0, [pc, #140]	; (80225c4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8022538:	f000 f8a2 	bl	8022680 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 802253c:	4603      	mov	r3, r0
 802253e:	4618      	mov	r0, r3
 8022540:	f000 f88a 	bl	8022658 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8022544:	4603      	mov	r3, r0
 8022546:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 8022548:	69b9      	ldr	r1, [r7, #24]
 802254a:	6a38      	ldr	r0, [r7, #32]
 802254c:	f000 f8a5 	bl	802269a <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8022550:	4603      	mov	r3, r0
 8022552:	4619      	mov	r1, r3
 8022554:	69f8      	ldr	r0, [r7, #28]
 8022556:	f000 f8c2 	bl	80226de <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802255a:	4603      	mov	r3, r0
 802255c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 802255e:	2300      	movs	r3, #0
 8022560:	627b      	str	r3, [r7, #36]	; 0x24
 8022562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022564:	2b02      	cmp	r3, #2
 8022566:	dc21      	bgt.n	80225ac <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8022568:	6979      	ldr	r1, [r7, #20]
 802256a:	6a38      	ldr	r0, [r7, #32]
 802256c:	f000 f895 	bl	802269a <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8022570:	4603      	mov	r3, r0
 8022572:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 8022574:	f000 f8d1 	bl	802271a <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8022578:	4603      	mov	r3, r0
 802257a:	6939      	ldr	r1, [r7, #16]
 802257c:	4618      	mov	r0, r3
 802257e:	f000 f8d5 	bl	802272c <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8022582:	4603      	mov	r3, r0
 8022584:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 8022586:	68f9      	ldr	r1, [r7, #12]
 8022588:	6978      	ldr	r0, [r7, #20]
 802258a:	f000 f8ed 	bl	8022768 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802258e:	4603      	mov	r3, r0
 8022590:	4618      	mov	r0, r3
 8022592:	f000 f90b 	bl	80227ac <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8022596:	4603      	mov	r3, r0
 8022598:	4619      	mov	r1, r3
 802259a:	6978      	ldr	r0, [r7, #20]
 802259c:	f000 f89f 	bl	80226de <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80225a0:	4603      	mov	r3, r0
 80225a2:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 80225a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225a6:	3301      	adds	r3, #1
 80225a8:	627b      	str	r3, [r7, #36]	; 0x24
 80225aa:	e7da      	b.n	8022562 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 80225ac:	6978      	ldr	r0, [r7, #20]
 80225ae:	f000 f917 	bl	80227e0 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 80225b2:	4603      	mov	r3, r0
 80225b4:	4618      	mov	r0, r3
 80225b6:	f000 f929 	bl	802280c <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 80225ba:	4603      	mov	r3, r0
}
 80225bc:	4618      	mov	r0, r3
 80225be:	3728      	adds	r7, #40	; 0x28
 80225c0:	46bd      	mov	sp, r7
 80225c2:	bd80      	pop	{r7, pc}
 80225c4:	c3c3c3c4 	.word	0xc3c3c3c4

080225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 80225c8:	b480      	push	{r7}
 80225ca:	b083      	sub	sp, #12
 80225cc:	af00      	add	r7, sp, #0
 80225ce:	6078      	str	r0, [r7, #4]
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	4618      	mov	r0, r3
 80225d4:	370c      	adds	r7, #12
 80225d6:	46bd      	mov	sp, r7
 80225d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225dc:	4770      	bx	lr

080225de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80225de:	b590      	push	{r4, r7, lr}
 80225e0:	b085      	sub	sp, #20
 80225e2:	af00      	add	r7, sp, #0
 80225e4:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80225e6:	f107 030c 	add.w	r3, r7, #12
 80225ea:	4618      	mov	r0, r3
 80225ec:	f7ff ffec 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80225f0:	4604      	mov	r4, r0
 80225f2:	6878      	ldr	r0, [r7, #4]
 80225f4:	f7fe fa54 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80225f8:	4603      	mov	r3, r0
 80225fa:	6023      	str	r3, [r4, #0]
    return retval;
 80225fc:	68fb      	ldr	r3, [r7, #12]
  }
 80225fe:	4618      	mov	r0, r3
 8022600:	3714      	adds	r7, #20
 8022602:	46bd      	mov	sp, r7
 8022604:	bd90      	pop	{r4, r7, pc}

08022606 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 8022606:	b580      	push	{r7, lr}
 8022608:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 802260a:	f000 f927 	bl	802285c <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 802260e:	4603      	mov	r3, r0
 8022610:	4618      	mov	r0, r3
 8022612:	f7ff ffe4 	bl	80225de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8022616:	4603      	mov	r3, r0
  }
 8022618:	4618      	mov	r0, r3
 802261a:	bd80      	pop	{r7, pc}

0802261c <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 802261c:	b590      	push	{r4, r7, lr}
 802261e:	b083      	sub	sp, #12
 8022620:	af00      	add	r7, sp, #0
 8022622:	6078      	str	r0, [r7, #4]
 8022624:	6039      	str	r1, [r7, #0]
 8022626:	1d3b      	adds	r3, r7, #4
 8022628:	4618      	mov	r0, r3
 802262a:	f7ff ffcd 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802262e:	4603      	mov	r3, r0
 8022630:	681c      	ldr	r4, [r3, #0]
 8022632:	463b      	mov	r3, r7
 8022634:	4618      	mov	r0, r3
 8022636:	f7ff ffc7 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802263a:	4603      	mov	r3, r0
 802263c:	681b      	ldr	r3, [r3, #0]
 802263e:	4619      	mov	r1, r3
 8022640:	4620      	mov	r0, r4
 8022642:	f7ff feae 	bl	80223a2 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 8022646:	4603      	mov	r3, r0
 8022648:	4618      	mov	r0, r3
 802264a:	f7ff ff4c 	bl	80224e6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802264e:	4603      	mov	r3, r0
 8022650:	4618      	mov	r0, r3
 8022652:	370c      	adds	r7, #12
 8022654:	46bd      	mov	sp, r7
 8022656:	bd90      	pop	{r4, r7, pc}

08022658 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8022658:	b590      	push	{r4, r7, lr}
 802265a:	b085      	sub	sp, #20
 802265c:	af00      	add	r7, sp, #0
 802265e:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8022660:	f107 030c 	add.w	r3, r7, #12
 8022664:	4618      	mov	r0, r3
 8022666:	f000 f900 	bl	802286a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802266a:	4604      	mov	r4, r0
 802266c:	6878      	ldr	r0, [r7, #4]
 802266e:	f7fe fa17 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8022672:	4603      	mov	r3, r0
 8022674:	6023      	str	r3, [r4, #0]
    return retval;
 8022676:	68fb      	ldr	r3, [r7, #12]
  }
 8022678:	4618      	mov	r0, r3
 802267a:	3714      	adds	r7, #20
 802267c:	46bd      	mov	sp, r7
 802267e:	bd90      	pop	{r4, r7, pc}

08022680 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8022680:	b580      	push	{r7, lr}
 8022682:	b082      	sub	sp, #8
 8022684:	af00      	add	r7, sp, #0
 8022686:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8022688:	2100      	movs	r1, #0
 802268a:	6878      	ldr	r0, [r7, #4]
 802268c:	f7fd fe44 	bl	8020318 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8022690:	4603      	mov	r3, r0
}
 8022692:	4618      	mov	r0, r3
 8022694:	3708      	adds	r7, #8
 8022696:	46bd      	mov	sp, r7
 8022698:	bd80      	pop	{r7, pc}

0802269a <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 802269a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802269c:	b085      	sub	sp, #20
 802269e:	af00      	add	r7, sp, #0
 80226a0:	6078      	str	r0, [r7, #4]
 80226a2:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 80226a4:	1d3b      	adds	r3, r7, #4
 80226a6:	4618      	mov	r0, r3
 80226a8:	f7ff ff8e 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80226ac:	4603      	mov	r3, r0
 80226ae:	681d      	ldr	r5, [r3, #0]
 80226b0:	463b      	mov	r3, r7
 80226b2:	4618      	mov	r0, r3
 80226b4:	f000 f8d9 	bl	802286a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80226b8:	4603      	mov	r3, r0
 80226ba:	681e      	ldr	r6, [r3, #0]
 80226bc:	f107 030c 	add.w	r3, r7, #12
 80226c0:	4618      	mov	r0, r3
 80226c2:	f000 f8d2 	bl	802286a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80226c6:	4604      	mov	r4, r0
 80226c8:	4631      	mov	r1, r6
 80226ca:	4628      	mov	r0, r5
 80226cc:	f7fd f9b4 	bl	801fa38 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80226d0:	4603      	mov	r3, r0
 80226d2:	6023      	str	r3, [r4, #0]
  return c;
 80226d4:	68fb      	ldr	r3, [r7, #12]
}
 80226d6:	4618      	mov	r0, r3
 80226d8:	3714      	adds	r7, #20
 80226da:	46bd      	mov	sp, r7
 80226dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080226de <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80226de:	b590      	push	{r4, r7, lr}
 80226e0:	b083      	sub	sp, #12
 80226e2:	af00      	add	r7, sp, #0
 80226e4:	6078      	str	r0, [r7, #4]
 80226e6:	6039      	str	r1, [r7, #0]
 80226e8:	1d3b      	adds	r3, r7, #4
 80226ea:	4618      	mov	r0, r3
 80226ec:	f000 f8bd 	bl	802286a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80226f0:	4603      	mov	r3, r0
 80226f2:	681c      	ldr	r4, [r3, #0]
 80226f4:	463b      	mov	r3, r7
 80226f6:	4618      	mov	r0, r3
 80226f8:	f000 f8b7 	bl	802286a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80226fc:	4603      	mov	r3, r0
 80226fe:	681b      	ldr	r3, [r3, #0]
 8022700:	4619      	mov	r1, r3
 8022702:	4620      	mov	r0, r4
 8022704:	f7fe fa08 	bl	8020b18 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8022708:	4603      	mov	r3, r0
 802270a:	4618      	mov	r0, r3
 802270c:	f000 f8b8 	bl	8022880 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8022710:	4603      	mov	r3, r0
 8022712:	4618      	mov	r0, r3
 8022714:	370c      	adds	r7, #12
 8022716:	46bd      	mov	sp, r7
 8022718:	bd90      	pop	{r4, r7, pc}

0802271a <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 802271a:	b580      	push	{r7, lr}
 802271c:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 802271e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8022722:	f7ff ff99 	bl	8022658 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8022726:	4603      	mov	r3, r0
  }
 8022728:	4618      	mov	r0, r3
 802272a:	bd80      	pop	{r7, pc}

0802272c <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 802272c:	b590      	push	{r4, r7, lr}
 802272e:	b083      	sub	sp, #12
 8022730:	af00      	add	r7, sp, #0
 8022732:	6078      	str	r0, [r7, #4]
 8022734:	6039      	str	r1, [r7, #0]
 8022736:	1d3b      	adds	r3, r7, #4
 8022738:	4618      	mov	r0, r3
 802273a:	f000 f896 	bl	802286a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802273e:	4603      	mov	r3, r0
 8022740:	681c      	ldr	r4, [r3, #0]
 8022742:	463b      	mov	r3, r7
 8022744:	4618      	mov	r0, r3
 8022746:	f000 f890 	bl	802286a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802274a:	4603      	mov	r3, r0
 802274c:	681b      	ldr	r3, [r3, #0]
 802274e:	4619      	mov	r1, r3
 8022750:	4620      	mov	r0, r4
 8022752:	f000 f875 	bl	8022840 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8022756:	4603      	mov	r3, r0
 8022758:	4618      	mov	r0, r3
 802275a:	f000 f891 	bl	8022880 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 802275e:	4603      	mov	r3, r0
 8022760:	4618      	mov	r0, r3
 8022762:	370c      	adds	r7, #12
 8022764:	46bd      	mov	sp, r7
 8022766:	bd90      	pop	{r4, r7, pc}

08022768 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8022768:	b5f0      	push	{r4, r5, r6, r7, lr}
 802276a:	b085      	sub	sp, #20
 802276c:	af00      	add	r7, sp, #0
 802276e:	6078      	str	r0, [r7, #4]
 8022770:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8022772:	1d3b      	adds	r3, r7, #4
 8022774:	4618      	mov	r0, r3
 8022776:	f000 f878 	bl	802286a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802277a:	4603      	mov	r3, r0
 802277c:	681d      	ldr	r5, [r3, #0]
 802277e:	463b      	mov	r3, r7
 8022780:	4618      	mov	r0, r3
 8022782:	f000 f872 	bl	802286a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8022786:	4603      	mov	r3, r0
 8022788:	681e      	ldr	r6, [r3, #0]
 802278a:	f107 030c 	add.w	r3, r7, #12
 802278e:	4618      	mov	r0, r3
 8022790:	f000 f887 	bl	80228a2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8022794:	4604      	mov	r4, r0
 8022796:	4631      	mov	r1, r6
 8022798:	4628      	mov	r0, r5
 802279a:	f7fd f94d 	bl	801fa38 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 802279e:	4603      	mov	r3, r0
 80227a0:	6023      	str	r3, [r4, #0]
  return c;
 80227a2:	68fb      	ldr	r3, [r7, #12]
}
 80227a4:	4618      	mov	r0, r3
 80227a6:	3714      	adds	r7, #20
 80227a8:	46bd      	mov	sp, r7
 80227aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080227ac <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80227ac:	b5b0      	push	{r4, r5, r7, lr}
 80227ae:	b084      	sub	sp, #16
 80227b0:	af00      	add	r7, sp, #0
 80227b2:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80227b4:	1d3b      	adds	r3, r7, #4
 80227b6:	4618      	mov	r0, r3
 80227b8:	f000 f873 	bl	80228a2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 80227bc:	4603      	mov	r3, r0
 80227be:	681d      	ldr	r5, [r3, #0]
 80227c0:	f107 030c 	add.w	r3, r7, #12
 80227c4:	4618      	mov	r0, r3
 80227c6:	f000 f850 	bl	802286a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80227ca:	4604      	mov	r4, r0
 80227cc:	4628      	mov	r0, r5
 80227ce:	f000 f873 	bl	80228b8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 80227d2:	4603      	mov	r3, r0
 80227d4:	6023      	str	r3, [r4, #0]
  return result;
 80227d6:	68fb      	ldr	r3, [r7, #12]
}
 80227d8:	4618      	mov	r0, r3
 80227da:	3710      	adds	r7, #16
 80227dc:	46bd      	mov	sp, r7
 80227de:	bdb0      	pop	{r4, r5, r7, pc}

080227e0 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 80227e0:	b590      	push	{r4, r7, lr}
 80227e2:	b085      	sub	sp, #20
 80227e4:	af00      	add	r7, sp, #0
 80227e6:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 80227e8:	1d3b      	adds	r3, r7, #4
 80227ea:	4618      	mov	r0, r3
 80227ec:	f000 f83d 	bl	802286a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80227f0:	4604      	mov	r4, r0
 80227f2:	f107 030c 	add.w	r3, r7, #12
 80227f6:	4618      	mov	r0, r3
 80227f8:	f000 f86a 	bl	80228d0 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 80227fc:	4602      	mov	r2, r0
 80227fe:	6823      	ldr	r3, [r4, #0]
 8022800:	6013      	str	r3, [r2, #0]
  return c;
 8022802:	68fb      	ldr	r3, [r7, #12]
}
 8022804:	4618      	mov	r0, r3
 8022806:	3714      	adds	r7, #20
 8022808:	46bd      	mov	sp, r7
 802280a:	bd90      	pop	{r4, r7, pc}

0802280c <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 802280c:	b5b0      	push	{r4, r5, r7, lr}
 802280e:	b084      	sub	sp, #16
 8022810:	af00      	add	r7, sp, #0
 8022812:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8022814:	1d3b      	adds	r3, r7, #4
 8022816:	4618      	mov	r0, r3
 8022818:	f000 f85a 	bl	80228d0 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 802281c:	4603      	mov	r3, r0
 802281e:	681d      	ldr	r5, [r3, #0]
 8022820:	f107 030c 	add.w	r3, r7, #12
 8022824:	4618      	mov	r0, r3
 8022826:	f7ff fecf 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802282a:	4604      	mov	r4, r0
 802282c:	4628      	mov	r0, r5
 802282e:	f000 f85a 	bl	80228e6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 8022832:	4603      	mov	r3, r0
 8022834:	6023      	str	r3, [r4, #0]
  return result;
 8022836:	68fb      	ldr	r3, [r7, #12]
}
 8022838:	4618      	mov	r0, r3
 802283a:	3710      	adds	r7, #16
 802283c:	46bd      	mov	sp, r7
 802283e:	bdb0      	pop	{r4, r5, r7, pc}

08022840 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 8022840:	b480      	push	{r7}
 8022842:	b083      	sub	sp, #12
 8022844:	af00      	add	r7, sp, #0
 8022846:	6078      	str	r0, [r7, #4]
 8022848:	6039      	str	r1, [r7, #0]
  return a - b;
 802284a:	687a      	ldr	r2, [r7, #4]
 802284c:	683b      	ldr	r3, [r7, #0]
 802284e:	1ad3      	subs	r3, r2, r3
}
 8022850:	4618      	mov	r0, r3
 8022852:	370c      	adds	r7, #12
 8022854:	46bd      	mov	sp, r7
 8022856:	f85d 7b04 	ldr.w	r7, [sp], #4
 802285a:	4770      	bx	lr

0802285c <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 802285c:	b580      	push	{r7, lr}
 802285e:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 8022860:	f7fc f8b8 	bl	801e9d4 <_ZNSt14numeric_limitsIlE3maxEv>
 8022864:	4603      	mov	r3, r0
  }
 8022866:	4618      	mov	r0, r3
 8022868:	bd80      	pop	{r7, pc}

0802286a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 802286a:	b480      	push	{r7}
 802286c:	b083      	sub	sp, #12
 802286e:	af00      	add	r7, sp, #0
 8022870:	6078      	str	r0, [r7, #4]
 8022872:	687b      	ldr	r3, [r7, #4]
 8022874:	4618      	mov	r0, r3
 8022876:	370c      	adds	r7, #12
 8022878:	46bd      	mov	sp, r7
 802287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802287e:	4770      	bx	lr

08022880 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8022880:	b580      	push	{r7, lr}
 8022882:	b084      	sub	sp, #16
 8022884:	af00      	add	r7, sp, #0
 8022886:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8022888:	f107 030c 	add.w	r3, r7, #12
 802288c:	4618      	mov	r0, r3
 802288e:	f7ff ffec 	bl	802286a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8022892:	4602      	mov	r2, r0
 8022894:	687b      	ldr	r3, [r7, #4]
 8022896:	6013      	str	r3, [r2, #0]
    return retval;
 8022898:	68fb      	ldr	r3, [r7, #12]
  }
 802289a:	4618      	mov	r0, r3
 802289c:	3710      	adds	r7, #16
 802289e:	46bd      	mov	sp, r7
 80228a0:	bd80      	pop	{r7, pc}

080228a2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 80228a2:	b480      	push	{r7}
 80228a4:	b083      	sub	sp, #12
 80228a6:	af00      	add	r7, sp, #0
 80228a8:	6078      	str	r0, [r7, #4]
 80228aa:	687b      	ldr	r3, [r7, #4]
 80228ac:	4618      	mov	r0, r3
 80228ae:	370c      	adds	r7, #12
 80228b0:	46bd      	mov	sp, r7
 80228b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228b6:	4770      	bx	lr

080228b8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80228b8:	b580      	push	{r7, lr}
 80228ba:	b082      	sub	sp, #8
 80228bc:	af00      	add	r7, sp, #0
 80228be:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80228c0:	6878      	ldr	r0, [r7, #4]
 80228c2:	f000 f81d 	bl	8022900 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 80228c6:	4603      	mov	r3, r0
}
 80228c8:	4618      	mov	r0, r3
 80228ca:	3708      	adds	r7, #8
 80228cc:	46bd      	mov	sp, r7
 80228ce:	bd80      	pop	{r7, pc}

080228d0 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 80228d0:	b480      	push	{r7}
 80228d2:	b083      	sub	sp, #12
 80228d4:	af00      	add	r7, sp, #0
 80228d6:	6078      	str	r0, [r7, #4]
 80228d8:	687b      	ldr	r3, [r7, #4]
 80228da:	4618      	mov	r0, r3
 80228dc:	370c      	adds	r7, #12
 80228de:	46bd      	mov	sp, r7
 80228e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228e4:	4770      	bx	lr

080228e6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80228e6:	b580      	push	{r7, lr}
 80228e8:	b082      	sub	sp, #8
 80228ea:	af00      	add	r7, sp, #0
 80228ec:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80228ee:	6878      	ldr	r0, [r7, #4]
 80228f0:	f000 f848 	bl	8022984 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 80228f4:	4603      	mov	r3, r0
}
 80228f6:	4618      	mov	r0, r3
 80228f8:	3708      	adds	r7, #8
 80228fa:	46bd      	mov	sp, r7
 80228fc:	bd80      	pop	{r7, pc}
	...

08022900 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8022900:	b580      	push	{r7, lr}
 8022902:	b08a      	sub	sp, #40	; 0x28
 8022904:	af00      	add	r7, sp, #0
 8022906:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8022908:	f7fd f881 	bl	801fa0e <_ZNSt14numeric_limitsIlE3minEv>
 802290c:	4603      	mov	r3, r0
 802290e:	4618      	mov	r0, r3
 8022910:	f7fe f8c6 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8022914:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8022916:	f7fc f85d 	bl	801e9d4 <_ZNSt14numeric_limitsIlE3maxEv>
 802291a:	4603      	mov	r3, r0
 802291c:	4618      	mov	r0, r3
 802291e:	f7fe f8bf 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8022922:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8022924:	2320      	movs	r3, #32
 8022926:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8022928:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 802292c:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 802292e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 8022932:	f7fe f8b5 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8022936:	4603      	mov	r3, r0
 8022938:	4619      	mov	r1, r3
 802293a:	6878      	ldr	r0, [r7, #4]
 802293c:	f7fe f8fa 	bl	8020b34 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8022940:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8022942:	480f      	ldr	r0, [pc, #60]	; (8022980 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 8022944:	f7fe f8ac 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8022948:	4603      	mov	r3, r0
 802294a:	4619      	mov	r1, r3
 802294c:	6878      	ldr	r0, [r7, #4]
 802294e:	f7fe f8cf 	bl	8020af0 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8022952:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8022954:	2102      	movs	r1, #2
 8022956:	6878      	ldr	r0, [r7, #4]
 8022958:	f000 f856 	bl	8022a08 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 802295c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 802295e:	68fa      	ldr	r2, [r7, #12]
 8022960:	6a39      	ldr	r1, [r7, #32]
 8022962:	6978      	ldr	r0, [r7, #20]
 8022964:	f000 f894 	bl	8022a90 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8022968:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 802296a:	68fa      	ldr	r2, [r7, #12]
 802296c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802296e:	6938      	ldr	r0, [r7, #16]
 8022970:	f000 f88e 	bl	8022a90 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8022974:	60f8      	str	r0, [r7, #12]
    return result;
 8022976:	68fb      	ldr	r3, [r7, #12]
  }
 8022978:	4618      	mov	r0, r3
 802297a:	3728      	adds	r7, #40	; 0x28
 802297c:	46bd      	mov	sp, r7
 802297e:	bd80      	pop	{r7, pc}
 8022980:	e0000001 	.word	0xe0000001

08022984 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8022984:	b580      	push	{r7, lr}
 8022986:	b08a      	sub	sp, #40	; 0x28
 8022988:	af00      	add	r7, sp, #0
 802298a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 802298c:	f7fd f83f 	bl	801fa0e <_ZNSt14numeric_limitsIlE3minEv>
 8022990:	4603      	mov	r3, r0
 8022992:	4618      	mov	r0, r3
 8022994:	f7fe f884 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8022998:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 802299a:	f7fc f81b 	bl	801e9d4 <_ZNSt14numeric_limitsIlE3maxEv>
 802299e:	4603      	mov	r3, r0
 80229a0:	4618      	mov	r0, r3
 80229a2:	f7fe f87d 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80229a6:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80229a8:	2320      	movs	r3, #32
 80229aa:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80229ac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80229b0:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80229b2:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 80229b6:	f7fe f873 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80229ba:	4603      	mov	r3, r0
 80229bc:	4619      	mov	r1, r3
 80229be:	6878      	ldr	r0, [r7, #4]
 80229c0:	f7fe f8b8 	bl	8020b34 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80229c4:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80229c6:	480f      	ldr	r0, [pc, #60]	; (8022a04 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 80229c8:	f7fe f86a 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80229cc:	4603      	mov	r3, r0
 80229ce:	4619      	mov	r1, r3
 80229d0:	6878      	ldr	r0, [r7, #4]
 80229d2:	f7fe f88d 	bl	8020af0 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80229d6:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80229d8:	2101      	movs	r1, #1
 80229da:	6878      	ldr	r0, [r7, #4]
 80229dc:	f000 f814 	bl	8022a08 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80229e0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80229e2:	68fa      	ldr	r2, [r7, #12]
 80229e4:	6a39      	ldr	r1, [r7, #32]
 80229e6:	6978      	ldr	r0, [r7, #20]
 80229e8:	f000 f852 	bl	8022a90 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80229ec:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80229ee:	68fa      	ldr	r2, [r7, #12]
 80229f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80229f2:	6938      	ldr	r0, [r7, #16]
 80229f4:	f000 f84c 	bl	8022a90 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80229f8:	60f8      	str	r0, [r7, #12]
    return result;
 80229fa:	68fb      	ldr	r3, [r7, #12]
  }
 80229fc:	4618      	mov	r0, r3
 80229fe:	3728      	adds	r7, #40	; 0x28
 8022a00:	46bd      	mov	sp, r7
 8022a02:	bd80      	pop	{r7, pc}
 8022a04:	c0000001 	.word	0xc0000001

08022a08 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 8022a08:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8022a0c:	b089      	sub	sp, #36	; 0x24
 8022a0e:	af00      	add	r7, sp, #0
 8022a10:	6078      	str	r0, [r7, #4]
 8022a12:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 8022a14:	6879      	ldr	r1, [r7, #4]
 8022a16:	17c8      	asrs	r0, r1, #31
 8022a18:	4688      	mov	r8, r1
 8022a1a:	4681      	mov	r9, r0
 8022a1c:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8022a20:	2001      	movs	r0, #1
 8022a22:	6839      	ldr	r1, [r7, #0]
 8022a24:	fa00 f101 	lsl.w	r1, r0, r1
 8022a28:	17c8      	asrs	r0, r1, #31
 8022a2a:	460c      	mov	r4, r1
 8022a2c:	4605      	mov	r5, r0
 8022a2e:	69f9      	ldr	r1, [r7, #28]
 8022a30:	fb04 f001 	mul.w	r0, r4, r1
 8022a34:	69b9      	ldr	r1, [r7, #24]
 8022a36:	fb05 f101 	mul.w	r1, r5, r1
 8022a3a:	4401      	add	r1, r0
 8022a3c:	69b8      	ldr	r0, [r7, #24]
 8022a3e:	fba0 2304 	umull	r2, r3, r0, r4
 8022a42:	4419      	add	r1, r3
 8022a44:	460b      	mov	r3, r1
 8022a46:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8022a4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 8022a4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8022a52:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 8022a54:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022a58:	60bb      	str	r3, [r7, #8]
             ? min
 8022a5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022a5e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8022a62:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8022a66:	db0b      	blt.n	8022a80 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 8022a68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8022a70:	f173 0300 	sbcs.w	r3, r3, #0
 8022a74:	da01      	bge.n	8022a7a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 8022a76:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 8022a78:	e004      	b.n	8022a84 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 8022a7a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 8022a7e:	e001      	b.n	8022a84 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 8022a80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8022a84:	4618      	mov	r0, r3
 8022a86:	3724      	adds	r7, #36	; 0x24
 8022a88:	46bd      	mov	sp, r7
 8022a8a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8022a8e:	4770      	bx	lr

08022a90 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 8022a90:	b590      	push	{r4, r7, lr}
 8022a92:	b085      	sub	sp, #20
 8022a94:	af00      	add	r7, sp, #0
 8022a96:	60f8      	str	r0, [r7, #12]
 8022a98:	60b9      	str	r1, [r7, #8]
 8022a9a:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 8022a9c:	68b9      	ldr	r1, [r7, #8]
 8022a9e:	68f8      	ldr	r0, [r7, #12]
 8022aa0:	f7fe f809 	bl	8020ab6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8022aa4:	4604      	mov	r4, r0
 8022aa6:	68f8      	ldr	r0, [r7, #12]
 8022aa8:	f7fe f869 	bl	8020b7e <_ZN8gemmlowp6BitNotIlEET_S1_>
 8022aac:	4603      	mov	r3, r0
 8022aae:	6879      	ldr	r1, [r7, #4]
 8022ab0:	4618      	mov	r0, r3
 8022ab2:	f7fe f800 	bl	8020ab6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8022ab6:	4603      	mov	r3, r0
 8022ab8:	4619      	mov	r1, r3
 8022aba:	4620      	mov	r0, r4
 8022abc:	f000 f805 	bl	8022aca <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 8022ac0:	4603      	mov	r3, r0
}
 8022ac2:	4618      	mov	r0, r3
 8022ac4:	3714      	adds	r7, #20
 8022ac6:	46bd      	mov	sp, r7
 8022ac8:	bd90      	pop	{r4, r7, pc}

08022aca <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 8022aca:	b480      	push	{r7}
 8022acc:	b083      	sub	sp, #12
 8022ace:	af00      	add	r7, sp, #0
 8022ad0:	6078      	str	r0, [r7, #4]
 8022ad2:	6039      	str	r1, [r7, #0]
  return a ^ b;
 8022ad4:	687a      	ldr	r2, [r7, #4]
 8022ad6:	683b      	ldr	r3, [r7, #0]
 8022ad8:	4053      	eors	r3, r2
}
 8022ada:	4618      	mov	r0, r3
 8022adc:	370c      	adds	r7, #12
 8022ade:	46bd      	mov	sp, r7
 8022ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ae4:	4770      	bx	lr

08022ae6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8022ae6:	b580      	push	{r7, lr}
 8022ae8:	b086      	sub	sp, #24
 8022aea:	af00      	add	r7, sp, #0
 8022aec:	6078      	str	r0, [r7, #4]
 8022aee:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8022af0:	6878      	ldr	r0, [r7, #4]
 8022af2:	f7fc fe7c 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8022af6:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8022af8:	683b      	ldr	r3, [r7, #0]
 8022afa:	2b00      	cmp	r3, #0
 8022afc:	db03      	blt.n	8022b06 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8022afe:	683a      	ldr	r2, [r7, #0]
 8022b00:	68fb      	ldr	r3, [r7, #12]
 8022b02:	429a      	cmp	r2, r3
 8022b04:	db01      	blt.n	8022b0a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8022b06:	f009 fb45 	bl	802c194 <abort>
  const auto* dims_data = shape.DimsData();
 8022b0a:	6878      	ldr	r0, [r7, #4]
 8022b0c:	f7fd f82f 	bl	801fb6e <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8022b10:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8022b12:	2301      	movs	r3, #1
 8022b14:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8022b16:	2300      	movs	r3, #0
 8022b18:	613b      	str	r3, [r7, #16]
 8022b1a:	693a      	ldr	r2, [r7, #16]
 8022b1c:	68fb      	ldr	r3, [r7, #12]
 8022b1e:	429a      	cmp	r2, r3
 8022b20:	da12      	bge.n	8022b48 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8022b22:	693a      	ldr	r2, [r7, #16]
 8022b24:	683b      	ldr	r3, [r7, #0]
 8022b26:	429a      	cmp	r2, r3
 8022b28:	d005      	beq.n	8022b36 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 8022b2a:	693b      	ldr	r3, [r7, #16]
 8022b2c:	009b      	lsls	r3, r3, #2
 8022b2e:	68ba      	ldr	r2, [r7, #8]
 8022b30:	4413      	add	r3, r2
 8022b32:	681b      	ldr	r3, [r3, #0]
 8022b34:	e000      	b.n	8022b38 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 8022b36:	2301      	movs	r3, #1
 8022b38:	697a      	ldr	r2, [r7, #20]
 8022b3a:	fb02 f303 	mul.w	r3, r2, r3
 8022b3e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8022b40:	693b      	ldr	r3, [r7, #16]
 8022b42:	3301      	adds	r3, #1
 8022b44:	613b      	str	r3, [r7, #16]
 8022b46:	e7e8      	b.n	8022b1a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 8022b48:	697b      	ldr	r3, [r7, #20]
}
 8022b4a:	4618      	mov	r0, r3
 8022b4c:	3718      	adds	r7, #24
 8022b4e:	46bd      	mov	sp, r7
 8022b50:	bd80      	pop	{r7, pc}

08022b52 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8022b52:	b590      	push	{r4, r7, lr}
 8022b54:	b091      	sub	sp, #68	; 0x44
 8022b56:	af00      	add	r7, sp, #0
 8022b58:	60f8      	str	r0, [r7, #12]
 8022b5a:	60b9      	str	r1, [r7, #8]
 8022b5c:	607a      	str	r2, [r7, #4]
 8022b5e:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8022b60:	68fb      	ldr	r3, [r7, #12]
 8022b62:	69db      	ldr	r3, [r3, #28]
 8022b64:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 8022b66:	68fb      	ldr	r3, [r7, #12]
 8022b68:	6a1b      	ldr	r3, [r3, #32]
 8022b6a:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8022b6c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8022b6e:	f7fc fe3e 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8022b72:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8022b74:	6838      	ldr	r0, [r7, #0]
 8022b76:	f7fc fe3a 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8022b7a:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8022b7c:	6a3b      	ldr	r3, [r7, #32]
 8022b7e:	3b01      	subs	r3, #1
 8022b80:	4619      	mov	r1, r3
 8022b82:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8022b84:	f7ff ffaf 	bl	8022ae6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8022b88:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8022b8a:	69fb      	ldr	r3, [r7, #28]
 8022b8c:	1e99      	subs	r1, r3, #2
 8022b8e:	6a3b      	ldr	r3, [r7, #32]
 8022b90:	3b01      	subs	r3, #1
 8022b92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8022b94:	6838      	ldr	r0, [r7, #0]
 8022b96:	f7fe f908 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8022b9a:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8022b9c:	69fb      	ldr	r3, [r7, #28]
 8022b9e:	3b01      	subs	r3, #1
 8022ba0:	4619      	mov	r1, r3
 8022ba2:	6838      	ldr	r0, [r7, #0]
 8022ba4:	f7fc ffbe 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8022ba8:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8022baa:	2300      	movs	r3, #0
 8022bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022bae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8022bb0:	69bb      	ldr	r3, [r7, #24]
 8022bb2:	429a      	cmp	r2, r3
 8022bb4:	da5f      	bge.n	8022c76 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8022bb6:	2300      	movs	r3, #0
 8022bb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8022bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8022bbc:	697b      	ldr	r3, [r7, #20]
 8022bbe:	429a      	cmp	r2, r3
 8022bc0:	da55      	bge.n	8022c6e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 8022bc2:	f04f 0300 	mov.w	r3, #0
 8022bc6:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8022bc8:	2300      	movs	r3, #0
 8022bca:	633b      	str	r3, [r7, #48]	; 0x30
 8022bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022bce:	693b      	ldr	r3, [r7, #16]
 8022bd0:	429a      	cmp	r2, r3
 8022bd2:	da21      	bge.n	8022c18 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 8022bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022bd6:	693a      	ldr	r2, [r7, #16]
 8022bd8:	fb03 f202 	mul.w	r2, r3, r2
 8022bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022bde:	4413      	add	r3, r2
 8022be0:	009b      	lsls	r3, r3, #2
 8022be2:	687a      	ldr	r2, [r7, #4]
 8022be4:	4413      	add	r3, r2
 8022be6:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 8022bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022bec:	693a      	ldr	r2, [r7, #16]
 8022bee:	fb03 f202 	mul.w	r2, r3, r2
 8022bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022bf4:	4413      	add	r3, r2
 8022bf6:	009b      	lsls	r3, r3, #2
 8022bf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8022bfa:	4413      	add	r3, r2
 8022bfc:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8022c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022c04:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8022c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022c0c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8022c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022c12:	3301      	adds	r3, #1
 8022c14:	633b      	str	r3, [r7, #48]	; 0x30
 8022c16:	e7d9      	b.n	8022bcc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 8022c18:	f04f 0300 	mov.w	r3, #0
 8022c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 8022c1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8022c20:	2b00      	cmp	r3, #0
 8022c22:	d005      	beq.n	8022c30 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 8022c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022c26:	009b      	lsls	r3, r3, #2
 8022c28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8022c2a:	4413      	add	r3, r2
 8022c2c:	681b      	ldr	r3, [r3, #0]
 8022c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8022c30:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8022c34:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8022c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022c3c:	697b      	ldr	r3, [r7, #20]
 8022c3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8022c40:	fb03 f202 	mul.w	r2, r3, r2
 8022c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022c46:	4413      	add	r3, r2
 8022c48:	009b      	lsls	r3, r3, #2
 8022c4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8022c4c:	18d4      	adds	r4, r2, r3
 8022c4e:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8022c52:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8022c56:	eeb0 0a67 	vmov.f32	s0, s15
 8022c5a:	f7fe f81b 	bl	8020c94 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8022c5e:	eef0 7a40 	vmov.f32	s15, s0
 8022c62:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8022c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022c68:	3301      	adds	r3, #1
 8022c6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8022c6c:	e7a5      	b.n	8022bba <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 8022c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022c70:	3301      	adds	r3, #1
 8022c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022c74:	e79b      	b.n	8022bae <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 8022c76:	bf00      	nop
 8022c78:	3744      	adds	r7, #68	; 0x44
 8022c7a:	46bd      	mov	sp, r7
 8022c7c:	bd90      	pop	{r4, r7, pc}

08022c7e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
 8022c7e:	b580      	push	{r7, lr}
 8022c80:	b096      	sub	sp, #88	; 0x58
 8022c82:	af00      	add	r7, sp, #0
 8022c84:	60f8      	str	r0, [r7, #12]
 8022c86:	60b9      	str	r1, [r7, #8]
 8022c88:	607a      	str	r2, [r7, #4]
 8022c8a:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 8022c8c:	68fb      	ldr	r3, [r7, #12]
 8022c8e:	681b      	ldr	r3, [r3, #0]
 8022c90:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 8022c92:	68fb      	ldr	r3, [r7, #12]
 8022c94:	685b      	ldr	r3, [r3, #4]
 8022c96:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 8022c98:	68fb      	ldr	r3, [r7, #12]
 8022c9a:	689b      	ldr	r3, [r3, #8]
 8022c9c:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 8022c9e:	68fb      	ldr	r3, [r7, #12]
 8022ca0:	68db      	ldr	r3, [r3, #12]
 8022ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8022ca4:	68fb      	ldr	r3, [r7, #12]
 8022ca6:	691b      	ldr	r3, [r3, #16]
 8022ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 8022caa:	68fb      	ldr	r3, [r7, #12]
 8022cac:	695b      	ldr	r3, [r3, #20]
 8022cae:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8022cb0:	68fb      	ldr	r3, [r7, #12]
 8022cb2:	699b      	ldr	r3, [r3, #24]
 8022cb4:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8022cb6:	6838      	ldr	r0, [r7, #0]
 8022cb8:	f7fc fd99 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8022cbc:	4603      	mov	r3, r0
 8022cbe:	2b01      	cmp	r3, #1
 8022cc0:	dc01      	bgt.n	8022cc6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 8022cc2:	f009 fa67 	bl	802c194 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 8022cc6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8022cc8:	f7fc fd91 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8022ccc:	4603      	mov	r3, r0
 8022cce:	2b00      	cmp	r3, #0
 8022cd0:	dc01      	bgt.n	8022cd6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 8022cd2:	f009 fa5f 	bl	802c194 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8022cd6:	69ba      	ldr	r2, [r7, #24]
 8022cd8:	697b      	ldr	r3, [r7, #20]
 8022cda:	429a      	cmp	r2, r3
 8022cdc:	dd01      	ble.n	8022ce2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 8022cde:	f009 fa59 	bl	802c194 <abort>
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8022ce2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8022ce4:	f7fc fd83 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8022ce8:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 8022cea:	6838      	ldr	r0, [r7, #0]
 8022cec:	f7fc fd7f 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8022cf0:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8022cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022cf4:	3b01      	subs	r3, #1
 8022cf6:	4619      	mov	r1, r3
 8022cf8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8022cfa:	f7ff fef4 	bl	8022ae6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8022cfe:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 8022d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022d02:	1e99      	subs	r1, r3, #2
 8022d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022d06:	3b01      	subs	r3, #1
 8022d08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8022d0a:	6838      	ldr	r0, [r7, #0]
 8022d0c:	f7fe f84d 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8022d10:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8022d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022d14:	3b01      	subs	r3, #1
 8022d16:	4619      	mov	r1, r3
 8022d18:	6838      	ldr	r0, [r7, #0]
 8022d1a:	f7fc ff03 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8022d1e:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 8022d20:	2300      	movs	r3, #0
 8022d22:	657b      	str	r3, [r7, #84]	; 0x54
 8022d24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8022d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d28:	429a      	cmp	r2, r3
 8022d2a:	da73      	bge.n	8022e14 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8022d2c:	2300      	movs	r3, #0
 8022d2e:	653b      	str	r3, [r7, #80]	; 0x50
 8022d30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8022d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d34:	429a      	cmp	r2, r3
 8022d36:	da69      	bge.n	8022e0c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32_t acc = 0;
 8022d38:	2300      	movs	r3, #0
 8022d3a:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8022d3c:	2300      	movs	r3, #0
 8022d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022d40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8022d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022d44:	429a      	cmp	r2, r3
 8022d46:	da24      	bge.n	8022d92 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32_t input_val = input_data[b * accum_depth + d];
 8022d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8022d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022d4c:	fb03 f202 	mul.w	r2, r3, r2
 8022d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022d52:	4413      	add	r3, r2
 8022d54:	461a      	mov	r2, r3
 8022d56:	687b      	ldr	r3, [r7, #4]
 8022d58:	4413      	add	r3, r2
 8022d5a:	781b      	ldrb	r3, [r3, #0]
 8022d5c:	623b      	str	r3, [r7, #32]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 8022d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8022d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022d62:	fb03 f202 	mul.w	r2, r3, r2
 8022d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022d68:	4413      	add	r3, r2
 8022d6a:	461a      	mov	r2, r3
 8022d6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022d6e:	4413      	add	r3, r2
 8022d70:	781b      	ldrb	r3, [r3, #0]
 8022d72:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8022d74:	69fa      	ldr	r2, [r7, #28]
 8022d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022d78:	4413      	add	r3, r2
 8022d7a:	6a39      	ldr	r1, [r7, #32]
 8022d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8022d7e:	440a      	add	r2, r1
 8022d80:	fb03 f202 	mul.w	r2, r3, r2
 8022d84:	693b      	ldr	r3, [r7, #16]
 8022d86:	4413      	add	r3, r2
 8022d88:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8022d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022d8c:	3301      	adds	r3, #1
 8022d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022d90:	e7d6      	b.n	8022d40 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 8022d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8022d94:	2b00      	cmp	r3, #0
 8022d96:	d007      	beq.n	8022da8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 8022d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8022d9a:	009b      	lsls	r3, r3, #2
 8022d9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8022d9e:	4413      	add	r3, r2
 8022da0:	681a      	ldr	r2, [r3, #0]
 8022da2:	693b      	ldr	r3, [r7, #16]
 8022da4:	4413      	add	r3, r2
 8022da6:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8022da8:	693b      	ldr	r3, [r7, #16]
 8022daa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8022dac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8022dae:	4618      	mov	r0, r3
 8022db0:	f7fc ff48 	bl	801fc44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8022db4:	4603      	mov	r3, r0
 8022db6:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 8022db8:	693a      	ldr	r2, [r7, #16]
 8022dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022dbc:	4413      	add	r3, r2
 8022dbe:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 8022dc0:	f107 0218 	add.w	r2, r7, #24
 8022dc4:	f107 0310 	add.w	r3, r7, #16
 8022dc8:	4611      	mov	r1, r2
 8022dca:	4618      	mov	r0, r3
 8022dcc:	f7fc fcc4 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 8022dd0:	4603      	mov	r3, r0
 8022dd2:	681b      	ldr	r3, [r3, #0]
 8022dd4:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 8022dd6:	f107 0214 	add.w	r2, r7, #20
 8022dda:	f107 0310 	add.w	r3, r7, #16
 8022dde:	4611      	mov	r1, r2
 8022de0:	4618      	mov	r0, r3
 8022de2:	f7fc fca5 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 8022de6:	4603      	mov	r3, r0
 8022de8:	681b      	ldr	r3, [r3, #0]
 8022dea:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
 8022dec:	6939      	ldr	r1, [r7, #16]
 8022dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022df0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8022df2:	fb03 f202 	mul.w	r2, r3, r2
 8022df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8022df8:	4413      	add	r3, r2
 8022dfa:	461a      	mov	r2, r3
 8022dfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8022dfe:	4413      	add	r3, r2
 8022e00:	b2ca      	uxtb	r2, r1
 8022e02:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8022e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8022e06:	3301      	adds	r3, #1
 8022e08:	653b      	str	r3, [r7, #80]	; 0x50
 8022e0a:	e791      	b.n	8022d30 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 8022e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8022e0e:	3301      	adds	r3, #1
 8022e10:	657b      	str	r3, [r7, #84]	; 0x54
 8022e12:	e787      	b.n	8022d24 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 8022e14:	bf00      	nop
 8022e16:	3758      	adds	r7, #88	; 0x58
 8022e18:	46bd      	mov	sp, r7
 8022e1a:	bd80      	pop	{r7, pc}

08022e1c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8022e1c:	b580      	push	{r7, lr}
 8022e1e:	b084      	sub	sp, #16
 8022e20:	af00      	add	r7, sp, #0
 8022e22:	60f8      	str	r0, [r7, #12]
 8022e24:	60b9      	str	r1, [r7, #8]
 8022e26:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8022e28:	68fb      	ldr	r3, [r7, #12]
 8022e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022e2c:	2b00      	cmp	r3, #0
 8022e2e:	d101      	bne.n	8022e34 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8022e30:	f009 f9b0 	bl	802c194 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8022e34:	68fb      	ldr	r3, [r7, #12]
 8022e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022e38:	2124      	movs	r1, #36	; 0x24
 8022e3a:	68f8      	ldr	r0, [r7, #12]
 8022e3c:	4798      	blx	r3
 8022e3e:	4603      	mov	r3, r0
}
 8022e40:	4618      	mov	r0, r3
 8022e42:	3710      	adds	r7, #16
 8022e44:	46bd      	mov	sp, r7
 8022e46:	bd80      	pop	{r7, pc}

08022e48 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8022e48:	b5b0      	push	{r4, r5, r7, lr}
 8022e4a:	b0a0      	sub	sp, #128	; 0x80
 8022e4c:	af04      	add	r7, sp, #16
 8022e4e:	6078      	str	r0, [r7, #4]
 8022e50:	6039      	str	r1, [r7, #0]
 8022e52:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 8022e54:	683b      	ldr	r3, [r7, #0]
 8022e56:	691b      	ldr	r3, [r3, #16]
 8022e58:	2b00      	cmp	r3, #0
 8022e5a:	d101      	bne.n	8022e60 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 8022e5c:	f009 f99a 	bl	802c194 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8022e60:	683b      	ldr	r3, [r7, #0]
 8022e62:	695b      	ldr	r3, [r3, #20]
 8022e64:	2b00      	cmp	r3, #0
 8022e66:	d101      	bne.n	8022e6c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 8022e68:	f009 f994 	bl	802c194 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8022e6c:	683b      	ldr	r3, [r7, #0]
 8022e6e:	691b      	ldr	r3, [r3, #16]
 8022e70:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 8022e72:	683b      	ldr	r3, [r7, #0]
 8022e74:	695b      	ldr	r3, [r3, #20]
 8022e76:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 8022e78:	4b81      	ldr	r3, [pc, #516]	; (8023080 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 8022e7a:	681b      	ldr	r3, [r3, #0]
 8022e7c:	461a      	mov	r2, r3
 8022e7e:	6839      	ldr	r1, [r7, #0]
 8022e80:	6878      	ldr	r0, [r7, #4]
 8022e82:	f7fc f889 	bl	801ef98 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8022e86:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 8022e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022e8a:	2b00      	cmp	r3, #0
 8022e8c:	d10a      	bne.n	8022ea4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 8022e8e:	687b      	ldr	r3, [r7, #4]
 8022e90:	695c      	ldr	r4, [r3, #20]
 8022e92:	4b7c      	ldr	r3, [pc, #496]	; (8023084 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8022e94:	9300      	str	r3, [sp, #0]
 8022e96:	2340      	movs	r3, #64	; 0x40
 8022e98:	4a7b      	ldr	r2, [pc, #492]	; (8023088 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8022e9a:	497c      	ldr	r1, [pc, #496]	; (802308c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8022e9c:	6878      	ldr	r0, [r7, #4]
 8022e9e:	47a0      	blx	r4
 8022ea0:	2401      	movs	r4, #1
 8022ea2:	e0e7      	b.n	8023074 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 8022ea4:	4b7a      	ldr	r3, [pc, #488]	; (8023090 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 8022ea6:	681b      	ldr	r3, [r3, #0]
 8022ea8:	461a      	mov	r2, r3
 8022eaa:	6839      	ldr	r1, [r7, #0]
 8022eac:	6878      	ldr	r0, [r7, #4]
 8022eae:	f7fc f873 	bl	801ef98 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8022eb2:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 8022eb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022eb6:	2b00      	cmp	r3, #0
 8022eb8:	d10a      	bne.n	8022ed0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 8022eba:	687b      	ldr	r3, [r7, #4]
 8022ebc:	695c      	ldr	r4, [r3, #20]
 8022ebe:	4b75      	ldr	r3, [pc, #468]	; (8023094 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 8022ec0:	9300      	str	r3, [sp, #0]
 8022ec2:	2343      	movs	r3, #67	; 0x43
 8022ec4:	4a70      	ldr	r2, [pc, #448]	; (8023088 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8022ec6:	4971      	ldr	r1, [pc, #452]	; (802308c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8022ec8:	6878      	ldr	r0, [r7, #4]
 8022eca:	47a0      	blx	r4
 8022ecc:	2401      	movs	r4, #1
 8022ece:	e0d1      	b.n	8023074 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 8022ed0:	4b71      	ldr	r3, [pc, #452]	; (8023098 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8022ed2:	681b      	ldr	r3, [r3, #0]
 8022ed4:	461a      	mov	r2, r3
 8022ed6:	6839      	ldr	r1, [r7, #0]
 8022ed8:	6878      	ldr	r0, [r7, #4]
 8022eda:	f7fc f88d 	bl	801eff8 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8022ede:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 8022ee0:	4b6e      	ldr	r3, [pc, #440]	; (802309c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8022ee2:	681b      	ldr	r3, [r3, #0]
 8022ee4:	461a      	mov	r2, r3
 8022ee6:	6839      	ldr	r1, [r7, #0]
 8022ee8:	6878      	ldr	r0, [r7, #4]
 8022eea:	f7fc f865 	bl	801efb8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8022eee:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 8022ef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8022ef2:	2b00      	cmp	r3, #0
 8022ef4:	d10a      	bne.n	8022f0c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8022ef6:	687b      	ldr	r3, [r7, #4]
 8022ef8:	695c      	ldr	r4, [r3, #20]
 8022efa:	4b69      	ldr	r3, [pc, #420]	; (80230a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 8022efc:	9300      	str	r3, [sp, #0]
 8022efe:	2347      	movs	r3, #71	; 0x47
 8022f00:	4a61      	ldr	r2, [pc, #388]	; (8023088 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8022f02:	4962      	ldr	r1, [pc, #392]	; (802308c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8022f04:	6878      	ldr	r0, [r7, #4]
 8022f06:	47a0      	blx	r4
 8022f08:	2401      	movs	r4, #1
 8022f0a:	e0b3      	b.n	8023074 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8022f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022f0e:	781a      	ldrb	r2, [r3, #0]
 8022f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8022f12:	781b      	ldrb	r3, [r3, #0]
 8022f14:	429a      	cmp	r2, r3
 8022f16:	d01a      	beq.n	8022f4e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 8022f18:	687b      	ldr	r3, [r7, #4]
 8022f1a:	695c      	ldr	r4, [r3, #20]
 8022f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022f1e:	781b      	ldrb	r3, [r3, #0]
 8022f20:	4618      	mov	r0, r3
 8022f22:	f7fb fcdb 	bl	801e8dc <TfLiteTypeGetName>
 8022f26:	4605      	mov	r5, r0
 8022f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8022f2a:	781b      	ldrb	r3, [r3, #0]
 8022f2c:	4618      	mov	r0, r3
 8022f2e:	f7fb fcd5 	bl	801e8dc <TfLiteTypeGetName>
 8022f32:	4603      	mov	r3, r0
 8022f34:	9303      	str	r3, [sp, #12]
 8022f36:	9502      	str	r5, [sp, #8]
 8022f38:	4b5a      	ldr	r3, [pc, #360]	; (80230a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 8022f3a:	9301      	str	r3, [sp, #4]
 8022f3c:	4b5a      	ldr	r3, [pc, #360]	; (80230a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 8022f3e:	9300      	str	r3, [sp, #0]
 8022f40:	2349      	movs	r3, #73	; 0x49
 8022f42:	4a51      	ldr	r2, [pc, #324]	; (8023088 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8022f44:	4959      	ldr	r1, [pc, #356]	; (80230ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8022f46:	6878      	ldr	r0, [r7, #4]
 8022f48:	47a0      	blx	r4
 8022f4a:	2401      	movs	r4, #1
 8022f4c:	e092      	b.n	8023074 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8022f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022f50:	781a      	ldrb	r2, [r3, #0]
 8022f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022f54:	781b      	ldrb	r3, [r3, #0]
 8022f56:	429a      	cmp	r2, r3
 8022f58:	d006      	beq.n	8022f68 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 8022f5a:	687b      	ldr	r3, [r7, #4]
 8022f5c:	695b      	ldr	r3, [r3, #20]
 8022f5e:	4954      	ldr	r1, [pc, #336]	; (80230b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8022f60:	6878      	ldr	r0, [r7, #4]
 8022f62:	4798      	blx	r3
 8022f64:	2401      	movs	r4, #1
 8022f66:	e085      	b.n	8023074 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8022f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8022f6e:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 8022f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8022f72:	7819      	ldrb	r1, [r3, #0]
 8022f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022f76:	781a      	ldrb	r2, [r3, #0]
 8022f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022f7a:	9303      	str	r3, [sp, #12]
 8022f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8022f7e:	9302      	str	r3, [sp, #8]
 8022f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022f82:	9301      	str	r3, [sp, #4]
 8022f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022f86:	9300      	str	r3, [sp, #0]
 8022f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022f8a:	6878      	ldr	r0, [r7, #4]
 8022f8c:	f000 fbb5 	bl	80236fa <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 8022f90:	4603      	mov	r3, r0
 8022f92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8022f96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8022f9a:	2b00      	cmp	r3, #0
 8022f9c:	d002      	beq.n	8022fa4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 8022f9e:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8022fa2:	e067      	b.n	8023074 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 8022fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022fa6:	781b      	ldrb	r3, [r3, #0]
 8022fa8:	2b09      	cmp	r3, #9
 8022faa:	d162      	bne.n	8023072 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 8022fac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8022fb0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8022fb2:	4618      	mov	r0, r3
 8022fb4:	f7fc fc7f 	bl	801f8b6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 8022fb8:	f107 0318 	add.w	r3, r7, #24
 8022fbc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8022fbe:	4618      	mov	r0, r3
 8022fc0:	f7fc fc79 	bl	801f8b6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8022fc4:	f107 0318 	add.w	r3, r7, #24
 8022fc8:	4618      	mov	r0, r3
 8022fca:	f7fc fc10 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8022fce:	4603      	mov	r3, r0
 8022fd0:	2b02      	cmp	r3, #2
 8022fd2:	d001      	beq.n	8022fd8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 8022fd4:	f009 f8de 	bl	802c194 <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 8022fd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8022fdc:	4618      	mov	r0, r3
 8022fde:	f7fc fc06 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8022fe2:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 8022fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8022fe6:	1e5a      	subs	r2, r3, #1
 8022fe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8022fec:	4611      	mov	r1, r2
 8022fee:	4618      	mov	r0, r3
 8022ff0:	f7fc fd98 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8022ff4:	4603      	mov	r3, r0
 8022ff6:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 8022ff8:	2301      	movs	r3, #1
 8022ffa:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 8022ffc:	2301      	movs	r3, #1
 8022ffe:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 8023000:	f107 0318 	add.w	r3, r7, #24
 8023004:	2101      	movs	r1, #1
 8023006:	4618      	mov	r0, r3
 8023008:	f7fc fd8c 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 802300c:	4603      	mov	r3, r0
 802300e:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 8023010:	f107 0308 	add.w	r3, r7, #8
 8023014:	4618      	mov	r0, r3
 8023016:	f7ed fc84 	bl	8010922 <arm_fully_connected_s8_get_buffer_size>
 802301a:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 802301c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802301e:	2b00      	cmp	r3, #0
 8023020:	dd11      	ble.n	8023046 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8023022:	687b      	ldr	r3, [r7, #4]
 8023024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023026:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8023028:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802302a:	3220      	adds	r2, #32
 802302c:	6878      	ldr	r0, [r7, #4]
 802302e:	4798      	blx	r3
 8023030:	4603      	mov	r3, r0
 8023032:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8023036:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 802303a:	2b00      	cmp	r3, #0
 802303c:	d007      	beq.n	802304e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 802303e:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 8023042:	2500      	movs	r5, #0
 8023044:	e004      	b.n	8023050 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 8023046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8023048:	f04f 32ff 	mov.w	r2, #4294967295
 802304c:	621a      	str	r2, [r3, #32]
 802304e:	2501      	movs	r5, #1
 8023050:	f107 0318 	add.w	r3, r7, #24
 8023054:	4618      	mov	r0, r3
 8023056:	f7fc fbb4 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
 802305a:	2d01      	cmp	r5, #1
 802305c:	d001      	beq.n	8023062 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 802305e:	2500      	movs	r5, #0
 8023060:	e000      	b.n	8023064 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 8023062:	2501      	movs	r5, #1
 8023064:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8023068:	4618      	mov	r0, r3
 802306a:	f7fc fbaa 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
 802306e:	2d01      	cmp	r5, #1
 8023070:	d100      	bne.n	8023074 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 8023072:	2400      	movs	r4, #0
}
 8023074:	4623      	mov	r3, r4
 8023076:	4618      	mov	r0, r3
 8023078:	3770      	adds	r7, #112	; 0x70
 802307a:	46bd      	mov	sp, r7
 802307c:	bdb0      	pop	{r4, r5, r7, pc}
 802307e:	bf00      	nop
 8023080:	080309ec 	.word	0x080309ec
 8023084:	0802ee00 	.word	0x0802ee00
 8023088:	0802ed50 	.word	0x0802ed50
 802308c:	0802ede8 	.word	0x0802ede8
 8023090:	080309f0 	.word	0x080309f0
 8023094:	0802ee14 	.word	0x0802ee14
 8023098:	080309f4 	.word	0x080309f4
 802309c:	080309f8 	.word	0x080309f8
 80230a0:	0802ee28 	.word	0x0802ee28
 80230a4:	0802ee58 	.word	0x0802ee58
 80230a8:	0802ee68 	.word	0x0802ee68
 80230ac:	0802ee3c 	.word	0x0802ee3c
 80230b0:	0802ee74 	.word	0x0802ee74

080230b4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 80230b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80230b6:	b0bf      	sub	sp, #252	; 0xfc
 80230b8:	af08      	add	r7, sp, #32
 80230ba:	6178      	str	r0, [r7, #20]
 80230bc:	6139      	str	r1, [r7, #16]
 80230be:	60fa      	str	r2, [r7, #12]
 80230c0:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80230c2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80230c6:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80230ca:	4618      	mov	r0, r3
 80230cc:	f000 fb7b 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 80230d0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80230d4:	4618      	mov	r0, r3
 80230d6:	f7fc fb8a 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80230da:	4603      	mov	r3, r0
 80230dc:	2b02      	cmp	r3, #2
 80230de:	d001      	beq.n	80230e4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 80230e0:	f009 f858 	bl	802c194 <abort>
  const int batches = output_shape.Dims(0);
 80230e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80230e8:	2100      	movs	r1, #0
 80230ea:	4618      	mov	r0, r3
 80230ec:	f7fc fd1a 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 80230f0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 80230f4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80230f8:	2101      	movs	r1, #1
 80230fa:	4618      	mov	r0, r3
 80230fc:	f7fc fd12 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8023100:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8023104:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8023108:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 802310c:	4618      	mov	r0, r3
 802310e:	f000 fb5a 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8023112:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8023116:	4618      	mov	r0, r3
 8023118:	f7fc fb69 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802311c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8023120:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8023124:	1e5a      	subs	r2, r3, #1
 8023126:	f107 0398 	add.w	r3, r7, #152	; 0x98
 802312a:	4611      	mov	r1, r2
 802312c:	4618      	mov	r0, r3
 802312e:	f7fc fcf9 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8023132:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8023136:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802313a:	68b9      	ldr	r1, [r7, #8]
 802313c:	4618      	mov	r0, r3
 802313e:	f000 fb42 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 8023142:	68fb      	ldr	r3, [r7, #12]
 8023144:	695b      	ldr	r3, [r3, #20]
 8023146:	425b      	negs	r3, r3
 8023148:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 802314a:	68fb      	ldr	r3, [r7, #12]
 802314c:	69db      	ldr	r3, [r3, #28]
 802314e:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 8023150:	68fb      	ldr	r3, [r7, #12]
 8023152:	699b      	ldr	r3, [r3, #24]
 8023154:	425b      	negs	r3, r3
 8023156:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 8023158:	68fb      	ldr	r3, [r7, #12]
 802315a:	689b      	ldr	r3, [r3, #8]
 802315c:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 802315e:	68fb      	ldr	r3, [r7, #12]
 8023160:	68db      	ldr	r3, [r3, #12]
 8023162:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 8023164:	68fb      	ldr	r3, [r7, #12]
 8023166:	681b      	ldr	r3, [r3, #0]
 8023168:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 802316a:	68fb      	ldr	r3, [r7, #12]
 802316c:	685b      	ldr	r3, [r3, #4]
 802316e:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 8023170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8023174:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 8023176:	2301      	movs	r3, #1
 8023178:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 802317a:	2301      	movs	r3, #1
 802317c:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 802317e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8023182:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 8023184:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8023188:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 802318a:	2301      	movs	r3, #1
 802318c:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 802318e:	2301      	movs	r3, #1
 8023190:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 8023192:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8023196:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 8023198:	2301      	movs	r3, #1
 802319a:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 802319c:	2301      	movs	r3, #1
 802319e:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 80231a0:	2301      	movs	r3, #1
 80231a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 80231a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80231a8:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 80231aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80231ae:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 80231b0:	2301      	movs	r3, #1
 80231b2:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 80231b4:	2301      	movs	r3, #1
 80231b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 80231b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80231bc:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 80231be:	2300      	movs	r3, #0
 80231c0:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 80231c2:	2300      	movs	r3, #0
 80231c4:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 80231c6:	68fb      	ldr	r3, [r7, #12]
 80231c8:	6a1b      	ldr	r3, [r3, #32]
 80231ca:	2b00      	cmp	r3, #0
 80231cc:	db08      	blt.n	80231e0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 80231ce:	697b      	ldr	r3, [r7, #20]
 80231d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80231d2:	68fa      	ldr	r2, [r7, #12]
 80231d4:	6a12      	ldr	r2, [r2, #32]
 80231d6:	4611      	mov	r1, r2
 80231d8:	6978      	ldr	r0, [r7, #20]
 80231da:	4798      	blx	r3
 80231dc:	4603      	mov	r3, r0
 80231de:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 80231e0:	68b8      	ldr	r0, [r7, #8]
 80231e2:	f7fd fa71 	bl	80206c8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80231e6:	4605      	mov	r5, r0
 80231e8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80231ec:	f7fd fa6c 	bl	80206c8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80231f0:	4606      	mov	r6, r0
 80231f2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80231f6:	f7fd fdc9 	bl	8020d8c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80231fa:	6078      	str	r0, [r7, #4]
 80231fc:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8023200:	f7fd fa71 	bl	80206e6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8023204:	4603      	mov	r3, r0
 8023206:	f107 0454 	add.w	r4, r7, #84	; 0x54
 802320a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 802320e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8023212:	f107 001c 	add.w	r0, r7, #28
 8023216:	9306      	str	r3, [sp, #24]
 8023218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802321c:	9305      	str	r3, [sp, #20]
 802321e:	687b      	ldr	r3, [r7, #4]
 8023220:	9304      	str	r3, [sp, #16]
 8023222:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8023226:	9303      	str	r3, [sp, #12]
 8023228:	9602      	str	r6, [sp, #8]
 802322a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802322e:	9301      	str	r3, [sp, #4]
 8023230:	9500      	str	r5, [sp, #0]
 8023232:	4623      	mov	r3, r4
 8023234:	f7ed fb2e 	bl	8010894 <arm_fully_connected_s8>
 8023238:	4603      	mov	r3, r0
 802323a:	2b00      	cmp	r3, #0
 802323c:	bf14      	ite	ne
 802323e:	2301      	movne	r3, #1
 8023240:	2300      	moveq	r3, #0
 8023242:	b2db      	uxtb	r3, r3
 8023244:	2b00      	cmp	r3, #0
 8023246:	d03e      	beq.n	80232c6 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 8023248:	697b      	ldr	r3, [r7, #20]
 802324a:	695c      	ldr	r4, [r3, #20]
 802324c:	68b8      	ldr	r0, [r7, #8]
 802324e:	f7fd fa3b 	bl	80206c8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8023252:	4606      	mov	r6, r0
 8023254:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8023258:	f7fd fa36 	bl	80206c8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802325c:	6078      	str	r0, [r7, #4]
 802325e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8023262:	f7fd fd93 	bl	8020d8c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8023266:	6038      	str	r0, [r7, #0]
 8023268:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 802326c:	f7fd fa3b 	bl	80206e6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8023270:	4603      	mov	r3, r0
 8023272:	f107 0554 	add.w	r5, r7, #84	; 0x54
 8023276:	f107 0264 	add.w	r2, r7, #100	; 0x64
 802327a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 802327e:	f107 001c 	add.w	r0, r7, #28
 8023282:	9306      	str	r3, [sp, #24]
 8023284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023288:	9305      	str	r3, [sp, #20]
 802328a:	683b      	ldr	r3, [r7, #0]
 802328c:	9304      	str	r3, [sp, #16]
 802328e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8023292:	9303      	str	r3, [sp, #12]
 8023294:	687b      	ldr	r3, [r7, #4]
 8023296:	9302      	str	r3, [sp, #8]
 8023298:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802329c:	9301      	str	r3, [sp, #4]
 802329e:	9600      	str	r6, [sp, #0]
 80232a0:	462b      	mov	r3, r5
 80232a2:	f7ed faf7 	bl	8010894 <arm_fully_connected_s8>
 80232a6:	4603      	mov	r3, r0
 80232a8:	461a      	mov	r2, r3
 80232aa:	2300      	movs	r3, #0
 80232ac:	9303      	str	r3, [sp, #12]
 80232ae:	9202      	str	r2, [sp, #8]
 80232b0:	4b0f      	ldr	r3, [pc, #60]	; (80232f0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 80232b2:	9301      	str	r3, [sp, #4]
 80232b4:	4b0f      	ldr	r3, [pc, #60]	; (80232f4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 80232b6:	9300      	str	r3, [sp, #0]
 80232b8:	23a6      	movs	r3, #166	; 0xa6
 80232ba:	4a0f      	ldr	r2, [pc, #60]	; (80232f8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 80232bc:	490f      	ldr	r1, [pc, #60]	; (80232fc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 80232be:	6978      	ldr	r0, [r7, #20]
 80232c0:	47a0      	blx	r4
 80232c2:	2401      	movs	r4, #1
 80232c4:	e000      	b.n	80232c8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 80232c6:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80232c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80232cc:	4618      	mov	r0, r3
 80232ce:	f7fc fa78 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80232d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80232d6:	4618      	mov	r0, r3
 80232d8:	f7fc fa73 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80232dc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80232e0:	4618      	mov	r0, r3
 80232e2:	f7fc fa6e 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 80232e6:	4623      	mov	r3, r4
 80232e8:	4618      	mov	r0, r3
 80232ea:	37dc      	adds	r7, #220	; 0xdc
 80232ec:	46bd      	mov	sp, r7
 80232ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80232f0:	0802ef58 	.word	0x0802ef58
 80232f4:	0802ef6c 	.word	0x0802ef6c
 80232f8:	0802ed50 	.word	0x0802ed50
 80232fc:	0802ef3c 	.word	0x0802ef3c

08023300 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8023300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023302:	b0d3      	sub	sp, #332	; 0x14c
 8023304:	af06      	add	r7, sp, #24
 8023306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802330a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802330e:	6018      	str	r0, [r3, #0]
 8023310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8023314:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8023318:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 802331a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802331e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8023322:	681b      	ldr	r3, [r3, #0]
 8023324:	695b      	ldr	r3, [r3, #20]
 8023326:	2b00      	cmp	r3, #0
 8023328:	d101      	bne.n	802332e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 802332a:	f008 ff33 	bl	802c194 <abort>
  const auto* params =
 802332e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8023332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8023336:	681b      	ldr	r3, [r3, #0]
 8023338:	695b      	ldr	r3, [r3, #20]
 802333a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 802333e:	4bb0      	ldr	r3, [pc, #704]	; (8023600 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x300>)
 8023340:	681a      	ldr	r2, [r3, #0]
 8023342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8023346:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 802334a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802334e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8023352:	6809      	ldr	r1, [r1, #0]
 8023354:	6818      	ldr	r0, [r3, #0]
 8023356:	f7fc fcb9 	bl	801fccc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802335a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 802335e:	4ba9      	ldr	r3, [pc, #676]	; (8023604 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x304>)
 8023360:	681a      	ldr	r2, [r3, #0]
 8023362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8023366:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 802336a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802336e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8023372:	6809      	ldr	r1, [r1, #0]
 8023374:	6818      	ldr	r0, [r3, #0]
 8023376:	f7fc fca9 	bl	801fccc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802337a:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 802337e:	4ba2      	ldr	r3, [pc, #648]	; (8023608 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x308>)
 8023380:	681a      	ldr	r2, [r3, #0]
 8023382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8023386:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 802338a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802338e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8023392:	6809      	ldr	r1, [r1, #0]
 8023394:	6818      	ldr	r0, [r3, #0]
 8023396:	f7fc fc99 	bl	801fccc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802339a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 802339e:	4b9b      	ldr	r3, [pc, #620]	; (802360c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x30c>)
 80233a0:	681a      	ldr	r2, [r3, #0]
 80233a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80233a6:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 80233aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80233ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80233b2:	6809      	ldr	r1, [r1, #0]
 80233b4:	6818      	ldr	r0, [r3, #0]
 80233b6:	f7fc fc99 	bl	801fcec <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80233ba:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 80233be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80233c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80233c6:	681b      	ldr	r3, [r3, #0]
 80233c8:	691b      	ldr	r3, [r3, #16]
 80233ca:	2b00      	cmp	r3, #0
 80233cc:	d101      	bne.n	80233d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 80233ce:	f008 fee1 	bl	802c194 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 80233d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80233d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80233da:	681b      	ldr	r3, [r3, #0]
 80233dc:	691b      	ldr	r3, [r3, #16]
 80233de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 80233e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80233e6:	7a1b      	ldrb	r3, [r3, #8]
 80233e8:	2b09      	cmp	r3, #9
 80233ea:	d06d      	beq.n	80234c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
 80233ec:	2b09      	cmp	r3, #9
 80233ee:	f300 80e6 	bgt.w	80235be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2be>
 80233f2:	2b01      	cmp	r3, #1
 80233f4:	d003      	beq.n	80233fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
 80233f6:	2b03      	cmp	r3, #3
 80233f8:	f000 8081 	beq.w	80234fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
 80233fc:	e0df      	b.n	80235be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2be>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 80233fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8023402:	781a      	ldrb	r2, [r3, #0]
 8023404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8023408:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 802340c:	4611      	mov	r1, r2
 802340e:	4618      	mov	r0, r3
 8023410:	f000 f95e 	bl	80236d0 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 8023414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8023418:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 802341c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8023420:	4618      	mov	r0, r3
 8023422:	f000 f9d0 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8023426:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 802342a:	f7fd f92d 	bl	8020688 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 802342e:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 8023430:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8023434:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8023438:	4618      	mov	r0, r3
 802343a:	f000 f9c4 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 802343e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8023442:	f7fd f921 	bl	8020688 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8023446:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 8023448:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802344c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8023450:	4618      	mov	r0, r3
 8023452:	f000 f9b8 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8023456:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 802345a:	f7fd f915 	bl	8020688 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 802345e:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 8023460:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8023464:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8023468:	4618      	mov	r0, r3
 802346a:	f000 f9ac 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 802346e:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8023472:	f7fd f918 	bl	80206a6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8023476:	4603      	mov	r3, r0
 8023478:	f107 0248 	add.w	r2, r7, #72	; 0x48
 802347c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8023480:	f107 0008 	add.w	r0, r7, #8
 8023484:	9304      	str	r3, [sp, #16]
 8023486:	f107 0378 	add.w	r3, r7, #120	; 0x78
 802348a:	9303      	str	r3, [sp, #12]
 802348c:	9502      	str	r5, [sp, #8]
 802348e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8023492:	9301      	str	r3, [sp, #4]
 8023494:	9400      	str	r4, [sp, #0]
 8023496:	4613      	mov	r3, r2
 8023498:	4632      	mov	r2, r6
 802349a:	f7ff fb5a 	bl	8022b52 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 802349e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80234a2:	4618      	mov	r0, r3
 80234a4:	f7fc f98d 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 80234a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80234ac:	4618      	mov	r0, r3
 80234ae:	f7fc f988 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 80234b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80234b6:	4618      	mov	r0, r3
 80234b8:	f7fc f983 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 80234bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80234c0:	4618      	mov	r0, r3
 80234c2:	f7fc f97e 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 80234c6:	e095      	b.n	80235f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f4>
    }
    case kTfLiteInt8: {
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 80234c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80234cc:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 80234d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80234d4:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 80234d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80234dc:	9302      	str	r3, [sp, #8]
 80234de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80234e2:	9301      	str	r3, [sp, #4]
 80234e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80234e8:	9300      	str	r3, [sp, #0]
 80234ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80234ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80234f2:	6809      	ldr	r1, [r1, #0]
 80234f4:	6800      	ldr	r0, [r0, #0]
 80234f6:	f7ff fddd 	bl	80230b4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 80234fa:	4603      	mov	r3, r0
                               output);
 80234fc:	e07b      	b.n	80235f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f6>
    }
    case kTfLiteUInt8: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsQuantized(data.reference_op_data),
 80234fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8023502:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8023506:	4611      	mov	r1, r2
 8023508:	4618      	mov	r0, r3
 802350a:	f000 f8b7 	bl	802367c <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
 802350e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8023512:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8023516:	4618      	mov	r0, r3
 8023518:	f000 f955 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 802351c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8023520:	f7fd f93e 	bl	80207a0 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8023524:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<uint8_t>(input),
          tflite::micro::GetTensorShape(filter),
 8023526:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 802352a:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 802352e:	4618      	mov	r0, r3
 8023530:	f000 f949 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8023534:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8023538:	f7fd f932 	bl	80207a0 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 802353c:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<uint8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 802353e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8023542:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8023546:	4618      	mov	r0, r3
 8023548:	f000 f93d 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 802354c:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8023550:	f7fd fc1c 	bl	8020d8c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8023554:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<int32_t>(bias),
          tflite::micro::GetTensorShape(output),
 8023556:	f507 7380 	add.w	r3, r7, #256	; 0x100
 802355a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 802355e:	4618      	mov	r0, r3
 8023560:	f000 f931 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8023564:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8023568:	f7fd f929 	bl	80207be <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 802356c:	4603      	mov	r3, r0
 802356e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8023572:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8023576:	f107 0090 	add.w	r0, r7, #144	; 0x90
 802357a:	9304      	str	r3, [sp, #16]
 802357c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8023580:	9303      	str	r3, [sp, #12]
 8023582:	9502      	str	r5, [sp, #8]
 8023584:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8023588:	9301      	str	r3, [sp, #4]
 802358a:	9400      	str	r4, [sp, #0]
 802358c:	4613      	mov	r3, r2
 802358e:	4632      	mov	r2, r6
 8023590:	f7ff fb75 	bl	8022c7e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
          tflite::micro::GetTensorShape(output),
 8023594:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8023598:	4618      	mov	r0, r3
 802359a:	f7fc f912 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 802359e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80235a2:	4618      	mov	r0, r3
 80235a4:	f7fc f90d 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 80235a8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80235ac:	4618      	mov	r0, r3
 80235ae:	f7fc f908 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 80235b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80235b6:	4618      	mov	r0, r3
 80235b8:	f7fc f903 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
 80235bc:	e01a      	b.n	80235f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f4>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80235be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80235c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80235c6:	681b      	ldr	r3, [r3, #0]
 80235c8:	695c      	ldr	r4, [r3, #20]
 80235ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80235ce:	7a1b      	ldrb	r3, [r3, #8]
 80235d0:	4618      	mov	r0, r3
 80235d2:	f7fb f983 	bl	801e8dc <TfLiteTypeGetName>
 80235d6:	4602      	mov	r2, r0
 80235d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80235dc:	7a1b      	ldrb	r3, [r3, #8]
 80235de:	4619      	mov	r1, r3
 80235e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80235e4:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 80235e8:	460b      	mov	r3, r1
 80235ea:	4909      	ldr	r1, [pc, #36]	; (8023610 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x310>)
 80235ec:	6800      	ldr	r0, [r0, #0]
 80235ee:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80235f0:	2301      	movs	r3, #1
 80235f2:	e000      	b.n	80235f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f6>
    }
  }
  return kTfLiteOk;
 80235f4:	2300      	movs	r3, #0
}
 80235f6:	4618      	mov	r0, r3
 80235f8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80235fc:	46bd      	mov	sp, r7
 80235fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023600:	080309ec 	.word	0x080309ec
 8023604:	080309f0 	.word	0x080309f0
 8023608:	080309f4 	.word	0x080309f4
 802360c:	080309f8 	.word	0x080309f8
 8023610:	0802f090 	.word	0x0802f090

08023614 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 8023614:	b4b0      	push	{r4, r5, r7}
 8023616:	b083      	sub	sp, #12
 8023618:	af00      	add	r7, sp, #0
 802361a:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 802361c:	4b13      	ldr	r3, [pc, #76]	; (802366c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802361e:	4a14      	ldr	r2, [pc, #80]	; (8023670 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 8023620:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 8023622:	4b12      	ldr	r3, [pc, #72]	; (802366c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8023624:	2200      	movs	r2, #0
 8023626:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 8023628:	4b10      	ldr	r3, [pc, #64]	; (802366c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802362a:	4a12      	ldr	r2, [pc, #72]	; (8023674 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 802362c:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 802362e:	4b0f      	ldr	r3, [pc, #60]	; (802366c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8023630:	4a11      	ldr	r2, [pc, #68]	; (8023678 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 8023632:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 8023634:	4b0d      	ldr	r3, [pc, #52]	; (802366c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8023636:	2200      	movs	r2, #0
 8023638:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 802363a:	4b0c      	ldr	r3, [pc, #48]	; (802366c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802363c:	2200      	movs	r2, #0
 802363e:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 8023640:	4b0a      	ldr	r3, [pc, #40]	; (802366c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8023642:	2200      	movs	r2, #0
 8023644:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 8023646:	4b09      	ldr	r3, [pc, #36]	; (802366c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8023648:	2200      	movs	r2, #0
 802364a:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 802364c:	687b      	ldr	r3, [r7, #4]
 802364e:	4a07      	ldr	r2, [pc, #28]	; (802366c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8023650:	461c      	mov	r4, r3
 8023652:	4615      	mov	r5, r2
 8023654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023658:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802365c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8023660:	6878      	ldr	r0, [r7, #4]
 8023662:	370c      	adds	r7, #12
 8023664:	46bd      	mov	sp, r7
 8023666:	bcb0      	pop	{r4, r5, r7}
 8023668:	4770      	bx	lr
 802366a:	bf00      	nop
 802366c:	20006990 	.word	0x20006990
 8023670:	08022e1d 	.word	0x08022e1d
 8023674:	08022e49 	.word	0x08022e49
 8023678:	08023301 	.word	0x08023301

0802367c <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedWeightsTensor = 1;
const int kFullyConnectedBiasTensor = 2;
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
 802367c:	b480      	push	{r7}
 802367e:	b083      	sub	sp, #12
 8023680:	af00      	add	r7, sp, #0
 8023682:	6078      	str	r0, [r7, #4]
 8023684:	6039      	str	r1, [r7, #0]
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
 8023686:	683b      	ldr	r3, [r7, #0]
 8023688:	695b      	ldr	r3, [r3, #20]
 802368a:	425a      	negs	r2, r3
 802368c:	687b      	ldr	r3, [r7, #4]
 802368e:	601a      	str	r2, [r3, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
 8023690:	683b      	ldr	r3, [r7, #0]
 8023692:	699b      	ldr	r3, [r3, #24]
 8023694:	425a      	negs	r2, r3
 8023696:	687b      	ldr	r3, [r7, #4]
 8023698:	605a      	str	r2, [r3, #4]
  op_params.output_offset = op_data.output_zero_point;
 802369a:	683b      	ldr	r3, [r7, #0]
 802369c:	69da      	ldr	r2, [r3, #28]
 802369e:	687b      	ldr	r3, [r7, #4]
 80236a0:	609a      	str	r2, [r3, #8]
  op_params.output_multiplier = op_data.output_multiplier;
 80236a2:	683b      	ldr	r3, [r7, #0]
 80236a4:	681a      	ldr	r2, [r3, #0]
 80236a6:	687b      	ldr	r3, [r7, #4]
 80236a8:	60da      	str	r2, [r3, #12]
  op_params.output_shift = op_data.output_shift;
 80236aa:	683b      	ldr	r3, [r7, #0]
 80236ac:	685a      	ldr	r2, [r3, #4]
 80236ae:	687b      	ldr	r3, [r7, #4]
 80236b0:	611a      	str	r2, [r3, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
 80236b2:	683b      	ldr	r3, [r7, #0]
 80236b4:	689a      	ldr	r2, [r3, #8]
 80236b6:	687b      	ldr	r3, [r7, #4]
 80236b8:	615a      	str	r2, [r3, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
 80236ba:	683b      	ldr	r3, [r7, #0]
 80236bc:	68da      	ldr	r2, [r3, #12]
 80236be:	687b      	ldr	r3, [r7, #4]
 80236c0:	619a      	str	r2, [r3, #24]
  return op_params;
 80236c2:	bf00      	nop
}
 80236c4:	6878      	ldr	r0, [r7, #4]
 80236c6:	370c      	adds	r7, #12
 80236c8:	46bd      	mov	sp, r7
 80236ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236ce:	4770      	bx	lr

080236d0 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 80236d0:	b580      	push	{r7, lr}
 80236d2:	b082      	sub	sp, #8
 80236d4:	af00      	add	r7, sp, #0
 80236d6:	6078      	str	r0, [r7, #4]
 80236d8:	460b      	mov	r3, r1
 80236da:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 80236dc:	687b      	ldr	r3, [r7, #4]
 80236de:	f103 0220 	add.w	r2, r3, #32
 80236e2:	687b      	ldr	r3, [r7, #4]
 80236e4:	f103 011c 	add.w	r1, r3, #28
 80236e8:	78fb      	ldrb	r3, [r7, #3]
 80236ea:	4618      	mov	r0, r3
 80236ec:	f7fd faf2 	bl	8020cd4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 80236f0:	bf00      	nop
}
 80236f2:	6878      	ldr	r0, [r7, #4]
 80236f4:	3708      	adds	r7, #8
 80236f6:	46bd      	mov	sp, r7
 80236f8:	bd80      	pop	{r7, pc}

080236fa <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 80236fa:	b580      	push	{r7, lr}
 80236fc:	b08a      	sub	sp, #40	; 0x28
 80236fe:	af02      	add	r7, sp, #8
 8023700:	60f8      	str	r0, [r7, #12]
 8023702:	607b      	str	r3, [r7, #4]
 8023704:	460b      	mov	r3, r1
 8023706:	72fb      	strb	r3, [r7, #11]
 8023708:	4613      	mov	r3, r2
 802370a:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 802370c:	7abb      	ldrb	r3, [r7, #10]
 802370e:	2b01      	cmp	r3, #1
 8023710:	d03e      	beq.n	8023790 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 8023712:	f04f 0200 	mov.w	r2, #0
 8023716:	f04f 0300 	mov.w	r3, #0
 802371a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 802371e:	f107 0310 	add.w	r3, r7, #16
 8023722:	9301      	str	r3, [sp, #4]
 8023724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023726:	9300      	str	r3, [sp, #0]
 8023728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802372a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802372c:	6879      	ldr	r1, [r7, #4]
 802372e:	68f8      	ldr	r0, [r7, #12]
 8023730:	f7fb fe0a 	bl	801f348 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8023734:	4603      	mov	r3, r0
 8023736:	77fb      	strb	r3, [r7, #31]
 8023738:	7ffb      	ldrb	r3, [r7, #31]
 802373a:	2b00      	cmp	r3, #0
 802373c:	d001      	beq.n	8023742 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 802373e:	7ffb      	ldrb	r3, [r7, #31]
 8023740:	e027      	b.n	8023792 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 8023742:	ed97 7b04 	vldr	d7, [r7, #16]
 8023746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802374a:	3304      	adds	r3, #4
 802374c:	4619      	mov	r1, r3
 802374e:	4610      	mov	r0, r2
 8023750:	eeb0 0a47 	vmov.f32	s0, s14
 8023754:	eef0 0a67 	vmov.f32	s1, s15
 8023758:	f7fb f946 	bl	801e9e8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 802375c:	687b      	ldr	r3, [r7, #4]
 802375e:	691a      	ldr	r2, [r3, #16]
 8023760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023762:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 8023764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023766:	691a      	ldr	r2, [r3, #16]
 8023768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802376a:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 802376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802376e:	691a      	ldr	r2, [r3, #16]
 8023770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023772:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 8023774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023776:	f103 0208 	add.w	r2, r3, #8
 802377a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802377c:	330c      	adds	r3, #12
 802377e:	7af9      	ldrb	r1, [r7, #11]
 8023780:	9300      	str	r3, [sp, #0]
 8023782:	4613      	mov	r3, r2
 8023784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023786:	68f8      	ldr	r0, [r7, #12]
 8023788:	f7fb ff6a 	bl	801f660 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 802378c:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 802378e:	e000      	b.n	8023792 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 8023790:	2300      	movs	r3, #0
}
 8023792:	4618      	mov	r0, r3
 8023794:	3720      	adds	r7, #32
 8023796:	46bd      	mov	sp, r7
 8023798:	bd80      	pop	{r7, pc}

0802379a <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 802379a:	b480      	push	{r7}
 802379c:	b083      	sub	sp, #12
 802379e:	af00      	add	r7, sp, #0
 80237a0:	6078      	str	r0, [r7, #4]
 80237a2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80237a4:	687b      	ldr	r3, [r7, #4]
 80237a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80237aa:	683b      	ldr	r3, [r7, #0]
 80237ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80237b0:	429a      	cmp	r2, r3
 80237b2:	da01      	bge.n	80237b8 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 80237b4:	683b      	ldr	r3, [r7, #0]
 80237b6:	e000      	b.n	80237ba <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 80237b8:	687b      	ldr	r3, [r7, #4]
    }
 80237ba:	4618      	mov	r0, r3
 80237bc:	370c      	adds	r7, #12
 80237be:	46bd      	mov	sp, r7
 80237c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237c4:	4770      	bx	lr

080237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 80237c6:	b580      	push	{r7, lr}
 80237c8:	b086      	sub	sp, #24
 80237ca:	af00      	add	r7, sp, #0
 80237cc:	6078      	str	r0, [r7, #4]
 80237ce:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 80237d0:	683b      	ldr	r3, [r7, #0]
 80237d2:	2b00      	cmp	r3, #0
 80237d4:	d003      	beq.n	80237de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 80237d6:	683b      	ldr	r3, [r7, #0]
 80237d8:	685b      	ldr	r3, [r3, #4]
 80237da:	2b00      	cmp	r3, #0
 80237dc:	d103      	bne.n	80237e6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 80237de:	6878      	ldr	r0, [r7, #4]
 80237e0:	f7fb ffce 	bl	801f780 <_ZN6tflite12RuntimeShapeC1Ev>
 80237e4:	e00d      	b.n	8023802 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 80237e6:	683b      	ldr	r3, [r7, #0]
 80237e8:	685b      	ldr	r3, [r3, #4]
 80237ea:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 80237ec:	697b      	ldr	r3, [r7, #20]
 80237ee:	681b      	ldr	r3, [r3, #0]
 80237f0:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 80237f2:	697b      	ldr	r3, [r7, #20]
 80237f4:	3304      	adds	r3, #4
 80237f6:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 80237f8:	68fa      	ldr	r2, [r7, #12]
 80237fa:	6939      	ldr	r1, [r7, #16]
 80237fc:	6878      	ldr	r0, [r7, #4]
 80237fe:	f7fb ffcd 	bl	801f79c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8023802:	6878      	ldr	r0, [r7, #4]
 8023804:	3718      	adds	r7, #24
 8023806:	46bd      	mov	sp, r7
 8023808:	bd80      	pop	{r7, pc}

0802380a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
 802380a:	b480      	push	{r7}
 802380c:	b083      	sub	sp, #12
 802380e:	af00      	add	r7, sp, #0
 8023810:	4603      	mov	r3, r0
 8023812:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 8023814:	79fb      	ldrb	r3, [r7, #7]
 8023816:	2b01      	cmp	r3, #1
 8023818:	d002      	beq.n	8023820 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x16>
 802381a:	2b02      	cmp	r3, #2
 802381c:	d002      	beq.n	8023824 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1a>
 802381e:	e003      	b.n	8023828 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 8023820:	2301      	movs	r3, #1
 8023822:	e002      	b.n	802382a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 8023824:	2302      	movs	r3, #2
 8023826:	e000      	b.n	802382a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 8023828:	2300      	movs	r3, #0
  }
}
 802382a:	4618      	mov	r0, r3
 802382c:	370c      	adds	r7, #12
 802382e:	46bd      	mov	sp, r7
 8023830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023834:	4770      	bx	lr

08023836 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8023836:	b480      	push	{r7}
 8023838:	b083      	sub	sp, #12
 802383a:	af00      	add	r7, sp, #0
 802383c:	6078      	str	r0, [r7, #4]
 802383e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8023840:	683b      	ldr	r3, [r7, #0]
 8023842:	681a      	ldr	r2, [r3, #0]
 8023844:	687b      	ldr	r3, [r7, #4]
 8023846:	681b      	ldr	r3, [r3, #0]
 8023848:	429a      	cmp	r2, r3
 802384a:	da01      	bge.n	8023850 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 802384c:	683b      	ldr	r3, [r7, #0]
 802384e:	e000      	b.n	8023852 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8023850:	687b      	ldr	r3, [r7, #4]
    }
 8023852:	4618      	mov	r0, r3
 8023854:	370c      	adds	r7, #12
 8023856:	46bd      	mov	sp, r7
 8023858:	f85d 7b04 	ldr.w	r7, [sp], #4
 802385c:	4770      	bx	lr

0802385e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 802385e:	b590      	push	{r4, r7, lr}
 8023860:	b087      	sub	sp, #28
 8023862:	af00      	add	r7, sp, #0
 8023864:	60f8      	str	r0, [r7, #12]
 8023866:	60b9      	str	r1, [r7, #8]
 8023868:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 802386a:	68f8      	ldr	r0, [r7, #12]
 802386c:	f7fb ffbf 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8023870:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8023872:	2300      	movs	r3, #0
 8023874:	617b      	str	r3, [r7, #20]
 8023876:	697a      	ldr	r2, [r7, #20]
 8023878:	693b      	ldr	r3, [r7, #16]
 802387a:	429a      	cmp	r2, r3
 802387c:	da15      	bge.n	80238aa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 802387e:	697a      	ldr	r2, [r7, #20]
 8023880:	68bb      	ldr	r3, [r7, #8]
 8023882:	429a      	cmp	r2, r3
 8023884:	d00d      	beq.n	80238a2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8023886:	6979      	ldr	r1, [r7, #20]
 8023888:	68f8      	ldr	r0, [r7, #12]
 802388a:	f7fc f94b 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 802388e:	4604      	mov	r4, r0
 8023890:	6979      	ldr	r1, [r7, #20]
 8023892:	6878      	ldr	r0, [r7, #4]
 8023894:	f7fc f946 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8023898:	4603      	mov	r3, r0
 802389a:	429c      	cmp	r4, r3
 802389c:	d001      	beq.n	80238a2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 802389e:	f008 fc79 	bl	802c194 <abort>
  for (int i = 0; i < dims_count; ++i) {
 80238a2:	697b      	ldr	r3, [r7, #20]
 80238a4:	3301      	adds	r3, #1
 80238a6:	617b      	str	r3, [r7, #20]
 80238a8:	e7e5      	b.n	8023876 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 80238aa:	68b9      	ldr	r1, [r7, #8]
 80238ac:	68f8      	ldr	r0, [r7, #12]
 80238ae:	f7ff f91a 	bl	8022ae6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 80238b2:	4603      	mov	r3, r0
}
 80238b4:	4618      	mov	r0, r3
 80238b6:	371c      	adds	r7, #28
 80238b8:	46bd      	mov	sp, r7
 80238ba:	bd90      	pop	{r4, r7, pc}

080238bc <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 80238bc:	b580      	push	{r7, lr}
 80238be:	b082      	sub	sp, #8
 80238c0:	af00      	add	r7, sp, #0
 80238c2:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 80238c4:	2100      	movs	r1, #0
 80238c6:	6878      	ldr	r0, [r7, #4]
 80238c8:	f7fc fd26 	bl	8020318 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80238cc:	4603      	mov	r3, r0
}
 80238ce:	4618      	mov	r0, r3
 80238d0:	3708      	adds	r7, #8
 80238d2:	46bd      	mov	sp, r7
 80238d4:	bd80      	pop	{r7, pc}

080238d6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80238d6:	b580      	push	{r7, lr}
 80238d8:	b082      	sub	sp, #8
 80238da:	af00      	add	r7, sp, #0
 80238dc:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80238de:	6878      	ldr	r0, [r7, #4]
 80238e0:	f000 f805 	bl	80238ee <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 80238e4:	4603      	mov	r3, r0
}
 80238e6:	4618      	mov	r0, r3
 80238e8:	3708      	adds	r7, #8
 80238ea:	46bd      	mov	sp, r7
 80238ec:	bd80      	pop	{r7, pc}

080238ee <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80238ee:	b580      	push	{r7, lr}
 80238f0:	b082      	sub	sp, #8
 80238f2:	af00      	add	r7, sp, #0
 80238f4:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80238f6:	2101      	movs	r1, #1
 80238f8:	6878      	ldr	r0, [r7, #4]
 80238fa:	f7fc fd0d 	bl	8020318 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80238fe:	4603      	mov	r3, r0
  }
 8023900:	4618      	mov	r0, r3
 8023902:	3708      	adds	r7, #8
 8023904:	46bd      	mov	sp, r7
 8023906:	bd80      	pop	{r7, pc}

08023908 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8023908:	b590      	push	{r4, r7, lr}
 802390a:	b085      	sub	sp, #20
 802390c:	af00      	add	r7, sp, #0
 802390e:	60f8      	str	r0, [r7, #12]
 8023910:	60b9      	str	r1, [r7, #8]
 8023912:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8023914:	f107 0308 	add.w	r3, r7, #8
 8023918:	4618      	mov	r0, r3
 802391a:	f7fe fe55 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802391e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8023920:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8023922:	1d3b      	adds	r3, r7, #4
 8023924:	4618      	mov	r0, r3
 8023926:	f7fe fe4f 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802392a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 802392c:	681b      	ldr	r3, [r3, #0]
 802392e:	461a      	mov	r2, r3
 8023930:	4621      	mov	r1, r4
 8023932:	68f8      	ldr	r0, [r7, #12]
 8023934:	f7ff f8ac 	bl	8022a90 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8023938:	4603      	mov	r3, r0
 802393a:	4618      	mov	r0, r3
 802393c:	f7fe fdd3 	bl	80224e6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8023940:	4603      	mov	r3, r0
}
 8023942:	4618      	mov	r0, r3
 8023944:	3714      	adds	r7, #20
 8023946:	46bd      	mov	sp, r7
 8023948:	bd90      	pop	{r4, r7, pc}

0802394a <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 802394a:	b580      	push	{r7, lr}
 802394c:	b082      	sub	sp, #8
 802394e:	af00      	add	r7, sp, #0
 8023950:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 8023952:	687b      	ldr	r3, [r7, #4]
 8023954:	2b00      	cmp	r3, #0
 8023956:	bf0c      	ite	eq
 8023958:	2301      	moveq	r3, #1
 802395a:	2300      	movne	r3, #0
 802395c:	b2db      	uxtb	r3, r3
 802395e:	4618      	mov	r0, r3
 8023960:	f7fd f8fc 	bl	8020b5c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8023964:	4603      	mov	r3, r0
}
 8023966:	4618      	mov	r0, r3
 8023968:	3708      	adds	r7, #8
 802396a:	46bd      	mov	sp, r7
 802396c:	bd80      	pop	{r7, pc}
	...

08023970 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8023970:	b580      	push	{r7, lr}
 8023972:	b08a      	sub	sp, #40	; 0x28
 8023974:	af00      	add	r7, sp, #0
 8023976:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 8023978:	482c      	ldr	r0, [pc, #176]	; (8023a2c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 802397a:	f7ff ff9f 	bl	80238bc <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802397e:	4603      	mov	r3, r0
 8023980:	4618      	mov	r0, r3
 8023982:	f7fe fe2c 	bl	80225de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8023986:	4603      	mov	r3, r0
 8023988:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 802398a:	4829      	ldr	r0, [pc, #164]	; (8023a30 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 802398c:	f7ff ff96 	bl	80238bc <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8023990:	4603      	mov	r3, r0
 8023992:	4618      	mov	r0, r3
 8023994:	f7fe fe23 	bl	80225de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8023998:	4603      	mov	r3, r0
 802399a:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 802399c:	f000 f86c 	bl	8023a78 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 80239a0:	4603      	mov	r3, r0
 80239a2:	4619      	mov	r1, r3
 80239a4:	6878      	ldr	r0, [r7, #4]
 80239a6:	f000 f870 	bl	8023a8a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80239aa:	4603      	mov	r3, r0
 80239ac:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 80239ae:	69f9      	ldr	r1, [r7, #28]
 80239b0:	69f8      	ldr	r0, [r7, #28]
 80239b2:	f000 f83f 	bl	8023a34 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80239b6:	4603      	mov	r3, r0
 80239b8:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 80239ba:	69f9      	ldr	r1, [r7, #28]
 80239bc:	69b8      	ldr	r0, [r7, #24]
 80239be:	f000 f839 	bl	8023a34 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80239c2:	4603      	mov	r3, r0
 80239c4:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 80239c6:	69b9      	ldr	r1, [r7, #24]
 80239c8:	69b8      	ldr	r0, [r7, #24]
 80239ca:	f000 f833 	bl	8023a34 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80239ce:	4603      	mov	r3, r0
 80239d0:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 80239d2:	6938      	ldr	r0, [r7, #16]
 80239d4:	f000 f877 	bl	8023ac6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 80239d8:	4603      	mov	r3, r0
 80239da:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 80239dc:	6979      	ldr	r1, [r7, #20]
 80239de:	68f8      	ldr	r0, [r7, #12]
 80239e0:	f000 f853 	bl	8023a8a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80239e4:	4603      	mov	r3, r0
 80239e6:	6a39      	ldr	r1, [r7, #32]
 80239e8:	4618      	mov	r0, r3
 80239ea:	f000 f823 	bl	8023a34 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80239ee:	4603      	mov	r3, r0
 80239f0:	69b9      	ldr	r1, [r7, #24]
 80239f2:	4618      	mov	r0, r3
 80239f4:	f000 f849 	bl	8023a8a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80239f8:	4603      	mov	r3, r0
 80239fa:	4618      	mov	r0, r3
 80239fc:	f000 f879 	bl	8023af2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8023a00:	4603      	mov	r3, r0
 8023a02:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8023a04:	68b9      	ldr	r1, [r7, #8]
 8023a06:	69f8      	ldr	r0, [r7, #28]
 8023a08:	f000 f83f 	bl	8023a8a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8023a0c:	4603      	mov	r3, r0
 8023a0e:	4619      	mov	r1, r3
 8023a10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023a12:	f000 f80f 	bl	8023a34 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8023a16:	4603      	mov	r3, r0
 8023a18:	4619      	mov	r1, r3
 8023a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023a1c:	f000 f87f 	bl	8023b1e <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8023a20:	4603      	mov	r3, r0
}
 8023a22:	4618      	mov	r0, r3
 8023a24:	3728      	adds	r7, #40	; 0x28
 8023a26:	46bd      	mov	sp, r7
 8023a28:	bd80      	pop	{r7, pc}
 8023a2a:	bf00      	nop
 8023a2c:	70f5a894 	.word	0x70f5a894
 8023a30:	2aaaaaab 	.word	0x2aaaaaab

08023a34 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8023a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a36:	b085      	sub	sp, #20
 8023a38:	af00      	add	r7, sp, #0
 8023a3a:	6078      	str	r0, [r7, #4]
 8023a3c:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8023a3e:	1d3b      	adds	r3, r7, #4
 8023a40:	4618      	mov	r0, r3
 8023a42:	f7fe fdc1 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8023a46:	4603      	mov	r3, r0
 8023a48:	681d      	ldr	r5, [r3, #0]
 8023a4a:	463b      	mov	r3, r7
 8023a4c:	4618      	mov	r0, r3
 8023a4e:	f7fe fdbb 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8023a52:	4603      	mov	r3, r0
 8023a54:	681e      	ldr	r6, [r3, #0]
 8023a56:	f107 030c 	add.w	r3, r7, #12
 8023a5a:	4618      	mov	r0, r3
 8023a5c:	f7fe fdb4 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8023a60:	4604      	mov	r4, r0
 8023a62:	4631      	mov	r1, r6
 8023a64:	4628      	mov	r0, r5
 8023a66:	f7fb ffe7 	bl	801fa38 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8023a6a:	4603      	mov	r3, r0
 8023a6c:	6023      	str	r3, [r4, #0]
  return c;
 8023a6e:	68fb      	ldr	r3, [r7, #12]
}
 8023a70:	4618      	mov	r0, r3
 8023a72:	3714      	adds	r7, #20
 8023a74:	46bd      	mov	sp, r7
 8023a76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023a78 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 8023a78:	b580      	push	{r7, lr}
 8023a7a:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8023a7c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8023a80:	f7fe fdad 	bl	80225de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8023a84:	4603      	mov	r3, r0
  }
 8023a86:	4618      	mov	r0, r3
 8023a88:	bd80      	pop	{r7, pc}

08023a8a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8023a8a:	b590      	push	{r4, r7, lr}
 8023a8c:	b083      	sub	sp, #12
 8023a8e:	af00      	add	r7, sp, #0
 8023a90:	6078      	str	r0, [r7, #4]
 8023a92:	6039      	str	r1, [r7, #0]
 8023a94:	1d3b      	adds	r3, r7, #4
 8023a96:	4618      	mov	r0, r3
 8023a98:	f7fe fd96 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8023a9c:	4603      	mov	r3, r0
 8023a9e:	681c      	ldr	r4, [r3, #0]
 8023aa0:	463b      	mov	r3, r7
 8023aa2:	4618      	mov	r0, r3
 8023aa4:	f7fe fd90 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8023aa8:	4603      	mov	r3, r0
 8023aaa:	681b      	ldr	r3, [r3, #0]
 8023aac:	4619      	mov	r1, r3
 8023aae:	4620      	mov	r0, r4
 8023ab0:	f7fd f832 	bl	8020b18 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8023ab4:	4603      	mov	r3, r0
 8023ab6:	4618      	mov	r0, r3
 8023ab8:	f7fe fd15 	bl	80224e6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8023abc:	4603      	mov	r3, r0
 8023abe:	4618      	mov	r0, r3
 8023ac0:	370c      	adds	r7, #12
 8023ac2:	46bd      	mov	sp, r7
 8023ac4:	bd90      	pop	{r4, r7, pc}

08023ac6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8023ac6:	b580      	push	{r7, lr}
 8023ac8:	b082      	sub	sp, #8
 8023aca:	af00      	add	r7, sp, #0
 8023acc:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8023ace:	1d3b      	adds	r3, r7, #4
 8023ad0:	4618      	mov	r0, r3
 8023ad2:	f7fe fd79 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8023ad6:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8023ad8:	681b      	ldr	r3, [r3, #0]
 8023ada:	4618      	mov	r0, r3
 8023adc:	f000 f83d 	bl	8023b5a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 8023ae0:	4603      	mov	r3, r0
 8023ae2:	4618      	mov	r0, r3
 8023ae4:	f7fe fcff 	bl	80224e6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8023ae8:	4603      	mov	r3, r0
}
 8023aea:	4618      	mov	r0, r3
 8023aec:	3708      	adds	r7, #8
 8023aee:	46bd      	mov	sp, r7
 8023af0:	bd80      	pop	{r7, pc}

08023af2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8023af2:	b580      	push	{r7, lr}
 8023af4:	b082      	sub	sp, #8
 8023af6:	af00      	add	r7, sp, #0
 8023af8:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8023afa:	1d3b      	adds	r3, r7, #4
 8023afc:	4618      	mov	r0, r3
 8023afe:	f7fe fd63 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8023b02:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8023b04:	681b      	ldr	r3, [r3, #0]
 8023b06:	4618      	mov	r0, r3
 8023b08:	f7ff fee5 	bl	80238d6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 8023b0c:	4603      	mov	r3, r0
 8023b0e:	4618      	mov	r0, r3
 8023b10:	f7fe fce9 	bl	80224e6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8023b14:	4603      	mov	r3, r0
}
 8023b16:	4618      	mov	r0, r3
 8023b18:	3708      	adds	r7, #8
 8023b1a:	46bd      	mov	sp, r7
 8023b1c:	bd80      	pop	{r7, pc}

08023b1e <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 8023b1e:	b590      	push	{r4, r7, lr}
 8023b20:	b083      	sub	sp, #12
 8023b22:	af00      	add	r7, sp, #0
 8023b24:	6078      	str	r0, [r7, #4]
 8023b26:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8023b28:	1d3b      	adds	r3, r7, #4
 8023b2a:	4618      	mov	r0, r3
 8023b2c:	f7fe fd4c 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8023b30:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8023b32:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8023b34:	463b      	mov	r3, r7
 8023b36:	4618      	mov	r0, r3
 8023b38:	f7fe fd46 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8023b3c:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8023b3e:	681b      	ldr	r3, [r3, #0]
 8023b40:	4619      	mov	r1, r3
 8023b42:	4620      	mov	r0, r4
 8023b44:	f000 f815 	bl	8023b72 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 8023b48:	4603      	mov	r3, r0
 8023b4a:	4618      	mov	r0, r3
 8023b4c:	f7fe fccb 	bl	80224e6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8023b50:	4603      	mov	r3, r0
}
 8023b52:	4618      	mov	r0, r3
 8023b54:	370c      	adds	r7, #12
 8023b56:	46bd      	mov	sp, r7
 8023b58:	bd90      	pop	{r4, r7, pc}

08023b5a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8023b5a:	b580      	push	{r7, lr}
 8023b5c:	b082      	sub	sp, #8
 8023b5e:	af00      	add	r7, sp, #0
 8023b60:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8023b62:	6878      	ldr	r0, [r7, #4]
 8023b64:	f000 f813 	bl	8023b8e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 8023b68:	4603      	mov	r3, r0
}
 8023b6a:	4618      	mov	r0, r3
 8023b6c:	3708      	adds	r7, #8
 8023b6e:	46bd      	mov	sp, r7
 8023b70:	bd80      	pop	{r7, pc}

08023b72 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 8023b72:	b580      	push	{r7, lr}
 8023b74:	b082      	sub	sp, #8
 8023b76:	af00      	add	r7, sp, #0
 8023b78:	6078      	str	r0, [r7, #4]
 8023b7a:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 8023b7c:	6839      	ldr	r1, [r7, #0]
 8023b7e:	6878      	ldr	r0, [r7, #4]
 8023b80:	f000 f812 	bl	8023ba8 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 8023b84:	4603      	mov	r3, r0
}
 8023b86:	4618      	mov	r0, r3
 8023b88:	3708      	adds	r7, #8
 8023b8a:	46bd      	mov	sp, r7
 8023b8c:	bd80      	pop	{r7, pc}

08023b8e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8023b8e:	b580      	push	{r7, lr}
 8023b90:	b082      	sub	sp, #8
 8023b92:	af00      	add	r7, sp, #0
 8023b94:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8023b96:	2102      	movs	r1, #2
 8023b98:	6878      	ldr	r0, [r7, #4]
 8023b9a:	f7fc fbbd 	bl	8020318 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8023b9e:	4603      	mov	r3, r0
  }
 8023ba0:	4618      	mov	r0, r3
 8023ba2:	3708      	adds	r7, #8
 8023ba4:	46bd      	mov	sp, r7
 8023ba6:	bd80      	pop	{r7, pc}

08023ba8 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 8023ba8:	b580      	push	{r7, lr}
 8023baa:	b082      	sub	sp, #8
 8023bac:	af00      	add	r7, sp, #0
 8023bae:	6078      	str	r0, [r7, #4]
 8023bb0:	6039      	str	r1, [r7, #0]
 8023bb2:	6839      	ldr	r1, [r7, #0]
 8023bb4:	6878      	ldr	r0, [r7, #4]
 8023bb6:	f7fc ffaf 	bl	8020b18 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8023bba:	4603      	mov	r3, r0
 8023bbc:	4618      	mov	r0, r3
 8023bbe:	3708      	adds	r7, #8
 8023bc0:	46bd      	mov	sp, r7
 8023bc2:	bd80      	pop	{r7, pc}

08023bc4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
 8023bc4:	b590      	push	{r4, r7, lr}
 8023bc6:	ed2d 8b02 	vpush	{d8}
 8023bca:	b0a7      	sub	sp, #156	; 0x9c
 8023bcc:	af02      	add	r7, sp, #8
 8023bce:	60f8      	str	r0, [r7, #12]
 8023bd0:	60b9      	str	r1, [r7, #8]
 8023bd2:	607a      	str	r2, [r7, #4]
 8023bd4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8023bd6:	68b8      	ldr	r0, [r7, #8]
 8023bd8:	f7fb fe09 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8023bdc:	4603      	mov	r3, r0
 8023bde:	2b04      	cmp	r3, #4
 8023be0:	d001      	beq.n	8023be6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 8023be2:	f008 fad7 	bl	802c194 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8023be6:	6838      	ldr	r0, [r7, #0]
 8023be8:	f7fb fe01 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8023bec:	4603      	mov	r3, r0
 8023bee:	2b04      	cmp	r3, #4
 8023bf0:	d001      	beq.n	8023bf6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 8023bf2:	f008 facf 	bl	802c194 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8023bf6:	2300      	movs	r3, #0
 8023bf8:	683a      	ldr	r2, [r7, #0]
 8023bfa:	2100      	movs	r1, #0
 8023bfc:	68b8      	ldr	r0, [r7, #8]
 8023bfe:	f7fd f8d4 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8023c02:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8023c04:	2303      	movs	r3, #3
 8023c06:	683a      	ldr	r2, [r7, #0]
 8023c08:	2103      	movs	r1, #3
 8023c0a:	68b8      	ldr	r0, [r7, #8]
 8023c0c:	f7fd f8cd 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8023c10:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8023c12:	2101      	movs	r1, #1
 8023c14:	68b8      	ldr	r0, [r7, #8]
 8023c16:	f7fb ff85 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8023c1a:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8023c1c:	2102      	movs	r1, #2
 8023c1e:	68b8      	ldr	r0, [r7, #8]
 8023c20:	f7fb ff80 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8023c24:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8023c26:	2101      	movs	r1, #1
 8023c28:	6838      	ldr	r0, [r7, #0]
 8023c2a:	f7fb ff7b 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8023c2e:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8023c30:	2102      	movs	r1, #2
 8023c32:	6838      	ldr	r0, [r7, #0]
 8023c34:	f7fb ff76 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8023c38:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 8023c3a:	68fb      	ldr	r3, [r7, #12]
 8023c3c:	68db      	ldr	r3, [r3, #12]
 8023c3e:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8023c40:	68fb      	ldr	r3, [r7, #12]
 8023c42:	691b      	ldr	r3, [r3, #16]
 8023c44:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8023c46:	2300      	movs	r3, #0
 8023c48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8023c4c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8023c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8023c52:	429a      	cmp	r2, r3
 8023c54:	f280 80f0 	bge.w	8023e38 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x274>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8023c58:	2300      	movs	r3, #0
 8023c5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8023c5e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8023c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8023c64:	429a      	cmp	r2, r3
 8023c66:	f280 80e1 	bge.w	8023e2c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x268>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8023c6a:	2300      	movs	r3, #0
 8023c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8023c70:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8023c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8023c76:	429a      	cmp	r2, r3
 8023c78:	f280 80d2 	bge.w	8023e20 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x25c>
        for (int channel = 0; channel < depth; ++channel) {
 8023c7c:	2300      	movs	r3, #0
 8023c7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8023c82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8023c86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8023c88:	429a      	cmp	r2, r3
 8023c8a:	f280 80c3 	bge.w	8023e14 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x250>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8023c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8023c92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8023c94:	fb02 f303 	mul.w	r3, r2, r3
 8023c98:	68fa      	ldr	r2, [r7, #12]
 8023c9a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8023c9e:	1a9b      	subs	r3, r3, r2
 8023ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8023ca2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8023ca6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8023ca8:	fb02 f303 	mul.w	r3, r2, r3
 8023cac:	68fa      	ldr	r2, [r7, #12]
 8023cae:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8023cb2:	1a9b      	subs	r3, r3, r2
 8023cb4:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8023cb6:	2300      	movs	r3, #0
 8023cb8:	617b      	str	r3, [r7, #20]
 8023cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023cbc:	425b      	negs	r3, r3
 8023cbe:	61bb      	str	r3, [r7, #24]
 8023cc0:	f107 0218 	add.w	r2, r7, #24
 8023cc4:	f107 0314 	add.w	r3, r7, #20
 8023cc8:	4611      	mov	r1, r2
 8023cca:	4618      	mov	r0, r3
 8023ccc:	f7fb fd1c 	bl	801f708 <_ZSt3maxIiERKT_S2_S2_>
 8023cd0:	4603      	mov	r3, r0
 8023cd2:	681b      	ldr	r3, [r3, #0]
 8023cd4:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8023cd6:	68fb      	ldr	r3, [r7, #12]
 8023cd8:	f103 0018 	add.w	r0, r3, #24
 8023cdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8023cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023ce0:	1ad3      	subs	r3, r2, r3
 8023ce2:	61fb      	str	r3, [r7, #28]
 8023ce4:	f107 031c 	add.w	r3, r7, #28
 8023ce8:	4619      	mov	r1, r3
 8023cea:	f7ff fda4 	bl	8023836 <_ZSt3minIiERKT_S2_S2_>
 8023cee:	4603      	mov	r3, r0
 8023cf0:	681b      	ldr	r3, [r3, #0]
 8023cf2:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8023cf4:	2300      	movs	r3, #0
 8023cf6:	623b      	str	r3, [r7, #32]
 8023cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023cfa:	425b      	negs	r3, r3
 8023cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8023cfe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8023d02:	f107 0320 	add.w	r3, r7, #32
 8023d06:	4611      	mov	r1, r2
 8023d08:	4618      	mov	r0, r3
 8023d0a:	f7fb fcfd 	bl	801f708 <_ZSt3maxIiERKT_S2_S2_>
 8023d0e:	4603      	mov	r3, r0
 8023d10:	681b      	ldr	r3, [r3, #0]
 8023d12:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8023d14:	68fb      	ldr	r3, [r7, #12]
 8023d16:	f103 0014 	add.w	r0, r3, #20
 8023d1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8023d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023d1e:	1ad3      	subs	r3, r2, r3
 8023d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8023d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023d26:	4619      	mov	r1, r3
 8023d28:	f7ff fd85 	bl	8023836 <_ZSt3minIiERKT_S2_S2_>
 8023d2c:	4603      	mov	r3, r0
 8023d2e:	681b      	ldr	r3, [r3, #0]
 8023d30:	63bb      	str	r3, [r7, #56]	; 0x38
          float total = 0.f;
 8023d32:	f04f 0300 	mov.w	r3, #0
 8023d36:	67fb      	str	r3, [r7, #124]	; 0x7c
          float filter_count = 0;
 8023d38:	f04f 0300 	mov.w	r3, #0
 8023d3c:	67bb      	str	r3, [r7, #120]	; 0x78
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8023d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023d40:	677b      	str	r3, [r7, #116]	; 0x74
 8023d42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8023d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023d46:	429a      	cmp	r2, r3
 8023d48:	da33      	bge.n	8023db2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ee>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8023d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023d4c:	673b      	str	r3, [r7, #112]	; 0x70
 8023d4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8023d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023d52:	429a      	cmp	r2, r3
 8023d54:	da29      	bge.n	8023daa <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1e6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8023d56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8023d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8023d5a:	4413      	add	r3, r2
 8023d5c:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8023d5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8023d60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023d62:	4413      	add	r3, r2
 8023d64:	633b      	str	r3, [r7, #48]	; 0x30
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8023d66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023d6a:	9300      	str	r3, [sp, #0]
 8023d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023d70:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8023d74:	68b8      	ldr	r0, [r7, #8]
 8023d76:	f7fc ff35 	bl	8020be4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8023d7a:	4603      	mov	r3, r0
 8023d7c:	009b      	lsls	r3, r3, #2
 8023d7e:	687a      	ldr	r2, [r7, #4]
 8023d80:	4413      	add	r3, r2
 8023d82:	edd3 7a00 	vldr	s15, [r3]
              total +=
 8023d86:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8023d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023d8e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
              filter_count++;
 8023d92:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8023d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023d9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023d9e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8023da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8023da4:	3301      	adds	r3, #1
 8023da6:	673b      	str	r3, [r7, #112]	; 0x70
 8023da8:	e7d1      	b.n	8023d4e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8023daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023dac:	3301      	adds	r3, #1
 8023dae:	677b      	str	r3, [r7, #116]	; 0x74
 8023db0:	e7c7      	b.n	8023d42 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17e>
            }
          }
          const float average = total / filter_count;
 8023db2:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8023db6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8023dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8023dbe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 8023dc2:	68fb      	ldr	r3, [r7, #12]
 8023dc4:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8023dc8:	68fb      	ldr	r3, [r7, #12]
 8023dca:	edd3 8a0a 	vldr	s17, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8023dce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023dd2:	9300      	str	r3, [sp, #0]
 8023dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8023dd8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8023ddc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8023de0:	6838      	ldr	r0, [r7, #0]
 8023de2:	f7fc feff 	bl	8020be4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8023de6:	4603      	mov	r3, r0
 8023de8:	009b      	lsls	r3, r3, #2
 8023dea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8023dee:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 8023df0:	eeb0 1a68 	vmov.f32	s2, s17
 8023df4:	eef0 0a48 	vmov.f32	s1, s16
 8023df8:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8023dfc:	f7fc ff4a 	bl	8020c94 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8023e00:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8023e04:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 8023e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023e0c:	3301      	adds	r3, #1
 8023e0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8023e12:	e736      	b.n	8023c82 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xbe>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8023e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8023e18:	3301      	adds	r3, #1
 8023e1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8023e1e:	e727      	b.n	8023c70 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xac>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8023e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8023e24:	3301      	adds	r3, #1
 8023e26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8023e2a:	e718      	b.n	8023c5e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 8023e2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8023e30:	3301      	adds	r3, #1
 8023e32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8023e36:	e709      	b.n	8023c4c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 8023e38:	bf00      	nop
 8023e3a:	3794      	adds	r7, #148	; 0x94
 8023e3c:	46bd      	mov	sp, r7
 8023e3e:	ecbd 8b02 	vpop	{d8}
 8023e42:	bd90      	pop	{r4, r7, pc}

08023e44 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const uint8_t* input_data,
                        const RuntimeShape& output_shape,
                        uint8_t* output_data) {
 8023e44:	b590      	push	{r4, r7, lr}
 8023e46:	b0a5      	sub	sp, #148	; 0x94
 8023e48:	af02      	add	r7, sp, #8
 8023e4a:	60f8      	str	r0, [r7, #12]
 8023e4c:	60b9      	str	r1, [r7, #8]
 8023e4e:	607a      	str	r2, [r7, #4]
 8023e50:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8023e52:	68fb      	ldr	r3, [r7, #12]
 8023e54:	69da      	ldr	r2, [r3, #28]
 8023e56:	68fb      	ldr	r3, [r7, #12]
 8023e58:	6a1b      	ldr	r3, [r3, #32]
 8023e5a:	429a      	cmp	r2, r3
 8023e5c:	dd01      	ble.n	8023e62 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e>
 8023e5e:	f008 f999 	bl	802c194 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8023e62:	68b8      	ldr	r0, [r7, #8]
 8023e64:	f7fb fcc3 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8023e68:	4603      	mov	r3, r0
 8023e6a:	2b04      	cmp	r3, #4
 8023e6c:	d001      	beq.n	8023e72 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x2e>
 8023e6e:	f008 f991 	bl	802c194 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8023e72:	6838      	ldr	r0, [r7, #0]
 8023e74:	f7fb fcbb 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8023e78:	4603      	mov	r3, r0
 8023e7a:	2b04      	cmp	r3, #4
 8023e7c:	d001      	beq.n	8023e82 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x3e>
 8023e7e:	f008 f989 	bl	802c194 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8023e82:	2300      	movs	r3, #0
 8023e84:	683a      	ldr	r2, [r7, #0]
 8023e86:	2100      	movs	r1, #0
 8023e88:	68b8      	ldr	r0, [r7, #8]
 8023e8a:	f7fc ff8e 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8023e8e:	66b8      	str	r0, [r7, #104]	; 0x68
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8023e90:	2303      	movs	r3, #3
 8023e92:	683a      	ldr	r2, [r7, #0]
 8023e94:	2103      	movs	r1, #3
 8023e96:	68b8      	ldr	r0, [r7, #8]
 8023e98:	f7fc ff87 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8023e9c:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_height = input_shape.Dims(1);
 8023e9e:	2101      	movs	r1, #1
 8023ea0:	68b8      	ldr	r0, [r7, #8]
 8023ea2:	f7fb fe3f 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8023ea6:	6638      	str	r0, [r7, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
 8023ea8:	2102      	movs	r1, #2
 8023eaa:	68b8      	ldr	r0, [r7, #8]
 8023eac:	f7fb fe3a 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8023eb0:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_height = output_shape.Dims(1);
 8023eb2:	2101      	movs	r1, #1
 8023eb4:	6838      	ldr	r0, [r7, #0]
 8023eb6:	f7fb fe35 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8023eba:	65b8      	str	r0, [r7, #88]	; 0x58
  const int output_width = output_shape.Dims(2);
 8023ebc:	2102      	movs	r1, #2
 8023ebe:	6838      	ldr	r0, [r7, #0]
 8023ec0:	f7fb fe30 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8023ec4:	6578      	str	r0, [r7, #84]	; 0x54
  const int stride_height = params.stride_height;
 8023ec6:	68fb      	ldr	r3, [r7, #12]
 8023ec8:	68db      	ldr	r3, [r3, #12]
 8023eca:	653b      	str	r3, [r7, #80]	; 0x50
  const int stride_width = params.stride_width;
 8023ecc:	68fb      	ldr	r3, [r7, #12]
 8023ece:	691b      	ldr	r3, [r3, #16]
 8023ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
  for (int batch = 0; batch < batches; ++batch) {
 8023ed2:	2300      	movs	r3, #0
 8023ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8023ed8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8023edc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8023ede:	429a      	cmp	r2, r3
 8023ee0:	f280 80e6 	bge.w	80240b0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x26c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8023ee4:	2300      	movs	r3, #0
 8023ee6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8023eea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8023eee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8023ef0:	429a      	cmp	r2, r3
 8023ef2:	f280 80d7 	bge.w	80240a4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x260>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8023ef6:	2300      	movs	r3, #0
 8023ef8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8023efa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8023efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023efe:	429a      	cmp	r2, r3
 8023f00:	f280 80ca 	bge.w	8024098 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x254>
        for (int channel = 0; channel < depth; ++channel) {
 8023f04:	2300      	movs	r3, #0
 8023f06:	67bb      	str	r3, [r7, #120]	; 0x78
 8023f08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8023f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8023f0c:	429a      	cmp	r2, r3
 8023f0e:	f280 80bf 	bge.w	8024090 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x24c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8023f12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8023f14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8023f16:	fb02 f303 	mul.w	r3, r2, r3
 8023f1a:	68fa      	ldr	r2, [r7, #12]
 8023f1c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8023f20:	1a9b      	subs	r3, r3, r2
 8023f22:	64bb      	str	r3, [r7, #72]	; 0x48
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8023f24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023f28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8023f2a:	fb02 f303 	mul.w	r3, r2, r3
 8023f2e:	68fa      	ldr	r2, [r7, #12]
 8023f30:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8023f34:	1a9b      	subs	r3, r3, r2
 8023f36:	647b      	str	r3, [r7, #68]	; 0x44
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8023f38:	2300      	movs	r3, #0
 8023f3a:	617b      	str	r3, [r7, #20]
 8023f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023f3e:	425b      	negs	r3, r3
 8023f40:	61bb      	str	r3, [r7, #24]
 8023f42:	f107 0218 	add.w	r2, r7, #24
 8023f46:	f107 0314 	add.w	r3, r7, #20
 8023f4a:	4611      	mov	r1, r2
 8023f4c:	4618      	mov	r0, r3
 8023f4e:	f7fb fbdb 	bl	801f708 <_ZSt3maxIiERKT_S2_S2_>
 8023f52:	4603      	mov	r3, r0
 8023f54:	681b      	ldr	r3, [r3, #0]
 8023f56:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8023f58:	68fb      	ldr	r3, [r7, #12]
 8023f5a:	f103 0018 	add.w	r0, r3, #24
 8023f5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8023f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023f62:	1ad3      	subs	r3, r2, r3
 8023f64:	61fb      	str	r3, [r7, #28]
 8023f66:	f107 031c 	add.w	r3, r7, #28
 8023f6a:	4619      	mov	r1, r3
 8023f6c:	f7ff fc63 	bl	8023836 <_ZSt3minIiERKT_S2_S2_>
 8023f70:	4603      	mov	r3, r0
 8023f72:	681b      	ldr	r3, [r3, #0]
 8023f74:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_start = std::max(0, -in_y_origin);
 8023f76:	2300      	movs	r3, #0
 8023f78:	623b      	str	r3, [r7, #32]
 8023f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023f7c:	425b      	negs	r3, r3
 8023f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8023f80:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8023f84:	f107 0320 	add.w	r3, r7, #32
 8023f88:	4611      	mov	r1, r2
 8023f8a:	4618      	mov	r0, r3
 8023f8c:	f7fb fbbc 	bl	801f708 <_ZSt3maxIiERKT_S2_S2_>
 8023f90:	4603      	mov	r3, r0
 8023f92:	681b      	ldr	r3, [r3, #0]
 8023f94:	63bb      	str	r3, [r7, #56]	; 0x38
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8023f96:	68fb      	ldr	r3, [r7, #12]
 8023f98:	f103 0014 	add.w	r0, r3, #20
 8023f9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8023f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023fa0:	1ad3      	subs	r3, r2, r3
 8023fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8023fa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023fa8:	4619      	mov	r1, r3
 8023faa:	f7ff fc44 	bl	8023836 <_ZSt3minIiERKT_S2_S2_>
 8023fae:	4603      	mov	r3, r0
 8023fb0:	681b      	ldr	r3, [r3, #0]
 8023fb2:	637b      	str	r3, [r7, #52]	; 0x34
          int32_t acc = 0;
 8023fb4:	2300      	movs	r3, #0
 8023fb6:	613b      	str	r3, [r7, #16]
          int filter_count = 0;
 8023fb8:	2300      	movs	r3, #0
 8023fba:	677b      	str	r3, [r7, #116]	; 0x74
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8023fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023fbe:	673b      	str	r3, [r7, #112]	; 0x70
 8023fc0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8023fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023fc4:	429a      	cmp	r2, r3
 8023fc6:	da2a      	bge.n	802401e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1da>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8023fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023fca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8023fcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8023fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023fd0:	429a      	cmp	r2, r3
 8023fd2:	da20      	bge.n	8024016 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1d2>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8023fd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8023fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8023fd8:	4413      	add	r3, r2
 8023fda:	633b      	str	r3, [r7, #48]	; 0x30
              const int in_y = in_y_origin + filter_y;
 8023fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8023fde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8023fe0:	4413      	add	r3, r2
 8023fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8023fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8023fe6:	9300      	str	r3, [sp, #0]
 8023fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023fec:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8023ff0:	68b8      	ldr	r0, [r7, #8]
 8023ff2:	f7fc fdf7 	bl	8020be4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8023ff6:	4603      	mov	r3, r0
 8023ff8:	461a      	mov	r2, r3
 8023ffa:	687b      	ldr	r3, [r7, #4]
 8023ffc:	4413      	add	r3, r2
 8023ffe:	781b      	ldrb	r3, [r3, #0]
              acc +=
 8024000:	461a      	mov	r2, r3
 8024002:	693b      	ldr	r3, [r7, #16]
 8024004:	4413      	add	r3, r2
 8024006:	613b      	str	r3, [r7, #16]
              filter_count++;
 8024008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802400a:	3301      	adds	r3, #1
 802400c:	677b      	str	r3, [r7, #116]	; 0x74
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 802400e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024010:	3301      	adds	r3, #1
 8024012:	66fb      	str	r3, [r7, #108]	; 0x6c
 8024014:	e7da      	b.n	8023fcc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x188>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8024016:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024018:	3301      	adds	r3, #1
 802401a:	673b      	str	r3, [r7, #112]	; 0x70
 802401c:	e7d0      	b.n	8023fc0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17c>
            }
          }
          acc = (acc + filter_count / 2) / filter_count;
 802401e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024020:	0fda      	lsrs	r2, r3, #31
 8024022:	4413      	add	r3, r2
 8024024:	105b      	asrs	r3, r3, #1
 8024026:	461a      	mov	r2, r3
 8024028:	693b      	ldr	r3, [r7, #16]
 802402a:	441a      	add	r2, r3
 802402c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802402e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024032:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, params.quantized_activation_min);
 8024034:	68fb      	ldr	r3, [r7, #12]
 8024036:	f103 021c 	add.w	r2, r3, #28
 802403a:	f107 0310 	add.w	r3, r7, #16
 802403e:	4611      	mov	r1, r2
 8024040:	4618      	mov	r0, r3
 8024042:	f7fb fb89 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 8024046:	4603      	mov	r3, r0
 8024048:	681b      	ldr	r3, [r3, #0]
 802404a:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, params.quantized_activation_max);
 802404c:	68fb      	ldr	r3, [r7, #12]
 802404e:	f103 0220 	add.w	r2, r3, #32
 8024052:	f107 0310 	add.w	r3, r7, #16
 8024056:	4611      	mov	r1, r2
 8024058:	4618      	mov	r0, r3
 802405a:	f7fb fb69 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 802405e:	4603      	mov	r3, r0
 8024060:	681b      	ldr	r3, [r3, #0]
 8024062:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8024064:	693c      	ldr	r4, [r7, #16]
 8024066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8024068:	9300      	str	r3, [sp, #0]
 802406a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802406c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8024070:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8024074:	6838      	ldr	r0, [r7, #0]
 8024076:	f7fc fdb5 	bl	8020be4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 802407a:	4603      	mov	r3, r0
 802407c:	461a      	mov	r2, r3
 802407e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8024082:	4413      	add	r3, r2
 8024084:	b2e2      	uxtb	r2, r4
 8024086:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 8024088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802408a:	3301      	adds	r3, #1
 802408c:	67bb      	str	r3, [r7, #120]	; 0x78
 802408e:	e73b      	b.n	8023f08 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xc4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8024090:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024092:	3301      	adds	r3, #1
 8024094:	67fb      	str	r3, [r7, #124]	; 0x7c
 8024096:	e730      	b.n	8023efa <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb6>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8024098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802409c:	3301      	adds	r3, #1
 802409e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80240a2:	e722      	b.n	8023eea <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa6>
  for (int batch = 0; batch < batches; ++batch) {
 80240a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80240a8:	3301      	adds	r3, #1
 80240aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80240ae:	e713      	b.n	8023ed8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x94>
              static_cast<uint8_t>(acc);
        }
      }
    }
  }
}
 80240b0:	bf00      	nop
 80240b2:	378c      	adds	r7, #140	; 0x8c
 80240b4:	46bd      	mov	sp, r7
 80240b6:	bd90      	pop	{r4, r7, pc}

080240b8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
 80240b8:	b590      	push	{r4, r7, lr}
 80240ba:	ed2d 8b04 	vpush	{d8-d9}
 80240be:	b0a5      	sub	sp, #148	; 0x94
 80240c0:	af02      	add	r7, sp, #8
 80240c2:	60f8      	str	r0, [r7, #12]
 80240c4:	60b9      	str	r1, [r7, #8]
 80240c6:	607a      	str	r2, [r7, #4]
 80240c8:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80240ca:	68b8      	ldr	r0, [r7, #8]
 80240cc:	f7fb fb8f 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80240d0:	4603      	mov	r3, r0
 80240d2:	2b04      	cmp	r3, #4
 80240d4:	d001      	beq.n	80240da <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 80240d6:	f008 f85d 	bl	802c194 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80240da:	6838      	ldr	r0, [r7, #0]
 80240dc:	f7fb fb87 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80240e0:	4603      	mov	r3, r0
 80240e2:	2b04      	cmp	r3, #4
 80240e4:	d001      	beq.n	80240ea <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 80240e6:	f008 f855 	bl	802c194 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80240ea:	2300      	movs	r3, #0
 80240ec:	683a      	ldr	r2, [r7, #0]
 80240ee:	2100      	movs	r1, #0
 80240f0:	68b8      	ldr	r0, [r7, #8]
 80240f2:	f7fc fe5a 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80240f6:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80240f8:	2303      	movs	r3, #3
 80240fa:	683a      	ldr	r2, [r7, #0]
 80240fc:	2103      	movs	r1, #3
 80240fe:	68b8      	ldr	r0, [r7, #8]
 8024100:	f7fc fe53 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8024104:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8024106:	2101      	movs	r1, #1
 8024108:	68b8      	ldr	r0, [r7, #8]
 802410a:	f7fb fd0b 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 802410e:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8024110:	2102      	movs	r1, #2
 8024112:	68b8      	ldr	r0, [r7, #8]
 8024114:	f7fb fd06 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8024118:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 802411a:	2101      	movs	r1, #1
 802411c:	6838      	ldr	r0, [r7, #0]
 802411e:	f7fb fd01 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8024122:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8024124:	2102      	movs	r1, #2
 8024126:	6838      	ldr	r0, [r7, #0]
 8024128:	f7fb fcfc 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 802412c:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 802412e:	68fb      	ldr	r3, [r7, #12]
 8024130:	68db      	ldr	r3, [r3, #12]
 8024132:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8024134:	68fb      	ldr	r3, [r7, #12]
 8024136:	691b      	ldr	r3, [r3, #16]
 8024138:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 802413a:	2300      	movs	r3, #0
 802413c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8024140:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8024144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024146:	429a      	cmp	r2, r3
 8024148:	f280 80d4 	bge.w	80242f4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x23c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 802414c:	2300      	movs	r3, #0
 802414e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8024152:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8024156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024158:	429a      	cmp	r2, r3
 802415a:	f280 80c5 	bge.w	80242e8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x230>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 802415e:	2300      	movs	r3, #0
 8024160:	67fb      	str	r3, [r7, #124]	; 0x7c
 8024162:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8024164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8024166:	429a      	cmp	r2, r3
 8024168:	f280 80b8 	bge.w	80242dc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x224>
        for (int channel = 0; channel < depth; ++channel) {
 802416c:	2300      	movs	r3, #0
 802416e:	67bb      	str	r3, [r7, #120]	; 0x78
 8024170:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8024172:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8024174:	429a      	cmp	r2, r3
 8024176:	f280 80ad 	bge.w	80242d4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x21c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 802417a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802417c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802417e:	fb02 f303 	mul.w	r3, r2, r3
 8024182:	68fa      	ldr	r2, [r7, #12]
 8024184:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8024188:	1a9b      	subs	r3, r3, r2
 802418a:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 802418c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024190:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8024192:	fb02 f303 	mul.w	r3, r2, r3
 8024196:	68fa      	ldr	r2, [r7, #12]
 8024198:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 802419c:	1a9b      	subs	r3, r3, r2
 802419e:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 80241a0:	2300      	movs	r3, #0
 80241a2:	61bb      	str	r3, [r7, #24]
 80241a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80241a6:	425b      	negs	r3, r3
 80241a8:	61fb      	str	r3, [r7, #28]
 80241aa:	f107 021c 	add.w	r2, r7, #28
 80241ae:	f107 0318 	add.w	r3, r7, #24
 80241b2:	4611      	mov	r1, r2
 80241b4:	4618      	mov	r0, r3
 80241b6:	f7fb faa7 	bl	801f708 <_ZSt3maxIiERKT_S2_S2_>
 80241ba:	4603      	mov	r3, r0
 80241bc:	681b      	ldr	r3, [r3, #0]
 80241be:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 80241c0:	68fb      	ldr	r3, [r7, #12]
 80241c2:	f103 0018 	add.w	r0, r3, #24
 80241c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80241c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80241ca:	1ad3      	subs	r3, r2, r3
 80241cc:	623b      	str	r3, [r7, #32]
 80241ce:	f107 0320 	add.w	r3, r7, #32
 80241d2:	4619      	mov	r1, r3
 80241d4:	f7ff fb2f 	bl	8023836 <_ZSt3minIiERKT_S2_S2_>
 80241d8:	4603      	mov	r3, r0
 80241da:	681b      	ldr	r3, [r3, #0]
 80241dc:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 80241de:	2300      	movs	r3, #0
 80241e0:	627b      	str	r3, [r7, #36]	; 0x24
 80241e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80241e4:	425b      	negs	r3, r3
 80241e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80241e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80241ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80241f0:	4611      	mov	r1, r2
 80241f2:	4618      	mov	r0, r3
 80241f4:	f7fb fa88 	bl	801f708 <_ZSt3maxIiERKT_S2_S2_>
 80241f8:	4603      	mov	r3, r0
 80241fa:	681b      	ldr	r3, [r3, #0]
 80241fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 80241fe:	68fb      	ldr	r3, [r7, #12]
 8024200:	f103 0014 	add.w	r0, r3, #20
 8024204:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8024206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024208:	1ad3      	subs	r3, r2, r3
 802420a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802420c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8024210:	4619      	mov	r1, r3
 8024212:	f7ff fb10 	bl	8023836 <_ZSt3minIiERKT_S2_S2_>
 8024216:	4603      	mov	r3, r0
 8024218:	681b      	ldr	r3, [r3, #0]
 802421a:	63bb      	str	r3, [r7, #56]	; 0x38
          float max = std::numeric_limits<float>::lowest();
 802421c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8024220:	617b      	str	r3, [r7, #20]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8024222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024224:	677b      	str	r3, [r7, #116]	; 0x74
 8024226:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8024228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802422a:	429a      	cmp	r2, r3
 802422c:	da2b      	bge.n	8024286 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ce>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 802422e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024230:	673b      	str	r3, [r7, #112]	; 0x70
 8024232:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8024234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024236:	429a      	cmp	r2, r3
 8024238:	da21      	bge.n	802427e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 802423a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802423c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802423e:	4413      	add	r3, r2
 8024240:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8024242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024246:	4413      	add	r3, r2
 8024248:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 802424a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802424c:	9300      	str	r3, [sp, #0]
 802424e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024252:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8024256:	68b8      	ldr	r0, [r7, #8]
 8024258:	f7fc fcc4 	bl	8020be4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 802425c:	4603      	mov	r3, r0
 802425e:	009b      	lsls	r3, r3, #2
 8024260:	687a      	ldr	r2, [r7, #4]
 8024262:	441a      	add	r2, r3
 8024264:	f107 0314 	add.w	r3, r7, #20
 8024268:	4611      	mov	r1, r2
 802426a:	4618      	mov	r0, r3
 802426c:	f7fa fd50 	bl	801ed10 <_ZSt3maxIfERKT_S2_S2_>
 8024270:	4603      	mov	r3, r0
              max = std::max(
 8024272:	681b      	ldr	r3, [r3, #0]
 8024274:	617b      	str	r3, [r7, #20]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8024276:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024278:	3301      	adds	r3, #1
 802427a:	673b      	str	r3, [r7, #112]	; 0x70
 802427c:	e7d9      	b.n	8024232 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 802427e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024280:	3301      	adds	r3, #1
 8024282:	677b      	str	r3, [r7, #116]	; 0x74
 8024284:	e7cf      	b.n	8024226 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16e>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8024286:	ed97 8a05 	vldr	s16, [r7, #20]
 802428a:	68fb      	ldr	r3, [r7, #12]
 802428c:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8024290:	68fb      	ldr	r3, [r7, #12]
 8024292:	ed93 9a0a 	vldr	s18, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8024296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8024298:	9300      	str	r3, [sp, #0]
 802429a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802429c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80242a0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80242a4:	6838      	ldr	r0, [r7, #0]
 80242a6:	f7fc fc9d 	bl	8020be4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80242aa:	4603      	mov	r3, r0
 80242ac:	009b      	lsls	r3, r3, #2
 80242ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80242b2:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 80242b4:	eeb0 1a49 	vmov.f32	s2, s18
 80242b8:	eef0 0a68 	vmov.f32	s1, s17
 80242bc:	eeb0 0a48 	vmov.f32	s0, s16
 80242c0:	f7fc fce8 	bl	8020c94 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 80242c4:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 80242c8:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 80242cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80242ce:	3301      	adds	r3, #1
 80242d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80242d2:	e74d      	b.n	8024170 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xb8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80242d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80242d6:	3301      	adds	r3, #1
 80242d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80242da:	e742      	b.n	8024162 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xaa>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80242dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80242e0:	3301      	adds	r3, #1
 80242e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80242e6:	e734      	b.n	8024152 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 80242e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80242ec:	3301      	adds	r3, #1
 80242ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80242f2:	e725      	b.n	8024140 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 80242f4:	bf00      	nop
 80242f6:	378c      	adds	r7, #140	; 0x8c
 80242f8:	46bd      	mov	sp, r7
 80242fa:	ecbd 8b04 	vpop	{d8-d9}
 80242fe:	bd90      	pop	{r4, r7, pc}

08024300 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8_t* input_data, const RuntimeShape& output_shape,
                    uint8_t* output_data) {
 8024300:	b580      	push	{r7, lr}
 8024302:	b0a4      	sub	sp, #144	; 0x90
 8024304:	af02      	add	r7, sp, #8
 8024306:	60f8      	str	r0, [r7, #12]
 8024308:	60b9      	str	r1, [r7, #8]
 802430a:	607a      	str	r2, [r7, #4]
 802430c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 802430e:	68fb      	ldr	r3, [r7, #12]
 8024310:	69da      	ldr	r2, [r3, #28]
 8024312:	68fb      	ldr	r3, [r7, #12]
 8024314:	6a1b      	ldr	r3, [r3, #32]
 8024316:	429a      	cmp	r2, r3
 8024318:	dd01      	ble.n	802431e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e>
 802431a:	f007 ff3b 	bl	802c194 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
 802431e:	68fb      	ldr	r3, [r7, #12]
 8024320:	69db      	ldr	r3, [r3, #28]
 8024322:	2b00      	cmp	r3, #0
 8024324:	da01      	bge.n	802432a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x2a>
 8024326:	f007 ff35 	bl	802c194 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
 802432a:	68fb      	ldr	r3, [r7, #12]
 802432c:	6a1b      	ldr	r3, [r3, #32]
 802432e:	2bff      	cmp	r3, #255	; 0xff
 8024330:	dd01      	ble.n	8024336 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x36>
 8024332:	f007 ff2f 	bl	802c194 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8024336:	68b8      	ldr	r0, [r7, #8]
 8024338:	f7fb fa59 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802433c:	4603      	mov	r3, r0
 802433e:	2b04      	cmp	r3, #4
 8024340:	d001      	beq.n	8024346 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x46>
 8024342:	f007 ff27 	bl	802c194 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8024346:	6838      	ldr	r0, [r7, #0]
 8024348:	f7fb fa51 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802434c:	4603      	mov	r3, r0
 802434e:	2b04      	cmp	r3, #4
 8024350:	d001      	beq.n	8024356 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x56>
 8024352:	f007 ff1f 	bl	802c194 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8024356:	2300      	movs	r3, #0
 8024358:	683a      	ldr	r2, [r7, #0]
 802435a:	2100      	movs	r1, #0
 802435c:	68b8      	ldr	r0, [r7, #8]
 802435e:	f7fc fd24 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8024362:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8024364:	2303      	movs	r3, #3
 8024366:	683a      	ldr	r2, [r7, #0]
 8024368:	2103      	movs	r1, #3
 802436a:	68b8      	ldr	r0, [r7, #8]
 802436c:	f7fc fd1d 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8024370:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8024372:	2101      	movs	r1, #1
 8024374:	68b8      	ldr	r0, [r7, #8]
 8024376:	f7fb fbd5 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 802437a:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 802437c:	2102      	movs	r1, #2
 802437e:	68b8      	ldr	r0, [r7, #8]
 8024380:	f7fb fbd0 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8024384:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8024386:	2101      	movs	r1, #1
 8024388:	6838      	ldr	r0, [r7, #0]
 802438a:	f7fb fbcb 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 802438e:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8024390:	2102      	movs	r1, #2
 8024392:	6838      	ldr	r0, [r7, #0]
 8024394:	f7fb fbc6 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8024398:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 802439a:	68fb      	ldr	r3, [r7, #12]
 802439c:	68db      	ldr	r3, [r3, #12]
 802439e:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 80243a0:	68fb      	ldr	r3, [r7, #12]
 80243a2:	691b      	ldr	r3, [r3, #16]
 80243a4:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 80243a6:	2300      	movs	r3, #0
 80243a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80243ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80243b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80243b2:	429a      	cmp	r2, r3
 80243b4:	f280 80e1 	bge.w	802457a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x27a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80243b8:	2300      	movs	r3, #0
 80243ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80243be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80243c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80243c4:	429a      	cmp	r2, r3
 80243c6:	f280 80d2 	bge.w	802456e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x26e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80243ca:	2300      	movs	r3, #0
 80243cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80243ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80243d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80243d2:	429a      	cmp	r2, r3
 80243d4:	f280 80c5 	bge.w	8024562 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x262>
        for (int channel = 0; channel < depth; ++channel) {
 80243d8:	2300      	movs	r3, #0
 80243da:	67bb      	str	r3, [r7, #120]	; 0x78
 80243dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80243de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80243e0:	429a      	cmp	r2, r3
 80243e2:	f280 80ba 	bge.w	802455a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x25a>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 80243e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80243e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80243ea:	fb02 f303 	mul.w	r3, r2, r3
 80243ee:	68fa      	ldr	r2, [r7, #12]
 80243f0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 80243f4:	1a9b      	subs	r3, r3, r2
 80243f6:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 80243f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80243fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80243fe:	fb02 f303 	mul.w	r3, r2, r3
 8024402:	68fa      	ldr	r2, [r7, #12]
 8024404:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8024408:	1a9b      	subs	r3, r3, r2
 802440a:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 802440c:	2300      	movs	r3, #0
 802440e:	617b      	str	r3, [r7, #20]
 8024410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8024412:	425b      	negs	r3, r3
 8024414:	61bb      	str	r3, [r7, #24]
 8024416:	f107 0218 	add.w	r2, r7, #24
 802441a:	f107 0314 	add.w	r3, r7, #20
 802441e:	4611      	mov	r1, r2
 8024420:	4618      	mov	r0, r3
 8024422:	f7fb f971 	bl	801f708 <_ZSt3maxIiERKT_S2_S2_>
 8024426:	4603      	mov	r3, r0
 8024428:	681b      	ldr	r3, [r3, #0]
 802442a:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 802442c:	68fb      	ldr	r3, [r7, #12]
 802442e:	f103 0018 	add.w	r0, r3, #24
 8024432:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8024434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8024436:	1ad3      	subs	r3, r2, r3
 8024438:	61fb      	str	r3, [r7, #28]
 802443a:	f107 031c 	add.w	r3, r7, #28
 802443e:	4619      	mov	r1, r3
 8024440:	f7ff f9f9 	bl	8023836 <_ZSt3minIiERKT_S2_S2_>
 8024444:	4603      	mov	r3, r0
 8024446:	681b      	ldr	r3, [r3, #0]
 8024448:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 802444a:	2300      	movs	r3, #0
 802444c:	623b      	str	r3, [r7, #32]
 802444e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024450:	425b      	negs	r3, r3
 8024452:	627b      	str	r3, [r7, #36]	; 0x24
 8024454:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8024458:	f107 0320 	add.w	r3, r7, #32
 802445c:	4611      	mov	r1, r2
 802445e:	4618      	mov	r0, r3
 8024460:	f7fb f952 	bl	801f708 <_ZSt3maxIiERKT_S2_S2_>
 8024464:	4603      	mov	r3, r0
 8024466:	681b      	ldr	r3, [r3, #0]
 8024468:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 802446a:	68fb      	ldr	r3, [r7, #12]
 802446c:	f103 0014 	add.w	r0, r3, #20
 8024470:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8024472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024474:	1ad3      	subs	r3, r2, r3
 8024476:	62bb      	str	r3, [r7, #40]	; 0x28
 8024478:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802447c:	4619      	mov	r1, r3
 802447e:	f7ff f9da 	bl	8023836 <_ZSt3minIiERKT_S2_S2_>
 8024482:	4603      	mov	r3, r0
 8024484:	681b      	ldr	r3, [r3, #0]
 8024486:	63bb      	str	r3, [r7, #56]	; 0x38
          uint8_t max = 0;
 8024488:	2300      	movs	r3, #0
 802448a:	74fb      	strb	r3, [r7, #19]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 802448c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802448e:	677b      	str	r3, [r7, #116]	; 0x74
 8024490:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8024492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024494:	429a      	cmp	r2, r3
 8024496:	da2b      	bge.n	80244f0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1f0>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8024498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802449a:	673b      	str	r3, [r7, #112]	; 0x70
 802449c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802449e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80244a0:	429a      	cmp	r2, r3
 80244a2:	da21      	bge.n	80244e8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e8>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 80244a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80244a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80244a8:	4413      	add	r3, r2
 80244aa:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 80244ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80244ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80244b0:	4413      	add	r3, r2
 80244b2:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 80244b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80244b6:	9300      	str	r3, [sp, #0]
 80244b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80244ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80244bc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80244c0:	68b8      	ldr	r0, [r7, #8]
 80244c2:	f7fc fb8f 	bl	8020be4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80244c6:	4603      	mov	r3, r0
 80244c8:	461a      	mov	r2, r3
 80244ca:	687b      	ldr	r3, [r7, #4]
 80244cc:	441a      	add	r2, r3
 80244ce:	f107 0313 	add.w	r3, r7, #19
 80244d2:	4611      	mov	r1, r2
 80244d4:	4618      	mov	r0, r3
 80244d6:	f000 fd67 	bl	8024fa8 <_ZSt3maxIhERKT_S2_S2_>
 80244da:	4603      	mov	r3, r0
              max = std::max(
 80244dc:	781b      	ldrb	r3, [r3, #0]
 80244de:	74fb      	strb	r3, [r7, #19]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80244e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80244e2:	3301      	adds	r3, #1
 80244e4:	673b      	str	r3, [r7, #112]	; 0x70
 80244e6:	e7d9      	b.n	802449c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19c>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80244e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80244ea:	3301      	adds	r3, #1
 80244ec:	677b      	str	r3, [r7, #116]	; 0x74
 80244ee:	e7cf      	b.n	8024490 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x190>
            }
          }
          max = std::max<uint8_t>(max, params.quantized_activation_min);
 80244f0:	68fb      	ldr	r3, [r7, #12]
 80244f2:	69db      	ldr	r3, [r3, #28]
 80244f4:	b2db      	uxtb	r3, r3
 80244f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80244fa:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80244fe:	f107 0313 	add.w	r3, r7, #19
 8024502:	4611      	mov	r1, r2
 8024504:	4618      	mov	r0, r3
 8024506:	f000 fd4f 	bl	8024fa8 <_ZSt3maxIhERKT_S2_S2_>
 802450a:	4603      	mov	r3, r0
 802450c:	781b      	ldrb	r3, [r3, #0]
 802450e:	74fb      	strb	r3, [r7, #19]
          max = std::min<uint8_t>(max, params.quantized_activation_max);
 8024510:	68fb      	ldr	r3, [r7, #12]
 8024512:	6a1b      	ldr	r3, [r3, #32]
 8024514:	b2db      	uxtb	r3, r3
 8024516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 802451a:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 802451e:	f107 0313 	add.w	r3, r7, #19
 8024522:	4611      	mov	r1, r2
 8024524:	4618      	mov	r0, r3
 8024526:	f000 fd53 	bl	8024fd0 <_ZSt3minIhERKT_S2_S2_>
 802452a:	4603      	mov	r3, r0
 802452c:	781b      	ldrb	r3, [r3, #0]
 802452e:	74fb      	strb	r3, [r7, #19]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8024530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8024532:	9300      	str	r3, [sp, #0]
 8024534:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024536:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802453a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 802453e:	6838      	ldr	r0, [r7, #0]
 8024540:	f7fc fb50 	bl	8020be4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8024544:	4603      	mov	r3, r0
 8024546:	461a      	mov	r2, r3
 8024548:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802454c:	4413      	add	r3, r2
 802454e:	7cfa      	ldrb	r2, [r7, #19]
 8024550:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 8024552:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8024554:	3301      	adds	r3, #1
 8024556:	67bb      	str	r3, [r7, #120]	; 0x78
 8024558:	e740      	b.n	80243dc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xdc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 802455a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802455c:	3301      	adds	r3, #1
 802455e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8024560:	e735      	b.n	80243ce <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xce>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8024562:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024566:	3301      	adds	r3, #1
 8024568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802456c:	e727      	b.n	80243be <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xbe>
  for (int batch = 0; batch < batches; ++batch) {
 802456e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8024572:	3301      	adds	r3, #1
 8024574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8024578:	e718      	b.n	80243ac <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xac>
              static_cast<uint8_t>(max);
        }
      }
    }
  }
}
 802457a:	bf00      	nop
 802457c:	3788      	adds	r7, #136	; 0x88
 802457e:	46bd      	mov	sp, r7
 8024580:	bd80      	pop	{r7, pc}

08024582 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context,
                             const TfLitePoolParams* params,
                             const TfLiteTensor* input, TfLiteTensor* output,
                             OpData* data) {
 8024582:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024584:	b099      	sub	sp, #100	; 0x64
 8024586:	af08      	add	r7, sp, #32
 8024588:	6278      	str	r0, [r7, #36]	; 0x24
 802458a:	6239      	str	r1, [r7, #32]
 802458c:	61fa      	str	r2, [r7, #28]
 802458e:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 8024590:	2101      	movs	r1, #1
 8024592:	69f8      	ldr	r0, [r7, #28]
 8024594:	f7fa fc3a 	bl	801ee0c <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8024598:	63f8      	str	r0, [r7, #60]	; 0x3c
  int width = SizeOfDimension(input, 2);
 802459a:	2102      	movs	r1, #2
 802459c:	69f8      	ldr	r0, [r7, #28]
 802459e:	f7fa fc35 	bl	801ee0c <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80245a2:	63b8      	str	r0, [r7, #56]	; 0x38

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 80245a4:	6a3b      	ldr	r3, [r7, #32]
 80245a6:	689d      	ldr	r5, [r3, #8]
 80245a8:	6a3b      	ldr	r3, [r7, #32]
 80245aa:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 80245ac:	6a3b      	ldr	r3, [r7, #32]
 80245ae:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 80245b0:	6a3a      	ldr	r2, [r7, #32]
 80245b2:	68d2      	ldr	r2, [r2, #12]
 80245b4:	6a39      	ldr	r1, [r7, #32]
 80245b6:	7809      	ldrb	r1, [r1, #0]
 80245b8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80245ba:	6078      	str	r0, [r7, #4]
 80245bc:	f107 0408 	add.w	r4, r7, #8
 80245c0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80245c4:	9007      	str	r0, [sp, #28]
 80245c6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80245ca:	9006      	str	r0, [sp, #24]
 80245cc:	9105      	str	r1, [sp, #20]
 80245ce:	9204      	str	r2, [sp, #16]
 80245d0:	9303      	str	r3, [sp, #12]
 80245d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80245d4:	9302      	str	r3, [sp, #8]
 80245d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80245d8:	9301      	str	r3, [sp, #4]
 80245da:	2301      	movs	r3, #1
 80245dc:	9300      	str	r3, [sp, #0]
 80245de:	2301      	movs	r3, #1
 80245e0:	4632      	mov	r2, r6
 80245e2:	4629      	mov	r1, r5
 80245e4:	4620      	mov	r0, r4
 80245e6:	f7fd fcf4 	bl	8021fd2 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 80245ea:	687c      	ldr	r4, [r7, #4]
 80245ec:	f107 0308 	add.w	r3, r7, #8
 80245f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80245f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if (input->type == kTfLiteFloat32) {
 80245f6:	69fb      	ldr	r3, [r7, #28]
 80245f8:	781b      	ldrb	r3, [r3, #0]
 80245fa:	2b01      	cmp	r3, #1
 80245fc:	d10a      	bne.n	8024614 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x92>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
 80245fe:	6a3b      	ldr	r3, [r7, #32]
 8024600:	7d18      	ldrb	r0, [r3, #20]
 8024602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8024604:	f103 011c 	add.w	r1, r3, #28
 8024608:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802460a:	3320      	adds	r3, #32
 802460c:	461a      	mov	r2, r3
 802460e:	f7fc fb61 	bl	8020cd4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
 8024612:	e01e      	b.n	8024652 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd0>
                             &data->activation_max_f32);
  } else {
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8024614:	6a3b      	ldr	r3, [r7, #32]
 8024616:	7d19      	ldrb	r1, [r3, #20]
 8024618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802461a:	f103 0214 	add.w	r2, r3, #20
 802461e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8024620:	3318      	adds	r3, #24
 8024622:	9300      	str	r3, [sp, #0]
 8024624:	4613      	mov	r3, r2
 8024626:	69ba      	ldr	r2, [r7, #24]
 8024628:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802462a:	f7fb f819 	bl	801f660 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 802462e:	4603      	mov	r3, r0
 8024630:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8024634:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024638:	2b00      	cmp	r3, #0
 802463a:	d002      	beq.n	8024642 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xc0>
 802463c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024640:	e00c      	b.n	802465c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xda>
        context, params->activation, output, &data->activation_min,
        &data->activation_max));
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
 8024642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8024644:	695a      	ldr	r2, [r3, #20]
 8024646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8024648:	699b      	ldr	r3, [r3, #24]
 802464a:	429a      	cmp	r2, r3
 802464c:	dd01      	ble.n	8024652 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd0>
 802464e:	f007 fda1 	bl	802c194 <abort>
  }

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8024652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8024654:	f04f 32ff 	mov.w	r2, #4294967295
 8024658:	611a      	str	r2, [r3, #16]

  return kTfLiteOk;
 802465a:	2300      	movs	r3, #0
}
 802465c:	4618      	mov	r0, r3
 802465e:	3744      	adds	r7, #68	; 0x44
 8024660:	46bd      	mov	sp, r7
 8024662:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024664 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116AverageEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSG_>:

void AverageEvalFloat(const TfLiteContext* context, const TfLiteNode* node,
                      const TfLitePoolParams* params, const OpData& data,
                      const TfLiteEvalTensor* input, TfLiteEvalTensor* output) {
 8024664:	b590      	push	{r4, r7, lr}
 8024666:	b0a1      	sub	sp, #132	; 0x84
 8024668:	af02      	add	r7, sp, #8
 802466a:	60f8      	str	r0, [r7, #12]
 802466c:	60b9      	str	r1, [r7, #8]
 802466e:	607a      	str	r2, [r7, #4]
 8024670:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 8024672:	687b      	ldr	r3, [r7, #4]
 8024674:	7d1b      	ldrb	r3, [r3, #20]
 8024676:	f107 0240 	add.w	r2, r7, #64	; 0x40
 802467a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 802467e:	4618      	mov	r0, r3
 8024680:	f7fc fb28 	bl	8020cd4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);

  PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8024684:	687b      	ldr	r3, [r7, #4]
 8024686:	689b      	ldr	r3, [r3, #8]
 8024688:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 802468a:	687b      	ldr	r3, [r7, #4]
 802468c:	685b      	ldr	r3, [r3, #4]
 802468e:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8024690:	687b      	ldr	r3, [r7, #4]
 8024692:	691b      	ldr	r3, [r3, #16]
 8024694:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8024696:	687b      	ldr	r3, [r7, #4]
 8024698:	68db      	ldr	r3, [r3, #12]
 802469a:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 802469c:	683b      	ldr	r3, [r7, #0]
 802469e:	685b      	ldr	r3, [r3, #4]
 80246a0:	b21b      	sxth	r3, r3
 80246a2:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 80246a4:	683b      	ldr	r3, [r7, #0]
 80246a6:	681b      	ldr	r3, [r3, #0]
 80246a8:	b21b      	sxth	r3, r3
 80246aa:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = activation_min;
 80246ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80246ae:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = activation_max;
 80246b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80246b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 80246b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80246b8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80246bc:	4618      	mov	r0, r3
 80246be:	f7ff f882 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80246c2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80246c6:	f7fb ffdf 	bl	8020688 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80246ca:	4604      	mov	r4, r0
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
 80246cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80246d0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80246d4:	4618      	mov	r0, r3
 80246d6:	f7ff f876 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 80246da:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80246de:	f7fb ffe2 	bl	80206a6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80246e2:	4602      	mov	r2, r0
 80246e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80246e8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80246ec:	f107 0014 	add.w	r0, r7, #20
 80246f0:	9200      	str	r2, [sp, #0]
 80246f2:	4622      	mov	r2, r4
 80246f4:	f7ff fa66 	bl	8023bc4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                             tflite::micro::GetTensorShape(output),
 80246f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80246fc:	4618      	mov	r0, r3
 80246fe:	f7fb f860 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8024702:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8024706:	4618      	mov	r0, r3
 8024708:	f7fb f85b 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<float>(output));
}
 802470c:	bf00      	nop
 802470e:	377c      	adds	r7, #124	; 0x7c
 8024710:	46bd      	mov	sp, r7
 8024712:	bd90      	pop	{r4, r7, pc}

08024714 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>:

void AverageEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
                          const TfLitePoolParams* params, const OpData& data,
                          const TfLiteEvalTensor* input,
                          TfLiteEvalTensor* output) {
 8024714:	b590      	push	{r4, r7, lr}
 8024716:	b0c1      	sub	sp, #260	; 0x104
 8024718:	af04      	add	r7, sp, #16
 802471a:	60f8      	str	r0, [r7, #12]
 802471c:	60b9      	str	r1, [r7, #8]
 802471e:	607a      	str	r2, [r7, #4]
 8024720:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
 8024722:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024726:	7a1b      	ldrb	r3, [r3, #8]
 8024728:	2b03      	cmp	r3, #3
 802472a:	d006      	beq.n	802473a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x26>
 802472c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024730:	7a1b      	ldrb	r3, [r3, #8]
 8024732:	2b09      	cmp	r3, #9
 8024734:	d001      	beq.n	802473a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x26>
 8024736:	f007 fd2d 	bl	802c194 <abort>

  if (input->type == kTfLiteUInt8) {
 802473a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 802473e:	7a1b      	ldrb	r3, [r3, #8]
 8024740:	2b03      	cmp	r3, #3
 8024742:	d146      	bne.n	80247d2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0xbe>
    PoolParams op_params;
    op_params.stride_height = params->stride_height;
 8024744:	687b      	ldr	r3, [r7, #4]
 8024746:	689b      	ldr	r3, [r3, #8]
 8024748:	61fb      	str	r3, [r7, #28]
    op_params.stride_width = params->stride_width;
 802474a:	687b      	ldr	r3, [r7, #4]
 802474c:	685b      	ldr	r3, [r3, #4]
 802474e:	623b      	str	r3, [r7, #32]
    op_params.filter_height = params->filter_height;
 8024750:	687b      	ldr	r3, [r7, #4]
 8024752:	691b      	ldr	r3, [r3, #16]
 8024754:	627b      	str	r3, [r7, #36]	; 0x24
    op_params.filter_width = params->filter_width;
 8024756:	687b      	ldr	r3, [r7, #4]
 8024758:	68db      	ldr	r3, [r3, #12]
 802475a:	62bb      	str	r3, [r7, #40]	; 0x28
    op_params.padding_values.height = data.padding.height;
 802475c:	683b      	ldr	r3, [r7, #0]
 802475e:	685b      	ldr	r3, [r3, #4]
 8024760:	b21b      	sxth	r3, r3
 8024762:	82bb      	strh	r3, [r7, #20]
    op_params.padding_values.width = data.padding.width;
 8024764:	683b      	ldr	r3, [r7, #0]
 8024766:	681b      	ldr	r3, [r3, #0]
 8024768:	b21b      	sxth	r3, r3
 802476a:	827b      	strh	r3, [r7, #18]
    op_params.quantized_activation_min = data.activation_min;
 802476c:	683b      	ldr	r3, [r7, #0]
 802476e:	695b      	ldr	r3, [r3, #20]
 8024770:	62fb      	str	r3, [r7, #44]	; 0x2c
    op_params.quantized_activation_max = data.activation_max;
 8024772:	683b      	ldr	r3, [r7, #0]
 8024774:	699b      	ldr	r3, [r3, #24]
 8024776:	633b      	str	r3, [r7, #48]	; 0x30

    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8024778:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 802477c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8024780:	4618      	mov	r0, r3
 8024782:	f7ff f820 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8024786:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 802478a:	f7fc f809 	bl	80207a0 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 802478e:	4604      	mov	r4, r0
                               tflite::micro::GetTensorData<uint8_t>(input),
                               tflite::micro::GetTensorShape(output),
 8024790:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8024794:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8024798:	4618      	mov	r0, r3
 802479a:	f7ff f814 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 802479e:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80247a2:	f7fc f80c 	bl	80207be <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 80247a6:	4602      	mov	r2, r0
 80247a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80247ac:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 80247b0:	f107 0010 	add.w	r0, r7, #16
 80247b4:	9200      	str	r2, [sp, #0]
 80247b6:	4622      	mov	r2, r4
 80247b8:	f7ff fb44 	bl	8023e44 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
                               tflite::micro::GetTensorShape(output),
 80247bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80247c0:	4618      	mov	r0, r3
 80247c2:	f7fa fffe 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 80247c6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80247ca:	4618      	mov	r0, r3
 80247cc:	f7fa fff9 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
                       tflite::micro::GetTensorData<int8_t>(input),
                       &filter_dims, &output_dims,
                       tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
  }
}
 80247d0:	e0ae      	b.n	8024930 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x21c>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80247d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80247d6:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80247da:	4618      	mov	r0, r3
 80247dc:	f7fe fff3 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80247e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80247e4:	4618      	mov	r0, r3
 80247e6:	f7fb f802 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80247ea:	4603      	mov	r3, r0
 80247ec:	2b04      	cmp	r3, #4
 80247ee:	d001      	beq.n	80247f4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0xe0>
 80247f0:	f007 fcd0 	bl	802c194 <abort>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80247f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80247f8:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80247fc:	4618      	mov	r0, r3
 80247fe:	f7fe ffe2 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8024802:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8024806:	4618      	mov	r0, r3
 8024808:	f7fa fff1 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802480c:	4603      	mov	r3, r0
 802480e:	2b04      	cmp	r3, #4
 8024810:	d001      	beq.n	8024816 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x102>
 8024812:	f007 fcbf 	bl	802c194 <abort>
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8024816:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 802481a:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 802481e:	2303      	movs	r3, #3
 8024820:	2103      	movs	r1, #3
 8024822:	f7fc fac2 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8024826:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
    input_dims.n = 1;
 802482a:	2301      	movs	r3, #1
 802482c:	67fb      	str	r3, [r7, #124]	; 0x7c
    input_dims.h = input_shape.Dims(1);
 802482e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8024832:	2101      	movs	r1, #1
 8024834:	4618      	mov	r0, r3
 8024836:	f7fb f975 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 802483a:	4603      	mov	r3, r0
 802483c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    input_dims.w = input_shape.Dims(2);
 8024840:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8024844:	2102      	movs	r1, #2
 8024846:	4618      	mov	r0, r3
 8024848:	f7fb f96c 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 802484c:	4603      	mov	r3, r0
 802484e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    input_dims.c = depth;
 8024852:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024856:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    output_dims.n = 1;
 802485a:	2301      	movs	r3, #1
 802485c:	66fb      	str	r3, [r7, #108]	; 0x6c
    output_dims.h = output_shape.Dims(1);
 802485e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8024862:	2101      	movs	r1, #1
 8024864:	4618      	mov	r0, r3
 8024866:	f7fb f95d 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 802486a:	4603      	mov	r3, r0
 802486c:	673b      	str	r3, [r7, #112]	; 0x70
    output_dims.w = output_shape.Dims(2);
 802486e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8024872:	2102      	movs	r1, #2
 8024874:	4618      	mov	r0, r3
 8024876:	f7fb f955 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 802487a:	4603      	mov	r3, r0
 802487c:	677b      	str	r3, [r7, #116]	; 0x74
    output_dims.c = depth;
 802487e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024882:	67bb      	str	r3, [r7, #120]	; 0x78
    pool_params.stride.h = params->stride_height;
 8024884:	687b      	ldr	r3, [r7, #4]
 8024886:	689b      	ldr	r3, [r3, #8]
 8024888:	65bb      	str	r3, [r7, #88]	; 0x58
    pool_params.stride.w = params->stride_width;
 802488a:	687b      	ldr	r3, [r7, #4]
 802488c:	685b      	ldr	r3, [r3, #4]
 802488e:	657b      	str	r3, [r7, #84]	; 0x54
    pool_params.padding.h = data.padding.height;
 8024890:	683b      	ldr	r3, [r7, #0]
 8024892:	685b      	ldr	r3, [r3, #4]
 8024894:	663b      	str	r3, [r7, #96]	; 0x60
    pool_params.padding.w = data.padding.width;
 8024896:	683b      	ldr	r3, [r7, #0]
 8024898:	681b      	ldr	r3, [r3, #0]
 802489a:	65fb      	str	r3, [r7, #92]	; 0x5c
    pool_params.activation.min = data.activation_min;
 802489c:	683b      	ldr	r3, [r7, #0]
 802489e:	695b      	ldr	r3, [r3, #20]
 80248a0:	667b      	str	r3, [r7, #100]	; 0x64
    pool_params.activation.max = data.activation_max;
 80248a2:	683b      	ldr	r3, [r7, #0]
 80248a4:	699b      	ldr	r3, [r3, #24]
 80248a6:	66bb      	str	r3, [r7, #104]	; 0x68
    filter_dims.n = 1;
 80248a8:	2301      	movs	r3, #1
 80248aa:	647b      	str	r3, [r7, #68]	; 0x44
    filter_dims.h = params->filter_height;
 80248ac:	687b      	ldr	r3, [r7, #4]
 80248ae:	691b      	ldr	r3, [r3, #16]
 80248b0:	64bb      	str	r3, [r7, #72]	; 0x48
    filter_dims.w = params->filter_width;
 80248b2:	687b      	ldr	r3, [r7, #4]
 80248b4:	68db      	ldr	r3, [r3, #12]
 80248b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    filter_dims.c = 1;
 80248b8:	2301      	movs	r3, #1
 80248ba:	653b      	str	r3, [r7, #80]	; 0x50
    ctx.buf = nullptr;
 80248bc:	2300      	movs	r3, #0
 80248be:	63fb      	str	r3, [r7, #60]	; 0x3c
    ctx.size = 0;
 80248c0:	2300      	movs	r3, #0
 80248c2:	643b      	str	r3, [r7, #64]	; 0x40
    if (data.buffer_idx > -1) {
 80248c4:	683b      	ldr	r3, [r7, #0]
 80248c6:	691b      	ldr	r3, [r3, #16]
 80248c8:	2b00      	cmp	r3, #0
 80248ca:	db08      	blt.n	80248de <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x1ca>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 80248cc:	68fb      	ldr	r3, [r7, #12]
 80248ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80248d0:	683a      	ldr	r2, [r7, #0]
 80248d2:	6912      	ldr	r2, [r2, #16]
 80248d4:	4611      	mov	r1, r2
 80248d6:	68f8      	ldr	r0, [r7, #12]
 80248d8:	4798      	blx	r3
 80248da:	4603      	mov	r3, r0
 80248dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    TFLITE_DCHECK_EQ(
 80248de:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80248e2:	f7fb fef1 	bl	80206c8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80248e6:	4604      	mov	r4, r0
 80248e8:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80248ec:	f7fb fefb 	bl	80206e6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80248f0:	4603      	mov	r3, r0
 80248f2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80248f6:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80248fa:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80248fe:	9302      	str	r3, [sp, #8]
 8024900:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8024904:	9301      	str	r3, [sp, #4]
 8024906:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802490a:	9300      	str	r3, [sp, #0]
 802490c:	4623      	mov	r3, r4
 802490e:	f7f3 fd73 	bl	80183f8 <arm_avgpool_s8>
 8024912:	4603      	mov	r3, r0
 8024914:	2b00      	cmp	r3, #0
 8024916:	d001      	beq.n	802491c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x208>
 8024918:	f007 fc3c 	bl	802c194 <abort>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 802491c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8024920:	4618      	mov	r0, r3
 8024922:	f7fa ff4e 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8024926:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 802492a:	4618      	mov	r0, r3
 802492c:	f7fa ff49 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8024930:	bf00      	nop
 8024932:	37f4      	adds	r7, #244	; 0xf4
 8024934:	46bd      	mov	sp, r7
 8024936:	bd90      	pop	{r4, r7, pc}

08024938 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>:

void MaxEvalFloat(TfLiteContext* context, TfLiteNode* node,
                  TfLitePoolParams* params, const OpData& data,
                  const TfLiteEvalTensor* input, TfLiteEvalTensor* output) {
 8024938:	b590      	push	{r4, r7, lr}
 802493a:	b0a1      	sub	sp, #132	; 0x84
 802493c:	af02      	add	r7, sp, #8
 802493e:	60f8      	str	r0, [r7, #12]
 8024940:	60b9      	str	r1, [r7, #8]
 8024942:	607a      	str	r2, [r7, #4]
 8024944:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 8024946:	687b      	ldr	r3, [r7, #4]
 8024948:	7d1b      	ldrb	r3, [r3, #20]
 802494a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 802494e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8024952:	4618      	mov	r0, r3
 8024954:	f7fc f9be 	bl	8020cd4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8024958:	687b      	ldr	r3, [r7, #4]
 802495a:	689b      	ldr	r3, [r3, #8]
 802495c:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 802495e:	687b      	ldr	r3, [r7, #4]
 8024960:	685b      	ldr	r3, [r3, #4]
 8024962:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8024964:	687b      	ldr	r3, [r7, #4]
 8024966:	691b      	ldr	r3, [r3, #16]
 8024968:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 802496a:	687b      	ldr	r3, [r7, #4]
 802496c:	68db      	ldr	r3, [r3, #12]
 802496e:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 8024970:	683b      	ldr	r3, [r7, #0]
 8024972:	685b      	ldr	r3, [r3, #4]
 8024974:	b21b      	sxth	r3, r3
 8024976:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 8024978:	683b      	ldr	r3, [r7, #0]
 802497a:	681b      	ldr	r3, [r3, #0]
 802497c:	b21b      	sxth	r3, r3
 802497e:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = data.activation_min_f32;
 8024980:	683b      	ldr	r3, [r7, #0]
 8024982:	69db      	ldr	r3, [r3, #28]
 8024984:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = data.activation_max_f32;
 8024986:	683b      	ldr	r3, [r7, #0]
 8024988:	6a1b      	ldr	r3, [r3, #32]
 802498a:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 802498c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8024990:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8024994:	4618      	mov	r0, r3
 8024996:	f7fe ff16 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 802499a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 802499e:	f7fb fe73 	bl	8020688 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80249a2:	4604      	mov	r4, r0
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
 80249a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80249a8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80249ac:	4618      	mov	r0, r3
 80249ae:	f7fe ff0a 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 80249b2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80249b6:	f7fb fe76 	bl	80206a6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80249ba:	4602      	mov	r2, r0
 80249bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80249c0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80249c4:	f107 0014 	add.w	r0, r7, #20
 80249c8:	9200      	str	r2, [sp, #0]
 80249ca:	4622      	mov	r2, r4
 80249cc:	f7ff fb74 	bl	80240b8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         tflite::micro::GetTensorShape(output),
 80249d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80249d4:	4618      	mov	r0, r3
 80249d6:	f7fa fef4 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 80249da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80249de:	4618      	mov	r0, r3
 80249e0:	f7fa feef 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
                         tflite::micro::GetTensorData<float>(output));
}
 80249e4:	bf00      	nop
 80249e6:	377c      	adds	r7, #124	; 0x7c
 80249e8:	46bd      	mov	sp, r7
 80249ea:	bd90      	pop	{r4, r7, pc}

080249ec <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_121MaxEvalQuantizedUInt8EP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>:

void MaxEvalQuantizedUInt8(TfLiteContext* context, TfLiteNode* node,
                           TfLitePoolParams* params, const OpData& data,
                           const TfLiteEvalTensor* input,
                           TfLiteEvalTensor* output) {
 80249ec:	b590      	push	{r4, r7, lr}
 80249ee:	b09f      	sub	sp, #124	; 0x7c
 80249f0:	af02      	add	r7, sp, #8
 80249f2:	60f8      	str	r0, [r7, #12]
 80249f4:	60b9      	str	r1, [r7, #8]
 80249f6:	607a      	str	r2, [r7, #4]
 80249f8:	603b      	str	r3, [r7, #0]
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 80249fa:	687b      	ldr	r3, [r7, #4]
 80249fc:	689b      	ldr	r3, [r3, #8]
 80249fe:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 8024a00:	687b      	ldr	r3, [r7, #4]
 8024a02:	685b      	ldr	r3, [r3, #4]
 8024a04:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8024a06:	687b      	ldr	r3, [r7, #4]
 8024a08:	691b      	ldr	r3, [r3, #16]
 8024a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8024a0c:	687b      	ldr	r3, [r7, #4]
 8024a0e:	68db      	ldr	r3, [r3, #12]
 8024a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 8024a12:	683b      	ldr	r3, [r7, #0]
 8024a14:	685b      	ldr	r3, [r3, #4]
 8024a16:	b21b      	sxth	r3, r3
 8024a18:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 8024a1a:	683b      	ldr	r3, [r7, #0]
 8024a1c:	681b      	ldr	r3, [r3, #0]
 8024a1e:	b21b      	sxth	r3, r3
 8024a20:	82fb      	strh	r3, [r7, #22]
  op_params.quantized_activation_min = data.activation_min;
 8024a22:	683b      	ldr	r3, [r7, #0]
 8024a24:	695b      	ldr	r3, [r3, #20]
 8024a26:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.quantized_activation_max = data.activation_max;
 8024a28:	683b      	ldr	r3, [r7, #0]
 8024a2a:	699b      	ldr	r3, [r3, #24]
 8024a2c:	637b      	str	r3, [r7, #52]	; 0x34
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8024a2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8024a32:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8024a36:	4618      	mov	r0, r3
 8024a38:	f7fe fec5 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8024a3c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8024a40:	f7fb feae 	bl	80207a0 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8024a44:	4604      	mov	r4, r0
                         tflite::micro::GetTensorData<uint8_t>(input),
                         tflite::micro::GetTensorShape(output),
 8024a46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8024a4a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8024a4e:	4618      	mov	r0, r3
 8024a50:	f7fe feb9 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8024a54:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8024a58:	f7fb feb1 	bl	80207be <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8024a5c:	4602      	mov	r2, r0
 8024a5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8024a62:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8024a66:	f107 0014 	add.w	r0, r7, #20
 8024a6a:	9200      	str	r2, [sp, #0]
 8024a6c:	4622      	mov	r2, r4
 8024a6e:	f7ff fc47 	bl	8024300 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
                         tflite::micro::GetTensorShape(output),
 8024a72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8024a76:	4618      	mov	r0, r3
 8024a78:	f7fa fea3 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8024a7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8024a80:	4618      	mov	r0, r3
 8024a82:	f7fa fe9e 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
                         tflite::micro::GetTensorData<uint8_t>(output));
}
 8024a86:	bf00      	nop
 8024a88:	3774      	adds	r7, #116	; 0x74
 8024a8a:	46bd      	mov	sp, r7
 8024a8c:	bd90      	pop	{r4, r7, pc}

08024a8e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>:

TfLiteStatus MaxEvalInt8(TfLiteContext* context, const TfLiteNode* node,
                         const TfLitePoolParams* params, const OpData& data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
 8024a8e:	b590      	push	{r4, r7, lr}
 8024a90:	b0ab      	sub	sp, #172	; 0xac
 8024a92:	af04      	add	r7, sp, #16
 8024a94:	60f8      	str	r0, [r7, #12]
 8024a96:	60b9      	str	r1, [r7, #8]
 8024a98:	607a      	str	r2, [r7, #4]
 8024a9a:	603b      	str	r3, [r7, #0]
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8024a9c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8024aa0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8024aa4:	4618      	mov	r0, r3
 8024aa6:	f7fe fe8e 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8024aaa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8024aae:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8024ab2:	4618      	mov	r0, r3
 8024ab4:	f7fe fe87 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8024ab8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8024abc:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8024ac0:	2303      	movs	r3, #3
 8024ac2:	2103      	movs	r1, #3
 8024ac4:	f7fc f971 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8024ac8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  cmsis_nn_dims input_dims;
  input_dims.n = 1;
 8024acc:	2301      	movs	r3, #1
 8024ace:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 8024ad0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8024ad4:	2101      	movs	r1, #1
 8024ad6:	4618      	mov	r0, r3
 8024ad8:	f7fb f824 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8024adc:	4603      	mov	r3, r0
 8024ade:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 8024ae0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8024ae4:	2102      	movs	r1, #2
 8024ae6:	4618      	mov	r0, r3
 8024ae8:	f7fb f81c 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8024aec:	4603      	mov	r3, r0
 8024aee:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = depth;
 8024af0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8024af4:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims output_dims;
  output_dims.n = 1;
 8024af6:	2301      	movs	r3, #1
 8024af8:	647b      	str	r3, [r7, #68]	; 0x44
  output_dims.h = output_shape.Dims(1);
 8024afa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8024afe:	2101      	movs	r1, #1
 8024b00:	4618      	mov	r0, r3
 8024b02:	f7fb f80f 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8024b06:	4603      	mov	r3, r0
 8024b08:	64bb      	str	r3, [r7, #72]	; 0x48
  output_dims.w = output_shape.Dims(2);
 8024b0a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8024b0e:	2102      	movs	r1, #2
 8024b10:	4618      	mov	r0, r3
 8024b12:	f7fb f807 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8024b16:	4603      	mov	r3, r0
 8024b18:	64fb      	str	r3, [r7, #76]	; 0x4c
  output_dims.c = depth;
 8024b1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8024b1e:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_pool_params pool_params;
  pool_params.stride.h = params->stride_height;
 8024b20:	687b      	ldr	r3, [r7, #4]
 8024b22:	689b      	ldr	r3, [r3, #8]
 8024b24:	633b      	str	r3, [r7, #48]	; 0x30
  pool_params.stride.w = params->stride_width;
 8024b26:	687b      	ldr	r3, [r7, #4]
 8024b28:	685b      	ldr	r3, [r3, #4]
 8024b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pool_params.padding.h = data.padding.height;
 8024b2c:	683b      	ldr	r3, [r7, #0]
 8024b2e:	685b      	ldr	r3, [r3, #4]
 8024b30:	63bb      	str	r3, [r7, #56]	; 0x38
  pool_params.padding.w = data.padding.width;
 8024b32:	683b      	ldr	r3, [r7, #0]
 8024b34:	681b      	ldr	r3, [r3, #0]
 8024b36:	637b      	str	r3, [r7, #52]	; 0x34
  pool_params.activation.min = data.activation_min;
 8024b38:	683b      	ldr	r3, [r7, #0]
 8024b3a:	695b      	ldr	r3, [r3, #20]
 8024b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pool_params.activation.max = data.activation_max;
 8024b3e:	683b      	ldr	r3, [r7, #0]
 8024b40:	699b      	ldr	r3, [r3, #24]
 8024b42:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims filter_dims;
  filter_dims.n = 1;
 8024b44:	2301      	movs	r3, #1
 8024b46:	61fb      	str	r3, [r7, #28]
  filter_dims.h = params->filter_height;
 8024b48:	687b      	ldr	r3, [r7, #4]
 8024b4a:	691b      	ldr	r3, [r3, #16]
 8024b4c:	623b      	str	r3, [r7, #32]
  filter_dims.w = params->filter_width;
 8024b4e:	687b      	ldr	r3, [r7, #4]
 8024b50:	68db      	ldr	r3, [r3, #12]
 8024b52:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.c = 1;
 8024b54:	2301      	movs	r3, #1
 8024b56:	62bb      	str	r3, [r7, #40]	; 0x28

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 8024b58:	2300      	movs	r3, #0
 8024b5a:	617b      	str	r3, [r7, #20]
  ctx.size = 0;
 8024b5c:	2300      	movs	r3, #0
 8024b5e:	61bb      	str	r3, [r7, #24]
  if (data.buffer_idx > -1) {
 8024b60:	683b      	ldr	r3, [r7, #0]
 8024b62:	691b      	ldr	r3, [r3, #16]
 8024b64:	2b00      	cmp	r3, #0
 8024b66:	db08      	blt.n	8024b7a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0xec>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8024b68:	68fb      	ldr	r3, [r7, #12]
 8024b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024b6c:	683a      	ldr	r2, [r7, #0]
 8024b6e:	6912      	ldr	r2, [r2, #16]
 8024b70:	4611      	mov	r1, r2
 8024b72:	68f8      	ldr	r0, [r7, #12]
 8024b74:	4798      	blx	r3
 8024b76:	4603      	mov	r3, r0
 8024b78:	617b      	str	r3, [r7, #20]
  }

  TFLITE_DCHECK_EQ(
 8024b7a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8024b7e:	f7fb fda3 	bl	80206c8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8024b82:	4604      	mov	r4, r0
 8024b84:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8024b88:	f7fb fdad 	bl	80206e6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8024b8c:	4603      	mov	r3, r0
 8024b8e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8024b92:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8024b96:	f107 0014 	add.w	r0, r7, #20
 8024b9a:	9302      	str	r3, [sp, #8]
 8024b9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8024ba0:	9301      	str	r3, [sp, #4]
 8024ba2:	f107 031c 	add.w	r3, r7, #28
 8024ba6:	9300      	str	r3, [sp, #0]
 8024ba8:	4623      	mov	r3, r4
 8024baa:	f7f3 fe5c 	bl	8018866 <arm_max_pool_s8>
 8024bae:	4603      	mov	r3, r0
 8024bb0:	2b00      	cmp	r3, #0
 8024bb2:	d001      	beq.n	8024bb8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x12a>
 8024bb4:	f007 faee 	bl	802c194 <abort>
                      tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
                      &output_dims,
                      tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 8024bb8:	2400      	movs	r4, #0
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8024bba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8024bbe:	4618      	mov	r0, r3
 8024bc0:	f7fa fdff 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8024bc4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8024bc8:	4618      	mov	r0, r3
 8024bca:	f7fa fdfa 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 8024bce:	4623      	mov	r3, r4
}
 8024bd0:	4618      	mov	r0, r3
 8024bd2:	379c      	adds	r7, #156	; 0x9c
 8024bd4:	46bd      	mov	sp, r7
 8024bd6:	bd90      	pop	{r4, r7, pc}

08024bd8 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8024bd8:	b580      	push	{r7, lr}
 8024bda:	b084      	sub	sp, #16
 8024bdc:	af00      	add	r7, sp, #0
 8024bde:	60f8      	str	r0, [r7, #12]
 8024be0:	60b9      	str	r1, [r7, #8]
 8024be2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8024be4:	68fb      	ldr	r3, [r7, #12]
 8024be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024be8:	2b00      	cmp	r3, #0
 8024bea:	d101      	bne.n	8024bf0 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0x18>
 8024bec:	f007 fad2 	bl	802c194 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8024bf0:	68fb      	ldr	r3, [r7, #12]
 8024bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024bf4:	2124      	movs	r1, #36	; 0x24
 8024bf6:	68f8      	ldr	r0, [r7, #12]
 8024bf8:	4798      	blx	r3
 8024bfa:	4603      	mov	r3, r0
}
 8024bfc:	4618      	mov	r0, r3
 8024bfe:	3710      	adds	r7, #16
 8024c00:	46bd      	mov	sp, r7
 8024c02:	bd80      	pop	{r7, pc}

08024c04 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8024c04:	b590      	push	{r4, r7, lr}
 8024c06:	b08b      	sub	sp, #44	; 0x2c
 8024c08:	af02      	add	r7, sp, #8
 8024c0a:	6078      	str	r0, [r7, #4]
 8024c0c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8024c0e:	683b      	ldr	r3, [r7, #0]
 8024c10:	691b      	ldr	r3, [r3, #16]
 8024c12:	2b00      	cmp	r3, #0
 8024c14:	d101      	bne.n	8024c1a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8024c16:	f007 fabd 	bl	802c194 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8024c1a:	683b      	ldr	r3, [r7, #0]
 8024c1c:	695b      	ldr	r3, [r3, #20]
 8024c1e:	2b00      	cmp	r3, #0
 8024c20:	d101      	bne.n	8024c26 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8024c22:	f007 fab7 	bl	802c194 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8024c26:	683b      	ldr	r3, [r7, #0]
 8024c28:	691b      	ldr	r3, [r3, #16]
 8024c2a:	61fb      	str	r3, [r7, #28]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8024c2c:	683b      	ldr	r3, [r7, #0]
 8024c2e:	695b      	ldr	r3, [r3, #20]
 8024c30:	61bb      	str	r3, [r7, #24]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8024c32:	2200      	movs	r2, #0
 8024c34:	6839      	ldr	r1, [r7, #0]
 8024c36:	6878      	ldr	r0, [r7, #4]
 8024c38:	f7fa f9ae 	bl	801ef98 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8024c3c:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 8024c3e:	697b      	ldr	r3, [r7, #20]
 8024c40:	2b00      	cmp	r3, #0
 8024c42:	d10b      	bne.n	8024c5c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
 8024c44:	687b      	ldr	r3, [r7, #4]
 8024c46:	695c      	ldr	r4, [r3, #20]
 8024c48:	4b19      	ldr	r3, [pc, #100]	; (8024cb0 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
 8024c4a:	9300      	str	r3, [sp, #0]
 8024c4c:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8024c50:	4a18      	ldr	r2, [pc, #96]	; (8024cb4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
 8024c52:	4919      	ldr	r1, [pc, #100]	; (8024cb8 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 8024c54:	6878      	ldr	r0, [r7, #4]
 8024c56:	47a0      	blx	r4
 8024c58:	2301      	movs	r3, #1
 8024c5a:	e024      	b.n	8024ca6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8024c5c:	2200      	movs	r2, #0
 8024c5e:	6839      	ldr	r1, [r7, #0]
 8024c60:	6878      	ldr	r0, [r7, #4]
 8024c62:	f7fa f9a9 	bl	801efb8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8024c66:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, output != nullptr);
 8024c68:	693b      	ldr	r3, [r7, #16]
 8024c6a:	2b00      	cmp	r3, #0
 8024c6c:	d10b      	bne.n	8024c86 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x82>
 8024c6e:	687b      	ldr	r3, [r7, #4]
 8024c70:	695c      	ldr	r4, [r3, #20]
 8024c72:	4b12      	ldr	r3, [pc, #72]	; (8024cbc <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 8024c74:	9300      	str	r3, [sp, #0]
 8024c76:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8024c7a:	4a0e      	ldr	r2, [pc, #56]	; (8024cb4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
 8024c7c:	490e      	ldr	r1, [pc, #56]	; (8024cb8 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 8024c7e:	6878      	ldr	r0, [r7, #4]
 8024c80:	47a0      	blx	r4
 8024c82:	2301      	movs	r3, #1
 8024c84:	e00f      	b.n	8024ca6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 8024c86:	69fb      	ldr	r3, [r7, #28]
 8024c88:	9300      	str	r3, [sp, #0]
 8024c8a:	693b      	ldr	r3, [r7, #16]
 8024c8c:	697a      	ldr	r2, [r7, #20]
 8024c8e:	69b9      	ldr	r1, [r7, #24]
 8024c90:	6878      	ldr	r0, [r7, #4]
 8024c92:	f7ff fc76 	bl	8024582 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 8024c96:	4603      	mov	r3, r0
 8024c98:	73fb      	strb	r3, [r7, #15]
 8024c9a:	7bfb      	ldrb	r3, [r7, #15]
 8024c9c:	2b00      	cmp	r3, #0
 8024c9e:	d001      	beq.n	8024ca4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa0>
 8024ca0:	7bfb      	ldrb	r3, [r7, #15]
 8024ca2:	e000      	b.n	8024ca6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>

  return kTfLiteOk;
 8024ca4:	2300      	movs	r3, #0
}
 8024ca6:	4618      	mov	r0, r3
 8024ca8:	3724      	adds	r7, #36	; 0x24
 8024caa:	46bd      	mov	sp, r7
 8024cac:	bd90      	pop	{r4, r7, pc}
 8024cae:	bf00      	nop
 8024cb0:	0802f264 	.word	0x0802f264
 8024cb4:	0802f1bc 	.word	0x0802f1bc
 8024cb8:	0802f24c 	.word	0x0802f24c
 8024cbc:	0802f278 	.word	0x0802f278

08024cc0 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 8024cc0:	b5b0      	push	{r4, r5, r7, lr}
 8024cc2:	b09a      	sub	sp, #104	; 0x68
 8024cc4:	af02      	add	r7, sp, #8
 8024cc6:	6078      	str	r0, [r7, #4]
 8024cc8:	6039      	str	r1, [r7, #0]
 8024cca:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 8024ccc:	683b      	ldr	r3, [r7, #0]
 8024cce:	691b      	ldr	r3, [r3, #16]
 8024cd0:	2b00      	cmp	r3, #0
 8024cd2:	d101      	bne.n	8024cd8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x18>
 8024cd4:	f007 fa5e 	bl	802c194 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8024cd8:	683b      	ldr	r3, [r7, #0]
 8024cda:	695b      	ldr	r3, [r3, #20]
 8024cdc:	2b00      	cmp	r3, #0
 8024cde:	d101      	bne.n	8024ce4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x24>
 8024ce0:	f007 fa58 	bl	802c194 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8024ce4:	683b      	ldr	r3, [r7, #0]
 8024ce6:	691b      	ldr	r3, [r3, #16]
 8024ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8024cea:	683b      	ldr	r3, [r7, #0]
 8024cec:	695b      	ldr	r3, [r3, #20]
 8024cee:	65bb      	str	r3, [r7, #88]	; 0x58

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8024cf0:	2200      	movs	r2, #0
 8024cf2:	6839      	ldr	r1, [r7, #0]
 8024cf4:	6878      	ldr	r0, [r7, #4]
 8024cf6:	f7fa f94f 	bl	801ef98 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8024cfa:	6578      	str	r0, [r7, #84]	; 0x54
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8024cfc:	2200      	movs	r2, #0
 8024cfe:	6839      	ldr	r1, [r7, #0]
 8024d00:	6878      	ldr	r0, [r7, #4]
 8024d02:	f7fa f959 	bl	801efb8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8024d06:	6538      	str	r0, [r7, #80]	; 0x50

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 8024d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024d0a:	9300      	str	r3, [sp, #0]
 8024d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8024d0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8024d10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8024d12:	6878      	ldr	r0, [r7, #4]
 8024d14:	f7ff fc35 	bl	8024582 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 8024d18:	4603      	mov	r3, r0
 8024d1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8024d1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8024d22:	2b00      	cmp	r3, #0
 8024d24:	d002      	beq.n	8024d2c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 8024d26:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 8024d2a:	e064      	b.n	8024df6 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>

  if (input->type == kTfLiteInt8) {
 8024d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024d2e:	781b      	ldrb	r3, [r3, #0]
 8024d30:	2b09      	cmp	r3, #9
 8024d32:	d15f      	bne.n	8024df4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x134>
    RuntimeShape input_shape = GetTensorShape(input);
 8024d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8024d38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8024d3a:	4618      	mov	r0, r3
 8024d3c:	f7fa fdbb 	bl	801f8b6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8024d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8024d44:	4618      	mov	r0, r3
 8024d46:	f7fa fd52 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8024d4a:	4603      	mov	r3, r0
 8024d4c:	2b04      	cmp	r3, #4
 8024d4e:	d001      	beq.n	8024d54 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x94>
 8024d50:	f007 fa20 	bl	802c194 <abort>

    RuntimeShape output_shape = GetTensorShape(output);
 8024d54:	f107 030c 	add.w	r3, r7, #12
 8024d58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8024d5a:	4618      	mov	r0, r3
 8024d5c:	f7fa fdab 	bl	801f8b6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8024d60:	f107 030c 	add.w	r3, r7, #12
 8024d64:	4618      	mov	r0, r3
 8024d66:	f7fa fd42 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8024d6a:	4603      	mov	r3, r0
 8024d6c:	2b04      	cmp	r3, #4
 8024d6e:	d001      	beq.n	8024d74 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xb4>
 8024d70:	f007 fa10 	bl	802c194 <abort>

    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8024d74:	f107 020c 	add.w	r2, r7, #12
 8024d78:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8024d7c:	2303      	movs	r3, #3
 8024d7e:	2103      	movs	r1, #3
 8024d80:	f7fc f813 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8024d84:	64b8      	str	r0, [r7, #72]	; 0x48
    const int output_width = output_shape.Dims(2);
 8024d86:	f107 030c 	add.w	r3, r7, #12
 8024d8a:	2102      	movs	r1, #2
 8024d8c:	4618      	mov	r0, r3
 8024d8e:	f7fa fec9 	bl	801fb24 <_ZNK6tflite12RuntimeShape4DimsEi>
 8024d92:	6478      	str	r0, [r7, #68]	; 0x44

    const int32_t buffer_size =
        arm_avgpool_s8_get_buffer_size(output_width, depth);
 8024d94:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8024d96:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8024d98:	f7f3 fc38 	bl	801860c <arm_avgpool_s8_get_buffer_size>
 8024d9c:	6438      	str	r0, [r7, #64]	; 0x40

    if (buffer_size > 0) {
 8024d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024da0:	2b00      	cmp	r3, #0
 8024da2:	dd11      	ble.n	8024dc8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8024da4:	687b      	ldr	r3, [r7, #4]
 8024da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024da8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8024daa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8024dac:	3210      	adds	r2, #16
 8024dae:	6878      	ldr	r0, [r7, #4]
 8024db0:	4798      	blx	r3
 8024db2:	4603      	mov	r3, r0
 8024db4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8024db8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8024dbc:	2b00      	cmp	r3, #0
 8024dbe:	d007      	beq.n	8024dd0 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x110>
 8024dc0:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8024dc4:	2500      	movs	r5, #0
 8024dc6:	e004      	b.n	8024dd2 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x112>
          context, buffer_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 8024dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024dca:	f04f 32ff 	mov.w	r2, #4294967295
 8024dce:	611a      	str	r2, [r3, #16]
 8024dd0:	2501      	movs	r5, #1
 8024dd2:	f107 030c 	add.w	r3, r7, #12
 8024dd6:	4618      	mov	r0, r3
 8024dd8:	f7fa fcf3 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
 8024ddc:	2d01      	cmp	r5, #1
 8024dde:	d001      	beq.n	8024de4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x124>
 8024de0:	2500      	movs	r5, #0
 8024de2:	e000      	b.n	8024de6 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x126>
 8024de4:	2501      	movs	r5, #1
 8024de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8024dea:	4618      	mov	r0, r3
 8024dec:	f7fa fce9 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
 8024df0:	2d01      	cmp	r5, #1
 8024df2:	d100      	bne.n	8024df6 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>
    }
  }
  return kTfLiteOk;
 8024df4:	2400      	movs	r4, #0
}
 8024df6:	4623      	mov	r3, r4
 8024df8:	4618      	mov	r0, r3
 8024dfa:	3760      	adds	r7, #96	; 0x60
 8024dfc:	46bd      	mov	sp, r7
 8024dfe:	bdb0      	pop	{r4, r5, r7, pc}

08024e00 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 8024e00:	b590      	push	{r4, r7, lr}
 8024e02:	b089      	sub	sp, #36	; 0x24
 8024e04:	af02      	add	r7, sp, #8
 8024e06:	6078      	str	r0, [r7, #4]
 8024e08:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8024e0a:	683b      	ldr	r3, [r7, #0]
 8024e0c:	695b      	ldr	r3, [r3, #20]
 8024e0e:	2b00      	cmp	r3, #0
 8024e10:	d101      	bne.n	8024e16 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8024e12:	f007 f9bf 	bl	802c194 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8024e16:	683b      	ldr	r3, [r7, #0]
 8024e18:	695b      	ldr	r3, [r3, #20]
 8024e1a:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 8024e1c:	683b      	ldr	r3, [r7, #0]
 8024e1e:	691b      	ldr	r3, [r3, #16]
 8024e20:	2b00      	cmp	r3, #0
 8024e22:	d101      	bne.n	8024e28 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x28>
 8024e24:	f007 f9b6 	bl	802c194 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8024e28:	683b      	ldr	r3, [r7, #0]
 8024e2a:	691b      	ldr	r3, [r3, #16]
 8024e2c:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8024e2e:	2200      	movs	r2, #0
 8024e30:	6839      	ldr	r1, [r7, #0]
 8024e32:	6878      	ldr	r0, [r7, #4]
 8024e34:	f7fa ff4a 	bl	801fccc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8024e38:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8024e3a:	2200      	movs	r2, #0
 8024e3c:	6839      	ldr	r1, [r7, #0]
 8024e3e:	6878      	ldr	r0, [r7, #4]
 8024e40:	f7fa ff54 	bl	801fcec <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8024e44:	60b8      	str	r0, [r7, #8]

  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
 8024e46:	68fb      	ldr	r3, [r7, #12]
 8024e48:	7a1b      	ldrb	r3, [r3, #8]
 8024e4a:	2b09      	cmp	r3, #9
 8024e4c:	d011      	beq.n	8024e72 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x72>
 8024e4e:	2b09      	cmp	r3, #9
 8024e50:	dc1a      	bgt.n	8024e88 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x88>
 8024e52:	2b01      	cmp	r3, #1
 8024e54:	d002      	beq.n	8024e5c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 8024e56:	2b03      	cmp	r3, #3
 8024e58:	d00b      	beq.n	8024e72 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x72>
 8024e5a:	e015      	b.n	8024e88 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x88>
    case kTfLiteFloat32:
      AverageEvalFloat(context, node, params, data, input, output);
 8024e5c:	68bb      	ldr	r3, [r7, #8]
 8024e5e:	9301      	str	r3, [sp, #4]
 8024e60:	68fb      	ldr	r3, [r7, #12]
 8024e62:	9300      	str	r3, [sp, #0]
 8024e64:	693b      	ldr	r3, [r7, #16]
 8024e66:	697a      	ldr	r2, [r7, #20]
 8024e68:	6839      	ldr	r1, [r7, #0]
 8024e6a:	6878      	ldr	r0, [r7, #4]
 8024e6c:	f7ff fbfa 	bl	8024664 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116AverageEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSG_>
      break;
 8024e70:	e018      	b.n	8024ea4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    case kTfLiteUInt8:
    case kTfLiteInt8:
      AverageEvalQuantized(context, node, params, data, input, output);
 8024e72:	68bb      	ldr	r3, [r7, #8]
 8024e74:	9301      	str	r3, [sp, #4]
 8024e76:	68fb      	ldr	r3, [r7, #12]
 8024e78:	9300      	str	r3, [sp, #0]
 8024e7a:	693b      	ldr	r3, [r7, #16]
 8024e7c:	697a      	ldr	r2, [r7, #20]
 8024e7e:	6839      	ldr	r1, [r7, #0]
 8024e80:	6878      	ldr	r0, [r7, #4]
 8024e82:	f7ff fc47 	bl	8024714 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>
      break;
 8024e86:	e00d      	b.n	8024ea4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    default:
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
 8024e88:	687b      	ldr	r3, [r7, #4]
 8024e8a:	695c      	ldr	r4, [r3, #20]
 8024e8c:	68fb      	ldr	r3, [r7, #12]
 8024e8e:	7a1b      	ldrb	r3, [r3, #8]
 8024e90:	4618      	mov	r0, r3
 8024e92:	f7f9 fd23 	bl	801e8dc <TfLiteTypeGetName>
 8024e96:	4603      	mov	r3, r0
 8024e98:	461a      	mov	r2, r3
 8024e9a:	4905      	ldr	r1, [pc, #20]	; (8024eb0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
 8024e9c:	6878      	ldr	r0, [r7, #4]
 8024e9e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8024ea0:	2301      	movs	r3, #1
 8024ea2:	e000      	b.n	8024ea6 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa6>
  }
  return kTfLiteOk;
 8024ea4:	2300      	movs	r3, #0
}
 8024ea6:	4618      	mov	r0, r3
 8024ea8:	371c      	adds	r7, #28
 8024eaa:	46bd      	mov	sp, r7
 8024eac:	bd90      	pop	{r4, r7, pc}
 8024eae:	bf00      	nop
 8024eb0:	0802f28c 	.word	0x0802f28c

08024eb4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 8024eb4:	b590      	push	{r4, r7, lr}
 8024eb6:	b089      	sub	sp, #36	; 0x24
 8024eb8:	af02      	add	r7, sp, #8
 8024eba:	6078      	str	r0, [r7, #4]
 8024ebc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8024ebe:	683b      	ldr	r3, [r7, #0]
 8024ec0:	695b      	ldr	r3, [r3, #20]
 8024ec2:	2b00      	cmp	r3, #0
 8024ec4:	d101      	bne.n	8024eca <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8024ec6:	f007 f965 	bl	802c194 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8024eca:	683b      	ldr	r3, [r7, #0]
 8024ecc:	695b      	ldr	r3, [r3, #20]
 8024ece:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 8024ed0:	683b      	ldr	r3, [r7, #0]
 8024ed2:	691b      	ldr	r3, [r3, #16]
 8024ed4:	2b00      	cmp	r3, #0
 8024ed6:	d101      	bne.n	8024edc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x28>
 8024ed8:	f007 f95c 	bl	802c194 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8024edc:	683b      	ldr	r3, [r7, #0]
 8024ede:	691b      	ldr	r3, [r3, #16]
 8024ee0:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8024ee2:	2200      	movs	r2, #0
 8024ee4:	6839      	ldr	r1, [r7, #0]
 8024ee6:	6878      	ldr	r0, [r7, #4]
 8024ee8:	f7fa fef0 	bl	801fccc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8024eec:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8024eee:	2200      	movs	r2, #0
 8024ef0:	6839      	ldr	r1, [r7, #0]
 8024ef2:	6878      	ldr	r0, [r7, #4]
 8024ef4:	f7fa fefa 	bl	801fcec <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8024ef8:	60b8      	str	r0, [r7, #8]

  switch (input->type) {
 8024efa:	68fb      	ldr	r3, [r7, #12]
 8024efc:	7a1b      	ldrb	r3, [r3, #8]
 8024efe:	2b09      	cmp	r3, #9
 8024f00:	d01c      	beq.n	8024f3c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
 8024f02:	2b09      	cmp	r3, #9
 8024f04:	dc25      	bgt.n	8024f52 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
 8024f06:	2b01      	cmp	r3, #1
 8024f08:	d002      	beq.n	8024f10 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 8024f0a:	2b03      	cmp	r3, #3
 8024f0c:	d00b      	beq.n	8024f26 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x72>
 8024f0e:	e020      	b.n	8024f52 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
    case kTfLiteFloat32:
      MaxEvalFloat(context, node, params, data, input, output);
 8024f10:	68bb      	ldr	r3, [r7, #8]
 8024f12:	9301      	str	r3, [sp, #4]
 8024f14:	68fb      	ldr	r3, [r7, #12]
 8024f16:	9300      	str	r3, [sp, #0]
 8024f18:	693b      	ldr	r3, [r7, #16]
 8024f1a:	697a      	ldr	r2, [r7, #20]
 8024f1c:	6839      	ldr	r1, [r7, #0]
 8024f1e:	6878      	ldr	r0, [r7, #4]
 8024f20:	f7ff fd0a 	bl	8024938 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>
      break;
 8024f24:	e023      	b.n	8024f6e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xba>
    case kTfLiteUInt8:
      MaxEvalQuantizedUInt8(context, node, params, data, input, output);
 8024f26:	68bb      	ldr	r3, [r7, #8]
 8024f28:	9301      	str	r3, [sp, #4]
 8024f2a:	68fb      	ldr	r3, [r7, #12]
 8024f2c:	9300      	str	r3, [sp, #0]
 8024f2e:	693b      	ldr	r3, [r7, #16]
 8024f30:	697a      	ldr	r2, [r7, #20]
 8024f32:	6839      	ldr	r1, [r7, #0]
 8024f34:	6878      	ldr	r0, [r7, #4]
 8024f36:	f7ff fd59 	bl	80249ec <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_121MaxEvalQuantizedUInt8EP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>
      break;
 8024f3a:	e018      	b.n	8024f6e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xba>
    case kTfLiteInt8:
      MaxEvalInt8(context, node, params, data, input, output);
 8024f3c:	68bb      	ldr	r3, [r7, #8]
 8024f3e:	9301      	str	r3, [sp, #4]
 8024f40:	68fb      	ldr	r3, [r7, #12]
 8024f42:	9300      	str	r3, [sp, #0]
 8024f44:	693b      	ldr	r3, [r7, #16]
 8024f46:	697a      	ldr	r2, [r7, #20]
 8024f48:	6839      	ldr	r1, [r7, #0]
 8024f4a:	6878      	ldr	r0, [r7, #4]
 8024f4c:	f7ff fd9f 	bl	8024a8e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>
      break;
 8024f50:	e00d      	b.n	8024f6e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xba>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 8024f52:	687b      	ldr	r3, [r7, #4]
 8024f54:	695c      	ldr	r4, [r3, #20]
 8024f56:	68fb      	ldr	r3, [r7, #12]
 8024f58:	7a1b      	ldrb	r3, [r3, #8]
 8024f5a:	4618      	mov	r0, r3
 8024f5c:	f7f9 fcbe 	bl	801e8dc <TfLiteTypeGetName>
 8024f60:	4603      	mov	r3, r0
 8024f62:	461a      	mov	r2, r3
 8024f64:	4904      	ldr	r1, [pc, #16]	; (8024f78 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>)
 8024f66:	6878      	ldr	r0, [r7, #4]
 8024f68:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8024f6a:	2301      	movs	r3, #1
 8024f6c:	e000      	b.n	8024f70 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xbc>
  }
  return kTfLiteOk;
 8024f6e:	2300      	movs	r3, #0
}
 8024f70:	4618      	mov	r0, r3
 8024f72:	371c      	adds	r7, #28
 8024f74:	46bd      	mov	sp, r7
 8024f76:	bd90      	pop	{r4, r7, pc}
 8024f78:	0802f2b8 	.word	0x0802f2b8

08024f7c <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
 8024f7c:	b4b0      	push	{r4, r5, r7}
 8024f7e:	b083      	sub	sp, #12
 8024f80:	af00      	add	r7, sp, #0
 8024f82:	6078      	str	r0, [r7, #4]
          /*prepare=*/pooling::MaxPrepare,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8024f84:	687b      	ldr	r3, [r7, #4]
 8024f86:	4a07      	ldr	r2, [pc, #28]	; (8024fa4 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x28>)
 8024f88:	461c      	mov	r4, r3
 8024f8a:	4615      	mov	r5, r2
 8024f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024f90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8024f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8024f98:	6878      	ldr	r0, [r7, #4]
 8024f9a:	370c      	adds	r7, #12
 8024f9c:	46bd      	mov	sp, r7
 8024f9e:	bcb0      	pop	{r4, r5, r7}
 8024fa0:	4770      	bx	lr
 8024fa2:	bf00      	nop
 8024fa4:	0802f2fc 	.word	0x0802f2fc

08024fa8 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8024fa8:	b480      	push	{r7}
 8024faa:	b083      	sub	sp, #12
 8024fac:	af00      	add	r7, sp, #0
 8024fae:	6078      	str	r0, [r7, #4]
 8024fb0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8024fb2:	687b      	ldr	r3, [r7, #4]
 8024fb4:	781a      	ldrb	r2, [r3, #0]
 8024fb6:	683b      	ldr	r3, [r7, #0]
 8024fb8:	781b      	ldrb	r3, [r3, #0]
 8024fba:	429a      	cmp	r2, r3
 8024fbc:	d201      	bcs.n	8024fc2 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 8024fbe:	683b      	ldr	r3, [r7, #0]
 8024fc0:	e000      	b.n	8024fc4 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 8024fc2:	687b      	ldr	r3, [r7, #4]
    }
 8024fc4:	4618      	mov	r0, r3
 8024fc6:	370c      	adds	r7, #12
 8024fc8:	46bd      	mov	sp, r7
 8024fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fce:	4770      	bx	lr

08024fd0 <_ZSt3minIhERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8024fd0:	b480      	push	{r7}
 8024fd2:	b083      	sub	sp, #12
 8024fd4:	af00      	add	r7, sp, #0
 8024fd6:	6078      	str	r0, [r7, #4]
 8024fd8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8024fda:	683b      	ldr	r3, [r7, #0]
 8024fdc:	781a      	ldrb	r2, [r3, #0]
 8024fde:	687b      	ldr	r3, [r7, #4]
 8024fe0:	781b      	ldrb	r3, [r3, #0]
 8024fe2:	429a      	cmp	r2, r3
 8024fe4:	d201      	bcs.n	8024fea <_ZSt3minIhERKT_S2_S2_+0x1a>
	return __b;
 8024fe6:	683b      	ldr	r3, [r7, #0]
 8024fe8:	e000      	b.n	8024fec <_ZSt3minIhERKT_S2_S2_+0x1c>
      return __a;
 8024fea:	687b      	ldr	r3, [r7, #4]
    }
 8024fec:	4618      	mov	r0, r3
 8024fee:	370c      	adds	r7, #12
 8024ff0:	46bd      	mov	sp, r7
 8024ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ff6:	4770      	bx	lr

08024ff8 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8024ff8:	b480      	push	{r7}
 8024ffa:	b083      	sub	sp, #12
 8024ffc:	af00      	add	r7, sp, #0
 8024ffe:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8025000:	687b      	ldr	r3, [r7, #4]
 8025002:	2b00      	cmp	r3, #0
 8025004:	d002      	beq.n	802500c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 8025006:	687b      	ldr	r3, [r7, #4]
 8025008:	681b      	ldr	r3, [r3, #0]
 802500a:	e000      	b.n	802500e <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 802500c:	2300      	movs	r3, #0
}
 802500e:	4618      	mov	r0, r3
 8025010:	370c      	adds	r7, #12
 8025012:	46bd      	mov	sp, r7
 8025014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025018:	4770      	bx	lr
	...

0802501c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 802501c:	b5b0      	push	{r4, r5, r7, lr}
 802501e:	b08e      	sub	sp, #56	; 0x38
 8025020:	af04      	add	r7, sp, #16
 8025022:	6078      	str	r0, [r7, #4]
 8025024:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8025026:	2200      	movs	r2, #0
 8025028:	6839      	ldr	r1, [r7, #0]
 802502a:	6878      	ldr	r0, [r7, #4]
 802502c:	f7f9 ffb4 	bl	801ef98 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8025030:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input != nullptr);
 8025032:	69bb      	ldr	r3, [r7, #24]
 8025034:	2b00      	cmp	r3, #0
 8025036:	d10a      	bne.n	802504e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x32>
 8025038:	687b      	ldr	r3, [r7, #4]
 802503a:	695c      	ldr	r4, [r3, #20]
 802503c:	4b62      	ldr	r3, [pc, #392]	; (80251c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1ac>)
 802503e:	9300      	str	r3, [sp, #0]
 8025040:	2323      	movs	r3, #35	; 0x23
 8025042:	4a62      	ldr	r2, [pc, #392]	; (80251cc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8025044:	4962      	ldr	r1, [pc, #392]	; (80251d0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 8025046:	6878      	ldr	r0, [r7, #4]
 8025048:	47a0      	blx	r4
 802504a:	2301      	movs	r3, #1
 802504c:	e0b8      	b.n	80251c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 802504e:	2200      	movs	r2, #0
 8025050:	6839      	ldr	r1, [r7, #0]
 8025052:	6878      	ldr	r0, [r7, #4]
 8025054:	f7f9 ffb0 	bl	801efb8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8025058:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 802505a:	697b      	ldr	r3, [r7, #20]
 802505c:	2b00      	cmp	r3, #0
 802505e:	d10a      	bne.n	8025076 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
 8025060:	687b      	ldr	r3, [r7, #4]
 8025062:	695c      	ldr	r4, [r3, #20]
 8025064:	4b5b      	ldr	r3, [pc, #364]	; (80251d4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 8025066:	9300      	str	r3, [sp, #0]
 8025068:	2325      	movs	r3, #37	; 0x25
 802506a:	4a58      	ldr	r2, [pc, #352]	; (80251cc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 802506c:	4958      	ldr	r1, [pc, #352]	; (80251d0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 802506e:	6878      	ldr	r0, [r7, #4]
 8025070:	47a0      	blx	r4
 8025072:	2301      	movs	r3, #1
 8025074:	e0a4      	b.n	80251c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 8025076:	69b8      	ldr	r0, [r7, #24]
 8025078:	f7f9 ff0e 	bl	801ee98 <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 802507c:	4602      	mov	r2, r0
 802507e:	460b      	mov	r3, r1
 8025080:	4613      	mov	r3, r2
 8025082:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 8025084:	697b      	ldr	r3, [r7, #20]
 8025086:	689b      	ldr	r3, [r3, #8]
 8025088:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 802508a:	6838      	ldr	r0, [r7, #0]
 802508c:	f7fb fe64 	bl	8020d58 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8025090:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 8025092:	2b01      	cmp	r3, #1
 8025094:	d109      	bne.n	80250aa <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 8025096:	68fb      	ldr	r3, [r7, #12]
 8025098:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 802509a:	2b01      	cmp	r3, #1
 802509c:	d105      	bne.n	80250aa <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 802509e:	68fb      	ldr	r3, [r7, #12]
 80250a0:	685b      	ldr	r3, [r3, #4]
 80250a2:	2b00      	cmp	r3, #0
 80250a4:	d101      	bne.n	80250aa <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 80250a6:	2301      	movs	r3, #1
 80250a8:	e000      	b.n	80250ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 80250aa:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 80250ac:	2b00      	cmp	r3, #0
 80250ae:	d002      	beq.n	80250b6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 80250b0:	68fb      	ldr	r3, [r7, #12]
 80250b2:	2200      	movs	r2, #0
 80250b4:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 80250b6:	2301      	movs	r3, #1
 80250b8:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 80250ba:	f04f 33ff 	mov.w	r3, #4294967295
 80250be:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 80250c0:	2300      	movs	r3, #0
 80250c2:	61fb      	str	r3, [r7, #28]
 80250c4:	68fb      	ldr	r3, [r7, #12]
 80250c6:	681b      	ldr	r3, [r3, #0]
 80250c8:	69fa      	ldr	r2, [r7, #28]
 80250ca:	429a      	cmp	r2, r3
 80250cc:	da2b      	bge.n	8025126 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10a>
    int value = output_shape->data[i];
 80250ce:	68fa      	ldr	r2, [r7, #12]
 80250d0:	69fb      	ldr	r3, [r7, #28]
 80250d2:	009b      	lsls	r3, r3, #2
 80250d4:	4413      	add	r3, r2
 80250d6:	685b      	ldr	r3, [r3, #4]
 80250d8:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 80250da:	68bb      	ldr	r3, [r7, #8]
 80250dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80250e0:	d118      	bne.n	8025114 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 80250e2:	6a3b      	ldr	r3, [r7, #32]
 80250e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80250e8:	d011      	beq.n	802510e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf2>
 80250ea:	687b      	ldr	r3, [r7, #4]
 80250ec:	695c      	ldr	r4, [r3, #20]
 80250ee:	f04f 33ff 	mov.w	r3, #4294967295
 80250f2:	9303      	str	r3, [sp, #12]
 80250f4:	6a3b      	ldr	r3, [r7, #32]
 80250f6:	9302      	str	r3, [sp, #8]
 80250f8:	4b37      	ldr	r3, [pc, #220]	; (80251d8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 80250fa:	9301      	str	r3, [sp, #4]
 80250fc:	4b37      	ldr	r3, [pc, #220]	; (80251dc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 80250fe:	9300      	str	r3, [sp, #0]
 8025100:	233a      	movs	r3, #58	; 0x3a
 8025102:	4a32      	ldr	r2, [pc, #200]	; (80251cc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8025104:	4936      	ldr	r1, [pc, #216]	; (80251e0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 8025106:	6878      	ldr	r0, [r7, #4]
 8025108:	47a0      	blx	r4
 802510a:	2301      	movs	r3, #1
 802510c:	e058      	b.n	80251c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
      stretch_dim = i;
 802510e:	69fb      	ldr	r3, [r7, #28]
 8025110:	623b      	str	r3, [r7, #32]
 8025112:	e004      	b.n	802511e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x102>
    } else {
      num_output_elements *= value;
 8025114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025116:	68ba      	ldr	r2, [r7, #8]
 8025118:	fb02 f303 	mul.w	r3, r2, r3
 802511c:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 802511e:	69fb      	ldr	r3, [r7, #28]
 8025120:	3301      	adds	r3, #1
 8025122:	61fb      	str	r3, [r7, #28]
 8025124:	e7ce      	b.n	80250c4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
    }
  }
  if (stretch_dim != -1) {
 8025126:	6a3b      	ldr	r3, [r7, #32]
 8025128:	f1b3 3fff 	cmp.w	r3, #4294967295
 802512c:	d011      	beq.n	8025152 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x136>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 802512e:	693a      	ldr	r2, [r7, #16]
 8025130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025132:	fb92 f2f3 	sdiv	r2, r2, r3
 8025136:	68f9      	ldr	r1, [r7, #12]
 8025138:	6a3b      	ldr	r3, [r7, #32]
 802513a:	009b      	lsls	r3, r3, #2
 802513c:	440b      	add	r3, r1
 802513e:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 8025140:	68fa      	ldr	r2, [r7, #12]
 8025142:	6a3b      	ldr	r3, [r7, #32]
 8025144:	009b      	lsls	r3, r3, #2
 8025146:	4413      	add	r3, r2
 8025148:	685a      	ldr	r2, [r3, #4]
 802514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802514c:	fb02 f303 	mul.w	r3, r2, r3
 8025150:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8025152:	69bb      	ldr	r3, [r7, #24]
 8025154:	781a      	ldrb	r2, [r3, #0]
 8025156:	697b      	ldr	r3, [r7, #20]
 8025158:	781b      	ldrb	r3, [r3, #0]
 802515a:	429a      	cmp	r2, r3
 802515c:	d01a      	beq.n	8025194 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>
 802515e:	687b      	ldr	r3, [r7, #4]
 8025160:	695c      	ldr	r4, [r3, #20]
 8025162:	69bb      	ldr	r3, [r7, #24]
 8025164:	781b      	ldrb	r3, [r3, #0]
 8025166:	4618      	mov	r0, r3
 8025168:	f7f9 fbb8 	bl	801e8dc <TfLiteTypeGetName>
 802516c:	4605      	mov	r5, r0
 802516e:	697b      	ldr	r3, [r7, #20]
 8025170:	781b      	ldrb	r3, [r3, #0]
 8025172:	4618      	mov	r0, r3
 8025174:	f7f9 fbb2 	bl	801e8dc <TfLiteTypeGetName>
 8025178:	4603      	mov	r3, r0
 802517a:	9303      	str	r3, [sp, #12]
 802517c:	9502      	str	r5, [sp, #8]
 802517e:	4b19      	ldr	r3, [pc, #100]	; (80251e4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 8025180:	9301      	str	r3, [sp, #4]
 8025182:	4b19      	ldr	r3, [pc, #100]	; (80251e8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 8025184:	9300      	str	r3, [sp, #0]
 8025186:	2345      	movs	r3, #69	; 0x45
 8025188:	4a10      	ldr	r2, [pc, #64]	; (80251cc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 802518a:	4918      	ldr	r1, [pc, #96]	; (80251ec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 802518c:	6878      	ldr	r0, [r7, #4]
 802518e:	47a0      	blx	r4
 8025190:	2301      	movs	r3, #1
 8025192:	e015      	b.n	80251c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 8025194:	693a      	ldr	r2, [r7, #16]
 8025196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025198:	429a      	cmp	r2, r3
 802519a:	d010      	beq.n	80251be <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a2>
 802519c:	687b      	ldr	r3, [r7, #4]
 802519e:	695c      	ldr	r4, [r3, #20]
 80251a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80251a2:	9303      	str	r3, [sp, #12]
 80251a4:	693b      	ldr	r3, [r7, #16]
 80251a6:	9302      	str	r3, [sp, #8]
 80251a8:	4b11      	ldr	r3, [pc, #68]	; (80251f0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 80251aa:	9301      	str	r3, [sp, #4]
 80251ac:	4b11      	ldr	r3, [pc, #68]	; (80251f4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 80251ae:	9300      	str	r3, [sp, #0]
 80251b0:	2346      	movs	r3, #70	; 0x46
 80251b2:	4a06      	ldr	r2, [pc, #24]	; (80251cc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 80251b4:	490a      	ldr	r1, [pc, #40]	; (80251e0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 80251b6:	6878      	ldr	r0, [r7, #4]
 80251b8:	47a0      	blx	r4
 80251ba:	2301      	movs	r3, #1
 80251bc:	e000      	b.n	80251c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  return kTfLiteOk;
 80251be:	2300      	movs	r3, #0
}
 80251c0:	4618      	mov	r0, r3
 80251c2:	3728      	adds	r7, #40	; 0x28
 80251c4:	46bd      	mov	sp, r7
 80251c6:	bdb0      	pop	{r4, r5, r7, pc}
 80251c8:	0802f3d8 	.word	0x0802f3d8
 80251cc:	0802f330 	.word	0x0802f330
 80251d0:	0802f3c0 	.word	0x0802f3c0
 80251d4:	0802f3ec 	.word	0x0802f3ec
 80251d8:	0802f41c 	.word	0x0802f41c
 80251dc:	0802f420 	.word	0x0802f420
 80251e0:	0802f400 	.word	0x0802f400
 80251e4:	0802f448 	.word	0x0802f448
 80251e8:	0802f458 	.word	0x0802f458
 80251ec:	0802f42c 	.word	0x0802f42c
 80251f0:	0802f464 	.word	0x0802f464
 80251f4:	0802f478 	.word	0x0802f478

080251f8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80251f8:	b590      	push	{r4, r7, lr}
 80251fa:	b087      	sub	sp, #28
 80251fc:	af04      	add	r7, sp, #16
 80251fe:	6078      	str	r0, [r7, #4]
 8025200:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 8025202:	6838      	ldr	r0, [r7, #0]
 8025204:	f7fb fda8 	bl	8020d58 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8025208:	4603      	mov	r3, r0
 802520a:	2b01      	cmp	r3, #1
 802520c:	d007      	beq.n	802521e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 802520e:	6838      	ldr	r0, [r7, #0]
 8025210:	f7fb fda2 	bl	8020d58 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8025214:	4603      	mov	r3, r0
 8025216:	2b02      	cmp	r3, #2
 8025218:	d001      	beq.n	802521e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 802521a:	2301      	movs	r3, #1
 802521c:	e000      	b.n	8025220 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 802521e:	2300      	movs	r3, #0
 8025220:	2b00      	cmp	r3, #0
 8025222:	d00a      	beq.n	802523a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 8025224:	687b      	ldr	r3, [r7, #4]
 8025226:	695c      	ldr	r4, [r3, #20]
 8025228:	4b27      	ldr	r3, [pc, #156]	; (80252c8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 802522a:	9300      	str	r3, [sp, #0]
 802522c:	234b      	movs	r3, #75	; 0x4b
 802522e:	4a27      	ldr	r2, [pc, #156]	; (80252cc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8025230:	4927      	ldr	r1, [pc, #156]	; (80252d0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 8025232:	6878      	ldr	r0, [r7, #4]
 8025234:	47a0      	blx	r4
 8025236:	2301      	movs	r3, #1
 8025238:	e041      	b.n	80252be <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 802523a:	6838      	ldr	r0, [r7, #0]
 802523c:	f7fb fd99 	bl	8020d72 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8025240:	4603      	mov	r3, r0
 8025242:	2b01      	cmp	r3, #1
 8025244:	bf14      	ite	ne
 8025246:	2301      	movne	r3, #1
 8025248:	2300      	moveq	r3, #0
 802524a:	b2db      	uxtb	r3, r3
 802524c:	2b00      	cmp	r3, #0
 802524e:	d013      	beq.n	8025278 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 8025250:	687b      	ldr	r3, [r7, #4]
 8025252:	695c      	ldr	r4, [r3, #20]
 8025254:	6838      	ldr	r0, [r7, #0]
 8025256:	f7fb fd8c 	bl	8020d72 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 802525a:	4603      	mov	r3, r0
 802525c:	2201      	movs	r2, #1
 802525e:	9203      	str	r2, [sp, #12]
 8025260:	9302      	str	r3, [sp, #8]
 8025262:	4b1c      	ldr	r3, [pc, #112]	; (80252d4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 8025264:	9301      	str	r3, [sp, #4]
 8025266:	4b1c      	ldr	r3, [pc, #112]	; (80252d8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 8025268:	9300      	str	r3, [sp, #0]
 802526a:	234c      	movs	r3, #76	; 0x4c
 802526c:	4a17      	ldr	r2, [pc, #92]	; (80252cc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 802526e:	491b      	ldr	r1, [pc, #108]	; (80252dc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8025270:	6878      	ldr	r0, [r7, #4]
 8025272:	47a0      	blx	r4
 8025274:	2301      	movs	r3, #1
 8025276:	e022      	b.n	80252be <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 8025278:	6839      	ldr	r1, [r7, #0]
 802527a:	6878      	ldr	r0, [r7, #4]
 802527c:	f7ff fece 	bl	802501c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8025280:	4603      	mov	r3, r0
 8025282:	2b00      	cmp	r3, #0
 8025284:	bf14      	ite	ne
 8025286:	2301      	movne	r3, #1
 8025288:	2300      	moveq	r3, #0
 802528a:	b2db      	uxtb	r3, r3
 802528c:	2b00      	cmp	r3, #0
 802528e:	d015      	beq.n	80252bc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8025290:	687b      	ldr	r3, [r7, #4]
 8025292:	695c      	ldr	r4, [r3, #20]
 8025294:	6839      	ldr	r1, [r7, #0]
 8025296:	6878      	ldr	r0, [r7, #4]
 8025298:	f7ff fec0 	bl	802501c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 802529c:	4603      	mov	r3, r0
 802529e:	461a      	mov	r2, r3
 80252a0:	2300      	movs	r3, #0
 80252a2:	9303      	str	r3, [sp, #12]
 80252a4:	9202      	str	r2, [sp, #8]
 80252a6:	4b0e      	ldr	r3, [pc, #56]	; (80252e0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 80252a8:	9301      	str	r3, [sp, #4]
 80252aa:	4b0e      	ldr	r3, [pc, #56]	; (80252e4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 80252ac:	9300      	str	r3, [sp, #0]
 80252ae:	234d      	movs	r3, #77	; 0x4d
 80252b0:	4a06      	ldr	r2, [pc, #24]	; (80252cc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 80252b2:	490a      	ldr	r1, [pc, #40]	; (80252dc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 80252b4:	6878      	ldr	r0, [r7, #4]
 80252b6:	47a0      	blx	r4
 80252b8:	2301      	movs	r3, #1
 80252ba:	e000      	b.n	80252be <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 80252bc:	2300      	movs	r3, #0
}
 80252be:	4618      	mov	r0, r3
 80252c0:	370c      	adds	r7, #12
 80252c2:	46bd      	mov	sp, r7
 80252c4:	bd90      	pop	{r4, r7, pc}
 80252c6:	bf00      	nop
 80252c8:	0802f48c 	.word	0x0802f48c
 80252cc:	0802f330 	.word	0x0802f330
 80252d0:	0802f3c0 	.word	0x0802f3c0
 80252d4:	0802f4bc 	.word	0x0802f4bc
 80252d8:	0802f4c0 	.word	0x0802f4c0
 80252dc:	0802f400 	.word	0x0802f400
 80252e0:	0802f4d4 	.word	0x0802f4d4
 80252e4:	0802f4e0 	.word	0x0802f4e0

080252e8 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 80252e8:	b580      	push	{r7, lr}
 80252ea:	b088      	sub	sp, #32
 80252ec:	af00      	add	r7, sp, #0
 80252ee:	6078      	str	r0, [r7, #4]
 80252f0:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 80252f2:	2200      	movs	r2, #0
 80252f4:	6839      	ldr	r1, [r7, #0]
 80252f6:	6878      	ldr	r0, [r7, #4]
 80252f8:	f7fa fce8 	bl	801fccc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80252fc:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 80252fe:	2200      	movs	r2, #0
 8025300:	6839      	ldr	r1, [r7, #0]
 8025302:	6878      	ldr	r0, [r7, #4]
 8025304:	f7fa fcf2 	bl	801fcec <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8025308:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 802530a:	69bb      	ldr	r3, [r7, #24]
 802530c:	7a1b      	ldrb	r3, [r3, #8]
 802530e:	f107 020c 	add.w	r2, r7, #12
 8025312:	4611      	mov	r1, r2
 8025314:	4618      	mov	r0, r3
 8025316:	f7fa faed 	bl	801f8f4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 802531a:	4603      	mov	r3, r0
 802531c:	74fb      	strb	r3, [r7, #19]
 802531e:	7cfb      	ldrb	r3, [r7, #19]
 8025320:	2b00      	cmp	r3, #0
 8025322:	d001      	beq.n	8025328 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 8025324:	7cfb      	ldrb	r3, [r7, #19]
 8025326:	e024      	b.n	8025372 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 8025328:	69bb      	ldr	r3, [r7, #24]
 802532a:	685b      	ldr	r3, [r3, #4]
 802532c:	4618      	mov	r0, r3
 802532e:	f7fa fb4d 	bl	801f9cc <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 8025332:	4602      	mov	r2, r0
 8025334:	68fb      	ldr	r3, [r7, #12]
 8025336:	fb02 f303 	mul.w	r3, r2, r3
 802533a:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 802533c:	69bb      	ldr	r3, [r7, #24]
 802533e:	681a      	ldr	r2, [r3, #0]
 8025340:	697b      	ldr	r3, [r7, #20]
 8025342:	681b      	ldr	r3, [r3, #0]
 8025344:	429a      	cmp	r2, r3
 8025346:	d013      	beq.n	8025370 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 8025348:	2300      	movs	r3, #0
 802534a:	61fb      	str	r3, [r7, #28]
 802534c:	68fb      	ldr	r3, [r7, #12]
 802534e:	69fa      	ldr	r2, [r7, #28]
 8025350:	429a      	cmp	r2, r3
 8025352:	d20d      	bcs.n	8025370 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 8025354:	69bb      	ldr	r3, [r7, #24]
 8025356:	681a      	ldr	r2, [r3, #0]
 8025358:	69fb      	ldr	r3, [r7, #28]
 802535a:	441a      	add	r2, r3
 802535c:	697b      	ldr	r3, [r7, #20]
 802535e:	6819      	ldr	r1, [r3, #0]
 8025360:	69fb      	ldr	r3, [r7, #28]
 8025362:	440b      	add	r3, r1
 8025364:	7812      	ldrb	r2, [r2, #0]
 8025366:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 8025368:	69fb      	ldr	r3, [r7, #28]
 802536a:	3301      	adds	r3, #1
 802536c:	61fb      	str	r3, [r7, #28]
 802536e:	e7ed      	b.n	802534c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 8025370:	2300      	movs	r3, #0
}
 8025372:	4618      	mov	r0, r3
 8025374:	3720      	adds	r7, #32
 8025376:	46bd      	mov	sp, r7
 8025378:	bd80      	pop	{r7, pc}
	...

0802537c <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 802537c:	b4b0      	push	{r4, r5, r7}
 802537e:	b083      	sub	sp, #12
 8025380:	af00      	add	r7, sp, #0
 8025382:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8025384:	687b      	ldr	r3, [r7, #4]
 8025386:	4a07      	ldr	r2, [pc, #28]	; (80253a4 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 8025388:	461c      	mov	r4, r3
 802538a:	4615      	mov	r5, r2
 802538c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802538e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025390:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8025394:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8025398:	6878      	ldr	r0, [r7, #4]
 802539a:	370c      	adds	r7, #12
 802539c:	46bd      	mov	sp, r7
 802539e:	bcb0      	pop	{r4, r5, r7}
 80253a0:	4770      	bx	lr
 80253a2:	bf00      	nop
 80253a4:	0802f500 	.word	0x0802f500

080253a8 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 80253a8:	b580      	push	{r7, lr}
 80253aa:	b086      	sub	sp, #24
 80253ac:	af00      	add	r7, sp, #0
 80253ae:	4603      	mov	r3, r0
 80253b0:	6039      	str	r1, [r7, #0]
 80253b2:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 80253b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80253b8:	11db      	asrs	r3, r3, #7
 80253ba:	b21b      	sxth	r3, r3
 80253bc:	b29b      	uxth	r3, r3
 80253be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80253c2:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 80253c4:	8afb      	ldrh	r3, [r7, #22]
 80253c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80253ca:	d306      	bcc.n	80253da <_ZN6tflite26generic_int16_table_lookupEsPKs+0x32>
 80253cc:	4b1a      	ldr	r3, [pc, #104]	; (8025438 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 80253ce:	4a1b      	ldr	r2, [pc, #108]	; (802543c <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 80253d0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80253d4:	481a      	ldr	r0, [pc, #104]	; (8025440 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 80253d6:	f006 fee5 	bl	802c1a4 <__assert_func>
  int16_t offset = value & 0x7f;
 80253da:	88fb      	ldrh	r3, [r7, #6]
 80253dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80253e0:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 80253e2:	8afb      	ldrh	r3, [r7, #22]
 80253e4:	005b      	lsls	r3, r3, #1
 80253e6:	683a      	ldr	r2, [r7, #0]
 80253e8:	4413      	add	r3, r2
 80253ea:	881b      	ldrh	r3, [r3, #0]
 80253ec:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 80253ee:	8afb      	ldrh	r3, [r7, #22]
 80253f0:	3301      	adds	r3, #1
 80253f2:	005b      	lsls	r3, r3, #1
 80253f4:	683a      	ldr	r2, [r7, #0]
 80253f6:	4413      	add	r3, r2
 80253f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80253fc:	b29a      	uxth	r2, r3
 80253fe:	8afb      	ldrh	r3, [r7, #22]
 8025400:	005b      	lsls	r3, r3, #1
 8025402:	6839      	ldr	r1, [r7, #0]
 8025404:	440b      	add	r3, r1
 8025406:	f9b3 3000 	ldrsh.w	r3, [r3]
 802540a:	b29b      	uxth	r3, r3
 802540c:	1ad3      	subs	r3, r2, r3
 802540e:	b29b      	uxth	r3, r3
 8025410:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 8025412:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8025416:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 802541a:	fb02 f303 	mul.w	r3, r2, r3
 802541e:	3340      	adds	r3, #64	; 0x40
 8025420:	11db      	asrs	r3, r3, #7
 8025422:	60fb      	str	r3, [r7, #12]
  return base + delta;
 8025424:	68fb      	ldr	r3, [r7, #12]
 8025426:	b29a      	uxth	r2, r3
 8025428:	8a7b      	ldrh	r3, [r7, #18]
 802542a:	4413      	add	r3, r2
 802542c:	b29b      	uxth	r3, r3
 802542e:	b21b      	sxth	r3, r3
}
 8025430:	4618      	mov	r0, r3
 8025432:	3718      	adds	r7, #24
 8025434:	46bd      	mov	sp, r7
 8025436:	bd80      	pop	{r7, pc}
 8025438:	0802f520 	.word	0x0802f520
 802543c:	0802f54c 	.word	0x0802f54c
 8025440:	0802f590 	.word	0x0802f590

08025444 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 8025444:	b580      	push	{r7, lr}
 8025446:	ed2d 8b02 	vpush	{d8}
 802544a:	b08e      	sub	sp, #56	; 0x38
 802544c:	af00      	add	r7, sp, #0
 802544e:	60f8      	str	r0, [r7, #12]
 8025450:	60b9      	str	r1, [r7, #8]
 8025452:	607a      	str	r2, [r7, #4]
 8025454:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8025456:	68b8      	ldr	r0, [r7, #8]
 8025458:	f7fa f9c9 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802545c:	4603      	mov	r3, r0
 802545e:	3b01      	subs	r3, #1
 8025460:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8025462:	683a      	ldr	r2, [r7, #0]
 8025464:	6a39      	ldr	r1, [r7, #32]
 8025466:	68b8      	ldr	r0, [r7, #8]
 8025468:	f7fe f9f9 	bl	802385e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 802546c:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 802546e:	6a3b      	ldr	r3, [r7, #32]
 8025470:	683a      	ldr	r2, [r7, #0]
 8025472:	6a39      	ldr	r1, [r7, #32]
 8025474:	68b8      	ldr	r0, [r7, #8]
 8025476:	f7fb fc98 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802547a:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 802547c:	2300      	movs	r3, #0
 802547e:	637b      	str	r3, [r7, #52]	; 0x34
 8025480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025482:	69fb      	ldr	r3, [r7, #28]
 8025484:	429a      	cmp	r2, r3
 8025486:	f280 8087 	bge.w	8025598 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 802548a:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 802548e:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 8025490:	2300      	movs	r3, #0
 8025492:	633b      	str	r3, [r7, #48]	; 0x30
 8025494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025496:	69bb      	ldr	r3, [r7, #24]
 8025498:	429a      	cmp	r2, r3
 802549a:	da15      	bge.n	80254c8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 802549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802549e:	69ba      	ldr	r2, [r7, #24]
 80254a0:	fb03 f202 	mul.w	r2, r3, r2
 80254a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80254a6:	4413      	add	r3, r2
 80254a8:	009b      	lsls	r3, r3, #2
 80254aa:	687a      	ldr	r2, [r7, #4]
 80254ac:	441a      	add	r2, r3
 80254ae:	f107 0310 	add.w	r3, r7, #16
 80254b2:	4611      	mov	r1, r2
 80254b4:	4618      	mov	r0, r3
 80254b6:	f7f9 fc2b 	bl	801ed10 <_ZSt3maxIfERKT_S2_S2_>
 80254ba:	4603      	mov	r3, r0
 80254bc:	681b      	ldr	r3, [r3, #0]
 80254be:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 80254c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80254c2:	3301      	adds	r3, #1
 80254c4:	633b      	str	r3, [r7, #48]	; 0x30
 80254c6:	e7e5      	b.n	8025494 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 80254c8:	f04f 0300 	mov.w	r3, #0
 80254cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 80254ce:	2300      	movs	r3, #0
 80254d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80254d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80254d4:	69bb      	ldr	r3, [r7, #24]
 80254d6:	429a      	cmp	r2, r3
 80254d8:	da36      	bge.n	8025548 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 80254da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80254dc:	69ba      	ldr	r2, [r7, #24]
 80254de:	fb03 f202 	mul.w	r2, r3, r2
 80254e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80254e4:	4413      	add	r3, r2
 80254e6:	009b      	lsls	r3, r3, #2
 80254e8:	687a      	ldr	r2, [r7, #4]
 80254ea:	4413      	add	r3, r2
 80254ec:	ed93 7a00 	vldr	s14, [r3]
 80254f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80254f4:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 80254f8:	68fb      	ldr	r3, [r7, #12]
 80254fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254fe:	4610      	mov	r0, r2
 8025500:	4619      	mov	r1, r3
 8025502:	f7db fb9b 	bl	8000c3c <__aeabi_d2f>
 8025506:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 802550a:	ee68 7a27 	vmul.f32	s15, s16, s15
 802550e:	eeb0 0a67 	vmov.f32	s0, s15
 8025512:	f7db ff7d 	bl	8001410 <_ZSt3expf>
 8025516:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 802551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802551c:	69ba      	ldr	r2, [r7, #24]
 802551e:	fb03 f202 	mul.w	r2, r3, r2
 8025522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025524:	4413      	add	r3, r2
 8025526:	009b      	lsls	r3, r3, #2
 8025528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802552a:	4413      	add	r3, r2
 802552c:	697a      	ldr	r2, [r7, #20]
 802552e:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 8025530:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8025534:	edd7 7a05 	vldr	s15, [r7, #20]
 8025538:	ee77 7a27 	vadd.f32	s15, s14, s15
 802553c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8025540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025542:	3301      	adds	r3, #1
 8025544:	62bb      	str	r3, [r7, #40]	; 0x28
 8025546:	e7c4      	b.n	80254d2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 8025548:	2300      	movs	r3, #0
 802554a:	627b      	str	r3, [r7, #36]	; 0x24
 802554c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802554e:	69bb      	ldr	r3, [r7, #24]
 8025550:	429a      	cmp	r2, r3
 8025552:	da1d      	bge.n	8025590 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 8025554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025556:	69ba      	ldr	r2, [r7, #24]
 8025558:	fb03 f202 	mul.w	r2, r3, r2
 802555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802555e:	4413      	add	r3, r2
 8025560:	009b      	lsls	r3, r3, #2
 8025562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025564:	4413      	add	r3, r2
 8025566:	edd3 6a00 	vldr	s13, [r3]
 802556a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802556c:	69ba      	ldr	r2, [r7, #24]
 802556e:	fb03 f202 	mul.w	r2, r3, r2
 8025572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025574:	4413      	add	r3, r2
 8025576:	009b      	lsls	r3, r3, #2
 8025578:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802557a:	4413      	add	r3, r2
 802557c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8025580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025584:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 8025588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802558a:	3301      	adds	r3, #1
 802558c:	627b      	str	r3, [r7, #36]	; 0x24
 802558e:	e7dd      	b.n	802554c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 8025590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025592:	3301      	adds	r3, #1
 8025594:	637b      	str	r3, [r7, #52]	; 0x34
 8025596:	e773      	b.n	8025480 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 8025598:	bf00      	nop
 802559a:	3738      	adds	r7, #56	; 0x38
 802559c:	46bd      	mov	sp, r7
 802559e:	ecbd 8b02 	vpop	{d8}
 80255a2:	bd80      	pop	{r7, pc}

080255a4 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 80255a4:	b580      	push	{r7, lr}
 80255a6:	b08a      	sub	sp, #40	; 0x28
 80255a8:	af00      	add	r7, sp, #0
 80255aa:	60f8      	str	r0, [r7, #12]
 80255ac:	60b9      	str	r1, [r7, #8]
 80255ae:	607a      	str	r2, [r7, #4]
 80255b0:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 80255b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80255b4:	687a      	ldr	r2, [r7, #4]
 80255b6:	fb03 f202 	mul.w	r2, r3, r2
 80255ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80255bc:	4413      	add	r3, r2
 80255be:	005b      	lsls	r3, r3, #1
 80255c0:	68ba      	ldr	r2, [r7, #8]
 80255c2:	4413      	add	r3, r2
 80255c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80255c8:	461a      	mov	r2, r3
 80255ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80255ce:	1ad3      	subs	r3, r2, r3
 80255d0:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 80255d2:	68fb      	ldr	r3, [r7, #12]
 80255d4:	6899      	ldr	r1, [r3, #8]
 80255d6:	68fb      	ldr	r3, [r7, #12]
 80255d8:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 80255da:	461a      	mov	r2, r3
 80255dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80255de:	f7fa fb31 	bl	801fc44 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80255e2:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 80255e4:	6a3b      	ldr	r3, [r7, #32]
 80255e6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80255ea:	337f      	adds	r3, #127	; 0x7f
 80255ec:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 80255ee:	4b12      	ldr	r3, [pc, #72]	; (8025638 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 80255f0:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 80255f2:	f107 0214 	add.w	r2, r7, #20
 80255f6:	f107 0310 	add.w	r3, r7, #16
 80255fa:	4611      	mov	r1, r2
 80255fc:	4618      	mov	r0, r3
 80255fe:	f7fa f8ab 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 8025602:	4602      	mov	r2, r0
 8025604:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025608:	61bb      	str	r3, [r7, #24]
 802560a:	f107 0318 	add.w	r3, r7, #24
 802560e:	4619      	mov	r1, r3
 8025610:	4610      	mov	r0, r2
 8025612:	f7fa f88d 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 8025616:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8025618:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 802561a:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 802561c:	68fb      	ldr	r3, [r7, #12]
 802561e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8025620:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8025624:	4611      	mov	r1, r2
 8025626:	4618      	mov	r0, r3
 8025628:	f7ff febe 	bl	80253a8 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 802562c:	4603      	mov	r3, r0
}
 802562e:	4618      	mov	r0, r3
 8025630:	3728      	adds	r7, #40	; 0x28
 8025632:	46bd      	mov	sp, r7
 8025634:	bd80      	pop	{r7, pc}
 8025636:	bf00      	nop
 8025638:	ffff8000 	.word	0xffff8000

0802563c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 802563c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025640:	b0ab      	sub	sp, #172	; 0xac
 8025642:	af02      	add	r7, sp, #8
 8025644:	63f8      	str	r0, [r7, #60]	; 0x3c
 8025646:	63b9      	str	r1, [r7, #56]	; 0x38
 8025648:	637a      	str	r2, [r7, #52]	; 0x34
 802564a:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 802564c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802564e:	f7fa f8ce 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8025652:	4603      	mov	r3, r0
 8025654:	3b01      	subs	r3, #1
 8025656:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 802565a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802565c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8025660:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8025662:	f7fe f8fc 	bl	802385e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8025666:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 802566a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802566e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025670:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8025674:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8025676:	f7fb fb98 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802567a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 802567e:	2300      	movs	r3, #0
 8025680:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8025684:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8025688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802568c:	429a      	cmp	r2, r3
 802568e:	f280 8157 	bge.w	8025940 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x304>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 8025692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8025696:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 802569a:	2300      	movs	r3, #0
 802569c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80256a0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80256a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80256a8:	429a      	cmp	r2, r3
 80256aa:	da1c      	bge.n	80256e6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 80256ac:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80256b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80256b4:	fb03 f202 	mul.w	r2, r3, r2
 80256b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80256bc:	4413      	add	r3, r2
 80256be:	005a      	lsls	r2, r3, #1
 80256c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80256c2:	441a      	add	r2, r3
 80256c4:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 80256c8:	4611      	mov	r1, r2
 80256ca:	4618      	mov	r0, r3
 80256cc:	f7fe f865 	bl	802379a <_ZSt3maxIsERKT_S2_S2_>
 80256d0:	4603      	mov	r3, r0
 80256d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80256d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 80256da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80256de:	3301      	adds	r3, #1
 80256e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80256e4:	e7dc      	b.n	80256a0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x64>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 80256e6:	2300      	movs	r3, #0
 80256e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 80256ec:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80256f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80256f4:	fb02 f303 	mul.w	r3, r2, r3
 80256f8:	005a      	lsls	r2, r3, #1
 80256fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80256fe:	4413      	add	r3, r2
 8025700:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 8025702:	2300      	movs	r3, #0
 8025704:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8025708:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802570c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8025710:	429a      	cmp	r2, r3
 8025712:	da28      	bge.n	8025766 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8025714:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 8025718:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802571c:	005a      	lsls	r2, r3, #1
 802571e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025720:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8025722:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025726:	9301      	str	r3, [sp, #4]
 8025728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802572c:	9300      	str	r3, [sp, #0]
 802572e:	460b      	mov	r3, r1
 8025730:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8025734:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8025736:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8025738:	f7ff ff34 	bl	80255a4 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 802573c:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 802573e:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 8025740:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025744:	005a      	lsls	r2, r3, #1
 8025746:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025748:	4413      	add	r3, r2
 802574a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802574e:	461a      	mov	r2, r3
 8025750:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8025754:	4413      	add	r3, r2
 8025756:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 802575a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802575e:	3301      	adds	r3, #1
 8025760:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8025764:	e7d0      	b.n	8025708 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 8025766:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802576a:	4618      	mov	r0, r3
 802576c:	f7fc fea9 	bl	80224c2 <_ZN6tflite17CountLeadingZerosImEEiT_>
 8025770:	4603      	mov	r3, r0
 8025772:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 8025776:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802577a:	17da      	asrs	r2, r3, #31
 802577c:	623b      	str	r3, [r7, #32]
 802577e:	627a      	str	r2, [r7, #36]	; 0x24
 8025780:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8025784:	1e59      	subs	r1, r3, #1
 8025786:	f1a1 0320 	sub.w	r3, r1, #32
 802578a:	f1c1 0220 	rsb	r2, r1, #32
 802578e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025790:	fa00 f901 	lsl.w	r9, r0, r1
 8025794:	6a38      	ldr	r0, [r7, #32]
 8025796:	fa00 f303 	lsl.w	r3, r0, r3
 802579a:	ea49 0903 	orr.w	r9, r9, r3
 802579e:	6a3b      	ldr	r3, [r7, #32]
 80257a0:	fa23 f202 	lsr.w	r2, r3, r2
 80257a4:	ea49 0902 	orr.w	r9, r9, r2
 80257a8:	6a3b      	ldr	r3, [r7, #32]
 80257aa:	fa03 f801 	lsl.w	r8, r3, r1
 80257ae:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 80257b2:	61bb      	str	r3, [r7, #24]
 80257b4:	f149 0300 	adc.w	r3, r9, #0
 80257b8:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 80257ba:	f04f 0200 	mov.w	r2, #0
 80257be:	f04f 0300 	mov.w	r3, #0
 80257c2:	69b9      	ldr	r1, [r7, #24]
 80257c4:	0b8a      	lsrs	r2, r1, #14
 80257c6:	69f9      	ldr	r1, [r7, #28]
 80257c8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 80257cc:	69f9      	ldr	r1, [r7, #28]
 80257ce:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 80257d0:	4613      	mov	r3, r2
 80257d2:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 80257d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80257d6:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 80257da:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 80257dc:	4b5b      	ldr	r3, [pc, #364]	; (802594c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x310>)
 80257de:	653b      	str	r3, [r7, #80]	; 0x50
                 static_cast<int32_t>(32767)));
 80257e0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80257e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80257e8:	4611      	mov	r1, r2
 80257ea:	4618      	mov	r0, r3
 80257ec:	f7f9 ffb4 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 80257f0:	4602      	mov	r2, r0
 80257f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80257f6:	657b      	str	r3, [r7, #84]	; 0x54
 80257f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80257fc:	4619      	mov	r1, r3
 80257fe:	4610      	mov	r0, r2
 8025800:	f7f9 ff96 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 8025804:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8025806:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 8025808:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 802580c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 8025810:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8025814:	4611      	mov	r1, r2
 8025816:	4618      	mov	r0, r3
 8025818:	f7ff fdc6 	bl	80253a8 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 802581c:	4603      	mov	r3, r0
 802581e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 8025822:	2300      	movs	r3, #0
 8025824:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8025828:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802582c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8025830:	429a      	cmp	r2, r3
 8025832:	da7f      	bge.n	8025934 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
      uint8_t right_shift = 31 - headroom_plus_one;
 8025834:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8025838:	f1c3 031f 	rsb	r3, r3, #31
 802583c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 8025840:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8025844:	1e5a      	subs	r2, r3, #1
 8025846:	2301      	movs	r3, #1
 8025848:	4093      	lsls	r3, r2
 802584a:	17da      	asrs	r2, r3, #31
 802584c:	603b      	str	r3, [r7, #0]
 802584e:	607a      	str	r2, [r7, #4]
 8025850:	e9d7 3400 	ldrd	r3, r4, [r7]
 8025854:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8025858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802585c:	005a      	lsls	r2, r3, #1
 802585e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025860:	4413      	add	r3, r2
 8025862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8025866:	b21b      	sxth	r3, r3
 8025868:	17da      	asrs	r2, r3, #31
 802586a:	613b      	str	r3, [r7, #16]
 802586c:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 802586e:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8025872:	17da      	asrs	r2, r3, #31
 8025874:	60bb      	str	r3, [r7, #8]
 8025876:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8025878:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802587c:	460b      	mov	r3, r1
 802587e:	68ba      	ldr	r2, [r7, #8]
 8025880:	fb02 f203 	mul.w	r2, r2, r3
 8025884:	68fb      	ldr	r3, [r7, #12]
 8025886:	e9c7 0104 	strd	r0, r1, [r7, #16]
 802588a:	4601      	mov	r1, r0
 802588c:	fb01 f303 	mul.w	r3, r1, r3
 8025890:	4413      	add	r3, r2
 8025892:	693a      	ldr	r2, [r7, #16]
 8025894:	68b9      	ldr	r1, [r7, #8]
 8025896:	fba2 ab01 	umull	sl, fp, r2, r1
 802589a:	445b      	add	r3, fp
 802589c:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 802589e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80258a2:	eb1a 0502 	adds.w	r5, sl, r2
 80258a6:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 80258aa:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 80258ae:	f1c1 0320 	rsb	r3, r1, #32
 80258b2:	f1b1 0220 	subs.w	r2, r1, #32
 80258b6:	fa25 f001 	lsr.w	r0, r5, r1
 80258ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80258bc:	fa06 f303 	lsl.w	r3, r6, r3
 80258c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80258c2:	ea40 0003 	orr.w	r0, r0, r3
 80258c6:	62b8      	str	r0, [r7, #40]	; 0x28
 80258c8:	d404      	bmi.n	80258d4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x298>
 80258ca:	fa46 f202 	asr.w	r2, r6, r2
 80258ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258d0:	4313      	orrs	r3, r2
 80258d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80258d4:	fa46 f301 	asr.w	r3, r6, r1
 80258d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 80258da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258dc:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 80258de:	2300      	movs	r3, #0
 80258e0:	65bb      	str	r3, [r7, #88]	; 0x58
                   static_cast<int32_t>(32767)));
 80258e2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80258e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80258ea:	4611      	mov	r1, r2
 80258ec:	4618      	mov	r0, r3
 80258ee:	f7f9 ff33 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 80258f2:	4602      	mov	r2, r0
 80258f4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80258f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80258fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80258fe:	4619      	mov	r1, r3
 8025900:	4610      	mov	r0, r2
 8025902:	f7f9 ff15 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 8025906:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 8025908:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 802590a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802590e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8025912:	fb03 f202 	mul.w	r2, r3, r2
 8025916:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802591a:	4413      	add	r3, r2
 802591c:	005a      	lsls	r2, r3, #1
 802591e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8025922:	441a      	add	r2, r3
 8025924:	b20b      	sxth	r3, r1
 8025926:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 8025928:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802592c:	3301      	adds	r3, #1
 802592e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8025932:	e779      	b.n	8025828 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ec>
  for (int i = 0; i < outer_size; ++i) {
 8025934:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025938:	3301      	adds	r3, #1
 802593a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802593e:	e6a1      	b.n	8025684 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x48>
    }
  }
}
 8025940:	bf00      	nop
 8025942:	37a4      	adds	r7, #164	; 0xa4
 8025944:	46bd      	mov	sp, r7
 8025946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802594a:	bf00      	nop
 802594c:	ffff8000 	.word	0xffff8000

08025950 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 8025950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025954:	b0bc      	sub	sp, #240	; 0xf0
 8025956:	af04      	add	r7, sp, #16
 8025958:	60f8      	str	r0, [r7, #12]
 802595a:	60b9      	str	r1, [r7, #8]
 802595c:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 802595e:	68fb      	ldr	r3, [r7, #12]
 8025960:	7a1b      	ldrb	r3, [r3, #8]
 8025962:	2b03      	cmp	r3, #3
 8025964:	d127      	bne.n	80259b6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 8025966:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802596a:	68f9      	ldr	r1, [r7, #12]
 802596c:	4618      	mov	r0, r3
 802596e:	f7fd ff2a 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 8025972:	68f8      	ldr	r0, [r7, #12]
 8025974:	f7fa ff14 	bl	80207a0 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8025978:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 802597a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802597e:	68b9      	ldr	r1, [r7, #8]
 8025980:	4618      	mov	r0, r3
 8025982:	f7fd ff20 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 8025986:	68b8      	ldr	r0, [r7, #8]
 8025988:	f7fa ff19 	bl	80207be <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 802598c:	4602      	mov	r2, r0
 802598e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025992:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8025996:	9200      	str	r2, [sp, #0]
 8025998:	4622      	mov	r2, r4
 802599a:	6878      	ldr	r0, [r7, #4]
 802599c:	f000 f956 	bl	8025c4c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 80259a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80259a4:	4618      	mov	r0, r3
 80259a6:	f7f9 ff0c 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 80259aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80259ae:	4618      	mov	r0, r3
 80259b0:	f7f9 ff07 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 80259b4:	e0a6      	b.n	8025b04 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
  } else if (input->type == kTfLiteInt8) {
 80259b6:	68fb      	ldr	r3, [r7, #12]
 80259b8:	7a1b      	ldrb	r3, [r3, #8]
 80259ba:	2b09      	cmp	r3, #9
 80259bc:	d17b      	bne.n	8025ab6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
    if (output->type == kTfLiteInt16) {
 80259be:	68bb      	ldr	r3, [r7, #8]
 80259c0:	7a1b      	ldrb	r3, [r3, #8]
 80259c2:	2b07      	cmp	r3, #7
 80259c4:	d127      	bne.n	8025a16 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xc6>
          op_data, tflite::micro::GetTensorShape(input),
 80259c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80259ca:	68f9      	ldr	r1, [r7, #12]
 80259cc:	4618      	mov	r0, r3
 80259ce:	f7fd fefa 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 80259d2:	68f8      	ldr	r0, [r7, #12]
 80259d4:	f7fa fe78 	bl	80206c8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80259d8:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 80259da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80259de:	68b9      	ldr	r1, [r7, #8]
 80259e0:	4618      	mov	r0, r3
 80259e2:	f7fd fef0 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 80259e6:	68b8      	ldr	r0, [r7, #8]
 80259e8:	f7ff fb06 	bl	8024ff8 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 80259ec:	4602      	mov	r2, r0
 80259ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80259f2:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80259f6:	9200      	str	r2, [sp, #0]
 80259f8:	4622      	mov	r2, r4
 80259fa:	6878      	ldr	r0, [r7, #4]
 80259fc:	f000 fa41 	bl	8025e82 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 8025a00:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8025a04:	4618      	mov	r0, r3
 8025a06:	f7f9 fedc 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 8025a0a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8025a0e:	4618      	mov	r0, r3
 8025a10:	f7f9 fed7 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8025a14:	e076      	b.n	8025b04 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 8025a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8025a1a:	68f9      	ldr	r1, [r7, #12]
 8025a1c:	4618      	mov	r0, r3
 8025a1e:	f7fd fed2 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 8025a22:	f107 0314 	add.w	r3, r7, #20
 8025a26:	68b9      	ldr	r1, [r7, #8]
 8025a28:	4618      	mov	r0, r3
 8025a2a:	f7fd fecc 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 8025a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8025a32:	4618      	mov	r0, r3
 8025a34:	f7f9 fedb 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8025a38:	4603      	mov	r3, r0
 8025a3a:	3b01      	subs	r3, #1
 8025a3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8025a40:	f107 0214 	add.w	r2, r7, #20
 8025a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8025a48:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8025a4c:	4618      	mov	r0, r3
 8025a4e:	f7fd ff06 	bl	802385e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8025a52:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8025a56:	f107 0214 	add.w	r2, r7, #20
 8025a5a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8025a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8025a62:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8025a66:	f7fb f9a0 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8025a6a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 8025a6e:	68f8      	ldr	r0, [r7, #12]
 8025a70:	f7fa fe2a 	bl	80206c8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8025a74:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 8025a76:	687b      	ldr	r3, [r7, #4]
 8025a78:	689e      	ldr	r6, [r3, #8]
 8025a7a:	687b      	ldr	r3, [r7, #4]
 8025a7c:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 8025a7e:	687b      	ldr	r3, [r7, #4]
 8025a80:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 8025a82:	68b8      	ldr	r0, [r7, #8]
 8025a84:	f7fa fe2f 	bl	80206e6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8025a88:	4603      	mov	r3, r0
 8025a8a:	9302      	str	r3, [sp, #8]
 8025a8c:	9501      	str	r5, [sp, #4]
 8025a8e:	9400      	str	r4, [sp, #0]
 8025a90:	4633      	mov	r3, r6
 8025a92:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8025a96:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8025a9a:	4640      	mov	r0, r8
 8025a9c:	f7f2 ffac 	bl	80189f8 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 8025aa0:	f107 0314 	add.w	r3, r7, #20
 8025aa4:	4618      	mov	r0, r3
 8025aa6:	f7f9 fe8c 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 8025aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8025aae:	4618      	mov	r0, r3
 8025ab0:	f7f9 fe87 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8025ab4:	e026      	b.n	8025b04 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
        op_data, tflite::micro::GetTensorShape(input),
 8025ab6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8025aba:	68f9      	ldr	r1, [r7, #12]
 8025abc:	4618      	mov	r0, r3
 8025abe:	f7fd fe82 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 8025ac2:	68f8      	ldr	r0, [r7, #12]
 8025ac4:	f7fc fc5e 	bl	8022384 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 8025ac8:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 8025aca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8025ace:	68b9      	ldr	r1, [r7, #8]
 8025ad0:	4618      	mov	r0, r3
 8025ad2:	f7fd fe78 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 8025ad6:	68b8      	ldr	r0, [r7, #8]
 8025ad8:	f7ff fa8e 	bl	8024ff8 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8025adc:	4602      	mov	r2, r0
 8025ade:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8025ae2:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8025ae6:	9200      	str	r2, [sp, #0]
 8025ae8:	4622      	mov	r2, r4
 8025aea:	6878      	ldr	r0, [r7, #4]
 8025aec:	f7ff fda6 	bl	802563c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 8025af0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8025af4:	4618      	mov	r0, r3
 8025af6:	f7f9 fe64 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 8025afa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8025afe:	4618      	mov	r0, r3
 8025b00:	f7f9 fe5f 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8025b04:	bf00      	nop
 8025b06:	37e0      	adds	r7, #224	; 0xe0
 8025b08:	46bd      	mov	sp, r7
 8025b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08025b10 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8025b10:	b5b0      	push	{r4, r5, r7, lr}
 8025b12:	b0a0      	sub	sp, #128	; 0x80
 8025b14:	af02      	add	r7, sp, #8
 8025b16:	6078      	str	r0, [r7, #4]
 8025b18:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8025b1a:	2200      	movs	r2, #0
 8025b1c:	6839      	ldr	r1, [r7, #0]
 8025b1e:	6878      	ldr	r0, [r7, #4]
 8025b20:	f7fa f8d4 	bl	801fccc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8025b24:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8025b26:	2200      	movs	r2, #0
 8025b28:	6839      	ldr	r1, [r7, #0]
 8025b2a:	6878      	ldr	r0, [r7, #4]
 8025b2c:	f7fa f8de 	bl	801fcec <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8025b30:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 8025b32:	683b      	ldr	r3, [r7, #0]
 8025b34:	691b      	ldr	r3, [r3, #16]
 8025b36:	2b00      	cmp	r3, #0
 8025b38:	d101      	bne.n	8025b3e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8025b3a:	f006 fb2b 	bl	802c194 <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 8025b3e:	683b      	ldr	r3, [r7, #0]
 8025b40:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 8025b42:	f107 0408 	add.w	r4, r7, #8
 8025b46:	461d      	mov	r5, r3
 8025b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025b54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025b58:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 8025b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b5e:	7a1b      	ldrb	r3, [r3, #8]
 8025b60:	3b01      	subs	r3, #1
 8025b62:	2b08      	cmp	r3, #8
 8025b64:	d847      	bhi.n	8025bf6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe6>
 8025b66:	a201      	add	r2, pc, #4	; (adr r2, 8025b6c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 8025b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025b6c:	08025b91 	.word	0x08025b91
 8025b70:	08025bf7 	.word	0x08025bf7
 8025b74:	08025be5 	.word	0x08025be5
 8025b78:	08025bf7 	.word	0x08025bf7
 8025b7c:	08025bf7 	.word	0x08025bf7
 8025b80:	08025bf7 	.word	0x08025bf7
 8025b84:	08025be5 	.word	0x08025be5
 8025b88:	08025bf7 	.word	0x08025bf7
 8025b8c:	08025be5 	.word	0x08025be5
    case kTfLiteFloat32: {
      tflite::reference_ops::Softmax(
          data, tflite::micro::GetTensorShape(input),
 8025b90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8025b94:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8025b96:	4618      	mov	r0, r3
 8025b98:	f7fd fe15 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8025b9c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8025b9e:	f7fa fd73 	bl	8020688 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8025ba2:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 8025ba4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025ba8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8025baa:	4618      	mov	r0, r3
 8025bac:	f7fd fe0b 	bl	80237c6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8025bb0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8025bb2:	f7fa fd78 	bl	80206a6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8025bb6:	4602      	mov	r2, r0
 8025bb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025bbc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8025bc0:	f107 0008 	add.w	r0, r7, #8
 8025bc4:	9200      	str	r2, [sp, #0]
 8025bc6:	4622      	mov	r2, r4
 8025bc8:	f7ff fc3c 	bl	8025444 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 8025bcc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025bd0:	4618      	mov	r0, r3
 8025bd2:	f7f9 fdf6 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
          data, tflite::micro::GetTensorShape(input),
 8025bd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8025bda:	4618      	mov	r0, r3
 8025bdc:	f7f9 fdf1 	bl	801f7c2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 8025be0:	2300      	movs	r3, #0
 8025be2:	e016      	b.n	8025c12 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x102>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, data);
 8025be4:	f107 0308 	add.w	r3, r7, #8
 8025be8:	461a      	mov	r2, r3
 8025bea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8025bec:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8025bee:	f7ff feaf 	bl	8025950 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8025bf2:	2300      	movs	r3, #0
 8025bf4:	e00d      	b.n	8025c12 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x102>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8025bf6:	687b      	ldr	r3, [r7, #4]
 8025bf8:	695c      	ldr	r4, [r3, #20]
 8025bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025bfc:	7a1b      	ldrb	r3, [r3, #8]
 8025bfe:	4618      	mov	r0, r3
 8025c00:	f7f8 fe6c 	bl	801e8dc <TfLiteTypeGetName>
 8025c04:	4602      	mov	r2, r0
 8025c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c08:	7a1b      	ldrb	r3, [r3, #8]
 8025c0a:	4904      	ldr	r1, [pc, #16]	; (8025c1c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10c>)
 8025c0c:	6878      	ldr	r0, [r7, #4]
 8025c0e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8025c10:	2301      	movs	r3, #1
  }
}
 8025c12:	4618      	mov	r0, r3
 8025c14:	3778      	adds	r7, #120	; 0x78
 8025c16:	46bd      	mov	sp, r7
 8025c18:	bdb0      	pop	{r4, r5, r7, pc}
 8025c1a:	bf00      	nop
 8025c1c:	0802f620 	.word	0x0802f620

08025c20 <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 8025c20:	b4b0      	push	{r4, r5, r7}
 8025c22:	b083      	sub	sp, #12
 8025c24:	af00      	add	r7, sp, #0
 8025c26:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8025c28:	687b      	ldr	r3, [r7, #4]
 8025c2a:	4a07      	ldr	r2, [pc, #28]	; (8025c48 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8025c2c:	461c      	mov	r4, r3
 8025c2e:	4615      	mov	r5, r2
 8025c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025c34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8025c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8025c3c:	6878      	ldr	r0, [r7, #4]
 8025c3e:	370c      	adds	r7, #12
 8025c40:	46bd      	mov	sp, r7
 8025c42:	bcb0      	pop	{r4, r5, r7}
 8025c44:	4770      	bx	lr
 8025c46:	bf00      	nop
 8025c48:	0802f63c 	.word	0x0802f63c

08025c4c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8025c4c:	b590      	push	{r4, r7, lr}
 8025c4e:	b09f      	sub	sp, #124	; 0x7c
 8025c50:	af00      	add	r7, sp, #0
 8025c52:	60f8      	str	r0, [r7, #12]
 8025c54:	60b9      	str	r1, [r7, #8]
 8025c56:	607a      	str	r2, [r7, #4]
 8025c58:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 8025c5a:	68fb      	ldr	r3, [r7, #12]
 8025c5c:	689b      	ldr	r3, [r3, #8]
 8025c5e:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 8025c60:	68fb      	ldr	r3, [r7, #12]
 8025c62:	68db      	ldr	r3, [r3, #12]
 8025c64:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8025c66:	68fb      	ldr	r3, [r7, #12]
 8025c68:	699b      	ldr	r3, [r3, #24]
 8025c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8025c6c:	68b8      	ldr	r0, [r7, #8]
 8025c6e:	f7f9 fdbe 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8025c72:	4603      	mov	r3, r0
 8025c74:	3b01      	subs	r3, #1
 8025c76:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8025c78:	683a      	ldr	r2, [r7, #0]
 8025c7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8025c7c:	68b8      	ldr	r0, [r7, #8]
 8025c7e:	f7fd fdee 	bl	802385e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8025c82:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8025c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025c86:	683a      	ldr	r2, [r7, #0]
 8025c88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8025c8a:	68b8      	ldr	r0, [r7, #8]
 8025c8c:	f7fb f88d 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8025c90:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8025c92:	2300      	movs	r3, #0
 8025c94:	677b      	str	r3, [r7, #116]	; 0x74
 8025c96:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8025c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025c9a:	429a      	cmp	r2, r3
 8025c9c:	f280 80ed 	bge.w	8025e7a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8025ca0:	2300      	movs	r3, #0
 8025ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8025ca6:	2300      	movs	r3, #0
 8025ca8:	673b      	str	r3, [r7, #112]	; 0x70
 8025caa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8025cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025cae:	429a      	cmp	r2, r3
 8025cb0:	da16      	bge.n	8025ce0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8025cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025cb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025cb6:	fb03 f202 	mul.w	r2, r3, r2
 8025cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8025cbc:	4413      	add	r3, r2
 8025cbe:	461a      	mov	r2, r3
 8025cc0:	687b      	ldr	r3, [r7, #4]
 8025cc2:	441a      	add	r2, r3
 8025cc4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8025cc8:	4611      	mov	r1, r2
 8025cca:	4618      	mov	r0, r3
 8025ccc:	f7ff f96c 	bl	8024fa8 <_ZSt3maxIhERKT_S2_S2_>
 8025cd0:	4603      	mov	r3, r0
 8025cd2:	781b      	ldrb	r3, [r3, #0]
 8025cd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8025cd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8025cda:	3301      	adds	r3, #1
 8025cdc:	673b      	str	r3, [r7, #112]	; 0x70
 8025cde:	e7e4      	b.n	8025caa <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8025ce0:	f000 f9ed 	bl	80260be <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8025ce4:	4603      	mov	r3, r0
 8025ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8025ce8:	2300      	movs	r3, #0
 8025cea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8025cec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8025cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025cf0:	429a      	cmp	r2, r3
 8025cf2:	da2f      	bge.n	8025d54 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8025cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025cf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025cf8:	fb03 f202 	mul.w	r2, r3, r2
 8025cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8025cfe:	4413      	add	r3, r2
 8025d00:	461a      	mov	r2, r3
 8025d02:	687b      	ldr	r3, [r7, #4]
 8025d04:	4413      	add	r3, r2
 8025d06:	781b      	ldrb	r3, [r3, #0]
 8025d08:	461a      	mov	r2, r3
 8025d0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8025d0e:	1ad3      	subs	r3, r2, r3
 8025d10:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8025d12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8025d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025d16:	429a      	cmp	r2, r3
 8025d18:	db18      	blt.n	8025d4c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8025d1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8025d1c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8025d1e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8025d20:	f7fc fb91 	bl	8022446 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8025d24:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8025d26:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8025d28:	f000 f9d1 	bl	80260ce <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8025d2c:	4603      	mov	r3, r0
 8025d2e:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8025d30:	69f8      	ldr	r0, [r7, #28]
 8025d32:	f000 f9fb 	bl	802612c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8025d36:	4603      	mov	r3, r0
 8025d38:	4618      	mov	r0, r3
 8025d3a:	f000 fb3f 	bl	80263bc <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8025d3e:	4603      	mov	r3, r0
 8025d40:	4619      	mov	r1, r3
 8025d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025d44:	f000 f9d4 	bl	80260f0 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8025d48:	4603      	mov	r3, r0
 8025d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8025d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8025d4e:	3301      	adds	r3, #1
 8025d50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8025d52:	e7cb      	b.n	8025cec <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8025d54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025d58:	4618      	mov	r0, r3
 8025d5a:	f000 fb49 	bl	80263f0 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8025d5e:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8025d60:	681b      	ldr	r3, [r3, #0]
 8025d62:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8025d66:	210c      	movs	r1, #12
 8025d68:	4618      	mov	r0, r3
 8025d6a:	f7fc fb7f 	bl	802246c <_ZN6tflite13GetReciprocalEliPi>
 8025d6e:	4603      	mov	r3, r0
 8025d70:	4618      	mov	r0, r3
 8025d72:	f7fc fbb8 	bl	80224e6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8025d76:	4603      	mov	r3, r0
 8025d78:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8025d7a:	2300      	movs	r3, #0
 8025d7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8025d7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8025d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025d82:	429a      	cmp	r2, r3
 8025d84:	da75      	bge.n	8025e72 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8025d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025d88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025d8a:	fb03 f202 	mul.w	r2, r3, r2
 8025d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8025d90:	4413      	add	r3, r2
 8025d92:	461a      	mov	r2, r3
 8025d94:	687b      	ldr	r3, [r7, #4]
 8025d96:	4413      	add	r3, r2
 8025d98:	781b      	ldrb	r3, [r3, #0]
 8025d9a:	461a      	mov	r2, r3
 8025d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8025da0:	1ad3      	subs	r3, r2, r3
 8025da2:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8025da4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8025da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025da8:	429a      	cmp	r2, r3
 8025daa:	db50      	blt.n	8025e4e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8025dac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8025dae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8025db0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8025db2:	f7fc fb48 	bl	8022446 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8025db6:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8025db8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8025dba:	f000 f988 	bl	80260ce <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8025dbe:	4603      	mov	r3, r0
 8025dc0:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8025dc2:	69b8      	ldr	r0, [r7, #24]
 8025dc4:	f000 f9b2 	bl	802612c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8025dc8:	4603      	mov	r3, r0
 8025dca:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8025dcc:	6979      	ldr	r1, [r7, #20]
 8025dce:	6a38      	ldr	r0, [r7, #32]
 8025dd0:	f7fd fe30 	bl	8023a34 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8025dd4:	4603      	mov	r3, r0
 8025dd6:	633b      	str	r3, [r7, #48]	; 0x30
 8025dd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8025ddc:	4618      	mov	r0, r3
 8025dde:	f7fc fbf3 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8025de2:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8025de4:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8025de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025de8:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8025dea:	4611      	mov	r1, r2
 8025dec:	4618      	mov	r0, r3
 8025dee:	f7fa fa93 	bl	8020318 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8025df2:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8025df4:	f7f8 ffda 	bl	801edac <_ZNSt14numeric_limitsIhE3minEv>
 8025df8:	4603      	mov	r3, r0
 8025dfa:	461a      	mov	r2, r3
            unsat_output +
 8025dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025dfe:	4413      	add	r3, r2
        const int32_t shifted_output =
 8025e00:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8025e02:	f7f8 ffdb 	bl	801edbc <_ZNSt14numeric_limitsIhE3maxEv>
 8025e06:	4603      	mov	r3, r0
 8025e08:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8025e0a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025e0e:	f107 0310 	add.w	r3, r7, #16
 8025e12:	4611      	mov	r1, r2
 8025e14:	4618      	mov	r0, r3
 8025e16:	f7f9 fc8b 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 8025e1a:	4604      	mov	r4, r0
 8025e1c:	f7f8 ffc6 	bl	801edac <_ZNSt14numeric_limitsIhE3minEv>
 8025e20:	4603      	mov	r3, r0
 8025e22:	63bb      	str	r3, [r7, #56]	; 0x38
 8025e24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025e28:	4619      	mov	r1, r3
 8025e2a:	4620      	mov	r0, r4
 8025e2c:	f7f9 fc94 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 8025e30:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8025e32:	6819      	ldr	r1, [r3, #0]
 8025e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025e36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025e38:	fb03 f202 	mul.w	r2, r3, r2
 8025e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8025e3e:	4413      	add	r3, r2
 8025e40:	461a      	mov	r2, r3
 8025e42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8025e46:	4413      	add	r3, r2
 8025e48:	b2ca      	uxtb	r2, r1
 8025e4a:	701a      	strb	r2, [r3, #0]
 8025e4c:	e00d      	b.n	8025e6a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8025e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025e50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025e52:	fb03 f202 	mul.w	r2, r3, r2
 8025e56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8025e58:	4413      	add	r3, r2
 8025e5a:	461a      	mov	r2, r3
 8025e5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8025e60:	189c      	adds	r4, r3, r2
 8025e62:	f7f8 ffa3 	bl	801edac <_ZNSt14numeric_limitsIhE3minEv>
 8025e66:	4603      	mov	r3, r0
 8025e68:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8025e6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8025e6c:	3301      	adds	r3, #1
 8025e6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8025e70:	e785      	b.n	8025d7e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 8025e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025e74:	3301      	adds	r3, #1
 8025e76:	677b      	str	r3, [r7, #116]	; 0x74
 8025e78:	e70d      	b.n	8025c96 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8025e7a:	bf00      	nop
 8025e7c:	377c      	adds	r7, #124	; 0x7c
 8025e7e:	46bd      	mov	sp, r7
 8025e80:	bd90      	pop	{r4, r7, pc}

08025e82 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8025e82:	b590      	push	{r4, r7, lr}
 8025e84:	b09f      	sub	sp, #124	; 0x7c
 8025e86:	af00      	add	r7, sp, #0
 8025e88:	60f8      	str	r0, [r7, #12]
 8025e8a:	60b9      	str	r1, [r7, #8]
 8025e8c:	607a      	str	r2, [r7, #4]
 8025e8e:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 8025e90:	68fb      	ldr	r3, [r7, #12]
 8025e92:	689b      	ldr	r3, [r3, #8]
 8025e94:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 8025e96:	68fb      	ldr	r3, [r7, #12]
 8025e98:	68db      	ldr	r3, [r3, #12]
 8025e9a:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8025e9c:	68fb      	ldr	r3, [r7, #12]
 8025e9e:	699b      	ldr	r3, [r3, #24]
 8025ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8025ea2:	68b8      	ldr	r0, [r7, #8]
 8025ea4:	f7f9 fca3 	bl	801f7ee <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8025ea8:	4603      	mov	r3, r0
 8025eaa:	3b01      	subs	r3, #1
 8025eac:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8025eae:	683a      	ldr	r2, [r7, #0]
 8025eb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8025eb2:	68b8      	ldr	r0, [r7, #8]
 8025eb4:	f7fd fcd3 	bl	802385e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8025eb8:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8025eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025ebc:	683a      	ldr	r2, [r7, #0]
 8025ebe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8025ec0:	68b8      	ldr	r0, [r7, #8]
 8025ec2:	f7fa ff72 	bl	8020daa <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8025ec6:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8025ec8:	2300      	movs	r3, #0
 8025eca:	677b      	str	r3, [r7, #116]	; 0x74
 8025ecc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8025ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025ed0:	429a      	cmp	r2, r3
 8025ed2:	f280 80f0 	bge.w	80260b6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8025ed6:	2380      	movs	r3, #128	; 0x80
 8025ed8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8025edc:	2300      	movs	r3, #0
 8025ede:	673b      	str	r3, [r7, #112]	; 0x70
 8025ee0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8025ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025ee4:	429a      	cmp	r2, r3
 8025ee6:	da17      	bge.n	8025f18 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8025ee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025eea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025eec:	fb03 f202 	mul.w	r2, r3, r2
 8025ef0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8025ef2:	4413      	add	r3, r2
 8025ef4:	461a      	mov	r2, r3
 8025ef6:	687b      	ldr	r3, [r7, #4]
 8025ef8:	441a      	add	r2, r3
 8025efa:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8025efe:	4611      	mov	r1, r2
 8025f00:	4618      	mov	r0, r3
 8025f02:	f000 fa80 	bl	8026406 <_ZSt3maxIaERKT_S2_S2_>
 8025f06:	4603      	mov	r3, r0
 8025f08:	f993 3000 	ldrsb.w	r3, [r3]
 8025f0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8025f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8025f12:	3301      	adds	r3, #1
 8025f14:	673b      	str	r3, [r7, #112]	; 0x70
 8025f16:	e7e3      	b.n	8025ee0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8025f18:	f000 f8d1 	bl	80260be <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8025f1c:	4603      	mov	r3, r0
 8025f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8025f20:	2300      	movs	r3, #0
 8025f22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8025f24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8025f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025f28:	429a      	cmp	r2, r3
 8025f2a:	da30      	bge.n	8025f8e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8025f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025f2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025f30:	fb03 f202 	mul.w	r2, r3, r2
 8025f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8025f36:	4413      	add	r3, r2
 8025f38:	461a      	mov	r2, r3
 8025f3a:	687b      	ldr	r3, [r7, #4]
 8025f3c:	4413      	add	r3, r2
 8025f3e:	f993 3000 	ldrsb.w	r3, [r3]
 8025f42:	461a      	mov	r2, r3
 8025f44:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8025f48:	1ad3      	subs	r3, r2, r3
 8025f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8025f4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8025f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025f50:	429a      	cmp	r2, r3
 8025f52:	db18      	blt.n	8025f86 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8025f54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8025f56:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8025f58:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8025f5a:	f7fc fa74 	bl	8022446 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8025f5e:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8025f60:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8025f62:	f000 f8b4 	bl	80260ce <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8025f66:	4603      	mov	r3, r0
 8025f68:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8025f6a:	69f8      	ldr	r0, [r7, #28]
 8025f6c:	f000 f8de 	bl	802612c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8025f70:	4603      	mov	r3, r0
 8025f72:	4618      	mov	r0, r3
 8025f74:	f000 fa22 	bl	80263bc <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8025f78:	4603      	mov	r3, r0
 8025f7a:	4619      	mov	r1, r3
 8025f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025f7e:	f000 f8b7 	bl	80260f0 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8025f82:	4603      	mov	r3, r0
 8025f84:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8025f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8025f88:	3301      	adds	r3, #1
 8025f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8025f8c:	e7ca      	b.n	8025f24 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8025f8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025f92:	4618      	mov	r0, r3
 8025f94:	f000 fa2c 	bl	80263f0 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8025f98:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8025f9a:	681b      	ldr	r3, [r3, #0]
 8025f9c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8025fa0:	210c      	movs	r1, #12
 8025fa2:	4618      	mov	r0, r3
 8025fa4:	f7fc fa62 	bl	802246c <_ZN6tflite13GetReciprocalEliPi>
 8025fa8:	4603      	mov	r3, r0
 8025faa:	4618      	mov	r0, r3
 8025fac:	f7fc fa9b 	bl	80224e6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8025fb0:	4603      	mov	r3, r0
 8025fb2:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8025fb4:	2300      	movs	r3, #0
 8025fb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8025fb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8025fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025fbc:	429a      	cmp	r2, r3
 8025fbe:	da76      	bge.n	80260ae <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8025fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025fc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025fc4:	fb03 f202 	mul.w	r2, r3, r2
 8025fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8025fca:	4413      	add	r3, r2
 8025fcc:	461a      	mov	r2, r3
 8025fce:	687b      	ldr	r3, [r7, #4]
 8025fd0:	4413      	add	r3, r2
 8025fd2:	f993 3000 	ldrsb.w	r3, [r3]
 8025fd6:	461a      	mov	r2, r3
 8025fd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8025fdc:	1ad3      	subs	r3, r2, r3
 8025fde:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8025fe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8025fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025fe4:	429a      	cmp	r2, r3
 8025fe6:	db50      	blt.n	802608a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8025fe8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8025fea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8025fec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8025fee:	f7fc fa2a 	bl	8022446 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8025ff2:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8025ff4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8025ff6:	f000 f86a 	bl	80260ce <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8025ffa:	4603      	mov	r3, r0
 8025ffc:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8025ffe:	69b8      	ldr	r0, [r7, #24]
 8026000:	f000 f894 	bl	802612c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8026004:	4603      	mov	r3, r0
 8026006:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8026008:	6979      	ldr	r1, [r7, #20]
 802600a:	6a38      	ldr	r0, [r7, #32]
 802600c:	f7fd fd12 	bl	8023a34 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8026010:	4603      	mov	r3, r0
 8026012:	633b      	str	r3, [r7, #48]	; 0x30
 8026014:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026018:	4618      	mov	r0, r3
 802601a:	f7fc fad5 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802601e:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8026020:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8026022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026024:	320f      	adds	r2, #15
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8026026:	4611      	mov	r1, r2
 8026028:	4618      	mov	r0, r3
 802602a:	f7fa f975 	bl	8020318 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 802602e:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8026030:	f7f8 fecc 	bl	801edcc <_ZNSt14numeric_limitsIsE3minEv>
 8026034:	4603      	mov	r3, r0
 8026036:	461a      	mov	r2, r3
            unsat_output +
 8026038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802603a:	4413      	add	r3, r2
        const int32_t shifted_output =
 802603c:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 802603e:	f7f8 fecf 	bl	801ede0 <_ZNSt14numeric_limitsIsE3maxEv>
 8026042:	4603      	mov	r3, r0
 8026044:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8026046:	f107 0234 	add.w	r2, r7, #52	; 0x34
 802604a:	f107 0310 	add.w	r3, r7, #16
 802604e:	4611      	mov	r1, r2
 8026050:	4618      	mov	r0, r3
 8026052:	f7f9 fb6d 	bl	801f730 <_ZSt3minIlERKT_S2_S2_>
 8026056:	4604      	mov	r4, r0
 8026058:	f7f8 feb8 	bl	801edcc <_ZNSt14numeric_limitsIsE3minEv>
 802605c:	4603      	mov	r3, r0
 802605e:	63bb      	str	r3, [r7, #56]	; 0x38
 8026060:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8026064:	4619      	mov	r1, r3
 8026066:	4620      	mov	r0, r4
 8026068:	f7f9 fb76 	bl	801f758 <_ZSt3maxIlERKT_S2_S2_>
 802606c:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 802606e:	6819      	ldr	r1, [r3, #0]
 8026070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026072:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8026074:	fb03 f202 	mul.w	r2, r3, r2
 8026078:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802607a:	4413      	add	r3, r2
 802607c:	005b      	lsls	r3, r3, #1
 802607e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8026082:	4413      	add	r3, r2
 8026084:	b20a      	sxth	r2, r1
 8026086:	801a      	strh	r2, [r3, #0]
 8026088:	e00d      	b.n	80260a6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 802608a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802608c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802608e:	fb03 f202 	mul.w	r2, r3, r2
 8026092:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8026094:	4413      	add	r3, r2
 8026096:	005b      	lsls	r3, r3, #1
 8026098:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 802609c:	18d4      	adds	r4, r2, r3
 802609e:	f7f8 fe95 	bl	801edcc <_ZNSt14numeric_limitsIsE3minEv>
 80260a2:	4603      	mov	r3, r0
 80260a4:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 80260a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80260a8:	3301      	adds	r3, #1
 80260aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80260ac:	e784      	b.n	8025fb8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 80260ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80260b0:	3301      	adds	r3, #1
 80260b2:	677b      	str	r3, [r7, #116]	; 0x74
 80260b4:	e70a      	b.n	8025ecc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 80260b6:	bf00      	nop
 80260b8:	377c      	adds	r7, #124	; 0x7c
 80260ba:	46bd      	mov	sp, r7
 80260bc:	bd90      	pop	{r4, r7, pc}

080260be <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 80260be:	b580      	push	{r7, lr}
 80260c0:	af00      	add	r7, sp, #0
 80260c2:	2000      	movs	r0, #0
 80260c4:	f000 f9b5 	bl	8026432 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 80260c8:	4603      	mov	r3, r0
 80260ca:	4618      	mov	r0, r3
 80260cc:	bd80      	pop	{r7, pc}

080260ce <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80260ce:	b580      	push	{r7, lr}
 80260d0:	b084      	sub	sp, #16
 80260d2:	af00      	add	r7, sp, #0
 80260d4:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80260d6:	f107 030c 	add.w	r3, r7, #12
 80260da:	4618      	mov	r0, r3
 80260dc:	f000 f9bd 	bl	802645a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80260e0:	4602      	mov	r2, r0
 80260e2:	687b      	ldr	r3, [r7, #4]
 80260e4:	6013      	str	r3, [r2, #0]
    return retval;
 80260e6:	68fb      	ldr	r3, [r7, #12]
  }
 80260e8:	4618      	mov	r0, r3
 80260ea:	3710      	adds	r7, #16
 80260ec:	46bd      	mov	sp, r7
 80260ee:	bd80      	pop	{r7, pc}

080260f0 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80260f0:	b590      	push	{r4, r7, lr}
 80260f2:	b083      	sub	sp, #12
 80260f4:	af00      	add	r7, sp, #0
 80260f6:	6078      	str	r0, [r7, #4]
 80260f8:	6039      	str	r1, [r7, #0]
 80260fa:	1d3b      	adds	r3, r7, #4
 80260fc:	4618      	mov	r0, r3
 80260fe:	f000 f977 	bl	80263f0 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8026102:	4603      	mov	r3, r0
 8026104:	681c      	ldr	r4, [r3, #0]
 8026106:	463b      	mov	r3, r7
 8026108:	4618      	mov	r0, r3
 802610a:	f000 f971 	bl	80263f0 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 802610e:	4603      	mov	r3, r0
 8026110:	681b      	ldr	r3, [r3, #0]
 8026112:	4619      	mov	r1, r3
 8026114:	4620      	mov	r0, r4
 8026116:	f7fa fcff 	bl	8020b18 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 802611a:	4603      	mov	r3, r0
 802611c:	4618      	mov	r0, r3
 802611e:	f000 f9a7 	bl	8026470 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 8026122:	4603      	mov	r3, r0
 8026124:	4618      	mov	r0, r3
 8026126:	370c      	adds	r7, #12
 8026128:	46bd      	mov	sp, r7
 802612a:	bd90      	pop	{r4, r7, pc}

0802612c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 802612c:	b590      	push	{r4, r7, lr}
 802612e:	b091      	sub	sp, #68	; 0x44
 8026130:	af00      	add	r7, sp, #0
 8026132:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8026134:	f000 f9ad 	bl	8026492 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8026138:	4603      	mov	r3, r0
 802613a:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 802613c:	2001      	movs	r0, #1
 802613e:	f000 f9b1 	bl	80264a4 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8026142:	4603      	mov	r3, r0
 8026144:	4619      	mov	r1, r3
 8026146:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8026148:	f000 f9c0 	bl	80264cc <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802614c:	4603      	mov	r3, r0
 802614e:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 8026150:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8026152:	6878      	ldr	r0, [r7, #4]
 8026154:	f000 f9d8 	bl	8026508 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8026158:	4603      	mov	r3, r0
 802615a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802615c:	4618      	mov	r0, r3
 802615e:	f000 f9b5 	bl	80264cc <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8026162:	4603      	mov	r3, r0
 8026164:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8026166:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8026168:	f000 f9ec 	bl	8026544 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 802616c:	4603      	mov	r3, r0
 802616e:	4618      	mov	r0, r3
 8026170:	f7fd fbfe 	bl	8023970 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8026174:	4603      	mov	r3, r0
 8026176:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8026178:	6879      	ldr	r1, [r7, #4]
 802617a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802617c:	f000 f9a6 	bl	80264cc <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8026180:	4603      	mov	r3, r0
 8026182:	63bb      	str	r3, [r7, #56]	; 0x38
 8026184:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8026188:	4618      	mov	r0, r3
 802618a:	f000 f966 	bl	802645a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802618e:	4603      	mov	r3, r0
 8026190:	681b      	ldr	r3, [r3, #0]
 8026192:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8026194:	4883      	ldr	r0, [pc, #524]	; (80263a4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8026196:	f7fd fb91 	bl	80238bc <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802619a:	4603      	mov	r3, r0
 802619c:	4618      	mov	r0, r3
 802619e:	f7fc fa1e 	bl	80225de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80261a2:	4603      	mov	r3, r0
 80261a4:	627b      	str	r3, [r7, #36]	; 0x24
 80261a6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80261aa:	f7fa fc79 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80261ae:	4603      	mov	r3, r0
 80261b0:	4619      	mov	r1, r3
 80261b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80261b4:	f7fa fc7f 	bl	8020ab6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80261b8:	4603      	mov	r3, r0
 80261ba:	4618      	mov	r0, r3
 80261bc:	f7fa fcce 	bl	8020b5c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80261c0:	4604      	mov	r4, r0
 80261c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80261c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80261c6:	f7fd fc35 	bl	8023a34 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80261ca:	4603      	mov	r3, r0
 80261cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80261ce:	4619      	mov	r1, r3
 80261d0:	4620      	mov	r0, r4
 80261d2:	f7fd fb99 	bl	8023908 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80261d6:	4603      	mov	r3, r0
 80261d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 80261da:	4873      	ldr	r0, [pc, #460]	; (80263a8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 80261dc:	f7fd fb6e 	bl	80238bc <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80261e0:	4603      	mov	r3, r0
 80261e2:	4618      	mov	r0, r3
 80261e4:	f7fc f9fb 	bl	80225de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80261e8:	4603      	mov	r3, r0
 80261ea:	623b      	str	r3, [r7, #32]
 80261ec:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80261f0:	f7fa fc56 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80261f4:	4603      	mov	r3, r0
 80261f6:	4619      	mov	r1, r3
 80261f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80261fa:	f7fa fc5c 	bl	8020ab6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80261fe:	4603      	mov	r3, r0
 8026200:	4618      	mov	r0, r3
 8026202:	f7fa fcab 	bl	8020b5c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8026206:	4604      	mov	r4, r0
 8026208:	6a39      	ldr	r1, [r7, #32]
 802620a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802620c:	f7fd fc12 	bl	8023a34 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8026210:	4603      	mov	r3, r0
 8026212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8026214:	4619      	mov	r1, r3
 8026216:	4620      	mov	r0, r4
 8026218:	f7fd fb76 	bl	8023908 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802621c:	4603      	mov	r3, r0
 802621e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 8026220:	4862      	ldr	r0, [pc, #392]	; (80263ac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 8026222:	f7fd fb4b 	bl	80238bc <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8026226:	4603      	mov	r3, r0
 8026228:	4618      	mov	r0, r3
 802622a:	f7fc f9d8 	bl	80225de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802622e:	4603      	mov	r3, r0
 8026230:	61fb      	str	r3, [r7, #28]
 8026232:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8026236:	f7fa fc33 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802623a:	4603      	mov	r3, r0
 802623c:	4619      	mov	r1, r3
 802623e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8026240:	f7fa fc39 	bl	8020ab6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8026244:	4603      	mov	r3, r0
 8026246:	4618      	mov	r0, r3
 8026248:	f7fa fc88 	bl	8020b5c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802624c:	4604      	mov	r4, r0
 802624e:	69f9      	ldr	r1, [r7, #28]
 8026250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8026252:	f7fd fbef 	bl	8023a34 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8026256:	4603      	mov	r3, r0
 8026258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802625a:	4619      	mov	r1, r3
 802625c:	4620      	mov	r0, r4
 802625e:	f7fd fb53 	bl	8023908 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8026262:	4603      	mov	r3, r0
 8026264:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8026266:	4852      	ldr	r0, [pc, #328]	; (80263b0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8026268:	f7fd fb28 	bl	80238bc <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802626c:	4603      	mov	r3, r0
 802626e:	4618      	mov	r0, r3
 8026270:	f7fc f9b5 	bl	80225de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8026274:	4603      	mov	r3, r0
 8026276:	61bb      	str	r3, [r7, #24]
 8026278:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 802627c:	f7fa fc10 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8026280:	4603      	mov	r3, r0
 8026282:	4619      	mov	r1, r3
 8026284:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8026286:	f7fa fc16 	bl	8020ab6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802628a:	4603      	mov	r3, r0
 802628c:	4618      	mov	r0, r3
 802628e:	f7fa fc65 	bl	8020b5c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8026292:	4604      	mov	r4, r0
 8026294:	69b9      	ldr	r1, [r7, #24]
 8026296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8026298:	f7fd fbcc 	bl	8023a34 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802629c:	4603      	mov	r3, r0
 802629e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80262a0:	4619      	mov	r1, r3
 80262a2:	4620      	mov	r0, r4
 80262a4:	f7fd fb30 	bl	8023908 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80262a8:	4603      	mov	r3, r0
 80262aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 80262ac:	4841      	ldr	r0, [pc, #260]	; (80263b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 80262ae:	f7fd fb05 	bl	80238bc <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80262b2:	4603      	mov	r3, r0
 80262b4:	4618      	mov	r0, r3
 80262b6:	f7fc f992 	bl	80225de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80262ba:	4603      	mov	r3, r0
 80262bc:	617b      	str	r3, [r7, #20]
 80262be:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80262c2:	f7fa fbed 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80262c6:	4603      	mov	r3, r0
 80262c8:	4619      	mov	r1, r3
 80262ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80262cc:	f7fa fbf3 	bl	8020ab6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80262d0:	4603      	mov	r3, r0
 80262d2:	4618      	mov	r0, r3
 80262d4:	f7fa fc42 	bl	8020b5c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80262d8:	4604      	mov	r4, r0
 80262da:	6979      	ldr	r1, [r7, #20]
 80262dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80262de:	f7fd fba9 	bl	8023a34 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80262e2:	4603      	mov	r3, r0
 80262e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80262e6:	4619      	mov	r1, r3
 80262e8:	4620      	mov	r0, r4
 80262ea:	f7fd fb0d 	bl	8023908 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80262ee:	4603      	mov	r3, r0
 80262f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 80262f2:	4831      	ldr	r0, [pc, #196]	; (80263b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 80262f4:	f7fd fae2 	bl	80238bc <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80262f8:	4603      	mov	r3, r0
 80262fa:	4618      	mov	r0, r3
 80262fc:	f7fc f96f 	bl	80225de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8026300:	4603      	mov	r3, r0
 8026302:	613b      	str	r3, [r7, #16]
 8026304:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8026308:	f7fa fbca 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802630c:	4603      	mov	r3, r0
 802630e:	4619      	mov	r1, r3
 8026310:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8026312:	f7fa fbd0 	bl	8020ab6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8026316:	4603      	mov	r3, r0
 8026318:	4618      	mov	r0, r3
 802631a:	f7fa fc1f 	bl	8020b5c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802631e:	4604      	mov	r4, r0
 8026320:	6939      	ldr	r1, [r7, #16]
 8026322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8026324:	f7fd fb86 	bl	8023a34 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8026328:	4603      	mov	r3, r0
 802632a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802632c:	4619      	mov	r1, r3
 802632e:	4620      	mov	r0, r4
 8026330:	f7fd faea 	bl	8023908 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8026334:	4603      	mov	r3, r0
 8026336:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 8026338:	20f2      	movs	r0, #242	; 0xf2
 802633a:	f7fd fabf 	bl	80238bc <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802633e:	4603      	mov	r3, r0
 8026340:	4618      	mov	r0, r3
 8026342:	f7fc f94c 	bl	80225de <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8026346:	4603      	mov	r3, r0
 8026348:	60fb      	str	r3, [r7, #12]
 802634a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 802634e:	f7fa fba7 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8026352:	4603      	mov	r3, r0
 8026354:	4619      	mov	r1, r3
 8026356:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8026358:	f7fa fbad 	bl	8020ab6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802635c:	4603      	mov	r3, r0
 802635e:	4618      	mov	r0, r3
 8026360:	f7fa fbfc 	bl	8020b5c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8026364:	4604      	mov	r4, r0
 8026366:	68f9      	ldr	r1, [r7, #12]
 8026368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802636a:	f7fd fb63 	bl	8023a34 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802636e:	4603      	mov	r3, r0
 8026370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8026372:	4619      	mov	r1, r3
 8026374:	4620      	mov	r0, r4
 8026376:	f7fd fac7 	bl	8023908 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802637a:	4603      	mov	r3, r0
 802637c:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 802637e:	6878      	ldr	r0, [r7, #4]
 8026380:	f000 f8fa 	bl	8026578 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8026384:	4604      	mov	r4, r0
 8026386:	f7fc f93e 	bl	8022606 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 802638a:	4603      	mov	r3, r0
 802638c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802638e:	4619      	mov	r1, r3
 8026390:	4620      	mov	r0, r4
 8026392:	f7fd fab9 	bl	8023908 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8026396:	4603      	mov	r3, r0
 8026398:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 802639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 802639c:	4618      	mov	r0, r3
 802639e:	3744      	adds	r7, #68	; 0x44
 80263a0:	46bd      	mov	sp, r7
 80263a2:	bd90      	pop	{r4, r7, pc}
 80263a4:	63afbe7b 	.word	0x63afbe7b
 80263a8:	4da2cbf2 	.word	0x4da2cbf2
 80263ac:	2f16ac6c 	.word	0x2f16ac6c
 80263b0:	1152aaa4 	.word	0x1152aaa4
 80263b4:	02582ab7 	.word	0x02582ab7
 80263b8:	000afe11 	.word	0x000afe11

080263bc <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80263bc:	b5b0      	push	{r4, r5, r7, lr}
 80263be:	b084      	sub	sp, #16
 80263c0:	af00      	add	r7, sp, #0
 80263c2:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80263c4:	1d3b      	adds	r3, r7, #4
 80263c6:	4618      	mov	r0, r3
 80263c8:	f7fc f8fe 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80263cc:	4603      	mov	r3, r0
 80263ce:	681d      	ldr	r5, [r3, #0]
 80263d0:	f107 030c 	add.w	r3, r7, #12
 80263d4:	4618      	mov	r0, r3
 80263d6:	f000 f80b 	bl	80263f0 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80263da:	4604      	mov	r4, r0
 80263dc:	4628      	mov	r0, r5
 80263de:	f000 f8dd 	bl	802659c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 80263e2:	4603      	mov	r3, r0
 80263e4:	6023      	str	r3, [r4, #0]
  return result;
 80263e6:	68fb      	ldr	r3, [r7, #12]
}
 80263e8:	4618      	mov	r0, r3
 80263ea:	3710      	adds	r7, #16
 80263ec:	46bd      	mov	sp, r7
 80263ee:	bdb0      	pop	{r4, r5, r7, pc}

080263f0 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 80263f0:	b480      	push	{r7}
 80263f2:	b083      	sub	sp, #12
 80263f4:	af00      	add	r7, sp, #0
 80263f6:	6078      	str	r0, [r7, #4]
 80263f8:	687b      	ldr	r3, [r7, #4]
 80263fa:	4618      	mov	r0, r3
 80263fc:	370c      	adds	r7, #12
 80263fe:	46bd      	mov	sp, r7
 8026400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026404:	4770      	bx	lr

08026406 <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8026406:	b480      	push	{r7}
 8026408:	b083      	sub	sp, #12
 802640a:	af00      	add	r7, sp, #0
 802640c:	6078      	str	r0, [r7, #4]
 802640e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8026410:	687b      	ldr	r3, [r7, #4]
 8026412:	f993 2000 	ldrsb.w	r2, [r3]
 8026416:	683b      	ldr	r3, [r7, #0]
 8026418:	f993 3000 	ldrsb.w	r3, [r3]
 802641c:	429a      	cmp	r2, r3
 802641e:	da01      	bge.n	8026424 <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 8026420:	683b      	ldr	r3, [r7, #0]
 8026422:	e000      	b.n	8026426 <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 8026424:	687b      	ldr	r3, [r7, #4]
    }
 8026426:	4618      	mov	r0, r3
 8026428:	370c      	adds	r7, #12
 802642a:	46bd      	mov	sp, r7
 802642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026430:	4770      	bx	lr

08026432 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8026432:	b590      	push	{r4, r7, lr}
 8026434:	b085      	sub	sp, #20
 8026436:	af00      	add	r7, sp, #0
 8026438:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 802643a:	f107 030c 	add.w	r3, r7, #12
 802643e:	4618      	mov	r0, r3
 8026440:	f7ff ffd6 	bl	80263f0 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8026444:	4604      	mov	r4, r0
 8026446:	6878      	ldr	r0, [r7, #4]
 8026448:	f7fa fb2a 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802644c:	4603      	mov	r3, r0
 802644e:	6023      	str	r3, [r4, #0]
    return retval;
 8026450:	68fb      	ldr	r3, [r7, #12]
  }
 8026452:	4618      	mov	r0, r3
 8026454:	3714      	adds	r7, #20
 8026456:	46bd      	mov	sp, r7
 8026458:	bd90      	pop	{r4, r7, pc}

0802645a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 802645a:	b480      	push	{r7}
 802645c:	b083      	sub	sp, #12
 802645e:	af00      	add	r7, sp, #0
 8026460:	6078      	str	r0, [r7, #4]
 8026462:	687b      	ldr	r3, [r7, #4]
 8026464:	4618      	mov	r0, r3
 8026466:	370c      	adds	r7, #12
 8026468:	46bd      	mov	sp, r7
 802646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802646e:	4770      	bx	lr

08026470 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8026470:	b580      	push	{r7, lr}
 8026472:	b084      	sub	sp, #16
 8026474:	af00      	add	r7, sp, #0
 8026476:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8026478:	f107 030c 	add.w	r3, r7, #12
 802647c:	4618      	mov	r0, r3
 802647e:	f7ff ffb7 	bl	80263f0 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8026482:	4602      	mov	r2, r0
 8026484:	687b      	ldr	r3, [r7, #4]
 8026486:	6013      	str	r3, [r2, #0]
    return retval;
 8026488:	68fb      	ldr	r3, [r7, #12]
  }
 802648a:	4618      	mov	r0, r3
 802648c:	3710      	adds	r7, #16
 802648e:	46bd      	mov	sp, r7
 8026490:	bd80      	pop	{r7, pc}

08026492 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8026492:	b580      	push	{r7, lr}
 8026494:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8026496:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 802649a:	f000 f803 	bl	80264a4 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 802649e:	4603      	mov	r3, r0
  }
 80264a0:	4618      	mov	r0, r3
 80264a2:	bd80      	pop	{r7, pc}

080264a4 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80264a4:	b590      	push	{r4, r7, lr}
 80264a6:	b085      	sub	sp, #20
 80264a8:	af00      	add	r7, sp, #0
 80264aa:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80264ac:	f107 030c 	add.w	r3, r7, #12
 80264b0:	4618      	mov	r0, r3
 80264b2:	f7ff ffd2 	bl	802645a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80264b6:	4604      	mov	r4, r0
 80264b8:	6878      	ldr	r0, [r7, #4]
 80264ba:	f7fa faf1 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80264be:	4603      	mov	r3, r0
 80264c0:	6023      	str	r3, [r4, #0]
    return retval;
 80264c2:	68fb      	ldr	r3, [r7, #12]
  }
 80264c4:	4618      	mov	r0, r3
 80264c6:	3714      	adds	r7, #20
 80264c8:	46bd      	mov	sp, r7
 80264ca:	bd90      	pop	{r4, r7, pc}

080264cc <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 80264cc:	b590      	push	{r4, r7, lr}
 80264ce:	b083      	sub	sp, #12
 80264d0:	af00      	add	r7, sp, #0
 80264d2:	6078      	str	r0, [r7, #4]
 80264d4:	6039      	str	r1, [r7, #0]
 80264d6:	1d3b      	adds	r3, r7, #4
 80264d8:	4618      	mov	r0, r3
 80264da:	f7ff ffbe 	bl	802645a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80264de:	4603      	mov	r3, r0
 80264e0:	681c      	ldr	r4, [r3, #0]
 80264e2:	463b      	mov	r3, r7
 80264e4:	4618      	mov	r0, r3
 80264e6:	f7ff ffb8 	bl	802645a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80264ea:	4603      	mov	r3, r0
 80264ec:	681b      	ldr	r3, [r3, #0]
 80264ee:	4619      	mov	r1, r3
 80264f0:	4620      	mov	r0, r4
 80264f2:	f7fc f9a5 	bl	8022840 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 80264f6:	4603      	mov	r3, r0
 80264f8:	4618      	mov	r0, r3
 80264fa:	f7ff fde8 	bl	80260ce <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80264fe:	4603      	mov	r3, r0
 8026500:	4618      	mov	r0, r3
 8026502:	370c      	adds	r7, #12
 8026504:	46bd      	mov	sp, r7
 8026506:	bd90      	pop	{r4, r7, pc}

08026508 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 8026508:	b590      	push	{r4, r7, lr}
 802650a:	b083      	sub	sp, #12
 802650c:	af00      	add	r7, sp, #0
 802650e:	6078      	str	r0, [r7, #4]
 8026510:	6039      	str	r1, [r7, #0]
 8026512:	1d3b      	adds	r3, r7, #4
 8026514:	4618      	mov	r0, r3
 8026516:	f7ff ffa0 	bl	802645a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802651a:	4603      	mov	r3, r0
 802651c:	681c      	ldr	r4, [r3, #0]
 802651e:	463b      	mov	r3, r7
 8026520:	4618      	mov	r0, r3
 8026522:	f7ff ff9a 	bl	802645a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8026526:	4603      	mov	r3, r0
 8026528:	681b      	ldr	r3, [r3, #0]
 802652a:	4619      	mov	r1, r3
 802652c:	4620      	mov	r0, r4
 802652e:	f7fa fac2 	bl	8020ab6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8026532:	4603      	mov	r3, r0
 8026534:	4618      	mov	r0, r3
 8026536:	f7ff fdca 	bl	80260ce <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 802653a:	4603      	mov	r3, r0
 802653c:	4618      	mov	r0, r3
 802653e:	370c      	adds	r7, #12
 8026540:	46bd      	mov	sp, r7
 8026542:	bd90      	pop	{r4, r7, pc}

08026544 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8026544:	b5b0      	push	{r4, r5, r7, lr}
 8026546:	b084      	sub	sp, #16
 8026548:	af00      	add	r7, sp, #0
 802654a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 802654c:	1d3b      	adds	r3, r7, #4
 802654e:	4618      	mov	r0, r3
 8026550:	f7ff ff83 	bl	802645a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8026554:	4603      	mov	r3, r0
 8026556:	681d      	ldr	r5, [r3, #0]
 8026558:	f107 030c 	add.w	r3, r7, #12
 802655c:	4618      	mov	r0, r3
 802655e:	f7fc f833 	bl	80225c8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8026562:	4604      	mov	r4, r0
 8026564:	4628      	mov	r0, r5
 8026566:	f000 f825 	bl	80265b4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 802656a:	4603      	mov	r3, r0
 802656c:	6023      	str	r3, [r4, #0]
  return result;
 802656e:	68fb      	ldr	r3, [r7, #12]
}
 8026570:	4618      	mov	r0, r3
 8026572:	3710      	adds	r7, #16
 8026574:	46bd      	mov	sp, r7
 8026576:	bdb0      	pop	{r4, r5, r7, pc}

08026578 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 8026578:	b580      	push	{r7, lr}
 802657a:	b082      	sub	sp, #8
 802657c:	af00      	add	r7, sp, #0
 802657e:	6078      	str	r0, [r7, #4]
 8026580:	1d3b      	adds	r3, r7, #4
 8026582:	4618      	mov	r0, r3
 8026584:	f7ff ff69 	bl	802645a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8026588:	4603      	mov	r3, r0
 802658a:	681b      	ldr	r3, [r3, #0]
 802658c:	4618      	mov	r0, r3
 802658e:	f7fd f9dc 	bl	802394a <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 8026592:	4603      	mov	r3, r0
 8026594:	4618      	mov	r0, r3
 8026596:	3708      	adds	r7, #8
 8026598:	46bd      	mov	sp, r7
 802659a:	bd80      	pop	{r7, pc}

0802659c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 802659c:	b580      	push	{r7, lr}
 802659e:	b082      	sub	sp, #8
 80265a0:	af00      	add	r7, sp, #0
 80265a2:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80265a4:	6878      	ldr	r0, [r7, #4]
 80265a6:	f000 f811 	bl	80265cc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 80265aa:	4603      	mov	r3, r0
}
 80265ac:	4618      	mov	r0, r3
 80265ae:	3708      	adds	r7, #8
 80265b0:	46bd      	mov	sp, r7
 80265b2:	bd80      	pop	{r7, pc}

080265b4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80265b4:	b580      	push	{r7, lr}
 80265b6:	b082      	sub	sp, #8
 80265b8:	af00      	add	r7, sp, #0
 80265ba:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80265bc:	6878      	ldr	r0, [r7, #4]
 80265be:	f000 f813 	bl	80265e8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 80265c2:	4603      	mov	r3, r0
}
 80265c4:	4618      	mov	r0, r3
 80265c6:	3708      	adds	r7, #8
 80265c8:	46bd      	mov	sp, r7
 80265ca:	bd80      	pop	{r7, pc}

080265cc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80265cc:	b580      	push	{r7, lr}
 80265ce:	b082      	sub	sp, #8
 80265d0:	af00      	add	r7, sp, #0
 80265d2:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80265d4:	210c      	movs	r1, #12
 80265d6:	6878      	ldr	r0, [r7, #4]
 80265d8:	f7f9 fe9e 	bl	8020318 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80265dc:	4603      	mov	r3, r0
  }
 80265de:	4618      	mov	r0, r3
 80265e0:	3708      	adds	r7, #8
 80265e2:	46bd      	mov	sp, r7
 80265e4:	bd80      	pop	{r7, pc}
	...

080265e8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80265e8:	b580      	push	{r7, lr}
 80265ea:	b08a      	sub	sp, #40	; 0x28
 80265ec:	af00      	add	r7, sp, #0
 80265ee:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 80265f0:	f7f9 fa0d 	bl	801fa0e <_ZNSt14numeric_limitsIlE3minEv>
 80265f4:	4603      	mov	r3, r0
 80265f6:	4618      	mov	r0, r3
 80265f8:	f7fa fa52 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80265fc:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 80265fe:	f7f8 f9e9 	bl	801e9d4 <_ZNSt14numeric_limitsIlE3maxEv>
 8026602:	4603      	mov	r3, r0
 8026604:	4618      	mov	r0, r3
 8026606:	f7fa fa4b 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802660a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 802660c:	2320      	movs	r3, #32
 802660e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8026610:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8026614:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8026616:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 802661a:	f7fa fa41 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802661e:	4603      	mov	r3, r0
 8026620:	4619      	mov	r1, r3
 8026622:	6878      	ldr	r0, [r7, #4]
 8026624:	f7fa fa86 	bl	8020b34 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8026628:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 802662a:	480f      	ldr	r0, [pc, #60]	; (8026668 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 802662c:	f7fa fa38 	bl	8020aa0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8026630:	4603      	mov	r3, r0
 8026632:	4619      	mov	r1, r3
 8026634:	6878      	ldr	r0, [r7, #4]
 8026636:	f7fa fa5b 	bl	8020af0 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 802663a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 802663c:	2105      	movs	r1, #5
 802663e:	6878      	ldr	r0, [r7, #4]
 8026640:	f7fc f9e2 	bl	8022a08 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8026644:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8026646:	68fa      	ldr	r2, [r7, #12]
 8026648:	6a39      	ldr	r1, [r7, #32]
 802664a:	6978      	ldr	r0, [r7, #20]
 802664c:	f7fc fa20 	bl	8022a90 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8026650:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8026652:	68fa      	ldr	r2, [r7, #12]
 8026654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026656:	6938      	ldr	r0, [r7, #16]
 8026658:	f7fc fa1a 	bl	8022a90 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 802665c:	60f8      	str	r0, [r7, #12]
    return result;
 802665e:	68fb      	ldr	r3, [r7, #12]
  }
 8026660:	4618      	mov	r0, r3
 8026662:	3728      	adds	r7, #40	; 0x28
 8026664:	46bd      	mov	sp, r7
 8026666:	bd80      	pop	{r7, pc}
 8026668:	fc000001 	.word	0xfc000001

0802666c <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 802666c:	b580      	push	{r7, lr}
 802666e:	ed2d 8b02 	vpush	{d8}
 8026672:	b094      	sub	sp, #80	; 0x50
 8026674:	af00      	add	r7, sp, #0
 8026676:	6178      	str	r0, [r7, #20]
 8026678:	ed87 0a04 	vstr	s0, [r7, #16]
 802667c:	edc7 0a03 	vstr	s1, [r7, #12]
 8026680:	60b9      	str	r1, [r7, #8]
 8026682:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 8026684:	ed97 7a03 	vldr	s14, [r7, #12]
 8026688:	edd7 7a04 	vldr	s15, [r7, #16]
 802668c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8026690:	687b      	ldr	r3, [r7, #4]
 8026692:	3b01      	subs	r3, #1
 8026694:	ee07 3a90 	vmov	s15, r3
 8026698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802669c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80266a0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 80266a4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80266a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80266ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80266b0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 80266b4:	2300      	movs	r3, #0
 80266b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80266b8:	687b      	ldr	r3, [r7, #4]
 80266ba:	3b01      	subs	r3, #1
 80266bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80266be:	429a      	cmp	r2, r3
 80266c0:	f280 80c0 	bge.w	8026844 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 80266c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80266c6:	ee07 3a90 	vmov	s15, r3
 80266ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80266ce:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80266d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80266d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80266da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80266de:	697b      	ldr	r3, [r7, #20]
 80266e0:	eeb0 0a67 	vmov.f32	s0, s15
 80266e4:	4798      	blx	r3
 80266e6:	eef0 7a40 	vmov.f32	s15, s0
 80266ea:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80268bc <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 80266ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80266f2:	eeb0 0a67 	vmov.f32	s0, s15
 80266f6:	f7f8 fb38 	bl	801ed6a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80266fa:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 80266fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8026700:	3301      	adds	r3, #1
 8026702:	ee07 3a90 	vmov	s15, r3
 8026706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802670a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 802670e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026712:	edd7 7a04 	vldr	s15, [r7, #16]
 8026716:	ee77 7a27 	vadd.f32	s15, s14, s15
 802671a:	697b      	ldr	r3, [r7, #20]
 802671c:	eeb0 0a67 	vmov.f32	s0, s15
 8026720:	4798      	blx	r3
 8026722:	eef0 7a40 	vmov.f32	s15, s0
 8026726:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80268bc <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 802672a:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 802672e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8026730:	ee07 3a90 	vmov	s15, r3
 8026734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8026738:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 802673c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026740:	edd7 7a04 	vldr	s15, [r7, #16]
 8026744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026748:	697b      	ldr	r3, [r7, #20]
 802674a:	eeb0 0a67 	vmov.f32	s0, s15
 802674e:	4798      	blx	r3
 8026750:	eef0 7a40 	vmov.f32	s15, s0
 8026754:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80268bc <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8026758:	ee67 7a87 	vmul.f32	s15, s15, s14
 802675c:	eeb0 0a67 	vmov.f32	s0, s15
 8026760:	f7f8 fb03 	bl	801ed6a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8026764:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 8026768:	ee78 7a27 	vadd.f32	s15, s16, s15
 802676c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8026770:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8026774:	eeb0 0a47 	vmov.f32	s0, s14
 8026778:	f7f8 faf7 	bl	801ed6a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 802677c:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 8026780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8026782:	ee07 3a90 	vmov	s15, r3
 8026786:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802678a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 802678e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026792:	edd7 7a04 	vldr	s15, [r7, #16]
 8026796:	ee37 7a27 	vadd.f32	s14, s14, s15
 802679a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 802679e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80267a2:	697b      	ldr	r3, [r7, #20]
 80267a4:	eeb0 0a67 	vmov.f32	s0, s15
 80267a8:	4798      	blx	r3
 80267aa:	eef0 7a40 	vmov.f32	s15, s0
 80267ae:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80268bc <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 80267b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80267b6:	eeb0 0a67 	vmov.f32	s0, s15
 80267ba:	f7f8 fad6 	bl	801ed6a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80267be:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 80267c2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80267c6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80267ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80267ce:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 80267d2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80267d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80267da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80267de:	eeb0 0a47 	vmov.f32	s0, s14
 80267e2:	f7f8 fac2 	bl	801ed6a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80267e6:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 80267ea:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80267ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80267f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80267f6:	edc7 7a06 	vstr	s15, [r7, #24]
 80267fa:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 80267fe:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 8026800:	f107 021c 	add.w	r2, r7, #28
 8026804:	f107 0318 	add.w	r3, r7, #24
 8026808:	4611      	mov	r1, r2
 802680a:	4618      	mov	r0, r3
 802680c:	f7f8 fa80 	bl	801ed10 <_ZSt3maxIfERKT_S2_S2_>
 8026810:	4602      	mov	r2, r0
 8026812:	4b2b      	ldr	r3, [pc, #172]	; (80268c0 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8026814:	623b      	str	r3, [r7, #32]
 8026816:	f107 0320 	add.w	r3, r7, #32
 802681a:	4619      	mov	r1, r3
 802681c:	4610      	mov	r0, r2
 802681e:	f7f8 fa5e 	bl	801ecde <_ZSt3minIfERKT_S2_S2_>
 8026822:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 8026824:	edd3 7a00 	vldr	s15, [r3]
 8026828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802682a:	005b      	lsls	r3, r3, #1
 802682c:	68ba      	ldr	r2, [r7, #8]
 802682e:	4413      	add	r3, r2
 8026830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8026834:	ee17 2a90 	vmov	r2, s15
 8026838:	b212      	sxth	r2, r2
 802683a:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 802683c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802683e:	3301      	adds	r3, #1
 8026840:	64fb      	str	r3, [r7, #76]	; 0x4c
 8026842:	e739      	b.n	80266b8 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 8026844:	697b      	ldr	r3, [r7, #20]
 8026846:	ed97 0a03 	vldr	s0, [r7, #12]
 802684a:	4798      	blx	r3
 802684c:	eef0 7a40 	vmov.f32	s15, s0
 8026850:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80268bc <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8026854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026858:	eeb0 0a67 	vmov.f32	s0, s15
 802685c:	f7f8 fa85 	bl	801ed6a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8026860:	eef0 7a40 	vmov.f32	s15, s0
 8026864:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8026868:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 802686c:	62bb      	str	r3, [r7, #40]	; 0x28
 802686e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8026872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026876:	4611      	mov	r1, r2
 8026878:	4618      	mov	r0, r3
 802687a:	f7f8 fa49 	bl	801ed10 <_ZSt3maxIfERKT_S2_S2_>
 802687e:	4602      	mov	r2, r0
 8026880:	4b0f      	ldr	r3, [pc, #60]	; (80268c0 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8026882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026884:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8026888:	4619      	mov	r1, r3
 802688a:	4610      	mov	r0, r2
 802688c:	f7f8 fa27 	bl	801ecde <_ZSt3minIfERKT_S2_S2_>
 8026890:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 8026892:	edd3 7a00 	vldr	s15, [r3]
 8026896:	687b      	ldr	r3, [r7, #4]
 8026898:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802689c:	3b01      	subs	r3, #1
 802689e:	005b      	lsls	r3, r3, #1
 80268a0:	68ba      	ldr	r2, [r7, #8]
 80268a2:	4413      	add	r3, r2
 80268a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80268a8:	ee17 2a90 	vmov	r2, s15
 80268ac:	b212      	sxth	r2, r2
 80268ae:	801a      	strh	r2, [r3, #0]
}
 80268b0:	bf00      	nop
 80268b2:	3750      	adds	r7, #80	; 0x50
 80268b4:	46bd      	mov	sp, r7
 80268b6:	ecbd 8b02 	vpop	{d8}
 80268ba:	bd80      	pop	{r7, pc}
 80268bc:	47000000 	.word	0x47000000
 80268c0:	46fffe00 	.word	0x46fffe00
 80268c4:	00000000 	.word	0x00000000

080268c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 80268c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80268cc:	b090      	sub	sp, #64	; 0x40
 80268ce:	af06      	add	r7, sp, #24
 80268d0:	60f8      	str	r0, [r7, #12]
 80268d2:	60b9      	str	r1, [r7, #8]
 80268d4:	607a      	str	r2, [r7, #4]
 80268d6:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 80268d8:	68bb      	ldr	r3, [r7, #8]
 80268da:	781b      	ldrb	r3, [r3, #0]
 80268dc:	2b09      	cmp	r3, #9
 80268de:	d004      	beq.n	80268ea <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 80268e0:	68bb      	ldr	r3, [r7, #8]
 80268e2:	781b      	ldrb	r3, [r3, #0]
 80268e4:	2b07      	cmp	r3, #7
 80268e6:	f040 81b6 	bne.w	8026c56 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 80268ea:	68bb      	ldr	r3, [r7, #8]
 80268ec:	781b      	ldrb	r3, [r3, #0]
 80268ee:	2b07      	cmp	r3, #7
 80268f0:	d156      	bne.n	80269a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 80268f2:	687b      	ldr	r3, [r7, #4]
 80268f4:	691b      	ldr	r3, [r3, #16]
 80268f6:	2b00      	cmp	r3, #0
 80268f8:	d011      	beq.n	802691e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 80268fa:	68fb      	ldr	r3, [r7, #12]
 80268fc:	695c      	ldr	r4, [r3, #20]
 80268fe:	687b      	ldr	r3, [r7, #4]
 8026900:	691b      	ldr	r3, [r3, #16]
 8026902:	2200      	movs	r2, #0
 8026904:	9203      	str	r2, [sp, #12]
 8026906:	9302      	str	r3, [sp, #8]
 8026908:	4ba1      	ldr	r3, [pc, #644]	; (8026b90 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 802690a:	9301      	str	r3, [sp, #4]
 802690c:	4ba1      	ldr	r3, [pc, #644]	; (8026b94 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 802690e:	9300      	str	r3, [sp, #0]
 8026910:	2325      	movs	r3, #37	; 0x25
 8026912:	4aa1      	ldr	r2, [pc, #644]	; (8026b98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8026914:	49a1      	ldr	r1, [pc, #644]	; (8026b9c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8026916:	68f8      	ldr	r0, [r7, #12]
 8026918:	47a0      	blx	r4
 802691a:	2301      	movs	r3, #1
 802691c:	e1e0      	b.n	8026ce0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 802691e:	687b      	ldr	r3, [r7, #4]
 8026920:	edd3 7a03 	vldr	s15, [r3, #12]
 8026924:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8026ba0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8026928:	eef4 7ac7 	vcmpe.f32	s15, s14
 802692c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026930:	dd07      	ble.n	8026942 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 8026932:	687b      	ldr	r3, [r7, #4]
 8026934:	edd3 7a03 	vldr	s15, [r3, #12]
 8026938:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8026ba0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 802693c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026940:	e006      	b.n	8026950 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 8026942:	687b      	ldr	r3, [r7, #4]
 8026944:	edd3 7a03 	vldr	s15, [r3, #12]
 8026948:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8026ba0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 802694c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026950:	edc7 7a08 	vstr	s15, [r7, #32]
 8026954:	edd7 7a08 	vldr	s15, [r7, #32]
 8026958:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8026ba4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 802695c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026964:	f340 80dd 	ble.w	8026b22 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8026968:	68fb      	ldr	r3, [r7, #12]
 802696a:	695c      	ldr	r4, [r3, #20]
 802696c:	687b      	ldr	r3, [r7, #4]
 802696e:	68db      	ldr	r3, [r3, #12]
 8026970:	4618      	mov	r0, r3
 8026972:	f7d9 fe13 	bl	800059c <__aeabi_f2d>
 8026976:	4602      	mov	r2, r0
 8026978:	460b      	mov	r3, r1
 802697a:	f04f 0000 	mov.w	r0, #0
 802697e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8026982:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026986:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802698a:	4b87      	ldr	r3, [pc, #540]	; (8026ba8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 802698c:	9301      	str	r3, [sp, #4]
 802698e:	4b87      	ldr	r3, [pc, #540]	; (8026bac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8026990:	9300      	str	r3, [sp, #0]
 8026992:	2326      	movs	r3, #38	; 0x26
 8026994:	4a80      	ldr	r2, [pc, #512]	; (8026b98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8026996:	4986      	ldr	r1, [pc, #536]	; (8026bb0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8026998:	68f8      	ldr	r0, [r7, #12]
 802699a:	47a0      	blx	r4
 802699c:	2301      	movs	r3, #1
 802699e:	e19f      	b.n	8026ce0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 80269a0:	68bb      	ldr	r3, [r7, #8]
 80269a2:	781b      	ldrb	r3, [r3, #0]
 80269a4:	2b09      	cmp	r3, #9
 80269a6:	d018      	beq.n	80269da <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 80269a8:	68fb      	ldr	r3, [r7, #12]
 80269aa:	695c      	ldr	r4, [r3, #20]
 80269ac:	68bb      	ldr	r3, [r7, #8]
 80269ae:	781b      	ldrb	r3, [r3, #0]
 80269b0:	4618      	mov	r0, r3
 80269b2:	f7f7 ff93 	bl	801e8dc <TfLiteTypeGetName>
 80269b6:	4605      	mov	r5, r0
 80269b8:	2009      	movs	r0, #9
 80269ba:	f7f7 ff8f 	bl	801e8dc <TfLiteTypeGetName>
 80269be:	4603      	mov	r3, r0
 80269c0:	9303      	str	r3, [sp, #12]
 80269c2:	9502      	str	r5, [sp, #8]
 80269c4:	4b7b      	ldr	r3, [pc, #492]	; (8026bb4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 80269c6:	9301      	str	r3, [sp, #4]
 80269c8:	4b7b      	ldr	r3, [pc, #492]	; (8026bb8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 80269ca:	9300      	str	r3, [sp, #0]
 80269cc:	2329      	movs	r3, #41	; 0x29
 80269ce:	4a72      	ldr	r2, [pc, #456]	; (8026b98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80269d0:	497a      	ldr	r1, [pc, #488]	; (8026bbc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 80269d2:	68f8      	ldr	r0, [r7, #12]
 80269d4:	47a0      	blx	r4
 80269d6:	2301      	movs	r3, #1
 80269d8:	e182      	b.n	8026ce0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 80269da:	687b      	ldr	r3, [r7, #4]
 80269dc:	781b      	ldrb	r3, [r3, #0]
 80269de:	2b07      	cmp	r3, #7
 80269e0:	d155      	bne.n	8026a8e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 80269e2:	687b      	ldr	r3, [r7, #4]
 80269e4:	691b      	ldr	r3, [r3, #16]
 80269e6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80269ea:	d011      	beq.n	8026a10 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 80269ec:	68fb      	ldr	r3, [r7, #12]
 80269ee:	695c      	ldr	r4, [r3, #20]
 80269f0:	687b      	ldr	r3, [r7, #4]
 80269f2:	691b      	ldr	r3, [r3, #16]
 80269f4:	4a72      	ldr	r2, [pc, #456]	; (8026bc0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 80269f6:	9203      	str	r2, [sp, #12]
 80269f8:	9302      	str	r3, [sp, #8]
 80269fa:	4b72      	ldr	r3, [pc, #456]	; (8026bc4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 80269fc:	9301      	str	r3, [sp, #4]
 80269fe:	4b65      	ldr	r3, [pc, #404]	; (8026b94 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8026a00:	9300      	str	r3, [sp, #0]
 8026a02:	232b      	movs	r3, #43	; 0x2b
 8026a04:	4a64      	ldr	r2, [pc, #400]	; (8026b98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8026a06:	4965      	ldr	r1, [pc, #404]	; (8026b9c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8026a08:	68f8      	ldr	r0, [r7, #12]
 8026a0a:	47a0      	blx	r4
 8026a0c:	2301      	movs	r3, #1
 8026a0e:	e167      	b.n	8026ce0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 8026a10:	687b      	ldr	r3, [r7, #4]
 8026a12:	edd3 7a03 	vldr	s15, [r3, #12]
 8026a16:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8026bc8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8026a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a22:	dd07      	ble.n	8026a34 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 8026a24:	687b      	ldr	r3, [r7, #4]
 8026a26:	edd3 7a03 	vldr	s15, [r3, #12]
 8026a2a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8026bc8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8026a2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026a32:	e006      	b.n	8026a42 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 8026a34:	687b      	ldr	r3, [r7, #4]
 8026a36:	edd3 7a03 	vldr	s15, [r3, #12]
 8026a3a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8026bc8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8026a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026a42:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8026a46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8026a4a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8026bcc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 8026a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a56:	dd64      	ble.n	8026b22 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8026a58:	68fb      	ldr	r3, [r7, #12]
 8026a5a:	695c      	ldr	r4, [r3, #20]
 8026a5c:	687b      	ldr	r3, [r7, #4]
 8026a5e:	68db      	ldr	r3, [r3, #12]
 8026a60:	4618      	mov	r0, r3
 8026a62:	f7d9 fd9b 	bl	800059c <__aeabi_f2d>
 8026a66:	4602      	mov	r2, r0
 8026a68:	460b      	mov	r3, r1
 8026a6a:	f04f 0000 	mov.w	r0, #0
 8026a6e:	4958      	ldr	r1, [pc, #352]	; (8026bd0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 8026a70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026a74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8026a78:	4b56      	ldr	r3, [pc, #344]	; (8026bd4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 8026a7a:	9301      	str	r3, [sp, #4]
 8026a7c:	4b4b      	ldr	r3, [pc, #300]	; (8026bac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8026a7e:	9300      	str	r3, [sp, #0]
 8026a80:	232c      	movs	r3, #44	; 0x2c
 8026a82:	4a45      	ldr	r2, [pc, #276]	; (8026b98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8026a84:	494a      	ldr	r1, [pc, #296]	; (8026bb0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8026a86:	68f8      	ldr	r0, [r7, #12]
 8026a88:	47a0      	blx	r4
 8026a8a:	2301      	movs	r3, #1
 8026a8c:	e128      	b.n	8026ce0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 8026a8e:	687b      	ldr	r3, [r7, #4]
 8026a90:	781b      	ldrb	r3, [r3, #0]
 8026a92:	2b09      	cmp	r3, #9
 8026a94:	d018      	beq.n	8026ac8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 8026a96:	68fb      	ldr	r3, [r7, #12]
 8026a98:	695c      	ldr	r4, [r3, #20]
 8026a9a:	687b      	ldr	r3, [r7, #4]
 8026a9c:	781b      	ldrb	r3, [r3, #0]
 8026a9e:	4618      	mov	r0, r3
 8026aa0:	f7f7 ff1c 	bl	801e8dc <TfLiteTypeGetName>
 8026aa4:	4605      	mov	r5, r0
 8026aa6:	2009      	movs	r0, #9
 8026aa8:	f7f7 ff18 	bl	801e8dc <TfLiteTypeGetName>
 8026aac:	4603      	mov	r3, r0
 8026aae:	9303      	str	r3, [sp, #12]
 8026ab0:	9502      	str	r5, [sp, #8]
 8026ab2:	4b40      	ldr	r3, [pc, #256]	; (8026bb4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8026ab4:	9301      	str	r3, [sp, #4]
 8026ab6:	4b48      	ldr	r3, [pc, #288]	; (8026bd8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 8026ab8:	9300      	str	r3, [sp, #0]
 8026aba:	232f      	movs	r3, #47	; 0x2f
 8026abc:	4a36      	ldr	r2, [pc, #216]	; (8026b98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8026abe:	493f      	ldr	r1, [pc, #252]	; (8026bbc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8026ac0:	68f8      	ldr	r0, [r7, #12]
 8026ac2:	47a0      	blx	r4
 8026ac4:	2301      	movs	r3, #1
 8026ac6:	e10b      	b.n	8026ce0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 8026ac8:	687b      	ldr	r3, [r7, #4]
 8026aca:	691b      	ldr	r3, [r3, #16]
 8026acc:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8026ad0:	d012      	beq.n	8026af8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 8026ad2:	68fb      	ldr	r3, [r7, #12]
 8026ad4:	695c      	ldr	r4, [r3, #20]
 8026ad6:	687b      	ldr	r3, [r7, #4]
 8026ad8:	691b      	ldr	r3, [r3, #16]
 8026ada:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8026ade:	9203      	str	r2, [sp, #12]
 8026ae0:	9302      	str	r3, [sp, #8]
 8026ae2:	4b3e      	ldr	r3, [pc, #248]	; (8026bdc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 8026ae4:	9301      	str	r3, [sp, #4]
 8026ae6:	4b2b      	ldr	r3, [pc, #172]	; (8026b94 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8026ae8:	9300      	str	r3, [sp, #0]
 8026aea:	2330      	movs	r3, #48	; 0x30
 8026aec:	4a2a      	ldr	r2, [pc, #168]	; (8026b98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8026aee:	492b      	ldr	r1, [pc, #172]	; (8026b9c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8026af0:	68f8      	ldr	r0, [r7, #12]
 8026af2:	47a0      	blx	r4
 8026af4:	2301      	movs	r3, #1
 8026af6:	e0f3      	b.n	8026ce0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 8026af8:	687b      	ldr	r3, [r7, #4]
 8026afa:	edd3 7a03 	vldr	s15, [r3, #12]
 8026afe:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8026be0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 8026b02:	eef4 7a47 	vcmp.f32	s15, s14
 8026b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b0a:	d00a      	beq.n	8026b22 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8026b0c:	68fb      	ldr	r3, [r7, #12]
 8026b0e:	695c      	ldr	r4, [r3, #20]
 8026b10:	4b34      	ldr	r3, [pc, #208]	; (8026be4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 8026b12:	9300      	str	r3, [sp, #0]
 8026b14:	2331      	movs	r3, #49	; 0x31
 8026b16:	4a20      	ldr	r2, [pc, #128]	; (8026b98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8026b18:	4933      	ldr	r1, [pc, #204]	; (8026be8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 8026b1a:	68f8      	ldr	r0, [r7, #12]
 8026b1c:	47a0      	blx	r4
 8026b1e:	2301      	movs	r3, #1
 8026b20:	e0de      	b.n	8026ce0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 8026b22:	68bb      	ldr	r3, [r7, #8]
 8026b24:	781b      	ldrb	r3, [r3, #0]
 8026b26:	2b07      	cmp	r3, #7
 8026b28:	d160      	bne.n	8026bec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 8026b2a:	68bb      	ldr	r3, [r7, #8]
 8026b2c:	68db      	ldr	r3, [r3, #12]
 8026b2e:	4618      	mov	r0, r3
 8026b30:	f7d9 fd34 	bl	800059c <__aeabi_f2d>
 8026b34:	4604      	mov	r4, r0
 8026b36:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 8026b38:	683b      	ldr	r3, [r7, #0]
 8026b3a:	681b      	ldr	r3, [r3, #0]
 8026b3c:	4618      	mov	r0, r3
 8026b3e:	f7d9 fd2d 	bl	800059c <__aeabi_f2d>
 8026b42:	4602      	mov	r2, r0
 8026b44:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 8026b46:	4620      	mov	r0, r4
 8026b48:	4629      	mov	r1, r5
 8026b4a:	f7d9 fd7f 	bl	800064c <__aeabi_dmul>
 8026b4e:	4602      	mov	r2, r0
 8026b50:	460b      	mov	r3, r1
 8026b52:	4610      	mov	r0, r2
 8026b54:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 8026b56:	a30c      	add	r3, pc, #48	; (adr r3, 8026b88 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8026b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026b5c:	f7d9 fea0 	bl	80008a0 <__aeabi_ddiv>
 8026b60:	4602      	mov	r2, r0
 8026b62:	460b      	mov	r3, r1
 8026b64:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 8026b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8026b6a:	3308      	adds	r3, #8
 8026b6c:	f107 0214 	add.w	r2, r7, #20
 8026b70:	4611      	mov	r1, r2
 8026b72:	4618      	mov	r0, r3
 8026b74:	ed97 0b06 	vldr	d0, [r7, #24]
 8026b78:	f7f7 ff36 	bl	801e9e8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 8026b7c:	697a      	ldr	r2, [r7, #20]
 8026b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8026b80:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 8026b82:	e0ac      	b.n	8026cde <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 8026b84:	f3af 8000 	nop.w
 8026b88:	00140014 	.word	0x00140014
 8026b8c:	3f240014 	.word	0x3f240014
 8026b90:	0802f820 	.word	0x0802f820
 8026b94:	0802f824 	.word	0x0802f824
 8026b98:	0802f76c 	.word	0x0802f76c
 8026b9c:	0802f804 	.word	0x0802f804
 8026ba0:	38000000 	.word	0x38000000
 8026ba4:	3303126f 	.word	0x3303126f
 8026ba8:	0802f860 	.word	0x0802f860
 8026bac:	0802f86c 	.word	0x0802f86c
 8026bb0:	0802f840 	.word	0x0802f840
 8026bb4:	0802f8a0 	.word	0x0802f8a0
 8026bb8:	0802f8ac 	.word	0x0802f8ac
 8026bbc:	0802f884 	.word	0x0802f884
 8026bc0:	ffff8000 	.word	0xffff8000
 8026bc4:	0802f8b8 	.word	0x0802f8b8
 8026bc8:	37800000 	.word	0x37800000
 8026bcc:	3283126f 	.word	0x3283126f
 8026bd0:	3ef00000 	.word	0x3ef00000
 8026bd4:	0802f8c0 	.word	0x0802f8c0
 8026bd8:	0802f8cc 	.word	0x0802f8cc
 8026bdc:	0802f8dc 	.word	0x0802f8dc
 8026be0:	3b800000 	.word	0x3b800000
 8026be4:	0802f8fc 	.word	0x0802f8fc
 8026be8:	0802f8e4 	.word	0x0802f8e4
          static_cast<double>(params->beta),
 8026bec:	683b      	ldr	r3, [r7, #0]
 8026bee:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 8026bf0:	4618      	mov	r0, r3
 8026bf2:	f7d9 fcd3 	bl	800059c <__aeabi_f2d>
 8026bf6:	4680      	mov	r8, r0
 8026bf8:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 8026bfa:	68bb      	ldr	r3, [r7, #8]
 8026bfc:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 8026bfe:	4618      	mov	r0, r3
 8026c00:	f7d9 fccc 	bl	800059c <__aeabi_f2d>
 8026c04:	4682      	mov	sl, r0
 8026c06:	468b      	mov	fp, r1
 8026c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8026c0a:	3308      	adds	r3, #8
 8026c0c:	f107 0210 	add.w	r2, r7, #16
 8026c10:	4619      	mov	r1, r3
 8026c12:	2005      	movs	r0, #5
 8026c14:	ec4b ab11 	vmov	d1, sl, fp
 8026c18:	ec49 8b10 	vmov	d0, r8, r9
 8026c1c:	f7f7 ffb0 	bl	801eb80 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 8026c20:	693a      	ldr	r2, [r7, #16]
 8026c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8026c24:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 8026c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8026c28:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8026c2a:	221f      	movs	r2, #31
 8026c2c:	4619      	mov	r1, r3
 8026c2e:	2005      	movs	r0, #5
 8026c30:	f7f7 ffee 	bl	801ec10 <_ZN6tflite20CalculateInputRadiusEiii>
 8026c34:	4603      	mov	r3, r0
 8026c36:	4618      	mov	r0, r3
 8026c38:	f7d9 fc9e 	bl	8000578 <__aeabi_i2d>
 8026c3c:	4602      	mov	r2, r0
 8026c3e:	460b      	mov	r3, r1
 8026c40:	4614      	mov	r4, r2
 8026c42:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 8026c46:	4620      	mov	r0, r4
 8026c48:	4629      	mov	r1, r5
 8026c4a:	f7d9 ffaf 	bl	8000bac <__aeabi_d2iz>
 8026c4e:	4602      	mov	r2, r0
 8026c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8026c52:	619a      	str	r2, [r3, #24]
    }
 8026c54:	e043      	b.n	8026cde <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8026c56:	68bb      	ldr	r3, [r7, #8]
 8026c58:	781b      	ldrb	r3, [r3, #0]
 8026c5a:	2b01      	cmp	r3, #1
 8026c5c:	d018      	beq.n	8026c90 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 8026c5e:	68fb      	ldr	r3, [r7, #12]
 8026c60:	695c      	ldr	r4, [r3, #20]
 8026c62:	68bb      	ldr	r3, [r7, #8]
 8026c64:	781b      	ldrb	r3, [r3, #0]
 8026c66:	4618      	mov	r0, r3
 8026c68:	f7f7 fe38 	bl	801e8dc <TfLiteTypeGetName>
 8026c6c:	4605      	mov	r5, r0
 8026c6e:	2001      	movs	r0, #1
 8026c70:	f7f7 fe34 	bl	801e8dc <TfLiteTypeGetName>
 8026c74:	4603      	mov	r3, r0
 8026c76:	9303      	str	r3, [sp, #12]
 8026c78:	9502      	str	r5, [sp, #8]
 8026c7a:	4b1c      	ldr	r3, [pc, #112]	; (8026cec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 8026c7c:	9301      	str	r3, [sp, #4]
 8026c7e:	4b1c      	ldr	r3, [pc, #112]	; (8026cf0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 8026c80:	9300      	str	r3, [sp, #0]
 8026c82:	234e      	movs	r3, #78	; 0x4e
 8026c84:	4a1b      	ldr	r2, [pc, #108]	; (8026cf4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8026c86:	491c      	ldr	r1, [pc, #112]	; (8026cf8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 8026c88:	68f8      	ldr	r0, [r7, #12]
 8026c8a:	47a0      	blx	r4
 8026c8c:	2301      	movs	r3, #1
 8026c8e:	e027      	b.n	8026ce0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8026c90:	687b      	ldr	r3, [r7, #4]
 8026c92:	781b      	ldrb	r3, [r3, #0]
 8026c94:	2b01      	cmp	r3, #1
 8026c96:	d018      	beq.n	8026cca <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 8026c98:	68fb      	ldr	r3, [r7, #12]
 8026c9a:	695c      	ldr	r4, [r3, #20]
 8026c9c:	687b      	ldr	r3, [r7, #4]
 8026c9e:	781b      	ldrb	r3, [r3, #0]
 8026ca0:	4618      	mov	r0, r3
 8026ca2:	f7f7 fe1b 	bl	801e8dc <TfLiteTypeGetName>
 8026ca6:	4605      	mov	r5, r0
 8026ca8:	2001      	movs	r0, #1
 8026caa:	f7f7 fe17 	bl	801e8dc <TfLiteTypeGetName>
 8026cae:	4603      	mov	r3, r0
 8026cb0:	9303      	str	r3, [sp, #12]
 8026cb2:	9502      	str	r5, [sp, #8]
 8026cb4:	4b0d      	ldr	r3, [pc, #52]	; (8026cec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 8026cb6:	9301      	str	r3, [sp, #4]
 8026cb8:	4b10      	ldr	r3, [pc, #64]	; (8026cfc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 8026cba:	9300      	str	r3, [sp, #0]
 8026cbc:	234f      	movs	r3, #79	; 0x4f
 8026cbe:	4a0d      	ldr	r2, [pc, #52]	; (8026cf4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8026cc0:	490d      	ldr	r1, [pc, #52]	; (8026cf8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 8026cc2:	68f8      	ldr	r0, [r7, #12]
 8026cc4:	47a0      	blx	r4
 8026cc6:	2301      	movs	r3, #1
 8026cc8:	e00a      	b.n	8026ce0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 8026cca:	683b      	ldr	r3, [r7, #0]
 8026ccc:	681b      	ldr	r3, [r3, #0]
 8026cce:	4618      	mov	r0, r3
 8026cd0:	f7d9 fc64 	bl	800059c <__aeabi_f2d>
 8026cd4:	4602      	mov	r2, r0
 8026cd6:	460b      	mov	r3, r1
 8026cd8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8026cda:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8026cde:	2300      	movs	r3, #0
}
 8026ce0:	4618      	mov	r0, r3
 8026ce2:	3728      	adds	r7, #40	; 0x28
 8026ce4:	46bd      	mov	sp, r7
 8026ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8026cea:	bf00      	nop
 8026cec:	0802f920 	.word	0x0802f920
 8026cf0:	0802f8ac 	.word	0x0802f8ac
 8026cf4:	0802f76c 	.word	0x0802f76c
 8026cf8:	0802f884 	.word	0x0802f884
 8026cfc:	0802f8cc 	.word	0x0802f8cc

08026d00 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 8026d00:	b580      	push	{r7, lr}
 8026d02:	b084      	sub	sp, #16
 8026d04:	af00      	add	r7, sp, #0
 8026d06:	60f8      	str	r0, [r7, #12]
 8026d08:	60b9      	str	r1, [r7, #8]
 8026d0a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8026d0c:	68fb      	ldr	r3, [r7, #12]
 8026d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026d10:	2b00      	cmp	r3, #0
 8026d12:	d101      	bne.n	8026d18 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 8026d14:	f005 fa3e 	bl	802c194 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 8026d18:	68fb      	ldr	r3, [r7, #12]
 8026d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026d1c:	2138      	movs	r1, #56	; 0x38
 8026d1e:	68f8      	ldr	r0, [r7, #12]
 8026d20:	4798      	blx	r3
 8026d22:	4603      	mov	r3, r0
}
 8026d24:	4618      	mov	r0, r3
 8026d26:	3710      	adds	r7, #16
 8026d28:	46bd      	mov	sp, r7
 8026d2a:	bd80      	pop	{r7, pc}

08026d2c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8026d2c:	b580      	push	{r7, lr}
 8026d2e:	b082      	sub	sp, #8
 8026d30:	af00      	add	r7, sp, #0
 8026d32:	6078      	str	r0, [r7, #4]
 8026d34:	ed87 0a00 	vstr	s0, [r7]
 8026d38:	ed97 0a00 	vldr	s0, [r7]
 8026d3c:	f7da fb68 	bl	8001410 <_ZSt3expf>
 8026d40:	eef0 7a40 	vmov.f32	s15, s0
 8026d44:	eeb0 0a67 	vmov.f32	s0, s15
 8026d48:	3708      	adds	r7, #8
 8026d4a:	46bd      	mov	sp, r7
 8026d4c:	bd80      	pop	{r7, pc}

08026d4e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 8026d4e:	b580      	push	{r7, lr}
 8026d50:	b082      	sub	sp, #8
 8026d52:	af00      	add	r7, sp, #0
 8026d54:	ed87 0a01 	vstr	s0, [r7, #4]
 8026d58:	ed97 0a01 	vldr	s0, [r7, #4]
 8026d5c:	2000      	movs	r0, #0
 8026d5e:	f7ff ffe5 	bl	8026d2c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 8026d62:	eef0 7a40 	vmov.f32	s15, s0
 8026d66:	eeb0 0a67 	vmov.f32	s0, s15
 8026d6a:	3708      	adds	r7, #8
 8026d6c:	46bd      	mov	sp, r7
 8026d6e:	bd80      	pop	{r7, pc}

08026d70 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 8026d70:	b480      	push	{r7}
 8026d72:	b083      	sub	sp, #12
 8026d74:	af00      	add	r7, sp, #0
 8026d76:	6078      	str	r0, [r7, #4]
 8026d78:	4b03      	ldr	r3, [pc, #12]	; (8026d88 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 8026d7a:	4618      	mov	r0, r3
 8026d7c:	370c      	adds	r7, #12
 8026d7e:	46bd      	mov	sp, r7
 8026d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d84:	4770      	bx	lr
 8026d86:	bf00      	nop
 8026d88:	08026d4f 	.word	0x08026d4f

08026d8c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8026d8c:	b480      	push	{r7}
 8026d8e:	b083      	sub	sp, #12
 8026d90:	af00      	add	r7, sp, #0
 8026d92:	6078      	str	r0, [r7, #4]
 8026d94:	ed87 0a00 	vstr	s0, [r7]
 8026d98:	edd7 7a00 	vldr	s15, [r7]
 8026d9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026da0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026da4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026da8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8026dac:	eef0 7a66 	vmov.f32	s15, s13
 8026db0:	eeb0 0a67 	vmov.f32	s0, s15
 8026db4:	370c      	adds	r7, #12
 8026db6:	46bd      	mov	sp, r7
 8026db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026dbc:	4770      	bx	lr

08026dbe <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 8026dbe:	b580      	push	{r7, lr}
 8026dc0:	b082      	sub	sp, #8
 8026dc2:	af00      	add	r7, sp, #0
 8026dc4:	ed87 0a01 	vstr	s0, [r7, #4]
 8026dc8:	ed97 0a01 	vldr	s0, [r7, #4]
 8026dcc:	2000      	movs	r0, #0
 8026dce:	f7ff ffdd 	bl	8026d8c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 8026dd2:	eef0 7a40 	vmov.f32	s15, s0
 8026dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8026dda:	3708      	adds	r7, #8
 8026ddc:	46bd      	mov	sp, r7
 8026dde:	bd80      	pop	{r7, pc}

08026de0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 8026de0:	b480      	push	{r7}
 8026de2:	b083      	sub	sp, #12
 8026de4:	af00      	add	r7, sp, #0
 8026de6:	6078      	str	r0, [r7, #4]
 8026de8:	4b03      	ldr	r3, [pc, #12]	; (8026df8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 8026dea:	4618      	mov	r0, r3
 8026dec:	370c      	adds	r7, #12
 8026dee:	46bd      	mov	sp, r7
 8026df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026df4:	4770      	bx	lr
 8026df6:	bf00      	nop
 8026df8:	08026dbf 	.word	0x08026dbf

08026dfc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8026dfc:	b590      	push	{r4, r7, lr}
 8026dfe:	b08f      	sub	sp, #60	; 0x3c
 8026e00:	af04      	add	r7, sp, #16
 8026e02:	6078      	str	r0, [r7, #4]
 8026e04:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8026e06:	6838      	ldr	r0, [r7, #0]
 8026e08:	f7f9 ffa6 	bl	8020d58 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8026e0c:	4603      	mov	r3, r0
 8026e0e:	2b01      	cmp	r3, #1
 8026e10:	bf14      	ite	ne
 8026e12:	2301      	movne	r3, #1
 8026e14:	2300      	moveq	r3, #0
 8026e16:	b2db      	uxtb	r3, r3
 8026e18:	2b00      	cmp	r3, #0
 8026e1a:	d013      	beq.n	8026e44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 8026e1c:	687b      	ldr	r3, [r7, #4]
 8026e1e:	695c      	ldr	r4, [r3, #20]
 8026e20:	6838      	ldr	r0, [r7, #0]
 8026e22:	f7f9 ff99 	bl	8020d58 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8026e26:	4603      	mov	r3, r0
 8026e28:	2201      	movs	r2, #1
 8026e2a:	9203      	str	r2, [sp, #12]
 8026e2c:	9302      	str	r3, [sp, #8]
 8026e2e:	4b7c      	ldr	r3, [pc, #496]	; (8027020 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8026e30:	9301      	str	r3, [sp, #4]
 8026e32:	4b7c      	ldr	r3, [pc, #496]	; (8027024 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 8026e34:	9300      	str	r3, [sp, #0]
 8026e36:	235d      	movs	r3, #93	; 0x5d
 8026e38:	4a7b      	ldr	r2, [pc, #492]	; (8027028 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8026e3a:	497c      	ldr	r1, [pc, #496]	; (802702c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8026e3c:	6878      	ldr	r0, [r7, #4]
 8026e3e:	47a0      	blx	r4
 8026e40:	2301      	movs	r3, #1
 8026e42:	e146      	b.n	80270d2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8026e44:	6838      	ldr	r0, [r7, #0]
 8026e46:	f7f9 ff94 	bl	8020d72 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8026e4a:	4603      	mov	r3, r0
 8026e4c:	2b01      	cmp	r3, #1
 8026e4e:	bf14      	ite	ne
 8026e50:	2301      	movne	r3, #1
 8026e52:	2300      	moveq	r3, #0
 8026e54:	b2db      	uxtb	r3, r3
 8026e56:	2b00      	cmp	r3, #0
 8026e58:	d013      	beq.n	8026e82 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 8026e5a:	687b      	ldr	r3, [r7, #4]
 8026e5c:	695c      	ldr	r4, [r3, #20]
 8026e5e:	6838      	ldr	r0, [r7, #0]
 8026e60:	f7f9 ff87 	bl	8020d72 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8026e64:	4603      	mov	r3, r0
 8026e66:	2201      	movs	r2, #1
 8026e68:	9203      	str	r2, [sp, #12]
 8026e6a:	9302      	str	r3, [sp, #8]
 8026e6c:	4b6c      	ldr	r3, [pc, #432]	; (8027020 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8026e6e:	9301      	str	r3, [sp, #4]
 8026e70:	4b6f      	ldr	r3, [pc, #444]	; (8027030 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 8026e72:	9300      	str	r3, [sp, #0]
 8026e74:	235e      	movs	r3, #94	; 0x5e
 8026e76:	4a6c      	ldr	r2, [pc, #432]	; (8027028 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8026e78:	496c      	ldr	r1, [pc, #432]	; (802702c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8026e7a:	6878      	ldr	r0, [r7, #4]
 8026e7c:	47a0      	blx	r4
 8026e7e:	2301      	movs	r3, #1
 8026e80:	e127      	b.n	80270d2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 8026e82:	2200      	movs	r2, #0
 8026e84:	6839      	ldr	r1, [r7, #0]
 8026e86:	6878      	ldr	r0, [r7, #4]
 8026e88:	f7f8 f886 	bl	801ef98 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8026e8c:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 8026e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026e90:	2b00      	cmp	r3, #0
 8026e92:	d10a      	bne.n	8026eaa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 8026e94:	687b      	ldr	r3, [r7, #4]
 8026e96:	695c      	ldr	r4, [r3, #20]
 8026e98:	4b66      	ldr	r3, [pc, #408]	; (8027034 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 8026e9a:	9300      	str	r3, [sp, #0]
 8026e9c:	2360      	movs	r3, #96	; 0x60
 8026e9e:	4a62      	ldr	r2, [pc, #392]	; (8027028 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8026ea0:	4965      	ldr	r1, [pc, #404]	; (8027038 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8026ea2:	6878      	ldr	r0, [r7, #4]
 8026ea4:	47a0      	blx	r4
 8026ea6:	2301      	movs	r3, #1
 8026ea8:	e113      	b.n	80270d2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 8026eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8026eac:	f7f7 ffa1 	bl	801edf2 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8026eb0:	4603      	mov	r3, r0
 8026eb2:	2b00      	cmp	r3, #0
 8026eb4:	bfd4      	ite	le
 8026eb6:	2301      	movle	r3, #1
 8026eb8:	2300      	movgt	r3, #0
 8026eba:	b2db      	uxtb	r3, r3
 8026ebc:	2b00      	cmp	r3, #0
 8026ebe:	d00a      	beq.n	8026ed6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 8026ec0:	687b      	ldr	r3, [r7, #4]
 8026ec2:	695c      	ldr	r4, [r3, #20]
 8026ec4:	4b5d      	ldr	r3, [pc, #372]	; (802703c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8026ec6:	9300      	str	r3, [sp, #0]
 8026ec8:	2361      	movs	r3, #97	; 0x61
 8026eca:	4a57      	ldr	r2, [pc, #348]	; (8027028 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8026ecc:	495a      	ldr	r1, [pc, #360]	; (8027038 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8026ece:	6878      	ldr	r0, [r7, #4]
 8026ed0:	47a0      	blx	r4
 8026ed2:	2301      	movs	r3, #1
 8026ed4:	e0fd      	b.n	80270d2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 8026ed6:	2200      	movs	r2, #0
 8026ed8:	6839      	ldr	r1, [r7, #0]
 8026eda:	6878      	ldr	r0, [r7, #4]
 8026edc:	f7f8 f86c 	bl	801efb8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8026ee0:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 8026ee2:	6a3b      	ldr	r3, [r7, #32]
 8026ee4:	2b00      	cmp	r3, #0
 8026ee6:	d10a      	bne.n	8026efe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 8026ee8:	687b      	ldr	r3, [r7, #4]
 8026eea:	695c      	ldr	r4, [r3, #20]
 8026eec:	4b54      	ldr	r3, [pc, #336]	; (8027040 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8026eee:	9300      	str	r3, [sp, #0]
 8026ef0:	2363      	movs	r3, #99	; 0x63
 8026ef2:	4a4d      	ldr	r2, [pc, #308]	; (8027028 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8026ef4:	4950      	ldr	r1, [pc, #320]	; (8027038 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8026ef6:	6878      	ldr	r0, [r7, #4]
 8026ef8:	47a0      	blx	r4
 8026efa:	2301      	movs	r3, #1
 8026efc:	e0e9      	b.n	80270d2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 8026efe:	683b      	ldr	r3, [r7, #0]
 8026f00:	691b      	ldr	r3, [r3, #16]
 8026f02:	2b00      	cmp	r3, #0
 8026f04:	d10a      	bne.n	8026f1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 8026f06:	687b      	ldr	r3, [r7, #4]
 8026f08:	695c      	ldr	r4, [r3, #20]
 8026f0a:	4b4e      	ldr	r3, [pc, #312]	; (8027044 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 8026f0c:	9300      	str	r3, [sp, #0]
 8026f0e:	2365      	movs	r3, #101	; 0x65
 8026f10:	4a45      	ldr	r2, [pc, #276]	; (8027028 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8026f12:	4949      	ldr	r1, [pc, #292]	; (8027038 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8026f14:	6878      	ldr	r0, [r7, #4]
 8026f16:	47a0      	blx	r4
 8026f18:	2301      	movs	r3, #1
 8026f1a:	e0da      	b.n	80270d2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 8026f1c:	683b      	ldr	r3, [r7, #0]
 8026f1e:	691b      	ldr	r3, [r3, #16]
 8026f20:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 8026f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026f24:	781b      	ldrb	r3, [r3, #0]
 8026f26:	2b07      	cmp	r3, #7
 8026f28:	d12f      	bne.n	8026f8a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 8026f2a:	687b      	ldr	r3, [r7, #4]
 8026f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026f2e:	f240 4102 	movw	r1, #1026	; 0x402
 8026f32:	6878      	ldr	r0, [r7, #4]
 8026f34:	4798      	blx	r3
 8026f36:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 8026f38:	69bb      	ldr	r3, [r7, #24]
 8026f3a:	2b00      	cmp	r3, #0
 8026f3c:	d10a      	bne.n	8026f54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 8026f3e:	687b      	ldr	r3, [r7, #4]
 8026f40:	695c      	ldr	r4, [r3, #20]
 8026f42:	4b41      	ldr	r3, [pc, #260]	; (8027048 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 8026f44:	9300      	str	r3, [sp, #0]
 8026f46:	236b      	movs	r3, #107	; 0x6b
 8026f48:	4a37      	ldr	r2, [pc, #220]	; (8027028 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8026f4a:	493b      	ldr	r1, [pc, #236]	; (8027038 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8026f4c:	6878      	ldr	r0, [r7, #4]
 8026f4e:	47a0      	blx	r4
 8026f50:	2301      	movs	r3, #1
 8026f52:	e0be      	b.n	80270d2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 8026f54:	69fb      	ldr	r3, [r7, #28]
 8026f56:	69ba      	ldr	r2, [r7, #24]
 8026f58:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 8026f5a:	687b      	ldr	r3, [r7, #4]
 8026f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026f5e:	f240 4102 	movw	r1, #1026	; 0x402
 8026f62:	6878      	ldr	r0, [r7, #4]
 8026f64:	4798      	blx	r3
 8026f66:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 8026f68:	697b      	ldr	r3, [r7, #20]
 8026f6a:	2b00      	cmp	r3, #0
 8026f6c:	d10a      	bne.n	8026f84 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 8026f6e:	687b      	ldr	r3, [r7, #4]
 8026f70:	695c      	ldr	r4, [r3, #20]
 8026f72:	4b36      	ldr	r3, [pc, #216]	; (802704c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8026f74:	9300      	str	r3, [sp, #0]
 8026f76:	236f      	movs	r3, #111	; 0x6f
 8026f78:	4a2b      	ldr	r2, [pc, #172]	; (8027028 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8026f7a:	492f      	ldr	r1, [pc, #188]	; (8027038 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8026f7c:	6878      	ldr	r0, [r7, #4]
 8026f7e:	47a0      	blx	r4
 8026f80:	2301      	movs	r3, #1
 8026f82:	e0a6      	b.n	80270d2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 8026f84:	69fb      	ldr	r3, [r7, #28]
 8026f86:	697a      	ldr	r2, [r7, #20]
 8026f88:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 8026f8a:	6a3b      	ldr	r3, [r7, #32]
 8026f8c:	781b      	ldrb	r3, [r3, #0]
 8026f8e:	2b07      	cmp	r3, #7
 8026f90:	d112      	bne.n	8026fb8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 8026f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026f94:	781b      	ldrb	r3, [r3, #0]
 8026f96:	2b09      	cmp	r3, #9
 8026f98:	d028      	beq.n	8026fec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8026f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026f9c:	781b      	ldrb	r3, [r3, #0]
 8026f9e:	2b07      	cmp	r3, #7
 8026fa0:	d024      	beq.n	8026fec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8026fa2:	687b      	ldr	r3, [r7, #4]
 8026fa4:	695c      	ldr	r4, [r3, #20]
 8026fa6:	4b2a      	ldr	r3, [pc, #168]	; (8027050 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8026fa8:	9300      	str	r3, [sp, #0]
 8026faa:	2375      	movs	r3, #117	; 0x75
 8026fac:	4a1e      	ldr	r2, [pc, #120]	; (8027028 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8026fae:	4922      	ldr	r1, [pc, #136]	; (8027038 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8026fb0:	6878      	ldr	r0, [r7, #4]
 8026fb2:	47a0      	blx	r4
 8026fb4:	2301      	movs	r3, #1
 8026fb6:	e08c      	b.n	80270d2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8026fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026fba:	781a      	ldrb	r2, [r3, #0]
 8026fbc:	6a3b      	ldr	r3, [r7, #32]
 8026fbe:	781b      	ldrb	r3, [r3, #0]
 8026fc0:	429a      	cmp	r2, r3
 8026fc2:	d013      	beq.n	8026fec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8026fc4:	687b      	ldr	r3, [r7, #4]
 8026fc6:	695c      	ldr	r4, [r3, #20]
 8026fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026fca:	781b      	ldrb	r3, [r3, #0]
 8026fcc:	461a      	mov	r2, r3
 8026fce:	6a3b      	ldr	r3, [r7, #32]
 8026fd0:	781b      	ldrb	r3, [r3, #0]
 8026fd2:	9303      	str	r3, [sp, #12]
 8026fd4:	9202      	str	r2, [sp, #8]
 8026fd6:	4b1f      	ldr	r3, [pc, #124]	; (8027054 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 8026fd8:	9301      	str	r3, [sp, #4]
 8026fda:	4b1f      	ldr	r3, [pc, #124]	; (8027058 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 8026fdc:	9300      	str	r3, [sp, #0]
 8026fde:	2378      	movs	r3, #120	; 0x78
 8026fe0:	4a11      	ldr	r2, [pc, #68]	; (8027028 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8026fe2:	4912      	ldr	r1, [pc, #72]	; (802702c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8026fe4:	6878      	ldr	r0, [r7, #4]
 8026fe6:	47a0      	blx	r4
 8026fe8:	2301      	movs	r3, #1
 8026fea:	e072      	b.n	80270d2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 8026fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026fee:	781b      	ldrb	r3, [r3, #0]
 8026ff0:	2b07      	cmp	r3, #7
 8026ff2:	d161      	bne.n	80270b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8026ff4:	6a3b      	ldr	r3, [r7, #32]
 8026ff6:	691b      	ldr	r3, [r3, #16]
 8026ff8:	2b00      	cmp	r3, #0
 8026ffa:	d035      	beq.n	8027068 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 8026ffc:	687b      	ldr	r3, [r7, #4]
 8026ffe:	695c      	ldr	r4, [r3, #20]
 8027000:	6a3b      	ldr	r3, [r7, #32]
 8027002:	691b      	ldr	r3, [r3, #16]
 8027004:	2200      	movs	r2, #0
 8027006:	9203      	str	r2, [sp, #12]
 8027008:	9302      	str	r3, [sp, #8]
 802700a:	4b14      	ldr	r3, [pc, #80]	; (802705c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 802700c:	9301      	str	r3, [sp, #4]
 802700e:	4b14      	ldr	r3, [pc, #80]	; (8027060 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8027010:	9300      	str	r3, [sp, #0]
 8027012:	237d      	movs	r3, #125	; 0x7d
 8027014:	4a04      	ldr	r2, [pc, #16]	; (8027028 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8027016:	4905      	ldr	r1, [pc, #20]	; (802702c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8027018:	6878      	ldr	r0, [r7, #4]
 802701a:	47a0      	blx	r4
 802701c:	2301      	movs	r3, #1
 802701e:	e058      	b.n	80270d2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 8027020:	0802f930 	.word	0x0802f930
 8027024:	0802f934 	.word	0x0802f934
 8027028:	0802f76c 	.word	0x0802f76c
 802702c:	0802f804 	.word	0x0802f804
 8027030:	0802f944 	.word	0x0802f944
 8027034:	0802f958 	.word	0x0802f958
 8027038:	0802f8e4 	.word	0x0802f8e4
 802703c:	0802f96c 	.word	0x0802f96c
 8027040:	0802f988 	.word	0x0802f988
 8027044:	0802f99c 	.word	0x0802f99c
 8027048:	0802f9b8 	.word	0x0802f9b8
 802704c:	0802f9d0 	.word	0x0802f9d0
 8027050:	0802f9f4 	.word	0x0802f9f4
 8027054:	0802f8cc 	.word	0x0802f8cc
 8027058:	0802f8ac 	.word	0x0802f8ac
 802705c:	0802f820 	.word	0x0802f820
 8027060:	0802f824 	.word	0x0802f824
 8027064:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8027068:	f107 0308 	add.w	r3, r7, #8
 802706c:	4618      	mov	r0, r3
 802706e:	f7ff fe7f 	bl	8026d70 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 8027072:	69fb      	ldr	r3, [r7, #28]
 8027074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027076:	f240 2201 	movw	r2, #513	; 0x201
 802707a:	4619      	mov	r1, r3
 802707c:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 8027064 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8027080:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8027084:	f7ff faf2 	bl	802666c <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8027088:	f107 030c 	add.w	r3, r7, #12
 802708c:	4618      	mov	r0, r3
 802708e:	f7ff fea7 	bl	8026de0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 8027092:	69fb      	ldr	r3, [r7, #28]
 8027094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027096:	f240 2201 	movw	r2, #513	; 0x201
 802709a:	4619      	mov	r1, r3
 802709c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80270a0:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8027064 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 80270a4:	f7ff fae2 	bl	802666c <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 80270a8:	6a3b      	ldr	r3, [r7, #32]
 80270aa:	691a      	ldr	r2, [r3, #16]
 80270ac:	69fb      	ldr	r3, [r7, #28]
 80270ae:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 80270b0:	6a3b      	ldr	r3, [r7, #32]
 80270b2:	68da      	ldr	r2, [r3, #12]
 80270b4:	69fb      	ldr	r3, [r7, #28]
 80270b6:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 80270b8:	683b      	ldr	r3, [r7, #0]
 80270ba:	695b      	ldr	r3, [r3, #20]
 80270bc:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 80270be:	69fb      	ldr	r3, [r7, #28]
 80270c0:	9300      	str	r3, [sp, #0]
 80270c2:	693b      	ldr	r3, [r7, #16]
 80270c4:	6a3a      	ldr	r2, [r7, #32]
 80270c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80270c8:	6878      	ldr	r0, [r7, #4]
 80270ca:	f7ff fbfd 	bl	80268c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 80270ce:	4603      	mov	r3, r0
 80270d0:	bf00      	nop
}
 80270d2:	4618      	mov	r0, r3
 80270d4:	372c      	adds	r7, #44	; 0x2c
 80270d6:	46bd      	mov	sp, r7
 80270d8:	bd90      	pop	{r4, r7, pc}
 80270da:	bf00      	nop

080270dc <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80270dc:	b580      	push	{r7, lr}
 80270de:	b082      	sub	sp, #8
 80270e0:	af00      	add	r7, sp, #0
 80270e2:	6078      	str	r0, [r7, #4]
 80270e4:	6878      	ldr	r0, [r7, #4]
 80270e6:	f000 fc01 	bl	80278ec <_ZNSaIPvED1Ev>
 80270ea:	687b      	ldr	r3, [r7, #4]
 80270ec:	4618      	mov	r0, r3
 80270ee:	3708      	adds	r7, #8
 80270f0:	46bd      	mov	sp, r7
 80270f2:	bd80      	pop	{r7, pc}

080270f4 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>:
      _Vector_base() = default;
 80270f4:	b580      	push	{r7, lr}
 80270f6:	b082      	sub	sp, #8
 80270f8:	af00      	add	r7, sp, #0
 80270fa:	6078      	str	r0, [r7, #4]
 80270fc:	687b      	ldr	r3, [r7, #4]
 80270fe:	4618      	mov	r0, r3
 8027100:	f000 fbe4 	bl	80278cc <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>
 8027104:	687b      	ldr	r3, [r7, #4]
 8027106:	4618      	mov	r0, r3
 8027108:	3708      	adds	r7, #8
 802710a:	46bd      	mov	sp, r7
 802710c:	bd80      	pop	{r7, pc}

0802710e <_ZNSt6vectorIPvSaIS0_EEC1Ev>:
      vector() = default;
 802710e:	b580      	push	{r7, lr}
 8027110:	b082      	sub	sp, #8
 8027112:	af00      	add	r7, sp, #0
 8027114:	6078      	str	r0, [r7, #4]
 8027116:	687b      	ldr	r3, [r7, #4]
 8027118:	4618      	mov	r0, r3
 802711a:	f7ff ffeb 	bl	80270f4 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>
 802711e:	687b      	ldr	r3, [r7, #4]
 8027120:	4618      	mov	r0, r3
 8027122:	3708      	adds	r7, #8
 8027124:	46bd      	mov	sp, r7
 8027126:	bd80      	pop	{r7, pc}

08027128 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 8027128:	b580      	push	{r7, lr}
 802712a:	b084      	sub	sp, #16
 802712c:	af00      	add	r7, sp, #0
 802712e:	6078      	str	r0, [r7, #4]
 8027130:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 8027132:	4b1b      	ldr	r3, [pc, #108]	; (80271a0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 8027134:	681a      	ldr	r2, [r3, #0]
 8027136:	683b      	ldr	r3, [r7, #0]
 8027138:	425b      	negs	r3, r3
 802713a:	441a      	add	r2, r3
 802713c:	4b19      	ldr	r3, [pc, #100]	; (80271a4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x7c>)
 802713e:	681b      	ldr	r3, [r3, #0]
 8027140:	429a      	cmp	r2, r3
 8027142:	d217      	bcs.n	8027174 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x4c>
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 8027144:	2101      	movs	r1, #1
 8027146:	6838      	ldr	r0, [r7, #0]
 8027148:	f7f7 fb92 	bl	801e870 <_Z9ei_callocjj>
 802714c:	4603      	mov	r3, r0
 802714e:	60fb      	str	r3, [r7, #12]
    if (ptr == NULL) {
 8027150:	68fb      	ldr	r3, [r7, #12]
 8027152:	2b00      	cmp	r3, #0
 8027154:	d106      	bne.n	8027164 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x3c>
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 8027156:	683b      	ldr	r3, [r7, #0]
 8027158:	4619      	mov	r1, r3
 802715a:	4813      	ldr	r0, [pc, #76]	; (80271a8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x80>)
 802715c:	f005 fcac 	bl	802cab8 <iprintf>
      return NULL;
 8027160:	2300      	movs	r3, #0
 8027162:	e018      	b.n	8027196 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6e>
    }
    overflow_buffers.push_back(ptr);
 8027164:	f107 030c 	add.w	r3, r7, #12
 8027168:	4619      	mov	r1, r3
 802716a:	4810      	ldr	r0, [pc, #64]	; (80271ac <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x84>)
 802716c:	f000 fbe3 	bl	8027936 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>
    return ptr;
 8027170:	68fb      	ldr	r3, [r7, #12]
 8027172:	e010      	b.n	8027196 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6e>
  }

  current_location -= bytes;
 8027174:	4b0a      	ldr	r3, [pc, #40]	; (80271a0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 8027176:	681a      	ldr	r2, [r3, #0]
 8027178:	683b      	ldr	r3, [r7, #0]
 802717a:	425b      	negs	r3, r3
 802717c:	4413      	add	r3, r2
 802717e:	4a08      	ldr	r2, [pc, #32]	; (80271a0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 8027180:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 8027182:	4b07      	ldr	r3, [pc, #28]	; (80271a0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 8027184:	681b      	ldr	r3, [r3, #0]
 8027186:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 8027188:	68fb      	ldr	r3, [r7, #12]
 802718a:	683a      	ldr	r2, [r7, #0]
 802718c:	2100      	movs	r1, #0
 802718e:	4618      	mov	r0, r3
 8027190:	f005 f8a6 	bl	802c2e0 <memset>

  return ptr;
 8027194:	68fb      	ldr	r3, [r7, #12]
}
 8027196:	4618      	mov	r0, r3
 8027198:	3710      	adds	r7, #16
 802719a:	46bd      	mov	sp, r7
 802719c:	bd80      	pop	{r7, pc}
 802719e:	bf00      	nop
 80271a0:	200069b8 	.word	0x200069b8
 80271a4:	200069b4 	.word	0x200069b4
 80271a8:	0802fa44 	.word	0x0802fa44
 80271ac:	20007314 	.word	0x20007314

080271b0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80271b0:	b580      	push	{r7, lr}
 80271b2:	b082      	sub	sp, #8
 80271b4:	af00      	add	r7, sp, #0
 80271b6:	6078      	str	r0, [r7, #4]
 80271b8:	6878      	ldr	r0, [r7, #4]
 80271ba:	f000 fbf1 	bl	80279a0 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 80271be:	687b      	ldr	r3, [r7, #4]
 80271c0:	4618      	mov	r0, r3
 80271c2:	3708      	adds	r7, #8
 80271c4:	46bd      	mov	sp, r7
 80271c6:	bd80      	pop	{r7, pc}

080271c8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>:
      _Vector_base() = default;
 80271c8:	b580      	push	{r7, lr}
 80271ca:	b082      	sub	sp, #8
 80271cc:	af00      	add	r7, sp, #0
 80271ce:	6078      	str	r0, [r7, #4]
 80271d0:	687b      	ldr	r3, [r7, #4]
 80271d2:	4618      	mov	r0, r3
 80271d4:	f000 fbd4 	bl	8027980 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>
 80271d8:	687b      	ldr	r3, [r7, #4]
 80271da:	4618      	mov	r0, r3
 80271dc:	3708      	adds	r7, #8
 80271de:	46bd      	mov	sp, r7
 80271e0:	bd80      	pop	{r7, pc}

080271e2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>:
      vector() = default;
 80271e2:	b580      	push	{r7, lr}
 80271e4:	b082      	sub	sp, #8
 80271e6:	af00      	add	r7, sp, #0
 80271e8:	6078      	str	r0, [r7, #4]
 80271ea:	687b      	ldr	r3, [r7, #4]
 80271ec:	4618      	mov	r0, r3
 80271ee:	f7ff ffeb 	bl	80271c8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>
 80271f2:	687b      	ldr	r3, [r7, #4]
 80271f4:	4618      	mov	r0, r3
 80271f6:	3708      	adds	r7, #8
 80271f8:	46bd      	mov	sp, r7
 80271fa:	bd80      	pop	{r7, pc}

080271fc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 80271fc:	b580      	push	{r7, lr}
 80271fe:	b086      	sub	sp, #24
 8027200:	af00      	add	r7, sp, #0
 8027202:	60f8      	str	r0, [r7, #12]
 8027204:	60b9      	str	r1, [r7, #8]
 8027206:	607a      	str	r2, [r7, #4]
  scratch_buffer_t b;
  b.bytes = bytes;
 8027208:	68bb      	ldr	r3, [r7, #8]
 802720a:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 802720c:	693b      	ldr	r3, [r7, #16]
 802720e:	4619      	mov	r1, r3
 8027210:	68f8      	ldr	r0, [r7, #12]
 8027212:	f7ff ff89 	bl	8027128 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 8027216:	4603      	mov	r3, r0
 8027218:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 802721a:	697b      	ldr	r3, [r7, #20]
 802721c:	2b00      	cmp	r3, #0
 802721e:	d101      	bne.n	8027224 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x28>
    return kTfLiteError;
 8027220:	2301      	movs	r3, #1
 8027222:	e00e      	b.n	8027242 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x46>
  }

  scratch_buffers.push_back(b);
 8027224:	f107 0310 	add.w	r3, r7, #16
 8027228:	4619      	mov	r1, r3
 802722a:	4808      	ldr	r0, [pc, #32]	; (802724c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x50>)
 802722c:	f000 fbdd 	bl	80279ea <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>

  *buffer_idx = scratch_buffers.size() - 1;
 8027230:	4806      	ldr	r0, [pc, #24]	; (802724c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x50>)
 8027232:	f000 fc00 	bl	8027a36 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8027236:	4603      	mov	r3, r0
 8027238:	3b01      	subs	r3, #1
 802723a:	461a      	mov	r2, r3
 802723c:	687b      	ldr	r3, [r7, #4]
 802723e:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 8027240:	2300      	movs	r3, #0
}
 8027242:	4618      	mov	r0, r3
 8027244:	3718      	adds	r7, #24
 8027246:	46bd      	mov	sp, r7
 8027248:	bd80      	pop	{r7, pc}
 802724a:	bf00      	nop
 802724c:	20007320 	.word	0x20007320

08027250 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 8027250:	b580      	push	{r7, lr}
 8027252:	b082      	sub	sp, #8
 8027254:	af00      	add	r7, sp, #0
 8027256:	6078      	str	r0, [r7, #4]
 8027258:	6039      	str	r1, [r7, #0]
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
 802725a:	480d      	ldr	r0, [pc, #52]	; (8027290 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 802725c:	f000 fbeb 	bl	8027a36 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8027260:	4603      	mov	r3, r0
 8027262:	461a      	mov	r2, r3
 8027264:	683b      	ldr	r3, [r7, #0]
 8027266:	4293      	cmp	r3, r2
 8027268:	bfac      	ite	ge
 802726a:	2301      	movge	r3, #1
 802726c:	2300      	movlt	r3, #0
 802726e:	b2db      	uxtb	r3, r3
 8027270:	2b00      	cmp	r3, #0
 8027272:	d001      	beq.n	8027278 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x28>
    return NULL;
 8027274:	2300      	movs	r3, #0
 8027276:	e006      	b.n	8027286 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x36>
  }
  return scratch_buffers[buffer_idx].ptr;
 8027278:	683b      	ldr	r3, [r7, #0]
 802727a:	4619      	mov	r1, r3
 802727c:	4804      	ldr	r0, [pc, #16]	; (8027290 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 802727e:	f000 fbea 	bl	8027a56 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>
 8027282:	4603      	mov	r3, r0
 8027284:	685b      	ldr	r3, [r3, #4]
}
 8027286:	4618      	mov	r0, r3
 8027288:	3708      	adds	r7, #8
 802728a:	46bd      	mov	sp, r7
 802728c:	bd80      	pop	{r7, pc}
 802728e:	bf00      	nop
 8027290:	20007320 	.word	0x20007320

08027294 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 8027294:	b480      	push	{r7}
 8027296:	b083      	sub	sp, #12
 8027298:	af00      	add	r7, sp, #0
 802729a:	6078      	str	r0, [r7, #4]
 802729c:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 802729e:	683b      	ldr	r3, [r7, #0]
 80272a0:	019b      	lsls	r3, r3, #6
 80272a2:	4a04      	ldr	r2, [pc, #16]	; (80272b4 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 80272a4:	4413      	add	r3, r2
}
 80272a6:	4618      	mov	r0, r3
 80272a8:	370c      	adds	r7, #12
 80272aa:	46bd      	mov	sp, r7
 80272ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272b0:	4770      	bx	lr
 80272b2:	bf00      	nop
 80272b4:	20006a14 	.word	0x20006a14

080272b8 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 80272b8:	b480      	push	{r7}
 80272ba:	b083      	sub	sp, #12
 80272bc:	af00      	add	r7, sp, #0
 80272be:	6078      	str	r0, [r7, #4]
 80272c0:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 80272c2:	683a      	ldr	r2, [r7, #0]
 80272c4:	4613      	mov	r3, r2
 80272c6:	005b      	lsls	r3, r3, #1
 80272c8:	4413      	add	r3, r2
 80272ca:	009b      	lsls	r3, r3, #2
 80272cc:	4a03      	ldr	r2, [pc, #12]	; (80272dc <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 80272ce:	4413      	add	r3, r2
}
 80272d0:	4618      	mov	r0, r3
 80272d2:	370c      	adds	r7, #12
 80272d4:	46bd      	mov	sp, r7
 80272d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272da:	4770      	bx	lr
 80272dc:	20006fd4 	.word	0x20006fd4

080272e0 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 80272e0:	b5b0      	push	{r4, r5, r7, lr}
 80272e2:	b092      	sub	sp, #72	; 0x48
 80272e4:	af00      	add	r7, sp, #0
 80272e6:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 80272e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80272ea:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80272ee:	2010      	movs	r0, #16
 80272f0:	4798      	blx	r3
 80272f2:	4603      	mov	r3, r0
 80272f4:	4aa3      	ldr	r2, [pc, #652]	; (8027584 <_Z18trained_model_initPFPvjjE+0x2a4>)
 80272f6:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 80272f8:	4ba2      	ldr	r3, [pc, #648]	; (8027584 <_Z18trained_model_initPFPvjjE+0x2a4>)
 80272fa:	681b      	ldr	r3, [r3, #0]
 80272fc:	2b00      	cmp	r3, #0
 80272fe:	d104      	bne.n	802730a <_Z18trained_model_initPFPvjjE+0x2a>
    printf("ERR: failed to allocate tensor arena\n");
 8027300:	48a1      	ldr	r0, [pc, #644]	; (8027588 <_Z18trained_model_initPFPvjjE+0x2a8>)
 8027302:	f005 fc5f 	bl	802cbc4 <puts>
    return kTfLiteError;
 8027306:	2301      	movs	r3, #1
 8027308:	e244      	b.n	8027794 <_Z18trained_model_initPFPvjjE+0x4b4>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 802730a:	4b9e      	ldr	r3, [pc, #632]	; (8027584 <_Z18trained_model_initPFPvjjE+0x2a4>)
 802730c:	681b      	ldr	r3, [r3, #0]
 802730e:	4a9f      	ldr	r2, [pc, #636]	; (802758c <_Z18trained_model_initPFPvjjE+0x2ac>)
 8027310:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 8027312:	4b9c      	ldr	r3, [pc, #624]	; (8027584 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8027314:	681b      	ldr	r3, [r3, #0]
 8027316:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 802731a:	4a9d      	ldr	r2, [pc, #628]	; (8027590 <_Z18trained_model_initPFPvjjE+0x2b0>)
 802731c:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 802731e:	4b9d      	ldr	r3, [pc, #628]	; (8027594 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8027320:	4a9d      	ldr	r2, [pc, #628]	; (8027598 <_Z18trained_model_initPFPvjjE+0x2b8>)
 8027322:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 8027324:	4b9b      	ldr	r3, [pc, #620]	; (8027594 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8027326:	4a9d      	ldr	r2, [pc, #628]	; (802759c <_Z18trained_model_initPFPvjjE+0x2bc>)
 8027328:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 802732a:	4b9a      	ldr	r3, [pc, #616]	; (8027594 <_Z18trained_model_initPFPvjjE+0x2b4>)
 802732c:	4a9c      	ldr	r2, [pc, #624]	; (80275a0 <_Z18trained_model_initPFPvjjE+0x2c0>)
 802732e:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 8027330:	4b98      	ldr	r3, [pc, #608]	; (8027594 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8027332:	4a9c      	ldr	r2, [pc, #624]	; (80275a4 <_Z18trained_model_initPFPvjjE+0x2c4>)
 8027334:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 8027336:	4b97      	ldr	r3, [pc, #604]	; (8027594 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8027338:	4a9b      	ldr	r2, [pc, #620]	; (80275a8 <_Z18trained_model_initPFPvjjE+0x2c8>)
 802733a:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 802733c:	4b95      	ldr	r3, [pc, #596]	; (8027594 <_Z18trained_model_initPFPvjjE+0x2b4>)
 802733e:	4a9b      	ldr	r2, [pc, #620]	; (80275ac <_Z18trained_model_initPFPvjjE+0x2cc>)
 8027340:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 23;
 8027342:	4b94      	ldr	r3, [pc, #592]	; (8027594 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8027344:	2217      	movs	r2, #23
 8027346:	601a      	str	r2, [r3, #0]
  for(size_t i = 0; i < 23; ++i) {
 8027348:	2300      	movs	r3, #0
 802734a:	647b      	str	r3, [r7, #68]	; 0x44
 802734c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802734e:	2b16      	cmp	r3, #22
 8027350:	f200 810c 	bhi.w	802756c <_Z18trained_model_initPFPvjjE+0x28c>
    tflTensors[i].type = tensorData[i].type;
 8027354:	4996      	ldr	r1, [pc, #600]	; (80275b0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8027356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8027358:	4613      	mov	r3, r2
 802735a:	005b      	lsls	r3, r3, #1
 802735c:	4413      	add	r3, r2
 802735e:	00db      	lsls	r3, r3, #3
 8027360:	440b      	add	r3, r1
 8027362:	3301      	adds	r3, #1
 8027364:	7819      	ldrb	r1, [r3, #0]
 8027366:	4a91      	ldr	r2, [pc, #580]	; (80275ac <_Z18trained_model_initPFPvjjE+0x2cc>)
 8027368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802736a:	019b      	lsls	r3, r3, #6
 802736c:	4413      	add	r3, r2
 802736e:	460a      	mov	r2, r1
 8027370:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 8027372:	498f      	ldr	r1, [pc, #572]	; (80275b0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8027374:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8027376:	4613      	mov	r3, r2
 8027378:	005b      	lsls	r3, r3, #1
 802737a:	4413      	add	r3, r2
 802737c:	00db      	lsls	r3, r3, #3
 802737e:	440b      	add	r3, r1
 8027380:	3301      	adds	r3, #1
 8027382:	7818      	ldrb	r0, [r3, #0]
 8027384:	498b      	ldr	r1, [pc, #556]	; (80275b4 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8027386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8027388:	4613      	mov	r3, r2
 802738a:	005b      	lsls	r3, r3, #1
 802738c:	4413      	add	r3, r2
 802738e:	009b      	lsls	r3, r3, #2
 8027390:	440b      	add	r3, r1
 8027392:	3308      	adds	r3, #8
 8027394:	4602      	mov	r2, r0
 8027396:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 8027398:	4a84      	ldr	r2, [pc, #528]	; (80275ac <_Z18trained_model_initPFPvjjE+0x2cc>)
 802739a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802739c:	019b      	lsls	r3, r3, #6
 802739e:	4413      	add	r3, r2
 80273a0:	332d      	adds	r3, #45	; 0x2d
 80273a2:	2200      	movs	r2, #0
 80273a4:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 80273a6:	4982      	ldr	r1, [pc, #520]	; (80275b0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80273a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80273aa:	4613      	mov	r3, r2
 80273ac:	005b      	lsls	r3, r3, #1
 80273ae:	4413      	add	r3, r2
 80273b0:	00db      	lsls	r3, r3, #3
 80273b2:	440b      	add	r3, r1
 80273b4:	7819      	ldrb	r1, [r3, #0]
 80273b6:	4a7d      	ldr	r2, [pc, #500]	; (80275ac <_Z18trained_model_initPFPvjjE+0x2cc>)
 80273b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80273ba:	019b      	lsls	r3, r3, #6
 80273bc:	4413      	add	r3, r2
 80273be:	3314      	adds	r3, #20
 80273c0:	460a      	mov	r2, r1
 80273c2:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 80273c4:	497a      	ldr	r1, [pc, #488]	; (80275b0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80273c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80273c8:	4613      	mov	r3, r2
 80273ca:	005b      	lsls	r3, r3, #1
 80273cc:	4413      	add	r3, r2
 80273ce:	00db      	lsls	r3, r3, #3
 80273d0:	440b      	add	r3, r1
 80273d2:	330c      	adds	r3, #12
 80273d4:	681a      	ldr	r2, [r3, #0]
 80273d6:	4975      	ldr	r1, [pc, #468]	; (80275ac <_Z18trained_model_initPFPvjjE+0x2cc>)
 80273d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80273da:	019b      	lsls	r3, r3, #6
 80273dc:	440b      	add	r3, r1
 80273de:	3318      	adds	r3, #24
 80273e0:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 80273e2:	4973      	ldr	r1, [pc, #460]	; (80275b0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80273e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80273e6:	4613      	mov	r3, r2
 80273e8:	005b      	lsls	r3, r3, #1
 80273ea:	4413      	add	r3, r2
 80273ec:	00db      	lsls	r3, r3, #3
 80273ee:	440b      	add	r3, r1
 80273f0:	3308      	adds	r3, #8
 80273f2:	681a      	ldr	r2, [r3, #0]
 80273f4:	496d      	ldr	r1, [pc, #436]	; (80275ac <_Z18trained_model_initPFPvjjE+0x2cc>)
 80273f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80273f8:	019b      	lsls	r3, r3, #6
 80273fa:	440b      	add	r3, r1
 80273fc:	3308      	adds	r3, #8
 80273fe:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 8027400:	496b      	ldr	r1, [pc, #428]	; (80275b0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8027402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8027404:	4613      	mov	r3, r2
 8027406:	005b      	lsls	r3, r3, #1
 8027408:	4413      	add	r3, r2
 802740a:	00db      	lsls	r3, r3, #3
 802740c:	440b      	add	r3, r1
 802740e:	3308      	adds	r3, #8
 8027410:	6819      	ldr	r1, [r3, #0]
 8027412:	4868      	ldr	r0, [pc, #416]	; (80275b4 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8027414:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8027416:	4613      	mov	r3, r2
 8027418:	005b      	lsls	r3, r3, #1
 802741a:	4413      	add	r3, r2
 802741c:	009b      	lsls	r3, r3, #2
 802741e:	4403      	add	r3, r0
 8027420:	3304      	adds	r3, #4
 8027422:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 8027424:	4a61      	ldr	r2, [pc, #388]	; (80275ac <_Z18trained_model_initPFPvjjE+0x2cc>)
 8027426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027428:	019b      	lsls	r3, r3, #6
 802742a:	4413      	add	r3, r2
 802742c:	3314      	adds	r3, #20
 802742e:	781b      	ldrb	r3, [r3, #0]
 8027430:	2b02      	cmp	r3, #2
 8027432:	d11e      	bne.n	8027472 <_Z18trained_model_initPFPvjjE+0x192>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8027434:	495e      	ldr	r1, [pc, #376]	; (80275b0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8027436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8027438:	4613      	mov	r3, r2
 802743a:	005b      	lsls	r3, r3, #1
 802743c:	4413      	add	r3, r2
 802743e:	00db      	lsls	r3, r3, #3
 8027440:	440b      	add	r3, r1
 8027442:	3304      	adds	r3, #4
 8027444:	681b      	ldr	r3, [r3, #0]
 8027446:	461a      	mov	r2, r3
 8027448:	4b4e      	ldr	r3, [pc, #312]	; (8027584 <_Z18trained_model_initPFPvjjE+0x2a4>)
 802744a:	681b      	ldr	r3, [r3, #0]
 802744c:	4413      	add	r3, r2
 802744e:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 8027450:	4a56      	ldr	r2, [pc, #344]	; (80275ac <_Z18trained_model_initPFPvjjE+0x2cc>)
 8027452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027454:	019b      	lsls	r3, r3, #6
 8027456:	4413      	add	r3, r2
 8027458:	3304      	adds	r3, #4
 802745a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802745c:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 802745e:	4955      	ldr	r1, [pc, #340]	; (80275b4 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8027460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8027462:	4613      	mov	r3, r2
 8027464:	005b      	lsls	r3, r3, #1
 8027466:	4413      	add	r3, r2
 8027468:	009b      	lsls	r3, r3, #2
 802746a:	440b      	add	r3, r1
 802746c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802746e:	601a      	str	r2, [r3, #0]
 8027470:	e01f      	b.n	80274b2 <_Z18trained_model_initPFPvjjE+0x1d2>
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
 8027472:	494f      	ldr	r1, [pc, #316]	; (80275b0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8027474:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8027476:	4613      	mov	r3, r2
 8027478:	005b      	lsls	r3, r3, #1
 802747a:	4413      	add	r3, r2
 802747c:	00db      	lsls	r3, r3, #3
 802747e:	440b      	add	r3, r1
 8027480:	3304      	adds	r3, #4
 8027482:	681a      	ldr	r2, [r3, #0]
 8027484:	4949      	ldr	r1, [pc, #292]	; (80275ac <_Z18trained_model_initPFPvjjE+0x2cc>)
 8027486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027488:	019b      	lsls	r3, r3, #6
 802748a:	440b      	add	r3, r1
 802748c:	3304      	adds	r3, #4
 802748e:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 8027490:	4947      	ldr	r1, [pc, #284]	; (80275b0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8027492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8027494:	4613      	mov	r3, r2
 8027496:	005b      	lsls	r3, r3, #1
 8027498:	4413      	add	r3, r2
 802749a:	00db      	lsls	r3, r3, #3
 802749c:	440b      	add	r3, r1
 802749e:	3304      	adds	r3, #4
 80274a0:	6819      	ldr	r1, [r3, #0]
 80274a2:	4844      	ldr	r0, [pc, #272]	; (80275b4 <_Z18trained_model_initPFPvjjE+0x2d4>)
 80274a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80274a6:	4613      	mov	r3, r2
 80274a8:	005b      	lsls	r3, r3, #1
 80274aa:	4413      	add	r3, r2
 80274ac:	009b      	lsls	r3, r3, #2
 80274ae:	4403      	add	r3, r0
 80274b0:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 80274b2:	4a3e      	ldr	r2, [pc, #248]	; (80275ac <_Z18trained_model_initPFPvjjE+0x2cc>)
 80274b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80274b6:	019b      	lsls	r3, r3, #6
 80274b8:	4413      	add	r3, r2
 80274ba:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80274be:	493c      	ldr	r1, [pc, #240]	; (80275b0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80274c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80274c2:	4613      	mov	r3, r2
 80274c4:	005b      	lsls	r3, r3, #1
 80274c6:	4413      	add	r3, r2
 80274c8:	00db      	lsls	r3, r3, #3
 80274ca:	440b      	add	r3, r1
 80274cc:	f103 0210 	add.w	r2, r3, #16
 80274d0:	4603      	mov	r3, r0
 80274d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80274d6:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 80274da:	4a34      	ldr	r2, [pc, #208]	; (80275ac <_Z18trained_model_initPFPvjjE+0x2cc>)
 80274dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80274de:	019b      	lsls	r3, r3, #6
 80274e0:	4413      	add	r3, r2
 80274e2:	3330      	adds	r3, #48	; 0x30
 80274e4:	781b      	ldrb	r3, [r3, #0]
 80274e6:	2b01      	cmp	r3, #1
 80274e8:	d11b      	bne.n	8027522 <_Z18trained_model_initPFPvjjE+0x242>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 80274ea:	4931      	ldr	r1, [pc, #196]	; (80275b0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80274ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80274ee:	4613      	mov	r3, r2
 80274f0:	005b      	lsls	r3, r3, #1
 80274f2:	4413      	add	r3, r2
 80274f4:	00db      	lsls	r3, r3, #3
 80274f6:	440b      	add	r3, r1
 80274f8:	3314      	adds	r3, #20
 80274fa:	681b      	ldr	r3, [r3, #0]
 80274fc:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 80274fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027500:	681b      	ldr	r3, [r3, #0]
 8027502:	685a      	ldr	r2, [r3, #4]
 8027504:	4929      	ldr	r1, [pc, #164]	; (80275ac <_Z18trained_model_initPFPvjjE+0x2cc>)
 8027506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027508:	019b      	lsls	r3, r3, #6
 802750a:	440b      	add	r3, r1
 802750c:	330c      	adds	r3, #12
 802750e:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 8027510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027512:	685b      	ldr	r3, [r3, #4]
 8027514:	685a      	ldr	r2, [r3, #4]
 8027516:	4925      	ldr	r1, [pc, #148]	; (80275ac <_Z18trained_model_initPFPvjjE+0x2cc>)
 8027518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802751a:	019b      	lsls	r3, r3, #6
 802751c:	440b      	add	r3, r1
 802751e:	3310      	adds	r3, #16
 8027520:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 8027522:	4a22      	ldr	r2, [pc, #136]	; (80275ac <_Z18trained_model_initPFPvjjE+0x2cc>)
 8027524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027526:	019b      	lsls	r3, r3, #6
 8027528:	4413      	add	r3, r2
 802752a:	3314      	adds	r3, #20
 802752c:	781b      	ldrb	r3, [r3, #0]
 802752e:	2b02      	cmp	r3, #2
 8027530:	d118      	bne.n	8027564 <_Z18trained_model_initPFPvjjE+0x284>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 8027532:	4a1e      	ldr	r2, [pc, #120]	; (80275ac <_Z18trained_model_initPFPvjjE+0x2cc>)
 8027534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027536:	019b      	lsls	r3, r3, #6
 8027538:	4413      	add	r3, r2
 802753a:	3304      	adds	r3, #4
 802753c:	6819      	ldr	r1, [r3, #0]
 802753e:	481c      	ldr	r0, [pc, #112]	; (80275b0 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8027540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8027542:	4613      	mov	r3, r2
 8027544:	005b      	lsls	r3, r3, #1
 8027546:	4413      	add	r3, r2
 8027548:	00db      	lsls	r3, r3, #3
 802754a:	4403      	add	r3, r0
 802754c:	330c      	adds	r3, #12
 802754e:	681b      	ldr	r3, [r3, #0]
 8027550:	440b      	add	r3, r1
 8027552:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 8027554:	4b0d      	ldr	r3, [pc, #52]	; (802758c <_Z18trained_model_initPFPvjjE+0x2ac>)
 8027556:	681b      	ldr	r3, [r3, #0]
 8027558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802755a:	429a      	cmp	r2, r3
 802755c:	d902      	bls.n	8027564 <_Z18trained_model_initPFPvjjE+0x284>
        tensor_boundary = data_end_ptr;
 802755e:	4a0b      	ldr	r2, [pc, #44]	; (802758c <_Z18trained_model_initPFPvjjE+0x2ac>)
 8027560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027562:	6013      	str	r3, [r2, #0]
  for(size_t i = 0; i < 23; ++i) {
 8027564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027566:	3301      	adds	r3, #1
 8027568:	647b      	str	r3, [r7, #68]	; 0x44
 802756a:	e6ef      	b.n	802734c <_Z18trained_model_initPFPvjjE+0x6c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 802756c:	4b07      	ldr	r3, [pc, #28]	; (802758c <_Z18trained_model_initPFPvjjE+0x2ac>)
 802756e:	681a      	ldr	r2, [r3, #0]
 8027570:	4b07      	ldr	r3, [pc, #28]	; (8027590 <_Z18trained_model_initPFPvjjE+0x2b0>)
 8027572:	681b      	ldr	r3, [r3, #0]
 8027574:	429a      	cmp	r2, r3
 8027576:	d921      	bls.n	80275bc <_Z18trained_model_initPFPvjjE+0x2dc>
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 8027578:	480f      	ldr	r0, [pc, #60]	; (80275b8 <_Z18trained_model_initPFPvjjE+0x2d8>)
 802757a:	f005 fb23 	bl	802cbc4 <puts>
    return kTfLiteError;
 802757e:	2301      	movs	r3, #1
 8027580:	e108      	b.n	8027794 <_Z18trained_model_initPFPvjjE+0x4b4>
 8027582:	bf00      	nop
 8027584:	200069b0 	.word	0x200069b0
 8027588:	0802fa7c 	.word	0x0802fa7c
 802758c:	200069b4 	.word	0x200069b4
 8027590:	200069b8 	.word	0x200069b8
 8027594:	200069bc 	.word	0x200069bc
 8027598:	08027129 	.word	0x08027129
 802759c:	080271fd 	.word	0x080271fd
 80275a0:	08027251 	.word	0x08027251
 80275a4:	08027295 	.word	0x08027295
 80275a8:	080272b9 	.word	0x080272b9
 80275ac:	20006a14 	.word	0x20006a14
 80275b0:	20000074 	.word	0x20000074
 80275b4:	20006fd4 	.word	0x20006fd4
 80275b8:	0802faa4 	.word	0x0802faa4
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
 80275bc:	4c77      	ldr	r4, [pc, #476]	; (802779c <_Z18trained_model_initPFPvjjE+0x4bc>)
 80275be:	463b      	mov	r3, r7
 80275c0:	4618      	mov	r0, r3
 80275c2:	f7fd fedb 	bl	802537c <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 80275c6:	4625      	mov	r5, r4
 80275c8:	463c      	mov	r4, r7
 80275ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80275cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80275ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80275d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_CONV_2D] = Register_CONV_2D();
 80275d6:	4c71      	ldr	r4, [pc, #452]	; (802779c <_Z18trained_model_initPFPvjjE+0x4bc>)
 80275d8:	463b      	mov	r3, r7
 80275da:	4618      	mov	r0, r3
 80275dc:	f7fa fc82 	bl	8021ee4 <_ZN6tflite16Register_CONV_2DEv>
 80275e0:	3420      	adds	r4, #32
 80275e2:	463d      	mov	r5, r7
 80275e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80275e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80275e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80275ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
 80275f0:	4c6a      	ldr	r4, [pc, #424]	; (802779c <_Z18trained_model_initPFPvjjE+0x4bc>)
 80275f2:	463b      	mov	r3, r7
 80275f4:	4618      	mov	r0, r3
 80275f6:	f7fd fcc1 	bl	8024f7c <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
 80275fa:	3440      	adds	r4, #64	; 0x40
 80275fc:	463d      	mov	r5, r7
 80275fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027602:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 802760a:	4c64      	ldr	r4, [pc, #400]	; (802779c <_Z18trained_model_initPFPvjjE+0x4bc>)
 802760c:	463b      	mov	r3, r7
 802760e:	4618      	mov	r0, r3
 8027610:	f7fc f800 	bl	8023614 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 8027614:	3460      	adds	r4, #96	; 0x60
 8027616:	463d      	mov	r5, r7
 8027618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802761a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802761c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 8027624:	4c5d      	ldr	r4, [pc, #372]	; (802779c <_Z18trained_model_initPFPvjjE+0x4bc>)
 8027626:	463b      	mov	r3, r7
 8027628:	4618      	mov	r0, r3
 802762a:	f7fe faf9 	bl	8025c20 <_ZN6tflite16Register_SOFTMAXEv>
 802762e:	3480      	adds	r4, #128	; 0x80
 8027630:	463d      	mov	r5, r7
 8027632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027636:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802763a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(size_t i = 0; i < 11; ++i) {
 802763e:	2300      	movs	r3, #0
 8027640:	643b      	str	r3, [r7, #64]	; 0x40
 8027642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027644:	2b0a      	cmp	r3, #10
 8027646:	d86f      	bhi.n	8027728 <_Z18trained_model_initPFPvjjE+0x448>
    tflNodes[i].inputs = nodeData[i].inputs;
 8027648:	4a55      	ldr	r2, [pc, #340]	; (80277a0 <_Z18trained_model_initPFPvjjE+0x4c0>)
 802764a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802764c:	011b      	lsls	r3, r3, #4
 802764e:	4413      	add	r3, r2
 8027650:	6819      	ldr	r1, [r3, #0]
 8027652:	4854      	ldr	r0, [pc, #336]	; (80277a4 <_Z18trained_model_initPFPvjjE+0x4c4>)
 8027654:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8027656:	4613      	mov	r3, r2
 8027658:	00db      	lsls	r3, r3, #3
 802765a:	4413      	add	r3, r2
 802765c:	009b      	lsls	r3, r3, #2
 802765e:	4403      	add	r3, r0
 8027660:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 8027662:	4a4f      	ldr	r2, [pc, #316]	; (80277a0 <_Z18trained_model_initPFPvjjE+0x4c0>)
 8027664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027666:	011b      	lsls	r3, r3, #4
 8027668:	4413      	add	r3, r2
 802766a:	3304      	adds	r3, #4
 802766c:	6819      	ldr	r1, [r3, #0]
 802766e:	484d      	ldr	r0, [pc, #308]	; (80277a4 <_Z18trained_model_initPFPvjjE+0x4c4>)
 8027670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8027672:	4613      	mov	r3, r2
 8027674:	00db      	lsls	r3, r3, #3
 8027676:	4413      	add	r3, r2
 8027678:	009b      	lsls	r3, r3, #2
 802767a:	4403      	add	r3, r0
 802767c:	3304      	adds	r3, #4
 802767e:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 8027680:	4a47      	ldr	r2, [pc, #284]	; (80277a0 <_Z18trained_model_initPFPvjjE+0x4c0>)
 8027682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027684:	011b      	lsls	r3, r3, #4
 8027686:	4413      	add	r3, r2
 8027688:	3308      	adds	r3, #8
 802768a:	6819      	ldr	r1, [r3, #0]
 802768c:	4845      	ldr	r0, [pc, #276]	; (80277a4 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802768e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8027690:	4613      	mov	r3, r2
 8027692:	00db      	lsls	r3, r3, #3
 8027694:	4413      	add	r3, r2
 8027696:	009b      	lsls	r3, r3, #2
 8027698:	4403      	add	r3, r0
 802769a:	3314      	adds	r3, #20
 802769c:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 802769e:	4941      	ldr	r1, [pc, #260]	; (80277a4 <_Z18trained_model_initPFPvjjE+0x4c4>)
 80276a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80276a2:	4613      	mov	r3, r2
 80276a4:	00db      	lsls	r3, r3, #3
 80276a6:	4413      	add	r3, r2
 80276a8:	009b      	lsls	r3, r3, #2
 80276aa:	440b      	add	r3, r1
 80276ac:	3318      	adds	r3, #24
 80276ae:	2200      	movs	r2, #0
 80276b0:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 80276b2:	493c      	ldr	r1, [pc, #240]	; (80277a4 <_Z18trained_model_initPFPvjjE+0x4c4>)
 80276b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80276b6:	4613      	mov	r3, r2
 80276b8:	00db      	lsls	r3, r3, #3
 80276ba:	4413      	add	r3, r2
 80276bc:	009b      	lsls	r3, r3, #2
 80276be:	440b      	add	r3, r1
 80276c0:	331c      	adds	r3, #28
 80276c2:	2200      	movs	r2, #0
 80276c4:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 80276c6:	4a36      	ldr	r2, [pc, #216]	; (80277a0 <_Z18trained_model_initPFPvjjE+0x4c0>)
 80276c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80276ca:	011b      	lsls	r3, r3, #4
 80276cc:	4413      	add	r3, r2
 80276ce:	330c      	adds	r3, #12
 80276d0:	781b      	ldrb	r3, [r3, #0]
 80276d2:	4a32      	ldr	r2, [pc, #200]	; (802779c <_Z18trained_model_initPFPvjjE+0x4bc>)
 80276d4:	015b      	lsls	r3, r3, #5
 80276d6:	4413      	add	r3, r2
 80276d8:	681b      	ldr	r3, [r3, #0]
 80276da:	2b00      	cmp	r3, #0
 80276dc:	d020      	beq.n	8027720 <_Z18trained_model_initPFPvjjE+0x440>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 80276de:	4a30      	ldr	r2, [pc, #192]	; (80277a0 <_Z18trained_model_initPFPvjjE+0x4c0>)
 80276e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80276e2:	011b      	lsls	r3, r3, #4
 80276e4:	4413      	add	r3, r2
 80276e6:	330c      	adds	r3, #12
 80276e8:	781b      	ldrb	r3, [r3, #0]
 80276ea:	4a2c      	ldr	r2, [pc, #176]	; (802779c <_Z18trained_model_initPFPvjjE+0x4bc>)
 80276ec:	015b      	lsls	r3, r3, #5
 80276ee:	4413      	add	r3, r2
 80276f0:	681c      	ldr	r4, [r3, #0]
 80276f2:	492c      	ldr	r1, [pc, #176]	; (80277a4 <_Z18trained_model_initPFPvjjE+0x4c4>)
 80276f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80276f6:	4613      	mov	r3, r2
 80276f8:	00db      	lsls	r3, r3, #3
 80276fa:	4413      	add	r3, r2
 80276fc:	009b      	lsls	r3, r3, #2
 80276fe:	440b      	add	r3, r1
 8027700:	3314      	adds	r3, #20
 8027702:	681b      	ldr	r3, [r3, #0]
 8027704:	2200      	movs	r2, #0
 8027706:	4619      	mov	r1, r3
 8027708:	4827      	ldr	r0, [pc, #156]	; (80277a8 <_Z18trained_model_initPFPvjjE+0x4c8>)
 802770a:	47a0      	blx	r4
 802770c:	4601      	mov	r1, r0
 802770e:	4825      	ldr	r0, [pc, #148]	; (80277a4 <_Z18trained_model_initPFPvjjE+0x4c4>)
 8027710:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8027712:	4613      	mov	r3, r2
 8027714:	00db      	lsls	r3, r3, #3
 8027716:	4413      	add	r3, r2
 8027718:	009b      	lsls	r3, r3, #2
 802771a:	4403      	add	r3, r0
 802771c:	3310      	adds	r3, #16
 802771e:	6019      	str	r1, [r3, #0]
  for(size_t i = 0; i < 11; ++i) {
 8027720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027722:	3301      	adds	r3, #1
 8027724:	643b      	str	r3, [r7, #64]	; 0x40
 8027726:	e78c      	b.n	8027642 <_Z18trained_model_initPFPvjjE+0x362>
    }
  }
  for(size_t i = 0; i < 11; ++i) {
 8027728:	2300      	movs	r3, #0
 802772a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802772c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802772e:	2b0a      	cmp	r3, #10
 8027730:	d82f      	bhi.n	8027792 <_Z18trained_model_initPFPvjjE+0x4b2>
    if (registrations[nodeData[i].used_op_index].prepare) {
 8027732:	4a1b      	ldr	r2, [pc, #108]	; (80277a0 <_Z18trained_model_initPFPvjjE+0x4c0>)
 8027734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027736:	011b      	lsls	r3, r3, #4
 8027738:	4413      	add	r3, r2
 802773a:	330c      	adds	r3, #12
 802773c:	781b      	ldrb	r3, [r3, #0]
 802773e:	4a17      	ldr	r2, [pc, #92]	; (802779c <_Z18trained_model_initPFPvjjE+0x4bc>)
 8027740:	015b      	lsls	r3, r3, #5
 8027742:	4413      	add	r3, r2
 8027744:	3308      	adds	r3, #8
 8027746:	681b      	ldr	r3, [r3, #0]
 8027748:	2b00      	cmp	r3, #0
 802774a:	d01e      	beq.n	802778a <_Z18trained_model_initPFPvjjE+0x4aa>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 802774c:	4a14      	ldr	r2, [pc, #80]	; (80277a0 <_Z18trained_model_initPFPvjjE+0x4c0>)
 802774e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027750:	011b      	lsls	r3, r3, #4
 8027752:	4413      	add	r3, r2
 8027754:	330c      	adds	r3, #12
 8027756:	781b      	ldrb	r3, [r3, #0]
 8027758:	4a10      	ldr	r2, [pc, #64]	; (802779c <_Z18trained_model_initPFPvjjE+0x4bc>)
 802775a:	015b      	lsls	r3, r3, #5
 802775c:	4413      	add	r3, r2
 802775e:	3308      	adds	r3, #8
 8027760:	681c      	ldr	r4, [r3, #0]
 8027762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8027764:	4613      	mov	r3, r2
 8027766:	00db      	lsls	r3, r3, #3
 8027768:	4413      	add	r3, r2
 802776a:	009b      	lsls	r3, r3, #2
 802776c:	4a0d      	ldr	r2, [pc, #52]	; (80277a4 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802776e:	4413      	add	r3, r2
 8027770:	4619      	mov	r1, r3
 8027772:	480d      	ldr	r0, [pc, #52]	; (80277a8 <_Z18trained_model_initPFPvjjE+0x4c8>)
 8027774:	47a0      	blx	r4
 8027776:	4603      	mov	r3, r0
 8027778:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 802777c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027780:	2b00      	cmp	r3, #0
 8027782:	d002      	beq.n	802778a <_Z18trained_model_initPFPvjjE+0x4aa>
        return status;
 8027784:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027788:	e004      	b.n	8027794 <_Z18trained_model_initPFPvjjE+0x4b4>
  for(size_t i = 0; i < 11; ++i) {
 802778a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802778c:	3301      	adds	r3, #1
 802778e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8027790:	e7cc      	b.n	802772c <_Z18trained_model_initPFPvjjE+0x44c>
      }
    }
  }
  return kTfLiteOk;
 8027792:	2300      	movs	r3, #0
}
 8027794:	4618      	mov	r0, r3
 8027796:	3748      	adds	r7, #72	; 0x48
 8027798:	46bd      	mov	sp, r7
 802779a:	bdb0      	pop	{r4, r5, r7, pc}
 802779c:	200070e8 	.word	0x200070e8
 80277a0:	08031968 	.word	0x08031968
 80277a4:	20007188 	.word	0x20007188
 80277a8:	200069bc 	.word	0x200069bc

080277ac <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 80277ac:	b480      	push	{r7}
 80277ae:	b083      	sub	sp, #12
 80277b0:	af00      	add	r7, sp, #0
 80277b2:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 80277b4:	4b05      	ldr	r3, [pc, #20]	; (80277cc <_Z19trained_model_inputi+0x20>)
 80277b6:	689a      	ldr	r2, [r3, #8]
 80277b8:	2300      	movs	r3, #0
 80277ba:	019b      	lsls	r3, r3, #6
 80277bc:	4413      	add	r3, r2
}
 80277be:	4618      	mov	r0, r3
 80277c0:	370c      	adds	r7, #12
 80277c2:	46bd      	mov	sp, r7
 80277c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277c8:	4770      	bx	lr
 80277ca:	bf00      	nop
 80277cc:	200069bc 	.word	0x200069bc

080277d0 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
 80277d0:	b480      	push	{r7}
 80277d2:	b083      	sub	sp, #12
 80277d4:	af00      	add	r7, sp, #0
 80277d6:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 80277d8:	4b05      	ldr	r3, [pc, #20]	; (80277f0 <_Z20trained_model_outputi+0x20>)
 80277da:	689a      	ldr	r2, [r3, #8]
 80277dc:	2316      	movs	r3, #22
 80277de:	019b      	lsls	r3, r3, #6
 80277e0:	4413      	add	r3, r2
}
 80277e2:	4618      	mov	r0, r3
 80277e4:	370c      	adds	r7, #12
 80277e6:	46bd      	mov	sp, r7
 80277e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277ec:	4770      	bx	lr
 80277ee:	bf00      	nop
 80277f0:	200069bc 	.word	0x200069bc

080277f4 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 80277f4:	b590      	push	{r4, r7, lr}
 80277f6:	b083      	sub	sp, #12
 80277f8:	af00      	add	r7, sp, #0
  for(size_t i = 0; i < 11; ++i) {
 80277fa:	2300      	movs	r3, #0
 80277fc:	607b      	str	r3, [r7, #4]
 80277fe:	687b      	ldr	r3, [r7, #4]
 8027800:	2b0a      	cmp	r3, #10
 8027802:	d81f      	bhi.n	8027844 <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 8027804:	4a12      	ldr	r2, [pc, #72]	; (8027850 <_Z20trained_model_invokev+0x5c>)
 8027806:	687b      	ldr	r3, [r7, #4]
 8027808:	011b      	lsls	r3, r3, #4
 802780a:	4413      	add	r3, r2
 802780c:	330c      	adds	r3, #12
 802780e:	781b      	ldrb	r3, [r3, #0]
 8027810:	4a10      	ldr	r2, [pc, #64]	; (8027854 <_Z20trained_model_invokev+0x60>)
 8027812:	015b      	lsls	r3, r3, #5
 8027814:	4413      	add	r3, r2
 8027816:	330c      	adds	r3, #12
 8027818:	681c      	ldr	r4, [r3, #0]
 802781a:	687a      	ldr	r2, [r7, #4]
 802781c:	4613      	mov	r3, r2
 802781e:	00db      	lsls	r3, r3, #3
 8027820:	4413      	add	r3, r2
 8027822:	009b      	lsls	r3, r3, #2
 8027824:	4a0c      	ldr	r2, [pc, #48]	; (8027858 <_Z20trained_model_invokev+0x64>)
 8027826:	4413      	add	r3, r2
 8027828:	4619      	mov	r1, r3
 802782a:	480c      	ldr	r0, [pc, #48]	; (802785c <_Z20trained_model_invokev+0x68>)
 802782c:	47a0      	blx	r4
 802782e:	4603      	mov	r3, r0
 8027830:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 8027832:	78fb      	ldrb	r3, [r7, #3]
 8027834:	2b00      	cmp	r3, #0
 8027836:	d001      	beq.n	802783c <_Z20trained_model_invokev+0x48>
      return status;
 8027838:	78fb      	ldrb	r3, [r7, #3]
 802783a:	e004      	b.n	8027846 <_Z20trained_model_invokev+0x52>
  for(size_t i = 0; i < 11; ++i) {
 802783c:	687b      	ldr	r3, [r7, #4]
 802783e:	3301      	adds	r3, #1
 8027840:	607b      	str	r3, [r7, #4]
 8027842:	e7dc      	b.n	80277fe <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 8027844:	2300      	movs	r3, #0
}
 8027846:	4618      	mov	r0, r3
 8027848:	370c      	adds	r7, #12
 802784a:	46bd      	mov	sp, r7
 802784c:	bd90      	pop	{r4, r7, pc}
 802784e:	bf00      	nop
 8027850:	08031968 	.word	0x08031968
 8027854:	200070e8 	.word	0x200070e8
 8027858:	20007188 	.word	0x20007188
 802785c:	200069bc 	.word	0x200069bc

08027860 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 8027860:	b580      	push	{r7, lr}
 8027862:	b084      	sub	sp, #16
 8027864:	af00      	add	r7, sp, #0
 8027866:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 8027868:	4b15      	ldr	r3, [pc, #84]	; (80278c0 <_Z19trained_model_resetPFvPvE+0x60>)
 802786a:	681a      	ldr	r2, [r3, #0]
 802786c:	687b      	ldr	r3, [r7, #4]
 802786e:	4610      	mov	r0, r2
 8027870:	4798      	blx	r3
#endif
  scratch_buffers.clear();
 8027872:	4814      	ldr	r0, [pc, #80]	; (80278c4 <_Z19trained_model_resetPFvPvE+0x64>)
 8027874:	f000 f8ff 	bl	8027a76 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 8027878:	2300      	movs	r3, #0
 802787a:	60fb      	str	r3, [r7, #12]
 802787c:	4812      	ldr	r0, [pc, #72]	; (80278c8 <_Z19trained_model_resetPFvPvE+0x68>)
 802787e:	f000 f908 	bl	8027a92 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8027882:	4602      	mov	r2, r0
 8027884:	68fb      	ldr	r3, [r7, #12]
 8027886:	4293      	cmp	r3, r2
 8027888:	bf34      	ite	cc
 802788a:	2301      	movcc	r3, #1
 802788c:	2300      	movcs	r3, #0
 802788e:	b2db      	uxtb	r3, r3
 8027890:	2b00      	cmp	r3, #0
 8027892:	d00c      	beq.n	80278ae <_Z19trained_model_resetPFvPvE+0x4e>
    free(overflow_buffers[ix]);
 8027894:	68f9      	ldr	r1, [r7, #12]
 8027896:	480c      	ldr	r0, [pc, #48]	; (80278c8 <_Z19trained_model_resetPFvPvE+0x68>)
 8027898:	f000 f90b 	bl	8027ab2 <_ZNSt6vectorIPvSaIS0_EEixEj>
 802789c:	4603      	mov	r3, r0
 802789e:	681b      	ldr	r3, [r3, #0]
 80278a0:	4618      	mov	r0, r3
 80278a2:	f004 fced 	bl	802c280 <free>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 80278a6:	68fb      	ldr	r3, [r7, #12]
 80278a8:	3301      	adds	r3, #1
 80278aa:	60fb      	str	r3, [r7, #12]
 80278ac:	e7e6      	b.n	802787c <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers.clear();
 80278ae:	4806      	ldr	r0, [pc, #24]	; (80278c8 <_Z19trained_model_resetPFvPvE+0x68>)
 80278b0:	f000 f90f 	bl	8027ad2 <_ZNSt6vectorIPvSaIS0_EE5clearEv>
  return kTfLiteOk;
 80278b4:	2300      	movs	r3, #0
}
 80278b6:	4618      	mov	r0, r3
 80278b8:	3710      	adds	r7, #16
 80278ba:	46bd      	mov	sp, r7
 80278bc:	bd80      	pop	{r7, pc}
 80278be:	bf00      	nop
 80278c0:	200069b0 	.word	0x200069b0
 80278c4:	20007320 	.word	0x20007320
 80278c8:	20007314 	.word	0x20007314

080278cc <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80278cc:	b580      	push	{r7, lr}
 80278ce:	b082      	sub	sp, #8
 80278d0:	af00      	add	r7, sp, #0
 80278d2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80278d4:	6878      	ldr	r0, [r7, #4]
 80278d6:	f000 f90a 	bl	8027aee <_ZNSaIPvEC1Ev>
 80278da:	687b      	ldr	r3, [r7, #4]
 80278dc:	4618      	mov	r0, r3
 80278de:	f000 f912 	bl	8027b06 <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80278e2:	687b      	ldr	r3, [r7, #4]
 80278e4:	4618      	mov	r0, r3
 80278e6:	3708      	adds	r7, #8
 80278e8:	46bd      	mov	sp, r7
 80278ea:	bd80      	pop	{r7, pc}

080278ec <_ZNSaIPvED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80278ec:	b580      	push	{r7, lr}
 80278ee:	b082      	sub	sp, #8
 80278f0:	af00      	add	r7, sp, #0
 80278f2:	6078      	str	r0, [r7, #4]
 80278f4:	6878      	ldr	r0, [r7, #4]
 80278f6:	f000 f91a 	bl	8027b2e <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>
 80278fa:	687b      	ldr	r3, [r7, #4]
 80278fc:	4618      	mov	r0, r3
 80278fe:	3708      	adds	r7, #8
 8027900:	46bd      	mov	sp, r7
 8027902:	bd80      	pop	{r7, pc}

08027904 <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8027904:	b580      	push	{r7, lr}
 8027906:	b082      	sub	sp, #8
 8027908:	af00      	add	r7, sp, #0
 802790a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 802790c:	687b      	ldr	r3, [r7, #4]
 802790e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8027910:	687b      	ldr	r3, [r7, #4]
 8027912:	689a      	ldr	r2, [r3, #8]
 8027914:	687b      	ldr	r3, [r7, #4]
 8027916:	681b      	ldr	r3, [r3, #0]
 8027918:	1ad3      	subs	r3, r2, r3
 802791a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 802791c:	461a      	mov	r2, r3
 802791e:	6878      	ldr	r0, [r7, #4]
 8027920:	f000 f910 	bl	8027b44 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      }
 8027924:	687b      	ldr	r3, [r7, #4]
 8027926:	4618      	mov	r0, r3
 8027928:	f7ff fbd8 	bl	80270dc <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>
 802792c:	687b      	ldr	r3, [r7, #4]
 802792e:	4618      	mov	r0, r3
 8027930:	3708      	adds	r7, #8
 8027932:	46bd      	mov	sp, r7
 8027934:	bd80      	pop	{r7, pc}

08027936 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8027936:	b580      	push	{r7, lr}
 8027938:	b082      	sub	sp, #8
 802793a:	af00      	add	r7, sp, #0
 802793c:	6078      	str	r0, [r7, #4]
 802793e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8027940:	687b      	ldr	r3, [r7, #4]
 8027942:	685a      	ldr	r2, [r3, #4]
 8027944:	687b      	ldr	r3, [r7, #4]
 8027946:	689b      	ldr	r3, [r3, #8]
 8027948:	429a      	cmp	r2, r3
 802794a:	d00c      	beq.n	8027966 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 802794c:	6878      	ldr	r0, [r7, #4]
 802794e:	687b      	ldr	r3, [r7, #4]
 8027950:	685b      	ldr	r3, [r3, #4]
 8027952:	683a      	ldr	r2, [r7, #0]
 8027954:	4619      	mov	r1, r3
 8027956:	f000 f908 	bl	8027b6a <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 802795a:	687b      	ldr	r3, [r7, #4]
 802795c:	685b      	ldr	r3, [r3, #4]
 802795e:	1d1a      	adds	r2, r3, #4
 8027960:	687b      	ldr	r3, [r7, #4]
 8027962:	605a      	str	r2, [r3, #4]
      }
 8027964:	e008      	b.n	8027978 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x42>
	  _M_realloc_insert(end(), __x);
 8027966:	6878      	ldr	r0, [r7, #4]
 8027968:	f000 f912 	bl	8027b90 <_ZNSt6vectorIPvSaIS0_EE3endEv>
 802796c:	4603      	mov	r3, r0
 802796e:	683a      	ldr	r2, [r7, #0]
 8027970:	4619      	mov	r1, r3
 8027972:	6878      	ldr	r0, [r7, #4]
 8027974:	f000 f934 	bl	8027be0 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8027978:	bf00      	nop
 802797a:	3708      	adds	r7, #8
 802797c:	46bd      	mov	sp, r7
 802797e:	bd80      	pop	{r7, pc}

08027980 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8027980:	b580      	push	{r7, lr}
 8027982:	b082      	sub	sp, #8
 8027984:	af00      	add	r7, sp, #0
 8027986:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8027988:	6878      	ldr	r0, [r7, #4]
 802798a:	f000 f9e5 	bl	8027d58 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 802798e:	687b      	ldr	r3, [r7, #4]
 8027990:	4618      	mov	r0, r3
 8027992:	f000 f9ed 	bl	8027d70 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
 8027996:	687b      	ldr	r3, [r7, #4]
 8027998:	4618      	mov	r0, r3
 802799a:	3708      	adds	r7, #8
 802799c:	46bd      	mov	sp, r7
 802799e:	bd80      	pop	{r7, pc}

080279a0 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 80279a0:	b580      	push	{r7, lr}
 80279a2:	b082      	sub	sp, #8
 80279a4:	af00      	add	r7, sp, #0
 80279a6:	6078      	str	r0, [r7, #4]
 80279a8:	6878      	ldr	r0, [r7, #4]
 80279aa:	f000 f9f5 	bl	8027d98 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 80279ae:	687b      	ldr	r3, [r7, #4]
 80279b0:	4618      	mov	r0, r3
 80279b2:	3708      	adds	r7, #8
 80279b4:	46bd      	mov	sp, r7
 80279b6:	bd80      	pop	{r7, pc}

080279b8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80279b8:	b580      	push	{r7, lr}
 80279ba:	b082      	sub	sp, #8
 80279bc:	af00      	add	r7, sp, #0
 80279be:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80279c0:	687b      	ldr	r3, [r7, #4]
 80279c2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80279c4:	687b      	ldr	r3, [r7, #4]
 80279c6:	689a      	ldr	r2, [r3, #8]
 80279c8:	687b      	ldr	r3, [r7, #4]
 80279ca:	681b      	ldr	r3, [r3, #0]
 80279cc:	1ad3      	subs	r3, r2, r3
 80279ce:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80279d0:	461a      	mov	r2, r3
 80279d2:	6878      	ldr	r0, [r7, #4]
 80279d4:	f000 f9eb 	bl	8027dae <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      }
 80279d8:	687b      	ldr	r3, [r7, #4]
 80279da:	4618      	mov	r0, r3
 80279dc:	f7ff fbe8 	bl	80271b0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>
 80279e0:	687b      	ldr	r3, [r7, #4]
 80279e2:	4618      	mov	r0, r3
 80279e4:	3708      	adds	r7, #8
 80279e6:	46bd      	mov	sp, r7
 80279e8:	bd80      	pop	{r7, pc}

080279ea <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80279ea:	b580      	push	{r7, lr}
 80279ec:	b082      	sub	sp, #8
 80279ee:	af00      	add	r7, sp, #0
 80279f0:	6078      	str	r0, [r7, #4]
 80279f2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80279f4:	687b      	ldr	r3, [r7, #4]
 80279f6:	685a      	ldr	r2, [r3, #4]
 80279f8:	687b      	ldr	r3, [r7, #4]
 80279fa:	689b      	ldr	r3, [r3, #8]
 80279fc:	429a      	cmp	r2, r3
 80279fe:	d00d      	beq.n	8027a1c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8027a00:	6878      	ldr	r0, [r7, #4]
 8027a02:	687b      	ldr	r3, [r7, #4]
 8027a04:	685b      	ldr	r3, [r3, #4]
 8027a06:	683a      	ldr	r2, [r7, #0]
 8027a08:	4619      	mov	r1, r3
 8027a0a:	f000 f9e3 	bl	8027dd4 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8027a0e:	687b      	ldr	r3, [r7, #4]
 8027a10:	685b      	ldr	r3, [r3, #4]
 8027a12:	f103 0208 	add.w	r2, r3, #8
 8027a16:	687b      	ldr	r3, [r7, #4]
 8027a18:	605a      	str	r2, [r3, #4]
      }
 8027a1a:	e008      	b.n	8027a2e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x44>
	  _M_realloc_insert(end(), __x);
 8027a1c:	6878      	ldr	r0, [r7, #4]
 8027a1e:	f000 f9ec 	bl	8027dfa <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>
 8027a22:	4603      	mov	r3, r0
 8027a24:	683a      	ldr	r2, [r7, #0]
 8027a26:	4619      	mov	r1, r3
 8027a28:	6878      	ldr	r0, [r7, #4]
 8027a2a:	f000 fa0d 	bl	8027e48 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8027a2e:	bf00      	nop
 8027a30:	3708      	adds	r7, #8
 8027a32:	46bd      	mov	sp, r7
 8027a34:	bd80      	pop	{r7, pc}

08027a36 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8027a36:	b480      	push	{r7}
 8027a38:	b083      	sub	sp, #12
 8027a3a:	af00      	add	r7, sp, #0
 8027a3c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8027a3e:	687b      	ldr	r3, [r7, #4]
 8027a40:	685a      	ldr	r2, [r3, #4]
 8027a42:	687b      	ldr	r3, [r7, #4]
 8027a44:	681b      	ldr	r3, [r3, #0]
 8027a46:	1ad3      	subs	r3, r2, r3
 8027a48:	10db      	asrs	r3, r3, #3
 8027a4a:	4618      	mov	r0, r3
 8027a4c:	370c      	adds	r7, #12
 8027a4e:	46bd      	mov	sp, r7
 8027a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a54:	4770      	bx	lr

08027a56 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8027a56:	b480      	push	{r7}
 8027a58:	b083      	sub	sp, #12
 8027a5a:	af00      	add	r7, sp, #0
 8027a5c:	6078      	str	r0, [r7, #4]
 8027a5e:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8027a60:	687b      	ldr	r3, [r7, #4]
 8027a62:	681a      	ldr	r2, [r3, #0]
 8027a64:	683b      	ldr	r3, [r7, #0]
 8027a66:	00db      	lsls	r3, r3, #3
 8027a68:	4413      	add	r3, r2
      }
 8027a6a:	4618      	mov	r0, r3
 8027a6c:	370c      	adds	r7, #12
 8027a6e:	46bd      	mov	sp, r7
 8027a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a74:	4770      	bx	lr

08027a76 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8027a76:	b580      	push	{r7, lr}
 8027a78:	b082      	sub	sp, #8
 8027a7a:	af00      	add	r7, sp, #0
 8027a7c:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8027a7e:	687b      	ldr	r3, [r7, #4]
 8027a80:	681b      	ldr	r3, [r3, #0]
 8027a82:	4619      	mov	r1, r3
 8027a84:	6878      	ldr	r0, [r7, #4]
 8027a86:	f000 fa9b 	bl	8027fc0 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>
 8027a8a:	bf00      	nop
 8027a8c:	3708      	adds	r7, #8
 8027a8e:	46bd      	mov	sp, r7
 8027a90:	bd80      	pop	{r7, pc}

08027a92 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8027a92:	b480      	push	{r7}
 8027a94:	b083      	sub	sp, #12
 8027a96:	af00      	add	r7, sp, #0
 8027a98:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8027a9a:	687b      	ldr	r3, [r7, #4]
 8027a9c:	685a      	ldr	r2, [r3, #4]
 8027a9e:	687b      	ldr	r3, [r7, #4]
 8027aa0:	681b      	ldr	r3, [r3, #0]
 8027aa2:	1ad3      	subs	r3, r2, r3
 8027aa4:	109b      	asrs	r3, r3, #2
 8027aa6:	4618      	mov	r0, r3
 8027aa8:	370c      	adds	r7, #12
 8027aaa:	46bd      	mov	sp, r7
 8027aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ab0:	4770      	bx	lr

08027ab2 <_ZNSt6vectorIPvSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8027ab2:	b480      	push	{r7}
 8027ab4:	b083      	sub	sp, #12
 8027ab6:	af00      	add	r7, sp, #0
 8027ab8:	6078      	str	r0, [r7, #4]
 8027aba:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8027abc:	687b      	ldr	r3, [r7, #4]
 8027abe:	681a      	ldr	r2, [r3, #0]
 8027ac0:	683b      	ldr	r3, [r7, #0]
 8027ac2:	009b      	lsls	r3, r3, #2
 8027ac4:	4413      	add	r3, r2
      }
 8027ac6:	4618      	mov	r0, r3
 8027ac8:	370c      	adds	r7, #12
 8027aca:	46bd      	mov	sp, r7
 8027acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ad0:	4770      	bx	lr

08027ad2 <_ZNSt6vectorIPvSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8027ad2:	b580      	push	{r7, lr}
 8027ad4:	b082      	sub	sp, #8
 8027ad6:	af00      	add	r7, sp, #0
 8027ad8:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8027ada:	687b      	ldr	r3, [r7, #4]
 8027adc:	681b      	ldr	r3, [r3, #0]
 8027ade:	4619      	mov	r1, r3
 8027ae0:	6878      	ldr	r0, [r7, #4]
 8027ae2:	f000 fa8e 	bl	8028002 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>
 8027ae6:	bf00      	nop
 8027ae8:	3708      	adds	r7, #8
 8027aea:	46bd      	mov	sp, r7
 8027aec:	bd80      	pop	{r7, pc}

08027aee <_ZNSaIPvEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8027aee:	b580      	push	{r7, lr}
 8027af0:	b082      	sub	sp, #8
 8027af2:	af00      	add	r7, sp, #0
 8027af4:	6078      	str	r0, [r7, #4]
 8027af6:	6878      	ldr	r0, [r7, #4]
 8027af8:	f000 faa4 	bl	8028044 <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>
 8027afc:	687b      	ldr	r3, [r7, #4]
 8027afe:	4618      	mov	r0, r3
 8027b00:	3708      	adds	r7, #8
 8027b02:	46bd      	mov	sp, r7
 8027b04:	bd80      	pop	{r7, pc}

08027b06 <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8027b06:	b480      	push	{r7}
 8027b08:	b083      	sub	sp, #12
 8027b0a:	af00      	add	r7, sp, #0
 8027b0c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8027b0e:	687b      	ldr	r3, [r7, #4]
 8027b10:	2200      	movs	r2, #0
 8027b12:	601a      	str	r2, [r3, #0]
 8027b14:	687b      	ldr	r3, [r7, #4]
 8027b16:	2200      	movs	r2, #0
 8027b18:	605a      	str	r2, [r3, #4]
 8027b1a:	687b      	ldr	r3, [r7, #4]
 8027b1c:	2200      	movs	r2, #0
 8027b1e:	609a      	str	r2, [r3, #8]
	{ }
 8027b20:	687b      	ldr	r3, [r7, #4]
 8027b22:	4618      	mov	r0, r3
 8027b24:	370c      	adds	r7, #12
 8027b26:	46bd      	mov	sp, r7
 8027b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b2c:	4770      	bx	lr

08027b2e <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8027b2e:	b480      	push	{r7}
 8027b30:	b083      	sub	sp, #12
 8027b32:	af00      	add	r7, sp, #0
 8027b34:	6078      	str	r0, [r7, #4]
 8027b36:	687b      	ldr	r3, [r7, #4]
 8027b38:	4618      	mov	r0, r3
 8027b3a:	370c      	adds	r7, #12
 8027b3c:	46bd      	mov	sp, r7
 8027b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b42:	4770      	bx	lr

08027b44 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8027b44:	b580      	push	{r7, lr}
 8027b46:	b084      	sub	sp, #16
 8027b48:	af00      	add	r7, sp, #0
 8027b4a:	60f8      	str	r0, [r7, #12]
 8027b4c:	60b9      	str	r1, [r7, #8]
 8027b4e:	607a      	str	r2, [r7, #4]
	if (__p)
 8027b50:	68bb      	ldr	r3, [r7, #8]
 8027b52:	2b00      	cmp	r3, #0
 8027b54:	d005      	beq.n	8027b62 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8027b56:	68fb      	ldr	r3, [r7, #12]
 8027b58:	687a      	ldr	r2, [r7, #4]
 8027b5a:	68b9      	ldr	r1, [r7, #8]
 8027b5c:	4618      	mov	r0, r3
 8027b5e:	f000 fa7c 	bl	802805a <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>
      }
 8027b62:	bf00      	nop
 8027b64:	3710      	adds	r7, #16
 8027b66:	46bd      	mov	sp, r7
 8027b68:	bd80      	pop	{r7, pc}

08027b6a <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8027b6a:	b580      	push	{r7, lr}
 8027b6c:	b084      	sub	sp, #16
 8027b6e:	af00      	add	r7, sp, #0
 8027b70:	60f8      	str	r0, [r7, #12]
 8027b72:	60b9      	str	r1, [r7, #8]
 8027b74:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8027b76:	6878      	ldr	r0, [r7, #4]
 8027b78:	f000 fa7e 	bl	8028078 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8027b7c:	4603      	mov	r3, r0
 8027b7e:	461a      	mov	r2, r3
 8027b80:	68b9      	ldr	r1, [r7, #8]
 8027b82:	68f8      	ldr	r0, [r7, #12]
 8027b84:	f000 fa83 	bl	802808e <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 8027b88:	bf00      	nop
 8027b8a:	3710      	adds	r7, #16
 8027b8c:	46bd      	mov	sp, r7
 8027b8e:	bd80      	pop	{r7, pc}

08027b90 <_ZNSt6vectorIPvSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8027b90:	b580      	push	{r7, lr}
 8027b92:	b084      	sub	sp, #16
 8027b94:	af00      	add	r7, sp, #0
 8027b96:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8027b98:	687b      	ldr	r3, [r7, #4]
 8027b9a:	1d1a      	adds	r2, r3, #4
 8027b9c:	f107 030c 	add.w	r3, r7, #12
 8027ba0:	4611      	mov	r1, r2
 8027ba2:	4618      	mov	r0, r3
 8027ba4:	f000 fa89 	bl	80280ba <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8027ba8:	68fb      	ldr	r3, [r7, #12]
 8027baa:	4618      	mov	r0, r3
 8027bac:	3710      	adds	r7, #16
 8027bae:	46bd      	mov	sp, r7
 8027bb0:	bd80      	pop	{r7, pc}

08027bb2 <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8027bb2:	b580      	push	{r7, lr}
 8027bb4:	b082      	sub	sp, #8
 8027bb6:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8027bb8:	4618      	mov	r0, r3
 8027bba:	f000 f805 	bl	8027bc8 <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8027bbe:	4603      	mov	r3, r0
      }
 8027bc0:	4618      	mov	r0, r3
 8027bc2:	3708      	adds	r7, #8
 8027bc4:	46bd      	mov	sp, r7
 8027bc6:	bd80      	pop	{r7, pc}

08027bc8 <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8027bc8:	b480      	push	{r7}
 8027bca:	b083      	sub	sp, #12
 8027bcc:	af00      	add	r7, sp, #0
 8027bce:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8027bd0:	2301      	movs	r3, #1
      }
 8027bd2:	4618      	mov	r0, r3
 8027bd4:	370c      	adds	r7, #12
 8027bd6:	46bd      	mov	sp, r7
 8027bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027bdc:	4770      	bx	lr
	...

08027be0 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8027be0:	b5b0      	push	{r4, r5, r7, lr}
 8027be2:	b08c      	sub	sp, #48	; 0x30
 8027be4:	af00      	add	r7, sp, #0
 8027be6:	60f8      	str	r0, [r7, #12]
 8027be8:	60b9      	str	r1, [r7, #8]
 8027bea:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8027bec:	4a59      	ldr	r2, [pc, #356]	; (8027d54 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 8027bee:	2101      	movs	r1, #1
 8027bf0:	68f8      	ldr	r0, [r7, #12]
 8027bf2:	f000 fa72 	bl	80280da <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>
 8027bf6:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8027bf8:	68fb      	ldr	r3, [r7, #12]
 8027bfa:	681b      	ldr	r3, [r3, #0]
 8027bfc:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8027bfe:	68fb      	ldr	r3, [r7, #12]
 8027c00:	685b      	ldr	r3, [r3, #4]
 8027c02:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8027c04:	68f8      	ldr	r0, [r7, #12]
 8027c06:	f000 faaf 	bl	8028168 <_ZNSt6vectorIPvSaIS0_EE5beginEv>
 8027c0a:	4603      	mov	r3, r0
 8027c0c:	617b      	str	r3, [r7, #20]
 8027c0e:	f107 0214 	add.w	r2, r7, #20
 8027c12:	f107 0308 	add.w	r3, r7, #8
 8027c16:	4611      	mov	r1, r2
 8027c18:	4618      	mov	r0, r3
 8027c1a:	f000 fab5 	bl	8028188 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8027c1e:	4603      	mov	r3, r0
 8027c20:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8027c22:	68fb      	ldr	r3, [r7, #12]
 8027c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8027c26:	4618      	mov	r0, r3
 8027c28:	f000 fac3 	bl	80281b2 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>
 8027c2c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8027c2e:	69bb      	ldr	r3, [r7, #24]
 8027c30:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8027c32:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8027c34:	69fb      	ldr	r3, [r7, #28]
 8027c36:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8027c38:	69ba      	ldr	r2, [r7, #24]
 8027c3a:	18d5      	adds	r5, r2, r3
 8027c3c:	6878      	ldr	r0, [r7, #4]
 8027c3e:	f000 fa1b 	bl	8028078 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8027c42:	4603      	mov	r3, r0
 8027c44:	461a      	mov	r2, r3
 8027c46:	4629      	mov	r1, r5
 8027c48:	4620      	mov	r0, r4
 8027c4a:	f7ff ff8e 	bl	8027b6a <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 8027c4e:	2300      	movs	r3, #0
 8027c50:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8027c52:	f7ff ffae 	bl	8027bb2 <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 8027c56:	4603      	mov	r3, r0
 8027c58:	2b00      	cmp	r3, #0
 8027c5a:	d027      	beq.n	8027cac <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8027c5c:	f107 0308 	add.w	r3, r7, #8
 8027c60:	4618      	mov	r0, r3
 8027c62:	f000 face 	bl	8028202 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8027c66:	4603      	mov	r3, r0
 8027c68:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8027c6a:	68fb      	ldr	r3, [r7, #12]
 8027c6c:	4618      	mov	r0, r3
 8027c6e:	f000 fad3 	bl	8028218 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8027c72:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8027c74:	69ba      	ldr	r2, [r7, #24]
 8027c76:	4621      	mov	r1, r4
 8027c78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027c7a:	f000 faae 	bl	80281da <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8027c7e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8027c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027c82:	3304      	adds	r3, #4
 8027c84:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8027c86:	f107 0308 	add.w	r3, r7, #8
 8027c8a:	4618      	mov	r0, r3
 8027c8c:	f000 fab9 	bl	8028202 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8027c90:	4603      	mov	r3, r0
 8027c92:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8027c94:	68fb      	ldr	r3, [r7, #12]
 8027c96:	4618      	mov	r0, r3
 8027c98:	f000 fabe 	bl	8028218 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8027c9c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8027c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027ca0:	6a39      	ldr	r1, [r7, #32]
 8027ca2:	4620      	mov	r0, r4
 8027ca4:	f000 fa99 	bl	80281da <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8027ca8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8027caa:	e026      	b.n	8027cfa <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8027cac:	f107 0308 	add.w	r3, r7, #8
 8027cb0:	4618      	mov	r0, r3
 8027cb2:	f000 faa6 	bl	8028202 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8027cb6:	4603      	mov	r3, r0
 8027cb8:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8027cba:	68fb      	ldr	r3, [r7, #12]
 8027cbc:	4618      	mov	r0, r3
 8027cbe:	f000 faab 	bl	8028218 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8027cc2:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8027cc4:	69ba      	ldr	r2, [r7, #24]
 8027cc6:	4621      	mov	r1, r4
 8027cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027cca:	f000 fab0 	bl	802822e <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8027cce:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8027cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027cd2:	3304      	adds	r3, #4
 8027cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8027cd6:	f107 0308 	add.w	r3, r7, #8
 8027cda:	4618      	mov	r0, r3
 8027cdc:	f000 fa91 	bl	8028202 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8027ce0:	4603      	mov	r3, r0
 8027ce2:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8027ce4:	68fb      	ldr	r3, [r7, #12]
 8027ce6:	4618      	mov	r0, r3
 8027ce8:	f000 fa96 	bl	8028218 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8027cec:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8027cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027cf0:	6a39      	ldr	r1, [r7, #32]
 8027cf2:	4620      	mov	r0, r4
 8027cf4:	f000 fa9b 	bl	802822e <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8027cf8:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8027cfa:	f7ff ff5a 	bl	8027bb2 <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 8027cfe:	4603      	mov	r3, r0
 8027d00:	f083 0301 	eor.w	r3, r3, #1
 8027d04:	b2db      	uxtb	r3, r3
 8027d06:	2b00      	cmp	r3, #0
 8027d08:	d009      	beq.n	8027d1e <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8027d0a:	68fb      	ldr	r3, [r7, #12]
 8027d0c:	4618      	mov	r0, r3
 8027d0e:	f000 fa83 	bl	8028218 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8027d12:	4603      	mov	r3, r0
 8027d14:	461a      	mov	r2, r3
 8027d16:	6a39      	ldr	r1, [r7, #32]
 8027d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027d1a:	f000 faa1 	bl	8028260 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      _M_deallocate(__old_start,
 8027d1e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8027d20:	68fb      	ldr	r3, [r7, #12]
 8027d22:	689a      	ldr	r2, [r3, #8]
 8027d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027d26:	1ad3      	subs	r3, r2, r3
 8027d28:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8027d2a:	461a      	mov	r2, r3
 8027d2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8027d2e:	f7ff ff09 	bl	8027b44 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8027d32:	68fb      	ldr	r3, [r7, #12]
 8027d34:	69ba      	ldr	r2, [r7, #24]
 8027d36:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8027d38:	68fb      	ldr	r3, [r7, #12]
 8027d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027d3c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8027d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027d40:	009b      	lsls	r3, r3, #2
 8027d42:	69ba      	ldr	r2, [r7, #24]
 8027d44:	441a      	add	r2, r3
 8027d46:	68fb      	ldr	r3, [r7, #12]
 8027d48:	609a      	str	r2, [r3, #8]
    }
 8027d4a:	bf00      	nop
 8027d4c:	3730      	adds	r7, #48	; 0x30
 8027d4e:	46bd      	mov	sp, r7
 8027d50:	bdb0      	pop	{r4, r5, r7, pc}
 8027d52:	bf00      	nop
 8027d54:	0802faf8 	.word	0x0802faf8

08027d58 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
 8027d58:	b580      	push	{r7, lr}
 8027d5a:	b082      	sub	sp, #8
 8027d5c:	af00      	add	r7, sp, #0
 8027d5e:	6078      	str	r0, [r7, #4]
 8027d60:	6878      	ldr	r0, [r7, #4]
 8027d62:	f000 fa8b 	bl	802827c <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 8027d66:	687b      	ldr	r3, [r7, #4]
 8027d68:	4618      	mov	r0, r3
 8027d6a:	3708      	adds	r7, #8
 8027d6c:	46bd      	mov	sp, r7
 8027d6e:	bd80      	pop	{r7, pc}

08027d70 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8027d70:	b480      	push	{r7}
 8027d72:	b083      	sub	sp, #12
 8027d74:	af00      	add	r7, sp, #0
 8027d76:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8027d78:	687b      	ldr	r3, [r7, #4]
 8027d7a:	2200      	movs	r2, #0
 8027d7c:	601a      	str	r2, [r3, #0]
 8027d7e:	687b      	ldr	r3, [r7, #4]
 8027d80:	2200      	movs	r2, #0
 8027d82:	605a      	str	r2, [r3, #4]
 8027d84:	687b      	ldr	r3, [r7, #4]
 8027d86:	2200      	movs	r2, #0
 8027d88:	609a      	str	r2, [r3, #8]
	{ }
 8027d8a:	687b      	ldr	r3, [r7, #4]
 8027d8c:	4618      	mov	r0, r3
 8027d8e:	370c      	adds	r7, #12
 8027d90:	46bd      	mov	sp, r7
 8027d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d96:	4770      	bx	lr

08027d98 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8027d98:	b480      	push	{r7}
 8027d9a:	b083      	sub	sp, #12
 8027d9c:	af00      	add	r7, sp, #0
 8027d9e:	6078      	str	r0, [r7, #4]
 8027da0:	687b      	ldr	r3, [r7, #4]
 8027da2:	4618      	mov	r0, r3
 8027da4:	370c      	adds	r7, #12
 8027da6:	46bd      	mov	sp, r7
 8027da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027dac:	4770      	bx	lr

08027dae <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8027dae:	b580      	push	{r7, lr}
 8027db0:	b084      	sub	sp, #16
 8027db2:	af00      	add	r7, sp, #0
 8027db4:	60f8      	str	r0, [r7, #12]
 8027db6:	60b9      	str	r1, [r7, #8]
 8027db8:	607a      	str	r2, [r7, #4]
	if (__p)
 8027dba:	68bb      	ldr	r3, [r7, #8]
 8027dbc:	2b00      	cmp	r3, #0
 8027dbe:	d005      	beq.n	8027dcc <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8027dc0:	68fb      	ldr	r3, [r7, #12]
 8027dc2:	687a      	ldr	r2, [r7, #4]
 8027dc4:	68b9      	ldr	r1, [r7, #8]
 8027dc6:	4618      	mov	r0, r3
 8027dc8:	f000 fa63 	bl	8028292 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>
      }
 8027dcc:	bf00      	nop
 8027dce:	3710      	adds	r7, #16
 8027dd0:	46bd      	mov	sp, r7
 8027dd2:	bd80      	pop	{r7, pc}

08027dd4 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8027dd4:	b580      	push	{r7, lr}
 8027dd6:	b084      	sub	sp, #16
 8027dd8:	af00      	add	r7, sp, #0
 8027dda:	60f8      	str	r0, [r7, #12]
 8027ddc:	60b9      	str	r1, [r7, #8]
 8027dde:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8027de0:	6878      	ldr	r0, [r7, #4]
 8027de2:	f000 fa65 	bl	80282b0 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8027de6:	4603      	mov	r3, r0
 8027de8:	461a      	mov	r2, r3
 8027dea:	68b9      	ldr	r1, [r7, #8]
 8027dec:	68f8      	ldr	r0, [r7, #12]
 8027dee:	f000 fa6a 	bl	80282c6 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8027df2:	bf00      	nop
 8027df4:	3710      	adds	r7, #16
 8027df6:	46bd      	mov	sp, r7
 8027df8:	bd80      	pop	{r7, pc}

08027dfa <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8027dfa:	b580      	push	{r7, lr}
 8027dfc:	b084      	sub	sp, #16
 8027dfe:	af00      	add	r7, sp, #0
 8027e00:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8027e02:	687b      	ldr	r3, [r7, #4]
 8027e04:	1d1a      	adds	r2, r3, #4
 8027e06:	f107 030c 	add.w	r3, r7, #12
 8027e0a:	4611      	mov	r1, r2
 8027e0c:	4618      	mov	r0, r3
 8027e0e:	f000 fa73 	bl	80282f8 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8027e12:	68fb      	ldr	r3, [r7, #12]
 8027e14:	4618      	mov	r0, r3
 8027e16:	3710      	adds	r7, #16
 8027e18:	46bd      	mov	sp, r7
 8027e1a:	bd80      	pop	{r7, pc}

08027e1c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8027e1c:	b580      	push	{r7, lr}
 8027e1e:	b082      	sub	sp, #8
 8027e20:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8027e22:	4618      	mov	r0, r3
 8027e24:	f000 f805 	bl	8027e32 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8027e28:	4603      	mov	r3, r0
      }
 8027e2a:	4618      	mov	r0, r3
 8027e2c:	3708      	adds	r7, #8
 8027e2e:	46bd      	mov	sp, r7
 8027e30:	bd80      	pop	{r7, pc}

08027e32 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8027e32:	b480      	push	{r7}
 8027e34:	b083      	sub	sp, #12
 8027e36:	af00      	add	r7, sp, #0
 8027e38:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8027e3a:	2301      	movs	r3, #1
      }
 8027e3c:	4618      	mov	r0, r3
 8027e3e:	370c      	adds	r7, #12
 8027e40:	46bd      	mov	sp, r7
 8027e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e46:	4770      	bx	lr

08027e48 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8027e48:	b5b0      	push	{r4, r5, r7, lr}
 8027e4a:	b08c      	sub	sp, #48	; 0x30
 8027e4c:	af00      	add	r7, sp, #0
 8027e4e:	60f8      	str	r0, [r7, #12]
 8027e50:	60b9      	str	r1, [r7, #8]
 8027e52:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8027e54:	4a59      	ldr	r2, [pc, #356]	; (8027fbc <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8027e56:	2101      	movs	r1, #1
 8027e58:	68f8      	ldr	r0, [r7, #12]
 8027e5a:	f000 fa5d 	bl	8028318 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>
 8027e5e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8027e60:	68fb      	ldr	r3, [r7, #12]
 8027e62:	681b      	ldr	r3, [r3, #0]
 8027e64:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8027e66:	68fb      	ldr	r3, [r7, #12]
 8027e68:	685b      	ldr	r3, [r3, #4]
 8027e6a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8027e6c:	68f8      	ldr	r0, [r7, #12]
 8027e6e:	f000 fa9a 	bl	80283a6 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>
 8027e72:	4603      	mov	r3, r0
 8027e74:	617b      	str	r3, [r7, #20]
 8027e76:	f107 0214 	add.w	r2, r7, #20
 8027e7a:	f107 0308 	add.w	r3, r7, #8
 8027e7e:	4611      	mov	r1, r2
 8027e80:	4618      	mov	r0, r3
 8027e82:	f000 faa0 	bl	80283c6 <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8027e86:	4603      	mov	r3, r0
 8027e88:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8027e8a:	68fb      	ldr	r3, [r7, #12]
 8027e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8027e8e:	4618      	mov	r0, r3
 8027e90:	f000 faae 	bl	80283f0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>
 8027e94:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8027e96:	69bb      	ldr	r3, [r7, #24]
 8027e98:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8027e9a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8027e9c:	69fb      	ldr	r3, [r7, #28]
 8027e9e:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8027ea0:	69ba      	ldr	r2, [r7, #24]
 8027ea2:	18d5      	adds	r5, r2, r3
 8027ea4:	6878      	ldr	r0, [r7, #4]
 8027ea6:	f000 fa03 	bl	80282b0 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8027eaa:	4603      	mov	r3, r0
 8027eac:	461a      	mov	r2, r3
 8027eae:	4629      	mov	r1, r5
 8027eb0:	4620      	mov	r0, r4
 8027eb2:	f7ff ff8f 	bl	8027dd4 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8027eb6:	2300      	movs	r3, #0
 8027eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8027eba:	f7ff ffaf 	bl	8027e1c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 8027ebe:	4603      	mov	r3, r0
 8027ec0:	2b00      	cmp	r3, #0
 8027ec2:	d027      	beq.n	8027f14 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8027ec4:	f107 0308 	add.w	r3, r7, #8
 8027ec8:	4618      	mov	r0, r3
 8027eca:	f000 fab9 	bl	8028440 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8027ece:	4603      	mov	r3, r0
 8027ed0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8027ed2:	68fb      	ldr	r3, [r7, #12]
 8027ed4:	4618      	mov	r0, r3
 8027ed6:	f000 fabe 	bl	8028456 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8027eda:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8027edc:	69ba      	ldr	r2, [r7, #24]
 8027ede:	4621      	mov	r1, r4
 8027ee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027ee2:	f000 fa99 	bl	8028418 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8027ee6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8027ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027eea:	3308      	adds	r3, #8
 8027eec:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8027eee:	f107 0308 	add.w	r3, r7, #8
 8027ef2:	4618      	mov	r0, r3
 8027ef4:	f000 faa4 	bl	8028440 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8027ef8:	4603      	mov	r3, r0
 8027efa:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8027efc:	68fb      	ldr	r3, [r7, #12]
 8027efe:	4618      	mov	r0, r3
 8027f00:	f000 faa9 	bl	8028456 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8027f04:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8027f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027f08:	6a39      	ldr	r1, [r7, #32]
 8027f0a:	4620      	mov	r0, r4
 8027f0c:	f000 fa84 	bl	8028418 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8027f10:	62f8      	str	r0, [r7, #44]	; 0x2c
 8027f12:	e026      	b.n	8027f62 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8027f14:	f107 0308 	add.w	r3, r7, #8
 8027f18:	4618      	mov	r0, r3
 8027f1a:	f000 fa91 	bl	8028440 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8027f1e:	4603      	mov	r3, r0
 8027f20:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8027f22:	68fb      	ldr	r3, [r7, #12]
 8027f24:	4618      	mov	r0, r3
 8027f26:	f000 fa96 	bl	8028456 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8027f2a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8027f2c:	69ba      	ldr	r2, [r7, #24]
 8027f2e:	4621      	mov	r1, r4
 8027f30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027f32:	f000 fa9b 	bl	802846c <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8027f36:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8027f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027f3a:	3308      	adds	r3, #8
 8027f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8027f3e:	f107 0308 	add.w	r3, r7, #8
 8027f42:	4618      	mov	r0, r3
 8027f44:	f000 fa7c 	bl	8028440 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8027f48:	4603      	mov	r3, r0
 8027f4a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8027f4c:	68fb      	ldr	r3, [r7, #12]
 8027f4e:	4618      	mov	r0, r3
 8027f50:	f000 fa81 	bl	8028456 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8027f54:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8027f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027f58:	6a39      	ldr	r1, [r7, #32]
 8027f5a:	4620      	mov	r0, r4
 8027f5c:	f000 fa86 	bl	802846c <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8027f60:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8027f62:	f7ff ff5b 	bl	8027e1c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 8027f66:	4603      	mov	r3, r0
 8027f68:	f083 0301 	eor.w	r3, r3, #1
 8027f6c:	b2db      	uxtb	r3, r3
 8027f6e:	2b00      	cmp	r3, #0
 8027f70:	d009      	beq.n	8027f86 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8027f72:	68fb      	ldr	r3, [r7, #12]
 8027f74:	4618      	mov	r0, r3
 8027f76:	f000 fa6e 	bl	8028456 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8027f7a:	4603      	mov	r3, r0
 8027f7c:	461a      	mov	r2, r3
 8027f7e:	6a39      	ldr	r1, [r7, #32]
 8027f80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027f82:	f000 fa8c 	bl	802849e <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8027f86:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8027f88:	68fb      	ldr	r3, [r7, #12]
 8027f8a:	689a      	ldr	r2, [r3, #8]
 8027f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027f8e:	1ad3      	subs	r3, r2, r3
 8027f90:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8027f92:	461a      	mov	r2, r3
 8027f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8027f96:	f7ff ff0a 	bl	8027dae <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8027f9a:	68fb      	ldr	r3, [r7, #12]
 8027f9c:	69ba      	ldr	r2, [r7, #24]
 8027f9e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8027fa0:	68fb      	ldr	r3, [r7, #12]
 8027fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027fa4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8027fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027fa8:	00db      	lsls	r3, r3, #3
 8027faa:	69ba      	ldr	r2, [r7, #24]
 8027fac:	441a      	add	r2, r3
 8027fae:	68fb      	ldr	r3, [r7, #12]
 8027fb0:	609a      	str	r2, [r3, #8]
    }
 8027fb2:	bf00      	nop
 8027fb4:	3730      	adds	r7, #48	; 0x30
 8027fb6:	46bd      	mov	sp, r7
 8027fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8027fba:	bf00      	nop
 8027fbc:	0802faf8 	.word	0x0802faf8

08027fc0 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8027fc0:	b590      	push	{r4, r7, lr}
 8027fc2:	b085      	sub	sp, #20
 8027fc4:	af00      	add	r7, sp, #0
 8027fc6:	6078      	str	r0, [r7, #4]
 8027fc8:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8027fca:	687b      	ldr	r3, [r7, #4]
 8027fcc:	685a      	ldr	r2, [r3, #4]
 8027fce:	683b      	ldr	r3, [r7, #0]
 8027fd0:	1ad3      	subs	r3, r2, r3
 8027fd2:	10db      	asrs	r3, r3, #3
 8027fd4:	60fb      	str	r3, [r7, #12]
 8027fd6:	68fb      	ldr	r3, [r7, #12]
 8027fd8:	2b00      	cmp	r3, #0
 8027fda:	d00e      	beq.n	8027ffa <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8027fdc:	687b      	ldr	r3, [r7, #4]
 8027fde:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8027fe0:	687b      	ldr	r3, [r7, #4]
 8027fe2:	4618      	mov	r0, r3
 8027fe4:	f000 fa37 	bl	8028456 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8027fe8:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8027fea:	461a      	mov	r2, r3
 8027fec:	4621      	mov	r1, r4
 8027fee:	6838      	ldr	r0, [r7, #0]
 8027ff0:	f000 fa55 	bl	802849e <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8027ff4:	687b      	ldr	r3, [r7, #4]
 8027ff6:	683a      	ldr	r2, [r7, #0]
 8027ff8:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8027ffa:	bf00      	nop
 8027ffc:	3714      	adds	r7, #20
 8027ffe:	46bd      	mov	sp, r7
 8028000:	bd90      	pop	{r4, r7, pc}

08028002 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8028002:	b590      	push	{r4, r7, lr}
 8028004:	b085      	sub	sp, #20
 8028006:	af00      	add	r7, sp, #0
 8028008:	6078      	str	r0, [r7, #4]
 802800a:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 802800c:	687b      	ldr	r3, [r7, #4]
 802800e:	685a      	ldr	r2, [r3, #4]
 8028010:	683b      	ldr	r3, [r7, #0]
 8028012:	1ad3      	subs	r3, r2, r3
 8028014:	109b      	asrs	r3, r3, #2
 8028016:	60fb      	str	r3, [r7, #12]
 8028018:	68fb      	ldr	r3, [r7, #12]
 802801a:	2b00      	cmp	r3, #0
 802801c:	d00e      	beq.n	802803c <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 802801e:	687b      	ldr	r3, [r7, #4]
 8028020:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8028022:	687b      	ldr	r3, [r7, #4]
 8028024:	4618      	mov	r0, r3
 8028026:	f000 f8f7 	bl	8028218 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 802802a:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 802802c:	461a      	mov	r2, r3
 802802e:	4621      	mov	r1, r4
 8028030:	6838      	ldr	r0, [r7, #0]
 8028032:	f000 f915 	bl	8028260 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8028036:	687b      	ldr	r3, [r7, #4]
 8028038:	683a      	ldr	r2, [r7, #0]
 802803a:	605a      	str	r2, [r3, #4]
      }
 802803c:	bf00      	nop
 802803e:	3714      	adds	r7, #20
 8028040:	46bd      	mov	sp, r7
 8028042:	bd90      	pop	{r4, r7, pc}

08028044 <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8028044:	b480      	push	{r7}
 8028046:	b083      	sub	sp, #12
 8028048:	af00      	add	r7, sp, #0
 802804a:	6078      	str	r0, [r7, #4]
 802804c:	687b      	ldr	r3, [r7, #4]
 802804e:	4618      	mov	r0, r3
 8028050:	370c      	adds	r7, #12
 8028052:	46bd      	mov	sp, r7
 8028054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028058:	4770      	bx	lr

0802805a <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802805a:	b580      	push	{r7, lr}
 802805c:	b084      	sub	sp, #16
 802805e:	af00      	add	r7, sp, #0
 8028060:	60f8      	str	r0, [r7, #12]
 8028062:	60b9      	str	r1, [r7, #8]
 8028064:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8028066:	687a      	ldr	r2, [r7, #4]
 8028068:	68b9      	ldr	r1, [r7, #8]
 802806a:	68f8      	ldr	r0, [r7, #12]
 802806c:	f000 fa25 	bl	80284ba <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>
 8028070:	bf00      	nop
 8028072:	3710      	adds	r7, #16
 8028074:	46bd      	mov	sp, r7
 8028076:	bd80      	pop	{r7, pc}

08028078 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8028078:	b480      	push	{r7}
 802807a:	b083      	sub	sp, #12
 802807c:	af00      	add	r7, sp, #0
 802807e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8028080:	687b      	ldr	r3, [r7, #4]
 8028082:	4618      	mov	r0, r3
 8028084:	370c      	adds	r7, #12
 8028086:	46bd      	mov	sp, r7
 8028088:	f85d 7b04 	ldr.w	r7, [sp], #4
 802808c:	4770      	bx	lr

0802808e <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 802808e:	b590      	push	{r4, r7, lr}
 8028090:	b085      	sub	sp, #20
 8028092:	af00      	add	r7, sp, #0
 8028094:	60f8      	str	r0, [r7, #12]
 8028096:	60b9      	str	r1, [r7, #8]
 8028098:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 802809a:	6878      	ldr	r0, [r7, #4]
 802809c:	f7ff ffec 	bl	8028078 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 80280a0:	4603      	mov	r3, r0
 80280a2:	681c      	ldr	r4, [r3, #0]
 80280a4:	68bb      	ldr	r3, [r7, #8]
 80280a6:	4619      	mov	r1, r3
 80280a8:	2004      	movs	r0, #4
 80280aa:	f7d9 f81f 	bl	80010ec <_ZnwjPv>
 80280ae:	4603      	mov	r3, r0
 80280b0:	601c      	str	r4, [r3, #0]
 80280b2:	bf00      	nop
 80280b4:	3714      	adds	r7, #20
 80280b6:	46bd      	mov	sp, r7
 80280b8:	bd90      	pop	{r4, r7, pc}

080280ba <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80280ba:	b480      	push	{r7}
 80280bc:	b083      	sub	sp, #12
 80280be:	af00      	add	r7, sp, #0
 80280c0:	6078      	str	r0, [r7, #4]
 80280c2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80280c4:	683b      	ldr	r3, [r7, #0]
 80280c6:	681a      	ldr	r2, [r3, #0]
 80280c8:	687b      	ldr	r3, [r7, #4]
 80280ca:	601a      	str	r2, [r3, #0]
 80280cc:	687b      	ldr	r3, [r7, #4]
 80280ce:	4618      	mov	r0, r3
 80280d0:	370c      	adds	r7, #12
 80280d2:	46bd      	mov	sp, r7
 80280d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80280d8:	4770      	bx	lr

080280da <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80280da:	b590      	push	{r4, r7, lr}
 80280dc:	b087      	sub	sp, #28
 80280de:	af00      	add	r7, sp, #0
 80280e0:	60f8      	str	r0, [r7, #12]
 80280e2:	60b9      	str	r1, [r7, #8]
 80280e4:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80280e6:	68f8      	ldr	r0, [r7, #12]
 80280e8:	f000 f9f7 	bl	80284da <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 80280ec:	4604      	mov	r4, r0
 80280ee:	68f8      	ldr	r0, [r7, #12]
 80280f0:	f7ff fccf 	bl	8027a92 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80280f4:	4603      	mov	r3, r0
 80280f6:	1ae2      	subs	r2, r4, r3
 80280f8:	68bb      	ldr	r3, [r7, #8]
 80280fa:	429a      	cmp	r2, r3
 80280fc:	bf34      	ite	cc
 80280fe:	2301      	movcc	r3, #1
 8028100:	2300      	movcs	r3, #0
 8028102:	b2db      	uxtb	r3, r3
 8028104:	2b00      	cmp	r3, #0
 8028106:	d002      	beq.n	802810e <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8028108:	6878      	ldr	r0, [r7, #4]
 802810a:	f000 fed2 	bl	8028eb2 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 802810e:	68f8      	ldr	r0, [r7, #12]
 8028110:	f7ff fcbf 	bl	8027a92 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8028114:	4604      	mov	r4, r0
 8028116:	68f8      	ldr	r0, [r7, #12]
 8028118:	f7ff fcbb 	bl	8027a92 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 802811c:	4603      	mov	r3, r0
 802811e:	613b      	str	r3, [r7, #16]
 8028120:	f107 0208 	add.w	r2, r7, #8
 8028124:	f107 0310 	add.w	r3, r7, #16
 8028128:	4611      	mov	r1, r2
 802812a:	4618      	mov	r0, r3
 802812c:	f7de fc50 	bl	80069d0 <_ZSt3maxIjERKT_S2_S2_>
 8028130:	4603      	mov	r3, r0
 8028132:	681b      	ldr	r3, [r3, #0]
 8028134:	4423      	add	r3, r4
 8028136:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8028138:	68f8      	ldr	r0, [r7, #12]
 802813a:	f7ff fcaa 	bl	8027a92 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 802813e:	4602      	mov	r2, r0
 8028140:	697b      	ldr	r3, [r7, #20]
 8028142:	4293      	cmp	r3, r2
 8028144:	d306      	bcc.n	8028154 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8028146:	68f8      	ldr	r0, [r7, #12]
 8028148:	f000 f9c7 	bl	80284da <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 802814c:	4602      	mov	r2, r0
 802814e:	697b      	ldr	r3, [r7, #20]
 8028150:	4293      	cmp	r3, r2
 8028152:	d904      	bls.n	802815e <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x84>
 8028154:	68f8      	ldr	r0, [r7, #12]
 8028156:	f000 f9c0 	bl	80284da <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 802815a:	4603      	mov	r3, r0
 802815c:	e000      	b.n	8028160 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x86>
 802815e:	697b      	ldr	r3, [r7, #20]
      }
 8028160:	4618      	mov	r0, r3
 8028162:	371c      	adds	r7, #28
 8028164:	46bd      	mov	sp, r7
 8028166:	bd90      	pop	{r4, r7, pc}

08028168 <_ZNSt6vectorIPvSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8028168:	b580      	push	{r7, lr}
 802816a:	b084      	sub	sp, #16
 802816c:	af00      	add	r7, sp, #0
 802816e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8028170:	687a      	ldr	r2, [r7, #4]
 8028172:	f107 030c 	add.w	r3, r7, #12
 8028176:	4611      	mov	r1, r2
 8028178:	4618      	mov	r0, r3
 802817a:	f7ff ff9e 	bl	80280ba <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 802817e:	68fb      	ldr	r3, [r7, #12]
 8028180:	4618      	mov	r0, r3
 8028182:	3710      	adds	r7, #16
 8028184:	46bd      	mov	sp, r7
 8028186:	bd80      	pop	{r7, pc}

08028188 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8028188:	b590      	push	{r4, r7, lr}
 802818a:	b083      	sub	sp, #12
 802818c:	af00      	add	r7, sp, #0
 802818e:	6078      	str	r0, [r7, #4]
 8028190:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8028192:	6878      	ldr	r0, [r7, #4]
 8028194:	f000 f835 	bl	8028202 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8028198:	4603      	mov	r3, r0
 802819a:	681c      	ldr	r4, [r3, #0]
 802819c:	6838      	ldr	r0, [r7, #0]
 802819e:	f000 f830 	bl	8028202 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 80281a2:	4603      	mov	r3, r0
 80281a4:	681b      	ldr	r3, [r3, #0]
 80281a6:	1ae3      	subs	r3, r4, r3
 80281a8:	109b      	asrs	r3, r3, #2
 80281aa:	4618      	mov	r0, r3
 80281ac:	370c      	adds	r7, #12
 80281ae:	46bd      	mov	sp, r7
 80281b0:	bd90      	pop	{r4, r7, pc}

080281b2 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80281b2:	b580      	push	{r7, lr}
 80281b4:	b082      	sub	sp, #8
 80281b6:	af00      	add	r7, sp, #0
 80281b8:	6078      	str	r0, [r7, #4]
 80281ba:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80281bc:	683b      	ldr	r3, [r7, #0]
 80281be:	2b00      	cmp	r3, #0
 80281c0:	d006      	beq.n	80281d0 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x1e>
 80281c2:	687b      	ldr	r3, [r7, #4]
 80281c4:	6839      	ldr	r1, [r7, #0]
 80281c6:	4618      	mov	r0, r3
 80281c8:	f000 f998 	bl	80284fc <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>
 80281cc:	4603      	mov	r3, r0
 80281ce:	e000      	b.n	80281d2 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x20>
 80281d0:	2300      	movs	r3, #0
      }
 80281d2:	4618      	mov	r0, r3
 80281d4:	3708      	adds	r7, #8
 80281d6:	46bd      	mov	sp, r7
 80281d8:	bd80      	pop	{r7, pc}

080281da <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80281da:	b590      	push	{r4, r7, lr}
 80281dc:	b087      	sub	sp, #28
 80281de:	af02      	add	r7, sp, #8
 80281e0:	60f8      	str	r0, [r7, #12]
 80281e2:	60b9      	str	r1, [r7, #8]
 80281e4:	607a      	str	r2, [r7, #4]
 80281e6:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80281e8:	f88d 4000 	strb.w	r4, [sp]
 80281ec:	683b      	ldr	r3, [r7, #0]
 80281ee:	687a      	ldr	r2, [r7, #4]
 80281f0:	68b9      	ldr	r1, [r7, #8]
 80281f2:	68f8      	ldr	r0, [r7, #12]
 80281f4:	f000 f991 	bl	802851a <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 80281f8:	4603      	mov	r3, r0
      }
 80281fa:	4618      	mov	r0, r3
 80281fc:	3714      	adds	r7, #20
 80281fe:	46bd      	mov	sp, r7
 8028200:	bd90      	pop	{r4, r7, pc}

08028202 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8028202:	b480      	push	{r7}
 8028204:	b083      	sub	sp, #12
 8028206:	af00      	add	r7, sp, #0
 8028208:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 802820a:	687b      	ldr	r3, [r7, #4]
 802820c:	4618      	mov	r0, r3
 802820e:	370c      	adds	r7, #12
 8028210:	46bd      	mov	sp, r7
 8028212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028216:	4770      	bx	lr

08028218 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8028218:	b480      	push	{r7}
 802821a:	b083      	sub	sp, #12
 802821c:	af00      	add	r7, sp, #0
 802821e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8028220:	687b      	ldr	r3, [r7, #4]
 8028222:	4618      	mov	r0, r3
 8028224:	370c      	adds	r7, #12
 8028226:	46bd      	mov	sp, r7
 8028228:	f85d 7b04 	ldr.w	r7, [sp], #4
 802822c:	4770      	bx	lr

0802822e <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 802822e:	b590      	push	{r4, r7, lr}
 8028230:	b085      	sub	sp, #20
 8028232:	af00      	add	r7, sp, #0
 8028234:	60f8      	str	r0, [r7, #12]
 8028236:	60b9      	str	r1, [r7, #8]
 8028238:	607a      	str	r2, [r7, #4]
 802823a:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 802823c:	68f8      	ldr	r0, [r7, #12]
 802823e:	f000 f97e 	bl	802853e <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 8028242:	4604      	mov	r4, r0
 8028244:	68b8      	ldr	r0, [r7, #8]
 8028246:	f000 f97a 	bl	802853e <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 802824a:	4601      	mov	r1, r0
 802824c:	683b      	ldr	r3, [r7, #0]
 802824e:	687a      	ldr	r2, [r7, #4]
 8028250:	4620      	mov	r0, r4
 8028252:	f000 f983 	bl	802855c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8028256:	4603      	mov	r3, r0
    }
 8028258:	4618      	mov	r0, r3
 802825a:	3714      	adds	r7, #20
 802825c:	46bd      	mov	sp, r7
 802825e:	bd90      	pop	{r4, r7, pc}

08028260 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8028260:	b580      	push	{r7, lr}
 8028262:	b084      	sub	sp, #16
 8028264:	af00      	add	r7, sp, #0
 8028266:	60f8      	str	r0, [r7, #12]
 8028268:	60b9      	str	r1, [r7, #8]
 802826a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 802826c:	68b9      	ldr	r1, [r7, #8]
 802826e:	68f8      	ldr	r0, [r7, #12]
 8028270:	f000 f985 	bl	802857e <_ZSt8_DestroyIPPvEvT_S2_>
    }
 8028274:	bf00      	nop
 8028276:	3710      	adds	r7, #16
 8028278:	46bd      	mov	sp, r7
 802827a:	bd80      	pop	{r7, pc}

0802827c <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 802827c:	b480      	push	{r7}
 802827e:	b083      	sub	sp, #12
 8028280:	af00      	add	r7, sp, #0
 8028282:	6078      	str	r0, [r7, #4]
 8028284:	687b      	ldr	r3, [r7, #4]
 8028286:	4618      	mov	r0, r3
 8028288:	370c      	adds	r7, #12
 802828a:	46bd      	mov	sp, r7
 802828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028290:	4770      	bx	lr

08028292 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8028292:	b580      	push	{r7, lr}
 8028294:	b084      	sub	sp, #16
 8028296:	af00      	add	r7, sp, #0
 8028298:	60f8      	str	r0, [r7, #12]
 802829a:	60b9      	str	r1, [r7, #8]
 802829c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 802829e:	687a      	ldr	r2, [r7, #4]
 80282a0:	68b9      	ldr	r1, [r7, #8]
 80282a2:	68f8      	ldr	r0, [r7, #12]
 80282a4:	f000 f978 	bl	8028598 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>
 80282a8:	bf00      	nop
 80282aa:	3710      	adds	r7, #16
 80282ac:	46bd      	mov	sp, r7
 80282ae:	bd80      	pop	{r7, pc}

080282b0 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80282b0:	b480      	push	{r7}
 80282b2:	b083      	sub	sp, #12
 80282b4:	af00      	add	r7, sp, #0
 80282b6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80282b8:	687b      	ldr	r3, [r7, #4]
 80282ba:	4618      	mov	r0, r3
 80282bc:	370c      	adds	r7, #12
 80282be:	46bd      	mov	sp, r7
 80282c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282c4:	4770      	bx	lr

080282c6 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80282c6:	b590      	push	{r4, r7, lr}
 80282c8:	b085      	sub	sp, #20
 80282ca:	af00      	add	r7, sp, #0
 80282cc:	60f8      	str	r0, [r7, #12]
 80282ce:	60b9      	str	r1, [r7, #8]
 80282d0:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80282d2:	6878      	ldr	r0, [r7, #4]
 80282d4:	f7ff ffec 	bl	80282b0 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 80282d8:	4604      	mov	r4, r0
 80282da:	68bb      	ldr	r3, [r7, #8]
 80282dc:	4619      	mov	r1, r3
 80282de:	2008      	movs	r0, #8
 80282e0:	f7d8 ff04 	bl	80010ec <_ZnwjPv>
 80282e4:	4603      	mov	r3, r0
 80282e6:	4622      	mov	r2, r4
 80282e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80282ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80282f0:	bf00      	nop
 80282f2:	3714      	adds	r7, #20
 80282f4:	46bd      	mov	sp, r7
 80282f6:	bd90      	pop	{r4, r7, pc}

080282f8 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80282f8:	b480      	push	{r7}
 80282fa:	b083      	sub	sp, #12
 80282fc:	af00      	add	r7, sp, #0
 80282fe:	6078      	str	r0, [r7, #4]
 8028300:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8028302:	683b      	ldr	r3, [r7, #0]
 8028304:	681a      	ldr	r2, [r3, #0]
 8028306:	687b      	ldr	r3, [r7, #4]
 8028308:	601a      	str	r2, [r3, #0]
 802830a:	687b      	ldr	r3, [r7, #4]
 802830c:	4618      	mov	r0, r3
 802830e:	370c      	adds	r7, #12
 8028310:	46bd      	mov	sp, r7
 8028312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028316:	4770      	bx	lr

08028318 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8028318:	b590      	push	{r4, r7, lr}
 802831a:	b087      	sub	sp, #28
 802831c:	af00      	add	r7, sp, #0
 802831e:	60f8      	str	r0, [r7, #12]
 8028320:	60b9      	str	r1, [r7, #8]
 8028322:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8028324:	68f8      	ldr	r0, [r7, #12]
 8028326:	f000 f947 	bl	80285b8 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 802832a:	4604      	mov	r4, r0
 802832c:	68f8      	ldr	r0, [r7, #12]
 802832e:	f7ff fb82 	bl	8027a36 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8028332:	4603      	mov	r3, r0
 8028334:	1ae2      	subs	r2, r4, r3
 8028336:	68bb      	ldr	r3, [r7, #8]
 8028338:	429a      	cmp	r2, r3
 802833a:	bf34      	ite	cc
 802833c:	2301      	movcc	r3, #1
 802833e:	2300      	movcs	r3, #0
 8028340:	b2db      	uxtb	r3, r3
 8028342:	2b00      	cmp	r3, #0
 8028344:	d002      	beq.n	802834c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8028346:	6878      	ldr	r0, [r7, #4]
 8028348:	f000 fdb3 	bl	8028eb2 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 802834c:	68f8      	ldr	r0, [r7, #12]
 802834e:	f7ff fb72 	bl	8027a36 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8028352:	4604      	mov	r4, r0
 8028354:	68f8      	ldr	r0, [r7, #12]
 8028356:	f7ff fb6e 	bl	8027a36 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 802835a:	4603      	mov	r3, r0
 802835c:	613b      	str	r3, [r7, #16]
 802835e:	f107 0208 	add.w	r2, r7, #8
 8028362:	f107 0310 	add.w	r3, r7, #16
 8028366:	4611      	mov	r1, r2
 8028368:	4618      	mov	r0, r3
 802836a:	f7de fb31 	bl	80069d0 <_ZSt3maxIjERKT_S2_S2_>
 802836e:	4603      	mov	r3, r0
 8028370:	681b      	ldr	r3, [r3, #0]
 8028372:	4423      	add	r3, r4
 8028374:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8028376:	68f8      	ldr	r0, [r7, #12]
 8028378:	f7ff fb5d 	bl	8027a36 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 802837c:	4602      	mov	r2, r0
 802837e:	697b      	ldr	r3, [r7, #20]
 8028380:	4293      	cmp	r3, r2
 8028382:	d306      	bcc.n	8028392 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x7a>
 8028384:	68f8      	ldr	r0, [r7, #12]
 8028386:	f000 f917 	bl	80285b8 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 802838a:	4602      	mov	r2, r0
 802838c:	697b      	ldr	r3, [r7, #20]
 802838e:	4293      	cmp	r3, r2
 8028390:	d904      	bls.n	802839c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x84>
 8028392:	68f8      	ldr	r0, [r7, #12]
 8028394:	f000 f910 	bl	80285b8 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8028398:	4603      	mov	r3, r0
 802839a:	e000      	b.n	802839e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x86>
 802839c:	697b      	ldr	r3, [r7, #20]
      }
 802839e:	4618      	mov	r0, r3
 80283a0:	371c      	adds	r7, #28
 80283a2:	46bd      	mov	sp, r7
 80283a4:	bd90      	pop	{r4, r7, pc}

080283a6 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80283a6:	b580      	push	{r7, lr}
 80283a8:	b084      	sub	sp, #16
 80283aa:	af00      	add	r7, sp, #0
 80283ac:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80283ae:	687a      	ldr	r2, [r7, #4]
 80283b0:	f107 030c 	add.w	r3, r7, #12
 80283b4:	4611      	mov	r1, r2
 80283b6:	4618      	mov	r0, r3
 80283b8:	f7ff ff9e 	bl	80282f8 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80283bc:	68fb      	ldr	r3, [r7, #12]
 80283be:	4618      	mov	r0, r3
 80283c0:	3710      	adds	r7, #16
 80283c2:	46bd      	mov	sp, r7
 80283c4:	bd80      	pop	{r7, pc}

080283c6 <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80283c6:	b590      	push	{r4, r7, lr}
 80283c8:	b083      	sub	sp, #12
 80283ca:	af00      	add	r7, sp, #0
 80283cc:	6078      	str	r0, [r7, #4]
 80283ce:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80283d0:	6878      	ldr	r0, [r7, #4]
 80283d2:	f000 f835 	bl	8028440 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 80283d6:	4603      	mov	r3, r0
 80283d8:	681c      	ldr	r4, [r3, #0]
 80283da:	6838      	ldr	r0, [r7, #0]
 80283dc:	f000 f830 	bl	8028440 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 80283e0:	4603      	mov	r3, r0
 80283e2:	681b      	ldr	r3, [r3, #0]
 80283e4:	1ae3      	subs	r3, r4, r3
 80283e6:	10db      	asrs	r3, r3, #3
 80283e8:	4618      	mov	r0, r3
 80283ea:	370c      	adds	r7, #12
 80283ec:	46bd      	mov	sp, r7
 80283ee:	bd90      	pop	{r4, r7, pc}

080283f0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80283f0:	b580      	push	{r7, lr}
 80283f2:	b082      	sub	sp, #8
 80283f4:	af00      	add	r7, sp, #0
 80283f6:	6078      	str	r0, [r7, #4]
 80283f8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80283fa:	683b      	ldr	r3, [r7, #0]
 80283fc:	2b00      	cmp	r3, #0
 80283fe:	d006      	beq.n	802840e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x1e>
 8028400:	687b      	ldr	r3, [r7, #4]
 8028402:	6839      	ldr	r1, [r7, #0]
 8028404:	4618      	mov	r0, r3
 8028406:	f000 f8e8 	bl	80285da <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>
 802840a:	4603      	mov	r3, r0
 802840c:	e000      	b.n	8028410 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x20>
 802840e:	2300      	movs	r3, #0
      }
 8028410:	4618      	mov	r0, r3
 8028412:	3708      	adds	r7, #8
 8028414:	46bd      	mov	sp, r7
 8028416:	bd80      	pop	{r7, pc}

08028418 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8028418:	b590      	push	{r4, r7, lr}
 802841a:	b087      	sub	sp, #28
 802841c:	af02      	add	r7, sp, #8
 802841e:	60f8      	str	r0, [r7, #12]
 8028420:	60b9      	str	r1, [r7, #8]
 8028422:	607a      	str	r2, [r7, #4]
 8028424:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8028426:	f88d 4000 	strb.w	r4, [sp]
 802842a:	683b      	ldr	r3, [r7, #0]
 802842c:	687a      	ldr	r2, [r7, #4]
 802842e:	68b9      	ldr	r1, [r7, #8]
 8028430:	68f8      	ldr	r0, [r7, #12]
 8028432:	f000 f8e1 	bl	80285f8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8028436:	4603      	mov	r3, r0
      }
 8028438:	4618      	mov	r0, r3
 802843a:	3714      	adds	r7, #20
 802843c:	46bd      	mov	sp, r7
 802843e:	bd90      	pop	{r4, r7, pc}

08028440 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8028440:	b480      	push	{r7}
 8028442:	b083      	sub	sp, #12
 8028444:	af00      	add	r7, sp, #0
 8028446:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8028448:	687b      	ldr	r3, [r7, #4]
 802844a:	4618      	mov	r0, r3
 802844c:	370c      	adds	r7, #12
 802844e:	46bd      	mov	sp, r7
 8028450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028454:	4770      	bx	lr

08028456 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8028456:	b480      	push	{r7}
 8028458:	b083      	sub	sp, #12
 802845a:	af00      	add	r7, sp, #0
 802845c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802845e:	687b      	ldr	r3, [r7, #4]
 8028460:	4618      	mov	r0, r3
 8028462:	370c      	adds	r7, #12
 8028464:	46bd      	mov	sp, r7
 8028466:	f85d 7b04 	ldr.w	r7, [sp], #4
 802846a:	4770      	bx	lr

0802846c <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 802846c:	b590      	push	{r4, r7, lr}
 802846e:	b085      	sub	sp, #20
 8028470:	af00      	add	r7, sp, #0
 8028472:	60f8      	str	r0, [r7, #12]
 8028474:	60b9      	str	r1, [r7, #8]
 8028476:	607a      	str	r2, [r7, #4]
 8028478:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 802847a:	68f8      	ldr	r0, [r7, #12]
 802847c:	f000 f8ce 	bl	802861c <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 8028480:	4604      	mov	r4, r0
 8028482:	68b8      	ldr	r0, [r7, #8]
 8028484:	f000 f8ca 	bl	802861c <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 8028488:	4601      	mov	r1, r0
 802848a:	683b      	ldr	r3, [r7, #0]
 802848c:	687a      	ldr	r2, [r7, #4]
 802848e:	4620      	mov	r0, r4
 8028490:	f000 f8d3 	bl	802863a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8028494:	4603      	mov	r3, r0
    }
 8028496:	4618      	mov	r0, r3
 8028498:	3714      	adds	r7, #20
 802849a:	46bd      	mov	sp, r7
 802849c:	bd90      	pop	{r4, r7, pc}

0802849e <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 802849e:	b580      	push	{r7, lr}
 80284a0:	b084      	sub	sp, #16
 80284a2:	af00      	add	r7, sp, #0
 80284a4:	60f8      	str	r0, [r7, #12]
 80284a6:	60b9      	str	r1, [r7, #8]
 80284a8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80284aa:	68b9      	ldr	r1, [r7, #8]
 80284ac:	68f8      	ldr	r0, [r7, #12]
 80284ae:	f000 f8d5 	bl	802865c <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>
    }
 80284b2:	bf00      	nop
 80284b4:	3710      	adds	r7, #16
 80284b6:	46bd      	mov	sp, r7
 80284b8:	bd80      	pop	{r7, pc}

080284ba <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80284ba:	b580      	push	{r7, lr}
 80284bc:	b084      	sub	sp, #16
 80284be:	af00      	add	r7, sp, #0
 80284c0:	60f8      	str	r0, [r7, #12]
 80284c2:	60b9      	str	r1, [r7, #8]
 80284c4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80284c6:	687b      	ldr	r3, [r7, #4]
 80284c8:	009b      	lsls	r3, r3, #2
 80284ca:	4619      	mov	r1, r3
 80284cc:	68b8      	ldr	r0, [r7, #8]
 80284ce:	f000 fcd3 	bl	8028e78 <_ZdlPvj>
      }
 80284d2:	bf00      	nop
 80284d4:	3710      	adds	r7, #16
 80284d6:	46bd      	mov	sp, r7
 80284d8:	bd80      	pop	{r7, pc}

080284da <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80284da:	b580      	push	{r7, lr}
 80284dc:	b082      	sub	sp, #8
 80284de:	af00      	add	r7, sp, #0
 80284e0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80284e2:	687b      	ldr	r3, [r7, #4]
 80284e4:	4618      	mov	r0, r3
 80284e6:	f000 f8e0 	bl	80286aa <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80284ea:	4603      	mov	r3, r0
 80284ec:	4618      	mov	r0, r3
 80284ee:	f000 f8c2 	bl	8028676 <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>
 80284f2:	4603      	mov	r3, r0
 80284f4:	4618      	mov	r0, r3
 80284f6:	3708      	adds	r7, #8
 80284f8:	46bd      	mov	sp, r7
 80284fa:	bd80      	pop	{r7, pc}

080284fc <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80284fc:	b580      	push	{r7, lr}
 80284fe:	b082      	sub	sp, #8
 8028500:	af00      	add	r7, sp, #0
 8028502:	6078      	str	r0, [r7, #4]
 8028504:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8028506:	2200      	movs	r2, #0
 8028508:	6839      	ldr	r1, [r7, #0]
 802850a:	6878      	ldr	r0, [r7, #4]
 802850c:	f000 f8d8 	bl	80286c0 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>
 8028510:	4603      	mov	r3, r0
 8028512:	4618      	mov	r0, r3
 8028514:	3708      	adds	r7, #8
 8028516:	46bd      	mov	sp, r7
 8028518:	bd80      	pop	{r7, pc}

0802851a <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 802851a:	b580      	push	{r7, lr}
 802851c:	b084      	sub	sp, #16
 802851e:	af00      	add	r7, sp, #0
 8028520:	60f8      	str	r0, [r7, #12]
 8028522:	60b9      	str	r1, [r7, #8]
 8028524:	607a      	str	r2, [r7, #4]
 8028526:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8028528:	683b      	ldr	r3, [r7, #0]
 802852a:	687a      	ldr	r2, [r7, #4]
 802852c:	68b9      	ldr	r1, [r7, #8]
 802852e:	68f8      	ldr	r0, [r7, #12]
 8028530:	f000 f8e4 	bl	80286fc <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8028534:	4603      	mov	r3, r0
      }
 8028536:	4618      	mov	r0, r3
 8028538:	3710      	adds	r7, #16
 802853a:	46bd      	mov	sp, r7
 802853c:	bd80      	pop	{r7, pc}

0802853e <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 802853e:	b580      	push	{r7, lr}
 8028540:	b084      	sub	sp, #16
 8028542:	af00      	add	r7, sp, #0
 8028544:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8028546:	f107 030c 	add.w	r3, r7, #12
 802854a:	6879      	ldr	r1, [r7, #4]
 802854c:	4618      	mov	r0, r3
 802854e:	f000 f8f2 	bl	8028736 <_ZNSt13move_iteratorIPPvEC1ES1_>
 8028552:	68fb      	ldr	r3, [r7, #12]
 8028554:	4618      	mov	r0, r3
 8028556:	3710      	adds	r7, #16
 8028558:	46bd      	mov	sp, r7
 802855a:	bd80      	pop	{r7, pc}

0802855c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 802855c:	b580      	push	{r7, lr}
 802855e:	b084      	sub	sp, #16
 8028560:	af00      	add	r7, sp, #0
 8028562:	60f8      	str	r0, [r7, #12]
 8028564:	60b9      	str	r1, [r7, #8]
 8028566:	607a      	str	r2, [r7, #4]
 8028568:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 802856a:	687a      	ldr	r2, [r7, #4]
 802856c:	68b9      	ldr	r1, [r7, #8]
 802856e:	68f8      	ldr	r0, [r7, #12]
 8028570:	f000 f8f3 	bl	802875a <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 8028574:	4603      	mov	r3, r0
 8028576:	4618      	mov	r0, r3
 8028578:	3710      	adds	r7, #16
 802857a:	46bd      	mov	sp, r7
 802857c:	bd80      	pop	{r7, pc}

0802857e <_ZSt8_DestroyIPPvEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 802857e:	b580      	push	{r7, lr}
 8028580:	b082      	sub	sp, #8
 8028582:	af00      	add	r7, sp, #0
 8028584:	6078      	str	r0, [r7, #4]
 8028586:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8028588:	6839      	ldr	r1, [r7, #0]
 802858a:	6878      	ldr	r0, [r7, #4]
 802858c:	f000 f8f7 	bl	802877e <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>
    }
 8028590:	bf00      	nop
 8028592:	3708      	adds	r7, #8
 8028594:	46bd      	mov	sp, r7
 8028596:	bd80      	pop	{r7, pc}

08028598 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8028598:	b580      	push	{r7, lr}
 802859a:	b084      	sub	sp, #16
 802859c:	af00      	add	r7, sp, #0
 802859e:	60f8      	str	r0, [r7, #12]
 80285a0:	60b9      	str	r1, [r7, #8]
 80285a2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80285a4:	687b      	ldr	r3, [r7, #4]
 80285a6:	00db      	lsls	r3, r3, #3
 80285a8:	4619      	mov	r1, r3
 80285aa:	68b8      	ldr	r0, [r7, #8]
 80285ac:	f000 fc64 	bl	8028e78 <_ZdlPvj>
      }
 80285b0:	bf00      	nop
 80285b2:	3710      	adds	r7, #16
 80285b4:	46bd      	mov	sp, r7
 80285b6:	bd80      	pop	{r7, pc}

080285b8 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80285b8:	b580      	push	{r7, lr}
 80285ba:	b082      	sub	sp, #8
 80285bc:	af00      	add	r7, sp, #0
 80285be:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80285c0:	687b      	ldr	r3, [r7, #4]
 80285c2:	4618      	mov	r0, r3
 80285c4:	f000 f900 	bl	80287c8 <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 80285c8:	4603      	mov	r3, r0
 80285ca:	4618      	mov	r0, r3
 80285cc:	f000 f8e2 	bl	8028794 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>
 80285d0:	4603      	mov	r3, r0
 80285d2:	4618      	mov	r0, r3
 80285d4:	3708      	adds	r7, #8
 80285d6:	46bd      	mov	sp, r7
 80285d8:	bd80      	pop	{r7, pc}

080285da <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80285da:	b580      	push	{r7, lr}
 80285dc:	b082      	sub	sp, #8
 80285de:	af00      	add	r7, sp, #0
 80285e0:	6078      	str	r0, [r7, #4]
 80285e2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80285e4:	2200      	movs	r2, #0
 80285e6:	6839      	ldr	r1, [r7, #0]
 80285e8:	6878      	ldr	r0, [r7, #4]
 80285ea:	f000 f8f8 	bl	80287de <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>
 80285ee:	4603      	mov	r3, r0
 80285f0:	4618      	mov	r0, r3
 80285f2:	3708      	adds	r7, #8
 80285f4:	46bd      	mov	sp, r7
 80285f6:	bd80      	pop	{r7, pc}

080285f8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80285f8:	b580      	push	{r7, lr}
 80285fa:	b084      	sub	sp, #16
 80285fc:	af00      	add	r7, sp, #0
 80285fe:	60f8      	str	r0, [r7, #12]
 8028600:	60b9      	str	r1, [r7, #8]
 8028602:	607a      	str	r2, [r7, #4]
 8028604:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8028606:	683b      	ldr	r3, [r7, #0]
 8028608:	687a      	ldr	r2, [r7, #4]
 802860a:	68b9      	ldr	r1, [r7, #8]
 802860c:	68f8      	ldr	r0, [r7, #12]
 802860e:	f000 f904 	bl	802881a <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8028612:	4603      	mov	r3, r0
      }
 8028614:	4618      	mov	r0, r3
 8028616:	3710      	adds	r7, #16
 8028618:	46bd      	mov	sp, r7
 802861a:	bd80      	pop	{r7, pc}

0802861c <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 802861c:	b580      	push	{r7, lr}
 802861e:	b084      	sub	sp, #16
 8028620:	af00      	add	r7, sp, #0
 8028622:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8028624:	f107 030c 	add.w	r3, r7, #12
 8028628:	6879      	ldr	r1, [r7, #4]
 802862a:	4618      	mov	r0, r3
 802862c:	f000 f912 	bl	8028854 <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>
 8028630:	68fb      	ldr	r3, [r7, #12]
 8028632:	4618      	mov	r0, r3
 8028634:	3710      	adds	r7, #16
 8028636:	46bd      	mov	sp, r7
 8028638:	bd80      	pop	{r7, pc}

0802863a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 802863a:	b580      	push	{r7, lr}
 802863c:	b084      	sub	sp, #16
 802863e:	af00      	add	r7, sp, #0
 8028640:	60f8      	str	r0, [r7, #12]
 8028642:	60b9      	str	r1, [r7, #8]
 8028644:	607a      	str	r2, [r7, #4]
 8028646:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8028648:	687a      	ldr	r2, [r7, #4]
 802864a:	68b9      	ldr	r1, [r7, #8]
 802864c:	68f8      	ldr	r0, [r7, #12]
 802864e:	f000 f913 	bl	8028878 <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 8028652:	4603      	mov	r3, r0
 8028654:	4618      	mov	r0, r3
 8028656:	3710      	adds	r7, #16
 8028658:	46bd      	mov	sp, r7
 802865a:	bd80      	pop	{r7, pc}

0802865c <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 802865c:	b580      	push	{r7, lr}
 802865e:	b082      	sub	sp, #8
 8028660:	af00      	add	r7, sp, #0
 8028662:	6078      	str	r0, [r7, #4]
 8028664:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8028666:	6839      	ldr	r1, [r7, #0]
 8028668:	6878      	ldr	r0, [r7, #4]
 802866a:	f000 f917 	bl	802889c <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>
    }
 802866e:	bf00      	nop
 8028670:	3708      	adds	r7, #8
 8028672:	46bd      	mov	sp, r7
 8028674:	bd80      	pop	{r7, pc}

08028676 <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8028676:	b580      	push	{r7, lr}
 8028678:	b084      	sub	sp, #16
 802867a:	af00      	add	r7, sp, #0
 802867c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 802867e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8028682:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8028684:	6878      	ldr	r0, [r7, #4]
 8028686:	f000 f914 	bl	80288b2 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>
 802868a:	4603      	mov	r3, r0
 802868c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 802868e:	f107 0208 	add.w	r2, r7, #8
 8028692:	f107 030c 	add.w	r3, r7, #12
 8028696:	4611      	mov	r1, r2
 8028698:	4618      	mov	r0, r3
 802869a:	f7de fd74 	bl	8007186 <_ZSt3minIjERKT_S2_S2_>
 802869e:	4603      	mov	r3, r0
 80286a0:	681b      	ldr	r3, [r3, #0]
      }
 80286a2:	4618      	mov	r0, r3
 80286a4:	3710      	adds	r7, #16
 80286a6:	46bd      	mov	sp, r7
 80286a8:	bd80      	pop	{r7, pc}

080286aa <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80286aa:	b480      	push	{r7}
 80286ac:	b083      	sub	sp, #12
 80286ae:	af00      	add	r7, sp, #0
 80286b0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80286b2:	687b      	ldr	r3, [r7, #4]
 80286b4:	4618      	mov	r0, r3
 80286b6:	370c      	adds	r7, #12
 80286b8:	46bd      	mov	sp, r7
 80286ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80286be:	4770      	bx	lr

080286c0 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80286c0:	b580      	push	{r7, lr}
 80286c2:	b084      	sub	sp, #16
 80286c4:	af00      	add	r7, sp, #0
 80286c6:	60f8      	str	r0, [r7, #12]
 80286c8:	60b9      	str	r1, [r7, #8]
 80286ca:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80286cc:	68f8      	ldr	r0, [r7, #12]
 80286ce:	f000 f8fc 	bl	80288ca <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>
 80286d2:	4602      	mov	r2, r0
 80286d4:	68bb      	ldr	r3, [r7, #8]
 80286d6:	4293      	cmp	r3, r2
 80286d8:	bf8c      	ite	hi
 80286da:	2301      	movhi	r3, #1
 80286dc:	2300      	movls	r3, #0
 80286de:	b2db      	uxtb	r3, r3
 80286e0:	2b00      	cmp	r3, #0
 80286e2:	d001      	beq.n	80286e8 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80286e4:	f000 fbdf 	bl	8028ea6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80286e8:	68bb      	ldr	r3, [r7, #8]
 80286ea:	009b      	lsls	r3, r3, #2
 80286ec:	4618      	mov	r0, r3
 80286ee:	f000 fbc7 	bl	8028e80 <_Znwj>
 80286f2:	4603      	mov	r3, r0
      }
 80286f4:	4618      	mov	r0, r3
 80286f6:	3710      	adds	r7, #16
 80286f8:	46bd      	mov	sp, r7
 80286fa:	bd80      	pop	{r7, pc}

080286fc <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80286fc:	b5b0      	push	{r4, r5, r7, lr}
 80286fe:	b084      	sub	sp, #16
 8028700:	af00      	add	r7, sp, #0
 8028702:	60f8      	str	r0, [r7, #12]
 8028704:	60b9      	str	r1, [r7, #8]
 8028706:	607a      	str	r2, [r7, #4]
 8028708:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 802870a:	68f8      	ldr	r0, [r7, #12]
 802870c:	f000 f8e9 	bl	80288e2 <_ZSt12__niter_baseIPPvET_S2_>
 8028710:	4604      	mov	r4, r0
 8028712:	68b8      	ldr	r0, [r7, #8]
 8028714:	f000 f8e5 	bl	80288e2 <_ZSt12__niter_baseIPPvET_S2_>
 8028718:	4605      	mov	r5, r0
 802871a:	6878      	ldr	r0, [r7, #4]
 802871c:	f000 f8e1 	bl	80288e2 <_ZSt12__niter_baseIPPvET_S2_>
 8028720:	4602      	mov	r2, r0
 8028722:	683b      	ldr	r3, [r7, #0]
 8028724:	4629      	mov	r1, r5
 8028726:	4620      	mov	r0, r4
 8028728:	f000 f8e6 	bl	80288f8 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 802872c:	4603      	mov	r3, r0
    }
 802872e:	4618      	mov	r0, r3
 8028730:	3710      	adds	r7, #16
 8028732:	46bd      	mov	sp, r7
 8028734:	bdb0      	pop	{r4, r5, r7, pc}

08028736 <_ZNSt13move_iteratorIPPvEC1ES1_>:
      move_iterator(iterator_type __i)
 8028736:	b580      	push	{r7, lr}
 8028738:	b082      	sub	sp, #8
 802873a:	af00      	add	r7, sp, #0
 802873c:	6078      	str	r0, [r7, #4]
 802873e:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8028740:	463b      	mov	r3, r7
 8028742:	4618      	mov	r0, r3
 8028744:	f000 f8f6 	bl	8028934 <_ZSt4moveIRPPvEONSt16remove_referenceIT_E4typeEOS4_>
 8028748:	4603      	mov	r3, r0
 802874a:	681a      	ldr	r2, [r3, #0]
 802874c:	687b      	ldr	r3, [r7, #4]
 802874e:	601a      	str	r2, [r3, #0]
 8028750:	687b      	ldr	r3, [r7, #4]
 8028752:	4618      	mov	r0, r3
 8028754:	3708      	adds	r7, #8
 8028756:	46bd      	mov	sp, r7
 8028758:	bd80      	pop	{r7, pc}

0802875a <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 802875a:	b580      	push	{r7, lr}
 802875c:	b086      	sub	sp, #24
 802875e:	af00      	add	r7, sp, #0
 8028760:	60f8      	str	r0, [r7, #12]
 8028762:	60b9      	str	r1, [r7, #8]
 8028764:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8028766:	2301      	movs	r3, #1
 8028768:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 802876a:	687a      	ldr	r2, [r7, #4]
 802876c:	68b9      	ldr	r1, [r7, #8]
 802876e:	68f8      	ldr	r0, [r7, #12]
 8028770:	f000 f8eb 	bl	802894a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>
 8028774:	4603      	mov	r3, r0
    }
 8028776:	4618      	mov	r0, r3
 8028778:	3718      	adds	r7, #24
 802877a:	46bd      	mov	sp, r7
 802877c:	bd80      	pop	{r7, pc}

0802877e <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 802877e:	b480      	push	{r7}
 8028780:	b083      	sub	sp, #12
 8028782:	af00      	add	r7, sp, #0
 8028784:	6078      	str	r0, [r7, #4]
 8028786:	6039      	str	r1, [r7, #0]
 8028788:	bf00      	nop
 802878a:	370c      	adds	r7, #12
 802878c:	46bd      	mov	sp, r7
 802878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028792:	4770      	bx	lr

08028794 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8028794:	b580      	push	{r7, lr}
 8028796:	b084      	sub	sp, #16
 8028798:	af00      	add	r7, sp, #0
 802879a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 802879c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80287a0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80287a2:	6878      	ldr	r0, [r7, #4]
 80287a4:	f000 f8e1 	bl	802896a <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>
 80287a8:	4603      	mov	r3, r0
 80287aa:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80287ac:	f107 0208 	add.w	r2, r7, #8
 80287b0:	f107 030c 	add.w	r3, r7, #12
 80287b4:	4611      	mov	r1, r2
 80287b6:	4618      	mov	r0, r3
 80287b8:	f7de fce5 	bl	8007186 <_ZSt3minIjERKT_S2_S2_>
 80287bc:	4603      	mov	r3, r0
 80287be:	681b      	ldr	r3, [r3, #0]
      }
 80287c0:	4618      	mov	r0, r3
 80287c2:	3710      	adds	r7, #16
 80287c4:	46bd      	mov	sp, r7
 80287c6:	bd80      	pop	{r7, pc}

080287c8 <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80287c8:	b480      	push	{r7}
 80287ca:	b083      	sub	sp, #12
 80287cc:	af00      	add	r7, sp, #0
 80287ce:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80287d0:	687b      	ldr	r3, [r7, #4]
 80287d2:	4618      	mov	r0, r3
 80287d4:	370c      	adds	r7, #12
 80287d6:	46bd      	mov	sp, r7
 80287d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287dc:	4770      	bx	lr

080287de <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80287de:	b580      	push	{r7, lr}
 80287e0:	b084      	sub	sp, #16
 80287e2:	af00      	add	r7, sp, #0
 80287e4:	60f8      	str	r0, [r7, #12]
 80287e6:	60b9      	str	r1, [r7, #8]
 80287e8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80287ea:	68f8      	ldr	r0, [r7, #12]
 80287ec:	f000 f8c9 	bl	8028982 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE11_M_max_sizeEv>
 80287f0:	4602      	mov	r2, r0
 80287f2:	68bb      	ldr	r3, [r7, #8]
 80287f4:	4293      	cmp	r3, r2
 80287f6:	bf8c      	ite	hi
 80287f8:	2301      	movhi	r3, #1
 80287fa:	2300      	movls	r3, #0
 80287fc:	b2db      	uxtb	r3, r3
 80287fe:	2b00      	cmp	r3, #0
 8028800:	d001      	beq.n	8028806 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8028802:	f000 fb50 	bl	8028ea6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8028806:	68bb      	ldr	r3, [r7, #8]
 8028808:	00db      	lsls	r3, r3, #3
 802880a:	4618      	mov	r0, r3
 802880c:	f000 fb38 	bl	8028e80 <_Znwj>
 8028810:	4603      	mov	r3, r0
      }
 8028812:	4618      	mov	r0, r3
 8028814:	3710      	adds	r7, #16
 8028816:	46bd      	mov	sp, r7
 8028818:	bd80      	pop	{r7, pc}

0802881a <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 802881a:	b5b0      	push	{r4, r5, r7, lr}
 802881c:	b084      	sub	sp, #16
 802881e:	af00      	add	r7, sp, #0
 8028820:	60f8      	str	r0, [r7, #12]
 8028822:	60b9      	str	r1, [r7, #8]
 8028824:	607a      	str	r2, [r7, #4]
 8028826:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8028828:	68f8      	ldr	r0, [r7, #12]
 802882a:	f000 f8b6 	bl	802899a <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 802882e:	4604      	mov	r4, r0
 8028830:	68b8      	ldr	r0, [r7, #8]
 8028832:	f000 f8b2 	bl	802899a <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8028836:	4605      	mov	r5, r0
 8028838:	6878      	ldr	r0, [r7, #4]
 802883a:	f000 f8ae 	bl	802899a <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 802883e:	4602      	mov	r2, r0
 8028840:	683b      	ldr	r3, [r7, #0]
 8028842:	4629      	mov	r1, r5
 8028844:	4620      	mov	r0, r4
 8028846:	f000 f8b3 	bl	80289b0 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 802884a:	4603      	mov	r3, r0
    }
 802884c:	4618      	mov	r0, r3
 802884e:	3710      	adds	r7, #16
 8028850:	46bd      	mov	sp, r7
 8028852:	bdb0      	pop	{r4, r5, r7, pc}

08028854 <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>:
      move_iterator(iterator_type __i)
 8028854:	b580      	push	{r7, lr}
 8028856:	b082      	sub	sp, #8
 8028858:	af00      	add	r7, sp, #0
 802885a:	6078      	str	r0, [r7, #4]
 802885c:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 802885e:	463b      	mov	r3, r7
 8028860:	4618      	mov	r0, r3
 8028862:	f000 f8c3 	bl	80289ec <_ZSt4moveIRPN12_GLOBAL__N_116scratch_buffer_tEEONSt16remove_referenceIT_E4typeEOS5_>
 8028866:	4603      	mov	r3, r0
 8028868:	681a      	ldr	r2, [r3, #0]
 802886a:	687b      	ldr	r3, [r7, #4]
 802886c:	601a      	str	r2, [r3, #0]
 802886e:	687b      	ldr	r3, [r7, #4]
 8028870:	4618      	mov	r0, r3
 8028872:	3708      	adds	r7, #8
 8028874:	46bd      	mov	sp, r7
 8028876:	bd80      	pop	{r7, pc}

08028878 <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8028878:	b580      	push	{r7, lr}
 802887a:	b086      	sub	sp, #24
 802887c:	af00      	add	r7, sp, #0
 802887e:	60f8      	str	r0, [r7, #12]
 8028880:	60b9      	str	r1, [r7, #8]
 8028882:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8028884:	2301      	movs	r3, #1
 8028886:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8028888:	687a      	ldr	r2, [r7, #4]
 802888a:	68b9      	ldr	r1, [r7, #8]
 802888c:	68f8      	ldr	r0, [r7, #12]
 802888e:	f000 f8b8 	bl	8028a02 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>
 8028892:	4603      	mov	r3, r0
    }
 8028894:	4618      	mov	r0, r3
 8028896:	3718      	adds	r7, #24
 8028898:	46bd      	mov	sp, r7
 802889a:	bd80      	pop	{r7, pc}

0802889c <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>:
 802889c:	b480      	push	{r7}
 802889e:	b083      	sub	sp, #12
 80288a0:	af00      	add	r7, sp, #0
 80288a2:	6078      	str	r0, [r7, #4]
 80288a4:	6039      	str	r1, [r7, #0]
 80288a6:	bf00      	nop
 80288a8:	370c      	adds	r7, #12
 80288aa:	46bd      	mov	sp, r7
 80288ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80288b0:	4770      	bx	lr

080288b2 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80288b2:	b580      	push	{r7, lr}
 80288b4:	b082      	sub	sp, #8
 80288b6:	af00      	add	r7, sp, #0
 80288b8:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80288ba:	6878      	ldr	r0, [r7, #4]
 80288bc:	f000 f8b1 	bl	8028a22 <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 80288c0:	4603      	mov	r3, r0
      }
 80288c2:	4618      	mov	r0, r3
 80288c4:	3708      	adds	r7, #8
 80288c6:	46bd      	mov	sp, r7
 80288c8:	bd80      	pop	{r7, pc}

080288ca <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80288ca:	b480      	push	{r7}
 80288cc:	b083      	sub	sp, #12
 80288ce:	af00      	add	r7, sp, #0
 80288d0:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80288d2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80288d6:	4618      	mov	r0, r3
 80288d8:	370c      	adds	r7, #12
 80288da:	46bd      	mov	sp, r7
 80288dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80288e0:	4770      	bx	lr

080288e2 <_ZSt12__niter_baseIPPvET_S2_>:
    __niter_base(_Iterator __it)
 80288e2:	b480      	push	{r7}
 80288e4:	b083      	sub	sp, #12
 80288e6:	af00      	add	r7, sp, #0
 80288e8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80288ea:	687b      	ldr	r3, [r7, #4]
 80288ec:	4618      	mov	r0, r3
 80288ee:	370c      	adds	r7, #12
 80288f0:	46bd      	mov	sp, r7
 80288f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80288f6:	4770      	bx	lr

080288f8 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80288f8:	b580      	push	{r7, lr}
 80288fa:	b086      	sub	sp, #24
 80288fc:	af00      	add	r7, sp, #0
 80288fe:	60f8      	str	r0, [r7, #12]
 8028900:	60b9      	str	r1, [r7, #8]
 8028902:	607a      	str	r2, [r7, #4]
 8028904:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8028906:	68ba      	ldr	r2, [r7, #8]
 8028908:	68fb      	ldr	r3, [r7, #12]
 802890a:	1ad3      	subs	r3, r2, r3
 802890c:	109b      	asrs	r3, r3, #2
 802890e:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8028910:	697b      	ldr	r3, [r7, #20]
 8028912:	2b00      	cmp	r3, #0
 8028914:	dd06      	ble.n	8028924 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8028916:	697b      	ldr	r3, [r7, #20]
 8028918:	009b      	lsls	r3, r3, #2
 802891a:	461a      	mov	r2, r3
 802891c:	68f9      	ldr	r1, [r7, #12]
 802891e:	6878      	ldr	r0, [r7, #4]
 8028920:	f003 fcc4 	bl	802c2ac <memmove>
      return __result + __count;
 8028924:	697b      	ldr	r3, [r7, #20]
 8028926:	009b      	lsls	r3, r3, #2
 8028928:	687a      	ldr	r2, [r7, #4]
 802892a:	4413      	add	r3, r2
    }
 802892c:	4618      	mov	r0, r3
 802892e:	3718      	adds	r7, #24
 8028930:	46bd      	mov	sp, r7
 8028932:	bd80      	pop	{r7, pc}

08028934 <_ZSt4moveIRPPvEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8028934:	b480      	push	{r7}
 8028936:	b083      	sub	sp, #12
 8028938:	af00      	add	r7, sp, #0
 802893a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802893c:	687b      	ldr	r3, [r7, #4]
 802893e:	4618      	mov	r0, r3
 8028940:	370c      	adds	r7, #12
 8028942:	46bd      	mov	sp, r7
 8028944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028948:	4770      	bx	lr

0802894a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 802894a:	b580      	push	{r7, lr}
 802894c:	b084      	sub	sp, #16
 802894e:	af00      	add	r7, sp, #0
 8028950:	60f8      	str	r0, [r7, #12]
 8028952:	60b9      	str	r1, [r7, #8]
 8028954:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8028956:	687a      	ldr	r2, [r7, #4]
 8028958:	68b9      	ldr	r1, [r7, #8]
 802895a:	68f8      	ldr	r0, [r7, #12]
 802895c:	f000 f86d 	bl	8028a3a <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 8028960:	4603      	mov	r3, r0
 8028962:	4618      	mov	r0, r3
 8028964:	3710      	adds	r7, #16
 8028966:	46bd      	mov	sp, r7
 8028968:	bd80      	pop	{r7, pc}

0802896a <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 802896a:	b580      	push	{r7, lr}
 802896c:	b082      	sub	sp, #8
 802896e:	af00      	add	r7, sp, #0
 8028970:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8028972:	6878      	ldr	r0, [r7, #4]
 8028974:	f000 f879 	bl	8028a6a <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 8028978:	4603      	mov	r3, r0
      }
 802897a:	4618      	mov	r0, r3
 802897c:	3708      	adds	r7, #8
 802897e:	46bd      	mov	sp, r7
 8028980:	bd80      	pop	{r7, pc}

08028982 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8028982:	b480      	push	{r7}
 8028984:	b083      	sub	sp, #12
 8028986:	af00      	add	r7, sp, #0
 8028988:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 802898a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 802898e:	4618      	mov	r0, r3
 8028990:	370c      	adds	r7, #12
 8028992:	46bd      	mov	sp, r7
 8028994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028998:	4770      	bx	lr

0802899a <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __niter_base(_Iterator __it)
 802899a:	b480      	push	{r7}
 802899c:	b083      	sub	sp, #12
 802899e:	af00      	add	r7, sp, #0
 80289a0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80289a2:	687b      	ldr	r3, [r7, #4]
 80289a4:	4618      	mov	r0, r3
 80289a6:	370c      	adds	r7, #12
 80289a8:	46bd      	mov	sp, r7
 80289aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80289ae:	4770      	bx	lr

080289b0 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80289b0:	b580      	push	{r7, lr}
 80289b2:	b086      	sub	sp, #24
 80289b4:	af00      	add	r7, sp, #0
 80289b6:	60f8      	str	r0, [r7, #12]
 80289b8:	60b9      	str	r1, [r7, #8]
 80289ba:	607a      	str	r2, [r7, #4]
 80289bc:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80289be:	68ba      	ldr	r2, [r7, #8]
 80289c0:	68fb      	ldr	r3, [r7, #12]
 80289c2:	1ad3      	subs	r3, r2, r3
 80289c4:	10db      	asrs	r3, r3, #3
 80289c6:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80289c8:	697b      	ldr	r3, [r7, #20]
 80289ca:	2b00      	cmp	r3, #0
 80289cc:	dd06      	ble.n	80289dc <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80289ce:	697b      	ldr	r3, [r7, #20]
 80289d0:	00db      	lsls	r3, r3, #3
 80289d2:	461a      	mov	r2, r3
 80289d4:	68f9      	ldr	r1, [r7, #12]
 80289d6:	6878      	ldr	r0, [r7, #4]
 80289d8:	f003 fc68 	bl	802c2ac <memmove>
      return __result + __count;
 80289dc:	697b      	ldr	r3, [r7, #20]
 80289de:	00db      	lsls	r3, r3, #3
 80289e0:	687a      	ldr	r2, [r7, #4]
 80289e2:	4413      	add	r3, r2
    }
 80289e4:	4618      	mov	r0, r3
 80289e6:	3718      	adds	r7, #24
 80289e8:	46bd      	mov	sp, r7
 80289ea:	bd80      	pop	{r7, pc}

080289ec <_ZSt4moveIRPN12_GLOBAL__N_116scratch_buffer_tEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80289ec:	b480      	push	{r7}
 80289ee:	b083      	sub	sp, #12
 80289f0:	af00      	add	r7, sp, #0
 80289f2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80289f4:	687b      	ldr	r3, [r7, #4]
 80289f6:	4618      	mov	r0, r3
 80289f8:	370c      	adds	r7, #12
 80289fa:	46bd      	mov	sp, r7
 80289fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a00:	4770      	bx	lr

08028a02 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8028a02:	b580      	push	{r7, lr}
 8028a04:	b084      	sub	sp, #16
 8028a06:	af00      	add	r7, sp, #0
 8028a08:	60f8      	str	r0, [r7, #12]
 8028a0a:	60b9      	str	r1, [r7, #8]
 8028a0c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8028a0e:	687a      	ldr	r2, [r7, #4]
 8028a10:	68b9      	ldr	r1, [r7, #8]
 8028a12:	68f8      	ldr	r0, [r7, #12]
 8028a14:	f000 f835 	bl	8028a82 <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 8028a18:	4603      	mov	r3, r0
 8028a1a:	4618      	mov	r0, r3
 8028a1c:	3710      	adds	r7, #16
 8028a1e:	46bd      	mov	sp, r7
 8028a20:	bd80      	pop	{r7, pc}

08028a22 <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8028a22:	b580      	push	{r7, lr}
 8028a24:	b082      	sub	sp, #8
 8028a26:	af00      	add	r7, sp, #0
 8028a28:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8028a2a:	6878      	ldr	r0, [r7, #4]
 8028a2c:	f7ff ff4d 	bl	80288ca <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>
 8028a30:	4603      	mov	r3, r0
 8028a32:	4618      	mov	r0, r3
 8028a34:	3708      	adds	r7, #8
 8028a36:	46bd      	mov	sp, r7
 8028a38:	bd80      	pop	{r7, pc}

08028a3a <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8028a3a:	b590      	push	{r4, r7, lr}
 8028a3c:	b085      	sub	sp, #20
 8028a3e:	af00      	add	r7, sp, #0
 8028a40:	60f8      	str	r0, [r7, #12]
 8028a42:	60b9      	str	r1, [r7, #8]
 8028a44:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8028a46:	68f8      	ldr	r0, [r7, #12]
 8028a48:	f000 f833 	bl	8028ab2 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8028a4c:	4604      	mov	r4, r0
 8028a4e:	68b8      	ldr	r0, [r7, #8]
 8028a50:	f000 f82f 	bl	8028ab2 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8028a54:	4603      	mov	r3, r0
 8028a56:	687a      	ldr	r2, [r7, #4]
 8028a58:	4619      	mov	r1, r3
 8028a5a:	4620      	mov	r0, r4
 8028a5c:	f000 f83a 	bl	8028ad4 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>
 8028a60:	4603      	mov	r3, r0
    }
 8028a62:	4618      	mov	r0, r3
 8028a64:	3714      	adds	r7, #20
 8028a66:	46bd      	mov	sp, r7
 8028a68:	bd90      	pop	{r4, r7, pc}

08028a6a <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8028a6a:	b580      	push	{r7, lr}
 8028a6c:	b082      	sub	sp, #8
 8028a6e:	af00      	add	r7, sp, #0
 8028a70:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8028a72:	6878      	ldr	r0, [r7, #4]
 8028a74:	f7ff ff85 	bl	8028982 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE11_M_max_sizeEv>
 8028a78:	4603      	mov	r3, r0
 8028a7a:	4618      	mov	r0, r3
 8028a7c:	3708      	adds	r7, #8
 8028a7e:	46bd      	mov	sp, r7
 8028a80:	bd80      	pop	{r7, pc}

08028a82 <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8028a82:	b590      	push	{r4, r7, lr}
 8028a84:	b085      	sub	sp, #20
 8028a86:	af00      	add	r7, sp, #0
 8028a88:	60f8      	str	r0, [r7, #12]
 8028a8a:	60b9      	str	r1, [r7, #8]
 8028a8c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8028a8e:	68f8      	ldr	r0, [r7, #12]
 8028a90:	f000 f843 	bl	8028b1a <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8028a94:	4604      	mov	r4, r0
 8028a96:	68b8      	ldr	r0, [r7, #8]
 8028a98:	f000 f83f 	bl	8028b1a <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8028a9c:	4603      	mov	r3, r0
 8028a9e:	687a      	ldr	r2, [r7, #4]
 8028aa0:	4619      	mov	r1, r3
 8028aa2:	4620      	mov	r0, r4
 8028aa4:	f000 f84a 	bl	8028b3c <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8028aa8:	4603      	mov	r3, r0
    }
 8028aaa:	4618      	mov	r0, r3
 8028aac:	3714      	adds	r7, #20
 8028aae:	46bd      	mov	sp, r7
 8028ab0:	bd90      	pop	{r4, r7, pc}

08028ab2 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8028ab2:	b580      	push	{r7, lr}
 8028ab4:	b082      	sub	sp, #8
 8028ab6:	af00      	add	r7, sp, #0
 8028ab8:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8028aba:	1d3b      	adds	r3, r7, #4
 8028abc:	4618      	mov	r0, r3
 8028abe:	f000 f860 	bl	8028b82 <_ZNKSt13move_iteratorIPPvE4baseEv>
 8028ac2:	4603      	mov	r3, r0
 8028ac4:	4618      	mov	r0, r3
 8028ac6:	f000 f868 	bl	8028b9a <_ZSt12__miter_baseIPPvET_S2_>
 8028aca:	4603      	mov	r3, r0
 8028acc:	4618      	mov	r0, r3
 8028ace:	3708      	adds	r7, #8
 8028ad0:	46bd      	mov	sp, r7
 8028ad2:	bd80      	pop	{r7, pc}

08028ad4 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8028ad4:	b5b0      	push	{r4, r5, r7, lr}
 8028ad6:	b084      	sub	sp, #16
 8028ad8:	af00      	add	r7, sp, #0
 8028ada:	60f8      	str	r0, [r7, #12]
 8028adc:	60b9      	str	r1, [r7, #8]
 8028ade:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8028ae0:	68f8      	ldr	r0, [r7, #12]
 8028ae2:	f7ff fefe 	bl	80288e2 <_ZSt12__niter_baseIPPvET_S2_>
 8028ae6:	4604      	mov	r4, r0
 8028ae8:	68b8      	ldr	r0, [r7, #8]
 8028aea:	f7ff fefa 	bl	80288e2 <_ZSt12__niter_baseIPPvET_S2_>
 8028aee:	4605      	mov	r5, r0
 8028af0:	687b      	ldr	r3, [r7, #4]
 8028af2:	4618      	mov	r0, r3
 8028af4:	f7ff fef5 	bl	80288e2 <_ZSt12__niter_baseIPPvET_S2_>
 8028af8:	4603      	mov	r3, r0
 8028afa:	461a      	mov	r2, r3
 8028afc:	4629      	mov	r1, r5
 8028afe:	4620      	mov	r0, r4
 8028b00:	f000 f856 	bl	8028bb0 <_ZSt14__copy_move_a1ILb1EPPvS1_ET1_T0_S3_S2_>
 8028b04:	4602      	mov	r2, r0
 8028b06:	1d3b      	adds	r3, r7, #4
 8028b08:	4611      	mov	r1, r2
 8028b0a:	4618      	mov	r0, r3
 8028b0c:	f000 f860 	bl	8028bd0 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>
 8028b10:	4603      	mov	r3, r0
    }
 8028b12:	4618      	mov	r0, r3
 8028b14:	3710      	adds	r7, #16
 8028b16:	46bd      	mov	sp, r7
 8028b18:	bdb0      	pop	{r4, r5, r7, pc}

08028b1a <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8028b1a:	b580      	push	{r7, lr}
 8028b1c:	b082      	sub	sp, #8
 8028b1e:	af00      	add	r7, sp, #0
 8028b20:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8028b22:	1d3b      	adds	r3, r7, #4
 8028b24:	4618      	mov	r0, r3
 8028b26:	f000 f85f 	bl	8028be8 <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>
 8028b2a:	4603      	mov	r3, r0
 8028b2c:	4618      	mov	r0, r3
 8028b2e:	f000 f867 	bl	8028c00 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8028b32:	4603      	mov	r3, r0
 8028b34:	4618      	mov	r0, r3
 8028b36:	3708      	adds	r7, #8
 8028b38:	46bd      	mov	sp, r7
 8028b3a:	bd80      	pop	{r7, pc}

08028b3c <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8028b3c:	b5b0      	push	{r4, r5, r7, lr}
 8028b3e:	b084      	sub	sp, #16
 8028b40:	af00      	add	r7, sp, #0
 8028b42:	60f8      	str	r0, [r7, #12]
 8028b44:	60b9      	str	r1, [r7, #8]
 8028b46:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8028b48:	68f8      	ldr	r0, [r7, #12]
 8028b4a:	f7ff ff26 	bl	802899a <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8028b4e:	4604      	mov	r4, r0
 8028b50:	68b8      	ldr	r0, [r7, #8]
 8028b52:	f7ff ff22 	bl	802899a <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8028b56:	4605      	mov	r5, r0
 8028b58:	687b      	ldr	r3, [r7, #4]
 8028b5a:	4618      	mov	r0, r3
 8028b5c:	f7ff ff1d 	bl	802899a <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8028b60:	4603      	mov	r3, r0
 8028b62:	461a      	mov	r2, r3
 8028b64:	4629      	mov	r1, r5
 8028b66:	4620      	mov	r0, r4
 8028b68:	f000 f855 	bl	8028c16 <_ZSt14__copy_move_a1ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8028b6c:	4602      	mov	r2, r0
 8028b6e:	1d3b      	adds	r3, r7, #4
 8028b70:	4611      	mov	r1, r2
 8028b72:	4618      	mov	r0, r3
 8028b74:	f000 f85f 	bl	8028c36 <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>
 8028b78:	4603      	mov	r3, r0
    }
 8028b7a:	4618      	mov	r0, r3
 8028b7c:	3710      	adds	r7, #16
 8028b7e:	46bd      	mov	sp, r7
 8028b80:	bdb0      	pop	{r4, r5, r7, pc}

08028b82 <_ZNKSt13move_iteratorIPPvE4baseEv>:
      base() const
 8028b82:	b480      	push	{r7}
 8028b84:	b083      	sub	sp, #12
 8028b86:	af00      	add	r7, sp, #0
 8028b88:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8028b8a:	687b      	ldr	r3, [r7, #4]
 8028b8c:	681b      	ldr	r3, [r3, #0]
 8028b8e:	4618      	mov	r0, r3
 8028b90:	370c      	adds	r7, #12
 8028b92:	46bd      	mov	sp, r7
 8028b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b98:	4770      	bx	lr

08028b9a <_ZSt12__miter_baseIPPvET_S2_>:
    __miter_base(_Iterator __it)
 8028b9a:	b480      	push	{r7}
 8028b9c:	b083      	sub	sp, #12
 8028b9e:	af00      	add	r7, sp, #0
 8028ba0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8028ba2:	687b      	ldr	r3, [r7, #4]
 8028ba4:	4618      	mov	r0, r3
 8028ba6:	370c      	adds	r7, #12
 8028ba8:	46bd      	mov	sp, r7
 8028baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028bae:	4770      	bx	lr

08028bb0 <_ZSt14__copy_move_a1ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8028bb0:	b580      	push	{r7, lr}
 8028bb2:	b084      	sub	sp, #16
 8028bb4:	af00      	add	r7, sp, #0
 8028bb6:	60f8      	str	r0, [r7, #12]
 8028bb8:	60b9      	str	r1, [r7, #8]
 8028bba:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8028bbc:	687a      	ldr	r2, [r7, #4]
 8028bbe:	68b9      	ldr	r1, [r7, #8]
 8028bc0:	68f8      	ldr	r0, [r7, #12]
 8028bc2:	f000 f844 	bl	8028c4e <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>
 8028bc6:	4603      	mov	r3, r0
 8028bc8:	4618      	mov	r0, r3
 8028bca:	3710      	adds	r7, #16
 8028bcc:	46bd      	mov	sp, r7
 8028bce:	bd80      	pop	{r7, pc}

08028bd0 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8028bd0:	b480      	push	{r7}
 8028bd2:	b083      	sub	sp, #12
 8028bd4:	af00      	add	r7, sp, #0
 8028bd6:	6078      	str	r0, [r7, #4]
 8028bd8:	6039      	str	r1, [r7, #0]
    { return __res; }
 8028bda:	683b      	ldr	r3, [r7, #0]
 8028bdc:	4618      	mov	r0, r3
 8028bde:	370c      	adds	r7, #12
 8028be0:	46bd      	mov	sp, r7
 8028be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028be6:	4770      	bx	lr

08028be8 <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>:
      base() const
 8028be8:	b480      	push	{r7}
 8028bea:	b083      	sub	sp, #12
 8028bec:	af00      	add	r7, sp, #0
 8028bee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8028bf0:	687b      	ldr	r3, [r7, #4]
 8028bf2:	681b      	ldr	r3, [r3, #0]
 8028bf4:	4618      	mov	r0, r3
 8028bf6:	370c      	adds	r7, #12
 8028bf8:	46bd      	mov	sp, r7
 8028bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028bfe:	4770      	bx	lr

08028c00 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __miter_base(_Iterator __it)
 8028c00:	b480      	push	{r7}
 8028c02:	b083      	sub	sp, #12
 8028c04:	af00      	add	r7, sp, #0
 8028c06:	6078      	str	r0, [r7, #4]
    { return __it; }
 8028c08:	687b      	ldr	r3, [r7, #4]
 8028c0a:	4618      	mov	r0, r3
 8028c0c:	370c      	adds	r7, #12
 8028c0e:	46bd      	mov	sp, r7
 8028c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c14:	4770      	bx	lr

08028c16 <_ZSt14__copy_move_a1ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8028c16:	b580      	push	{r7, lr}
 8028c18:	b084      	sub	sp, #16
 8028c1a:	af00      	add	r7, sp, #0
 8028c1c:	60f8      	str	r0, [r7, #12]
 8028c1e:	60b9      	str	r1, [r7, #8]
 8028c20:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8028c22:	687a      	ldr	r2, [r7, #4]
 8028c24:	68b9      	ldr	r1, [r7, #8]
 8028c26:	68f8      	ldr	r0, [r7, #12]
 8028c28:	f000 f821 	bl	8028c6e <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8028c2c:	4603      	mov	r3, r0
 8028c2e:	4618      	mov	r0, r3
 8028c30:	3710      	adds	r7, #16
 8028c32:	46bd      	mov	sp, r7
 8028c34:	bd80      	pop	{r7, pc}

08028c36 <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8028c36:	b480      	push	{r7}
 8028c38:	b083      	sub	sp, #12
 8028c3a:	af00      	add	r7, sp, #0
 8028c3c:	6078      	str	r0, [r7, #4]
 8028c3e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8028c40:	683b      	ldr	r3, [r7, #0]
 8028c42:	4618      	mov	r0, r3
 8028c44:	370c      	adds	r7, #12
 8028c46:	46bd      	mov	sp, r7
 8028c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c4c:	4770      	bx	lr

08028c4e <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8028c4e:	b580      	push	{r7, lr}
 8028c50:	b084      	sub	sp, #16
 8028c52:	af00      	add	r7, sp, #0
 8028c54:	60f8      	str	r0, [r7, #12]
 8028c56:	60b9      	str	r1, [r7, #8]
 8028c58:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8028c5a:	687a      	ldr	r2, [r7, #4]
 8028c5c:	68b9      	ldr	r1, [r7, #8]
 8028c5e:	68f8      	ldr	r0, [r7, #12]
 8028c60:	f000 f815 	bl	8028c8e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>
 8028c64:	4603      	mov	r3, r0
    }
 8028c66:	4618      	mov	r0, r3
 8028c68:	3710      	adds	r7, #16
 8028c6a:	46bd      	mov	sp, r7
 8028c6c:	bd80      	pop	{r7, pc}

08028c6e <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8028c6e:	b580      	push	{r7, lr}
 8028c70:	b084      	sub	sp, #16
 8028c72:	af00      	add	r7, sp, #0
 8028c74:	60f8      	str	r0, [r7, #12]
 8028c76:	60b9      	str	r1, [r7, #8]
 8028c78:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8028c7a:	687a      	ldr	r2, [r7, #4]
 8028c7c:	68b9      	ldr	r1, [r7, #8]
 8028c7e:	68f8      	ldr	r0, [r7, #12]
 8028c80:	f000 f822 	bl	8028cc8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>
 8028c84:	4603      	mov	r3, r0
    }
 8028c86:	4618      	mov	r0, r3
 8028c88:	3710      	adds	r7, #16
 8028c8a:	46bd      	mov	sp, r7
 8028c8c:	bd80      	pop	{r7, pc}

08028c8e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8028c8e:	b580      	push	{r7, lr}
 8028c90:	b086      	sub	sp, #24
 8028c92:	af00      	add	r7, sp, #0
 8028c94:	60f8      	str	r0, [r7, #12]
 8028c96:	60b9      	str	r1, [r7, #8]
 8028c98:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8028c9a:	68ba      	ldr	r2, [r7, #8]
 8028c9c:	68fb      	ldr	r3, [r7, #12]
 8028c9e:	1ad3      	subs	r3, r2, r3
 8028ca0:	109b      	asrs	r3, r3, #2
 8028ca2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8028ca4:	697b      	ldr	r3, [r7, #20]
 8028ca6:	2b00      	cmp	r3, #0
 8028ca8:	d006      	beq.n	8028cb8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8028caa:	697b      	ldr	r3, [r7, #20]
 8028cac:	009b      	lsls	r3, r3, #2
 8028cae:	461a      	mov	r2, r3
 8028cb0:	68f9      	ldr	r1, [r7, #12]
 8028cb2:	6878      	ldr	r0, [r7, #4]
 8028cb4:	f003 fafa 	bl	802c2ac <memmove>
	  return __result + _Num;
 8028cb8:	697b      	ldr	r3, [r7, #20]
 8028cba:	009b      	lsls	r3, r3, #2
 8028cbc:	687a      	ldr	r2, [r7, #4]
 8028cbe:	4413      	add	r3, r2
	}
 8028cc0:	4618      	mov	r0, r3
 8028cc2:	3718      	adds	r7, #24
 8028cc4:	46bd      	mov	sp, r7
 8028cc6:	bd80      	pop	{r7, pc}

08028cc8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8028cc8:	b580      	push	{r7, lr}
 8028cca:	b086      	sub	sp, #24
 8028ccc:	af00      	add	r7, sp, #0
 8028cce:	60f8      	str	r0, [r7, #12]
 8028cd0:	60b9      	str	r1, [r7, #8]
 8028cd2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8028cd4:	68ba      	ldr	r2, [r7, #8]
 8028cd6:	68fb      	ldr	r3, [r7, #12]
 8028cd8:	1ad3      	subs	r3, r2, r3
 8028cda:	10db      	asrs	r3, r3, #3
 8028cdc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8028cde:	697b      	ldr	r3, [r7, #20]
 8028ce0:	2b00      	cmp	r3, #0
 8028ce2:	d006      	beq.n	8028cf2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8028ce4:	697b      	ldr	r3, [r7, #20]
 8028ce6:	00db      	lsls	r3, r3, #3
 8028ce8:	461a      	mov	r2, r3
 8028cea:	68f9      	ldr	r1, [r7, #12]
 8028cec:	6878      	ldr	r0, [r7, #4]
 8028cee:	f003 fadd 	bl	802c2ac <memmove>
	  return __result + _Num;
 8028cf2:	697b      	ldr	r3, [r7, #20]
 8028cf4:	00db      	lsls	r3, r3, #3
 8028cf6:	687a      	ldr	r2, [r7, #4]
 8028cf8:	4413      	add	r3, r2
	}
 8028cfa:	4618      	mov	r0, r3
 8028cfc:	3718      	adds	r7, #24
 8028cfe:	46bd      	mov	sp, r7
 8028d00:	bd80      	pop	{r7, pc}
	...

08028d04 <_Z41__static_initialization_and_destruction_0ii>:
 8028d04:	b580      	push	{r7, lr}
 8028d06:	b082      	sub	sp, #8
 8028d08:	af00      	add	r7, sp, #0
 8028d0a:	6078      	str	r0, [r7, #4]
 8028d0c:	6039      	str	r1, [r7, #0]
 8028d0e:	687b      	ldr	r3, [r7, #4]
 8028d10:	2b01      	cmp	r3, #1
 8028d12:	d150      	bne.n	8028db6 <_Z41__static_initialization_and_destruction_0ii+0xb2>
 8028d14:	683b      	ldr	r3, [r7, #0]
 8028d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8028d1a:	4293      	cmp	r3, r2
 8028d1c:	d14b      	bne.n	8028db6 <_Z41__static_initialization_and_destruction_0ii+0xb2>
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1152, (TfLiteIntArray*)&tensor_dimension0, 1150, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 8028d1e:	4b2f      	ldr	r3, [pc, #188]	; (8028ddc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8028d20:	681b      	ldr	r3, [r3, #0]
 8028d22:	f503 6390 	add.w	r3, r3, #1152	; 0x480
};const NodeInfo_t nodeData[] = {
 8028d26:	4a2e      	ldr	r2, [pc, #184]	; (8028de0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8028d28:	6053      	str	r3, [r2, #4]
 8028d2a:	4b2c      	ldr	r3, [pc, #176]	; (8028ddc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8028d2c:	681b      	ldr	r3, [r3, #0]
 8028d2e:	4a2c      	ldr	r2, [pc, #176]	; (8028de0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8028d30:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1152, (TfLiteIntArray*)&tensor_dimension13, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
 8028d34:	4b29      	ldr	r3, [pc, #164]	; (8028ddc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8028d36:	681b      	ldr	r3, [r3, #0]
 8028d38:	f503 6390 	add.w	r3, r3, #1152	; 0x480
};const NodeInfo_t nodeData[] = {
 8028d3c:	4a28      	ldr	r2, [pc, #160]	; (8028de0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8028d3e:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8028d42:	4b26      	ldr	r3, [pc, #152]	; (8028ddc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8028d44:	681b      	ldr	r3, [r3, #0]
 8028d46:	4a26      	ldr	r2, [pc, #152]	; (8028de0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8028d48:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension15, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
 8028d4c:	4b23      	ldr	r3, [pc, #140]	; (8028ddc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8028d4e:	681b      	ldr	r3, [r3, #0]
 8028d50:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 8028d54:	4a22      	ldr	r2, [pc, #136]	; (8028de0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8028d56:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 8028d5a:	4b20      	ldr	r3, [pc, #128]	; (8028ddc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8028d5c:	681b      	ldr	r3, [r3, #0]
 8028d5e:	4a20      	ldr	r2, [pc, #128]	; (8028de0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8028d60:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension17, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
 8028d64:	4b1d      	ldr	r3, [pc, #116]	; (8028ddc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8028d66:	681b      	ldr	r3, [r3, #0]
 8028d68:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 8028d6c:	4a1c      	ldr	r2, [pc, #112]	; (8028de0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8028d6e:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
 8028d72:	4b1a      	ldr	r3, [pc, #104]	; (8028ddc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8028d74:	681b      	ldr	r3, [r3, #0]
 8028d76:	4a1a      	ldr	r2, [pc, #104]	; (8028de0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8028d78:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension19, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
 8028d7c:	4b17      	ldr	r3, [pc, #92]	; (8028ddc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8028d7e:	681b      	ldr	r3, [r3, #0]
 8028d80:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 8028d84:	4a16      	ldr	r2, [pc, #88]	; (8028de0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8028d86:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
 8028d8a:	4b14      	ldr	r3, [pc, #80]	; (8028ddc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8028d8c:	681b      	ldr	r3, [r3, #0]
 8028d8e:	4a14      	ldr	r2, [pc, #80]	; (8028de0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8028d90:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 208, (TfLiteIntArray*)&tensor_dimension21, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
 8028d94:	4b11      	ldr	r3, [pc, #68]	; (8028ddc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8028d96:	681b      	ldr	r3, [r3, #0]
 8028d98:	33d0      	adds	r3, #208	; 0xd0
};const NodeInfo_t nodeData[] = {
 8028d9a:	4a11      	ldr	r2, [pc, #68]	; (8028de0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8028d9c:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
 8028da0:	4b0e      	ldr	r3, [pc, #56]	; (8028ddc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8028da2:	681b      	ldr	r3, [r3, #0]
 8028da4:	4a0e      	ldr	r2, [pc, #56]	; (8028de0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8028da6:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
static std::vector<void*> overflow_buffers;
 8028daa:	480e      	ldr	r0, [pc, #56]	; (8028de4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8028dac:	f7fe f9af 	bl	802710e <_ZNSt6vectorIPvSaIS0_EEC1Ev>
static std::vector<scratch_buffer_t> scratch_buffers;
 8028db0:	480d      	ldr	r0, [pc, #52]	; (8028de8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8028db2:	f7fe fa16 	bl	80271e2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>
 8028db6:	687b      	ldr	r3, [r7, #4]
 8028db8:	2b00      	cmp	r3, #0
 8028dba:	d10a      	bne.n	8028dd2 <_Z41__static_initialization_and_destruction_0ii+0xce>
 8028dbc:	683b      	ldr	r3, [r7, #0]
 8028dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8028dc2:	4293      	cmp	r3, r2
 8028dc4:	d105      	bne.n	8028dd2 <_Z41__static_initialization_and_destruction_0ii+0xce>
 8028dc6:	4808      	ldr	r0, [pc, #32]	; (8028de8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8028dc8:	f000 f810 	bl	8028dec <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>
static std::vector<void*> overflow_buffers;
 8028dcc:	4805      	ldr	r0, [pc, #20]	; (8028de4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8028dce:	f000 f828 	bl	8028e22 <_ZNSt6vectorIPvSaIS0_EED1Ev>
}
 8028dd2:	bf00      	nop
 8028dd4:	3708      	adds	r7, #8
 8028dd6:	46bd      	mov	sp, r7
 8028dd8:	bd80      	pop	{r7, pc}
 8028dda:	bf00      	nop
 8028ddc:	200069b0 	.word	0x200069b0
 8028de0:	20000074 	.word	0x20000074
 8028de4:	20007314 	.word	0x20007314
 8028de8:	20007320 	.word	0x20007320

08028dec <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8028dec:	b5b0      	push	{r4, r5, r7, lr}
 8028dee:	b082      	sub	sp, #8
 8028df0:	af00      	add	r7, sp, #0
 8028df2:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8028df4:	687b      	ldr	r3, [r7, #4]
 8028df6:	681c      	ldr	r4, [r3, #0]
 8028df8:	687b      	ldr	r3, [r7, #4]
 8028dfa:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8028dfc:	687b      	ldr	r3, [r7, #4]
 8028dfe:	4618      	mov	r0, r3
 8028e00:	f7ff fb29 	bl	8028456 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8028e04:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8028e06:	461a      	mov	r2, r3
 8028e08:	4629      	mov	r1, r5
 8028e0a:	4620      	mov	r0, r4
 8028e0c:	f7ff fb47 	bl	802849e <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      }
 8028e10:	687b      	ldr	r3, [r7, #4]
 8028e12:	4618      	mov	r0, r3
 8028e14:	f7fe fdd0 	bl	80279b8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>
 8028e18:	687b      	ldr	r3, [r7, #4]
 8028e1a:	4618      	mov	r0, r3
 8028e1c:	3708      	adds	r7, #8
 8028e1e:	46bd      	mov	sp, r7
 8028e20:	bdb0      	pop	{r4, r5, r7, pc}

08028e22 <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8028e22:	b5b0      	push	{r4, r5, r7, lr}
 8028e24:	b082      	sub	sp, #8
 8028e26:	af00      	add	r7, sp, #0
 8028e28:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8028e2a:	687b      	ldr	r3, [r7, #4]
 8028e2c:	681c      	ldr	r4, [r3, #0]
 8028e2e:	687b      	ldr	r3, [r7, #4]
 8028e30:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8028e32:	687b      	ldr	r3, [r7, #4]
 8028e34:	4618      	mov	r0, r3
 8028e36:	f7ff f9ef 	bl	8028218 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8028e3a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8028e3c:	461a      	mov	r2, r3
 8028e3e:	4629      	mov	r1, r5
 8028e40:	4620      	mov	r0, r4
 8028e42:	f7ff fa0d 	bl	8028260 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      }
 8028e46:	687b      	ldr	r3, [r7, #4]
 8028e48:	4618      	mov	r0, r3
 8028e4a:	f7fe fd5b 	bl	8027904 <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>
 8028e4e:	687b      	ldr	r3, [r7, #4]
 8028e50:	4618      	mov	r0, r3
 8028e52:	3708      	adds	r7, #8
 8028e54:	46bd      	mov	sp, r7
 8028e56:	bdb0      	pop	{r4, r5, r7, pc}

08028e58 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 8028e58:	b580      	push	{r7, lr}
 8028e5a:	af00      	add	r7, sp, #0
 8028e5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8028e60:	2001      	movs	r0, #1
 8028e62:	f7ff ff4f 	bl	8028d04 <_Z41__static_initialization_and_destruction_0ii>
 8028e66:	bd80      	pop	{r7, pc}

08028e68 <_GLOBAL__sub_D__Z18trained_model_initPFPvjjE>:
 8028e68:	b580      	push	{r7, lr}
 8028e6a:	af00      	add	r7, sp, #0
 8028e6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8028e70:	2000      	movs	r0, #0
 8028e72:	f7ff ff47 	bl	8028d04 <_Z41__static_initialization_and_destruction_0ii>
 8028e76:	bd80      	pop	{r7, pc}

08028e78 <_ZdlPvj>:
 8028e78:	f000 b8cd 	b.w	8029016 <_ZdlPv>

08028e7c <_ZdaPv>:
 8028e7c:	f000 b8cb 	b.w	8029016 <_ZdlPv>

08028e80 <_Znwj>:
 8028e80:	2801      	cmp	r0, #1
 8028e82:	bf38      	it	cc
 8028e84:	2001      	movcc	r0, #1
 8028e86:	b510      	push	{r4, lr}
 8028e88:	4604      	mov	r4, r0
 8028e8a:	4620      	mov	r0, r4
 8028e8c:	f003 f9f0 	bl	802c270 <malloc>
 8028e90:	b930      	cbnz	r0, 8028ea0 <_Znwj+0x20>
 8028e92:	f000 f8c3 	bl	802901c <_ZSt15get_new_handlerv>
 8028e96:	b908      	cbnz	r0, 8028e9c <_Znwj+0x1c>
 8028e98:	f003 f97c 	bl	802c194 <abort>
 8028e9c:	4780      	blx	r0
 8028e9e:	e7f4      	b.n	8028e8a <_Znwj+0xa>
 8028ea0:	bd10      	pop	{r4, pc}

08028ea2 <_Znaj>:
 8028ea2:	f7ff bfed 	b.w	8028e80 <_Znwj>

08028ea6 <_ZSt17__throw_bad_allocv>:
 8028ea6:	b508      	push	{r3, lr}
 8028ea8:	f003 f974 	bl	802c194 <abort>

08028eac <_ZSt19__throw_logic_errorPKc>:
 8028eac:	b508      	push	{r3, lr}
 8028eae:	f003 f971 	bl	802c194 <abort>

08028eb2 <_ZSt20__throw_length_errorPKc>:
 8028eb2:	b508      	push	{r3, lr}
 8028eb4:	f003 f96e 	bl	802c194 <abort>

08028eb8 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8028eb8:	b40f      	push	{r0, r1, r2, r3}
 8028eba:	b580      	push	{r7, lr}
 8028ebc:	b084      	sub	sp, #16
 8028ebe:	af00      	add	r7, sp, #0
 8028ec0:	f107 0418 	add.w	r4, r7, #24
 8028ec4:	f854 2b04 	ldr.w	r2, [r4], #4
 8028ec8:	607a      	str	r2, [r7, #4]
 8028eca:	4610      	mov	r0, r2
 8028ecc:	f7d7 f9fa 	bl	80002c4 <strlen>
 8028ed0:	f200 2307 	addw	r3, r0, #519	; 0x207
 8028ed4:	f023 0307 	bic.w	r3, r3, #7
 8028ed8:	ebad 0d03 	sub.w	sp, sp, r3
 8028edc:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8028ee0:	687a      	ldr	r2, [r7, #4]
 8028ee2:	60fc      	str	r4, [r7, #12]
 8028ee4:	4623      	mov	r3, r4
 8028ee6:	4668      	mov	r0, sp
 8028ee8:	f000 f854 	bl	8028f94 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8028eec:	f003 f952 	bl	802c194 <abort>

08028ef0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8028ef0:	b580      	push	{r7, lr}
 8028ef2:	b09c      	sub	sp, #112	; 0x70
 8028ef4:	4606      	mov	r6, r0
 8028ef6:	af00      	add	r7, sp, #0
 8028ef8:	460c      	mov	r4, r1
 8028efa:	1ba4      	subs	r4, r4, r6
 8028efc:	490e      	ldr	r1, [pc, #56]	; (8028f38 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8028efe:	2269      	movs	r2, #105	; 0x69
 8028f00:	1d38      	adds	r0, r7, #4
 8028f02:	f003 f9c5 	bl	802c290 <memcpy>
 8028f06:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8028f0a:	f023 0307 	bic.w	r3, r3, #7
 8028f0e:	ebad 0d03 	sub.w	sp, sp, r3
 8028f12:	466d      	mov	r5, sp
 8028f14:	2268      	movs	r2, #104	; 0x68
 8028f16:	1d39      	adds	r1, r7, #4
 8028f18:	4628      	mov	r0, r5
 8028f1a:	f003 f9b9 	bl	802c290 <memcpy>
 8028f1e:	4622      	mov	r2, r4
 8028f20:	4631      	mov	r1, r6
 8028f22:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8028f26:	442c      	add	r4, r5
 8028f28:	f003 f9b2 	bl	802c290 <memcpy>
 8028f2c:	2300      	movs	r3, #0
 8028f2e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8028f32:	4628      	mov	r0, r5
 8028f34:	f7ff ffba 	bl	8028eac <_ZSt19__throw_logic_errorPKc>
 8028f38:	08031a18 	.word	0x08031a18

08028f3c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8028f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028f40:	af00      	add	r7, sp, #0
 8028f42:	b084      	sub	sp, #16
 8028f44:	466d      	mov	r5, sp
 8028f46:	f105 040c 	add.w	r4, r5, #12
 8028f4a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8028f90 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8028f4e:	4623      	mov	r3, r4
 8028f50:	f04f 0c0a 	mov.w	ip, #10
 8028f54:	fbb2 f6fc 	udiv	r6, r2, ip
 8028f58:	fb0c 2e16 	mls	lr, ip, r6, r2
 8028f5c:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8028f60:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8028f64:	4696      	mov	lr, r2
 8028f66:	f1be 0f09 	cmp.w	lr, #9
 8028f6a:	4632      	mov	r2, r6
 8028f6c:	d8f2      	bhi.n	8028f54 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8028f6e:	1ae4      	subs	r4, r4, r3
 8028f70:	428c      	cmp	r4, r1
 8028f72:	d809      	bhi.n	8028f88 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8028f74:	f1c4 030c 	rsb	r3, r4, #12
 8028f78:	4622      	mov	r2, r4
 8028f7a:	18e9      	adds	r1, r5, r3
 8028f7c:	f003 f988 	bl	802c290 <memcpy>
 8028f80:	4620      	mov	r0, r4
 8028f82:	46bd      	mov	sp, r7
 8028f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028f88:	f04f 34ff 	mov.w	r4, #4294967295
 8028f8c:	e7f8      	b.n	8028f80 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8028f8e:	bf00      	nop
 8028f90:	08031a81 	.word	0x08031a81

08028f94 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8028f94:	3901      	subs	r1, #1
 8028f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028f9a:	4607      	mov	r7, r0
 8028f9c:	4615      	mov	r5, r2
 8028f9e:	eb00 0801 	add.w	r8, r0, r1
 8028fa2:	4604      	mov	r4, r0
 8028fa4:	782a      	ldrb	r2, [r5, #0]
 8028fa6:	b392      	cbz	r2, 802900e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8028fa8:	4544      	cmp	r4, r8
 8028faa:	d22a      	bcs.n	8029002 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8028fac:	2a25      	cmp	r2, #37	; 0x25
 8028fae:	d107      	bne.n	8028fc0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8028fb0:	786a      	ldrb	r2, [r5, #1]
 8028fb2:	2a73      	cmp	r2, #115	; 0x73
 8028fb4:	d009      	beq.n	8028fca <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8028fb6:	2a7a      	cmp	r2, #122	; 0x7a
 8028fb8:	d012      	beq.n	8028fe0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8028fba:	2a25      	cmp	r2, #37	; 0x25
 8028fbc:	d100      	bne.n	8028fc0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8028fbe:	3501      	adds	r5, #1
 8028fc0:	f815 2b01 	ldrb.w	r2, [r5], #1
 8028fc4:	f804 2b01 	strb.w	r2, [r4], #1
 8028fc8:	e7ec      	b.n	8028fa4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8028fca:	f853 2b04 	ldr.w	r2, [r3], #4
 8028fce:	3a01      	subs	r2, #1
 8028fd0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8028fd4:	b1c9      	cbz	r1, 802900a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8028fd6:	4544      	cmp	r4, r8
 8028fd8:	d013      	beq.n	8029002 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8028fda:	f804 1b01 	strb.w	r1, [r4], #1
 8028fde:	e7f7      	b.n	8028fd0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8028fe0:	78aa      	ldrb	r2, [r5, #2]
 8028fe2:	2a75      	cmp	r2, #117	; 0x75
 8028fe4:	d1ec      	bne.n	8028fc0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8028fe6:	461e      	mov	r6, r3
 8028fe8:	eba8 0104 	sub.w	r1, r8, r4
 8028fec:	f856 2b04 	ldr.w	r2, [r6], #4
 8028ff0:	4620      	mov	r0, r4
 8028ff2:	f7ff ffa3 	bl	8028f3c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8028ff6:	2800      	cmp	r0, #0
 8028ff8:	dd03      	ble.n	8029002 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8028ffa:	4404      	add	r4, r0
 8028ffc:	3503      	adds	r5, #3
 8028ffe:	4633      	mov	r3, r6
 8029000:	e7d0      	b.n	8028fa4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8029002:	4621      	mov	r1, r4
 8029004:	4638      	mov	r0, r7
 8029006:	f7ff ff73 	bl	8028ef0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 802900a:	3502      	adds	r5, #2
 802900c:	e7ca      	b.n	8028fa4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 802900e:	7022      	strb	r2, [r4, #0]
 8029010:	1be0      	subs	r0, r4, r7
 8029012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08029016 <_ZdlPv>:
 8029016:	f003 b933 	b.w	802c280 <free>
	...

0802901c <_ZSt15get_new_handlerv>:
 802901c:	4b02      	ldr	r3, [pc, #8]	; (8029028 <_ZSt15get_new_handlerv+0xc>)
 802901e:	6818      	ldr	r0, [r3, #0]
 8029020:	f3bf 8f5b 	dmb	ish
 8029024:	4770      	bx	lr
 8029026:	bf00      	nop
 8029028:	2000732c 	.word	0x2000732c
 802902c:	00000000 	.word	0x00000000

08029030 <cos>:
 8029030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8029032:	ec53 2b10 	vmov	r2, r3, d0
 8029036:	4826      	ldr	r0, [pc, #152]	; (80290d0 <cos+0xa0>)
 8029038:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802903c:	4281      	cmp	r1, r0
 802903e:	dc06      	bgt.n	802904e <cos+0x1e>
 8029040:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80290c8 <cos+0x98>
 8029044:	b005      	add	sp, #20
 8029046:	f85d eb04 	ldr.w	lr, [sp], #4
 802904a:	f001 bf35 	b.w	802aeb8 <__kernel_cos>
 802904e:	4821      	ldr	r0, [pc, #132]	; (80290d4 <cos+0xa4>)
 8029050:	4281      	cmp	r1, r0
 8029052:	dd09      	ble.n	8029068 <cos+0x38>
 8029054:	ee10 0a10 	vmov	r0, s0
 8029058:	4619      	mov	r1, r3
 802905a:	f7d7 f93f 	bl	80002dc <__aeabi_dsub>
 802905e:	ec41 0b10 	vmov	d0, r0, r1
 8029062:	b005      	add	sp, #20
 8029064:	f85d fb04 	ldr.w	pc, [sp], #4
 8029068:	4668      	mov	r0, sp
 802906a:	f001 f911 	bl	802a290 <__ieee754_rem_pio2>
 802906e:	f000 0003 	and.w	r0, r0, #3
 8029072:	2801      	cmp	r0, #1
 8029074:	d00b      	beq.n	802908e <cos+0x5e>
 8029076:	2802      	cmp	r0, #2
 8029078:	d016      	beq.n	80290a8 <cos+0x78>
 802907a:	b9e0      	cbnz	r0, 80290b6 <cos+0x86>
 802907c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8029080:	ed9d 0b00 	vldr	d0, [sp]
 8029084:	f001 ff18 	bl	802aeb8 <__kernel_cos>
 8029088:	ec51 0b10 	vmov	r0, r1, d0
 802908c:	e7e7      	b.n	802905e <cos+0x2e>
 802908e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8029092:	ed9d 0b00 	vldr	d0, [sp]
 8029096:	f002 fb27 	bl	802b6e8 <__kernel_sin>
 802909a:	ec53 2b10 	vmov	r2, r3, d0
 802909e:	ee10 0a10 	vmov	r0, s0
 80290a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80290a6:	e7da      	b.n	802905e <cos+0x2e>
 80290a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80290ac:	ed9d 0b00 	vldr	d0, [sp]
 80290b0:	f001 ff02 	bl	802aeb8 <__kernel_cos>
 80290b4:	e7f1      	b.n	802909a <cos+0x6a>
 80290b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80290ba:	ed9d 0b00 	vldr	d0, [sp]
 80290be:	2001      	movs	r0, #1
 80290c0:	f002 fb12 	bl	802b6e8 <__kernel_sin>
 80290c4:	e7e0      	b.n	8029088 <cos+0x58>
 80290c6:	bf00      	nop
	...
 80290d0:	3fe921fb 	.word	0x3fe921fb
 80290d4:	7fefffff 	.word	0x7fefffff

080290d8 <floor>:
 80290d8:	ec51 0b10 	vmov	r0, r1, d0
 80290dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80290e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80290e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80290e8:	2e13      	cmp	r6, #19
 80290ea:	ee10 5a10 	vmov	r5, s0
 80290ee:	ee10 8a10 	vmov	r8, s0
 80290f2:	460c      	mov	r4, r1
 80290f4:	dc32      	bgt.n	802915c <floor+0x84>
 80290f6:	2e00      	cmp	r6, #0
 80290f8:	da14      	bge.n	8029124 <floor+0x4c>
 80290fa:	a333      	add	r3, pc, #204	; (adr r3, 80291c8 <floor+0xf0>)
 80290fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029100:	f7d7 f8ee 	bl	80002e0 <__adddf3>
 8029104:	2200      	movs	r2, #0
 8029106:	2300      	movs	r3, #0
 8029108:	f7d7 fd30 	bl	8000b6c <__aeabi_dcmpgt>
 802910c:	b138      	cbz	r0, 802911e <floor+0x46>
 802910e:	2c00      	cmp	r4, #0
 8029110:	da57      	bge.n	80291c2 <floor+0xea>
 8029112:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8029116:	431d      	orrs	r5, r3
 8029118:	d001      	beq.n	802911e <floor+0x46>
 802911a:	4c2d      	ldr	r4, [pc, #180]	; (80291d0 <floor+0xf8>)
 802911c:	2500      	movs	r5, #0
 802911e:	4621      	mov	r1, r4
 8029120:	4628      	mov	r0, r5
 8029122:	e025      	b.n	8029170 <floor+0x98>
 8029124:	4f2b      	ldr	r7, [pc, #172]	; (80291d4 <floor+0xfc>)
 8029126:	4137      	asrs	r7, r6
 8029128:	ea01 0307 	and.w	r3, r1, r7
 802912c:	4303      	orrs	r3, r0
 802912e:	d01f      	beq.n	8029170 <floor+0x98>
 8029130:	a325      	add	r3, pc, #148	; (adr r3, 80291c8 <floor+0xf0>)
 8029132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029136:	f7d7 f8d3 	bl	80002e0 <__adddf3>
 802913a:	2200      	movs	r2, #0
 802913c:	2300      	movs	r3, #0
 802913e:	f7d7 fd15 	bl	8000b6c <__aeabi_dcmpgt>
 8029142:	2800      	cmp	r0, #0
 8029144:	d0eb      	beq.n	802911e <floor+0x46>
 8029146:	2c00      	cmp	r4, #0
 8029148:	bfbe      	ittt	lt
 802914a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 802914e:	fa43 f606 	asrlt.w	r6, r3, r6
 8029152:	19a4      	addlt	r4, r4, r6
 8029154:	ea24 0407 	bic.w	r4, r4, r7
 8029158:	2500      	movs	r5, #0
 802915a:	e7e0      	b.n	802911e <floor+0x46>
 802915c:	2e33      	cmp	r6, #51	; 0x33
 802915e:	dd0b      	ble.n	8029178 <floor+0xa0>
 8029160:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8029164:	d104      	bne.n	8029170 <floor+0x98>
 8029166:	ee10 2a10 	vmov	r2, s0
 802916a:	460b      	mov	r3, r1
 802916c:	f7d7 f8b8 	bl	80002e0 <__adddf3>
 8029170:	ec41 0b10 	vmov	d0, r0, r1
 8029174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029178:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 802917c:	f04f 33ff 	mov.w	r3, #4294967295
 8029180:	fa23 f707 	lsr.w	r7, r3, r7
 8029184:	4207      	tst	r7, r0
 8029186:	d0f3      	beq.n	8029170 <floor+0x98>
 8029188:	a30f      	add	r3, pc, #60	; (adr r3, 80291c8 <floor+0xf0>)
 802918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802918e:	f7d7 f8a7 	bl	80002e0 <__adddf3>
 8029192:	2200      	movs	r2, #0
 8029194:	2300      	movs	r3, #0
 8029196:	f7d7 fce9 	bl	8000b6c <__aeabi_dcmpgt>
 802919a:	2800      	cmp	r0, #0
 802919c:	d0bf      	beq.n	802911e <floor+0x46>
 802919e:	2c00      	cmp	r4, #0
 80291a0:	da02      	bge.n	80291a8 <floor+0xd0>
 80291a2:	2e14      	cmp	r6, #20
 80291a4:	d103      	bne.n	80291ae <floor+0xd6>
 80291a6:	3401      	adds	r4, #1
 80291a8:	ea25 0507 	bic.w	r5, r5, r7
 80291ac:	e7b7      	b.n	802911e <floor+0x46>
 80291ae:	2301      	movs	r3, #1
 80291b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80291b4:	fa03 f606 	lsl.w	r6, r3, r6
 80291b8:	4435      	add	r5, r6
 80291ba:	4545      	cmp	r5, r8
 80291bc:	bf38      	it	cc
 80291be:	18e4      	addcc	r4, r4, r3
 80291c0:	e7f2      	b.n	80291a8 <floor+0xd0>
 80291c2:	2500      	movs	r5, #0
 80291c4:	462c      	mov	r4, r5
 80291c6:	e7aa      	b.n	802911e <floor+0x46>
 80291c8:	8800759c 	.word	0x8800759c
 80291cc:	7e37e43c 	.word	0x7e37e43c
 80291d0:	bff00000 	.word	0xbff00000
 80291d4:	000fffff 	.word	0x000fffff

080291d8 <frexp>:
 80291d8:	b570      	push	{r4, r5, r6, lr}
 80291da:	2100      	movs	r1, #0
 80291dc:	ec55 4b10 	vmov	r4, r5, d0
 80291e0:	6001      	str	r1, [r0, #0]
 80291e2:	4916      	ldr	r1, [pc, #88]	; (802923c <frexp+0x64>)
 80291e4:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80291e8:	428a      	cmp	r2, r1
 80291ea:	4606      	mov	r6, r0
 80291ec:	462b      	mov	r3, r5
 80291ee:	dc22      	bgt.n	8029236 <frexp+0x5e>
 80291f0:	ee10 1a10 	vmov	r1, s0
 80291f4:	4311      	orrs	r1, r2
 80291f6:	d01e      	beq.n	8029236 <frexp+0x5e>
 80291f8:	4911      	ldr	r1, [pc, #68]	; (8029240 <frexp+0x68>)
 80291fa:	4029      	ands	r1, r5
 80291fc:	b969      	cbnz	r1, 802921a <frexp+0x42>
 80291fe:	4b11      	ldr	r3, [pc, #68]	; (8029244 <frexp+0x6c>)
 8029200:	2200      	movs	r2, #0
 8029202:	ee10 0a10 	vmov	r0, s0
 8029206:	4629      	mov	r1, r5
 8029208:	f7d7 fa20 	bl	800064c <__aeabi_dmul>
 802920c:	460b      	mov	r3, r1
 802920e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8029212:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8029216:	4604      	mov	r4, r0
 8029218:	6031      	str	r1, [r6, #0]
 802921a:	6831      	ldr	r1, [r6, #0]
 802921c:	1512      	asrs	r2, r2, #20
 802921e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8029222:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8029226:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802922a:	440a      	add	r2, r1
 802922c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8029230:	6032      	str	r2, [r6, #0]
 8029232:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8029236:	ec45 4b10 	vmov	d0, r4, r5
 802923a:	bd70      	pop	{r4, r5, r6, pc}
 802923c:	7fefffff 	.word	0x7fefffff
 8029240:	7ff00000 	.word	0x7ff00000
 8029244:	43500000 	.word	0x43500000

08029248 <round>:
 8029248:	ec51 0b10 	vmov	r0, r1, d0
 802924c:	b570      	push	{r4, r5, r6, lr}
 802924e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8029252:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8029256:	2c13      	cmp	r4, #19
 8029258:	ee10 2a10 	vmov	r2, s0
 802925c:	460b      	mov	r3, r1
 802925e:	dc19      	bgt.n	8029294 <round+0x4c>
 8029260:	2c00      	cmp	r4, #0
 8029262:	da09      	bge.n	8029278 <round+0x30>
 8029264:	3401      	adds	r4, #1
 8029266:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 802926a:	d103      	bne.n	8029274 <round+0x2c>
 802926c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8029270:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8029274:	2200      	movs	r2, #0
 8029276:	e028      	b.n	80292ca <round+0x82>
 8029278:	4d15      	ldr	r5, [pc, #84]	; (80292d0 <round+0x88>)
 802927a:	4125      	asrs	r5, r4
 802927c:	ea01 0605 	and.w	r6, r1, r5
 8029280:	4332      	orrs	r2, r6
 8029282:	d00e      	beq.n	80292a2 <round+0x5a>
 8029284:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8029288:	fa42 f404 	asr.w	r4, r2, r4
 802928c:	4423      	add	r3, r4
 802928e:	ea23 0305 	bic.w	r3, r3, r5
 8029292:	e7ef      	b.n	8029274 <round+0x2c>
 8029294:	2c33      	cmp	r4, #51	; 0x33
 8029296:	dd07      	ble.n	80292a8 <round+0x60>
 8029298:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 802929c:	d101      	bne.n	80292a2 <round+0x5a>
 802929e:	f7d7 f81f 	bl	80002e0 <__adddf3>
 80292a2:	ec41 0b10 	vmov	d0, r0, r1
 80292a6:	bd70      	pop	{r4, r5, r6, pc}
 80292a8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80292ac:	f04f 35ff 	mov.w	r5, #4294967295
 80292b0:	40f5      	lsrs	r5, r6
 80292b2:	4228      	tst	r0, r5
 80292b4:	d0f5      	beq.n	80292a2 <round+0x5a>
 80292b6:	2101      	movs	r1, #1
 80292b8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80292bc:	fa01 f404 	lsl.w	r4, r1, r4
 80292c0:	1912      	adds	r2, r2, r4
 80292c2:	bf28      	it	cs
 80292c4:	185b      	addcs	r3, r3, r1
 80292c6:	ea22 0205 	bic.w	r2, r2, r5
 80292ca:	4619      	mov	r1, r3
 80292cc:	4610      	mov	r0, r2
 80292ce:	e7e8      	b.n	80292a2 <round+0x5a>
 80292d0:	000fffff 	.word	0x000fffff
 80292d4:	00000000 	.word	0x00000000

080292d8 <sin>:
 80292d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80292da:	ec53 2b10 	vmov	r2, r3, d0
 80292de:	4828      	ldr	r0, [pc, #160]	; (8029380 <sin+0xa8>)
 80292e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80292e4:	4281      	cmp	r1, r0
 80292e6:	dc07      	bgt.n	80292f8 <sin+0x20>
 80292e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8029378 <sin+0xa0>
 80292ec:	2000      	movs	r0, #0
 80292ee:	b005      	add	sp, #20
 80292f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80292f4:	f002 b9f8 	b.w	802b6e8 <__kernel_sin>
 80292f8:	4822      	ldr	r0, [pc, #136]	; (8029384 <sin+0xac>)
 80292fa:	4281      	cmp	r1, r0
 80292fc:	dd09      	ble.n	8029312 <sin+0x3a>
 80292fe:	ee10 0a10 	vmov	r0, s0
 8029302:	4619      	mov	r1, r3
 8029304:	f7d6 ffea 	bl	80002dc <__aeabi_dsub>
 8029308:	ec41 0b10 	vmov	d0, r0, r1
 802930c:	b005      	add	sp, #20
 802930e:	f85d fb04 	ldr.w	pc, [sp], #4
 8029312:	4668      	mov	r0, sp
 8029314:	f000 ffbc 	bl	802a290 <__ieee754_rem_pio2>
 8029318:	f000 0003 	and.w	r0, r0, #3
 802931c:	2801      	cmp	r0, #1
 802931e:	d00c      	beq.n	802933a <sin+0x62>
 8029320:	2802      	cmp	r0, #2
 8029322:	d011      	beq.n	8029348 <sin+0x70>
 8029324:	b9f0      	cbnz	r0, 8029364 <sin+0x8c>
 8029326:	ed9d 1b02 	vldr	d1, [sp, #8]
 802932a:	ed9d 0b00 	vldr	d0, [sp]
 802932e:	2001      	movs	r0, #1
 8029330:	f002 f9da 	bl	802b6e8 <__kernel_sin>
 8029334:	ec51 0b10 	vmov	r0, r1, d0
 8029338:	e7e6      	b.n	8029308 <sin+0x30>
 802933a:	ed9d 1b02 	vldr	d1, [sp, #8]
 802933e:	ed9d 0b00 	vldr	d0, [sp]
 8029342:	f001 fdb9 	bl	802aeb8 <__kernel_cos>
 8029346:	e7f5      	b.n	8029334 <sin+0x5c>
 8029348:	ed9d 1b02 	vldr	d1, [sp, #8]
 802934c:	ed9d 0b00 	vldr	d0, [sp]
 8029350:	2001      	movs	r0, #1
 8029352:	f002 f9c9 	bl	802b6e8 <__kernel_sin>
 8029356:	ec53 2b10 	vmov	r2, r3, d0
 802935a:	ee10 0a10 	vmov	r0, s0
 802935e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8029362:	e7d1      	b.n	8029308 <sin+0x30>
 8029364:	ed9d 1b02 	vldr	d1, [sp, #8]
 8029368:	ed9d 0b00 	vldr	d0, [sp]
 802936c:	f001 fda4 	bl	802aeb8 <__kernel_cos>
 8029370:	e7f1      	b.n	8029356 <sin+0x7e>
 8029372:	bf00      	nop
 8029374:	f3af 8000 	nop.w
	...
 8029380:	3fe921fb 	.word	0x3fe921fb
 8029384:	7fefffff 	.word	0x7fefffff

08029388 <ceilf>:
 8029388:	ee10 3a10 	vmov	r3, s0
 802938c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8029390:	3a7f      	subs	r2, #127	; 0x7f
 8029392:	2a16      	cmp	r2, #22
 8029394:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8029398:	dc2a      	bgt.n	80293f0 <ceilf+0x68>
 802939a:	2a00      	cmp	r2, #0
 802939c:	da11      	bge.n	80293c2 <ceilf+0x3a>
 802939e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8029404 <ceilf+0x7c>
 80293a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80293a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80293aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80293ae:	dd05      	ble.n	80293bc <ceilf+0x34>
 80293b0:	2b00      	cmp	r3, #0
 80293b2:	db23      	blt.n	80293fc <ceilf+0x74>
 80293b4:	2900      	cmp	r1, #0
 80293b6:	bf18      	it	ne
 80293b8:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80293bc:	ee00 3a10 	vmov	s0, r3
 80293c0:	4770      	bx	lr
 80293c2:	4911      	ldr	r1, [pc, #68]	; (8029408 <ceilf+0x80>)
 80293c4:	4111      	asrs	r1, r2
 80293c6:	420b      	tst	r3, r1
 80293c8:	d0fa      	beq.n	80293c0 <ceilf+0x38>
 80293ca:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8029404 <ceilf+0x7c>
 80293ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80293d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80293d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80293da:	ddef      	ble.n	80293bc <ceilf+0x34>
 80293dc:	2b00      	cmp	r3, #0
 80293de:	bfc2      	ittt	gt
 80293e0:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80293e4:	fa40 f202 	asrgt.w	r2, r0, r2
 80293e8:	189b      	addgt	r3, r3, r2
 80293ea:	ea23 0301 	bic.w	r3, r3, r1
 80293ee:	e7e5      	b.n	80293bc <ceilf+0x34>
 80293f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80293f4:	d3e4      	bcc.n	80293c0 <ceilf+0x38>
 80293f6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80293fa:	4770      	bx	lr
 80293fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8029400:	e7dc      	b.n	80293bc <ceilf+0x34>
 8029402:	bf00      	nop
 8029404:	7149f2ca 	.word	0x7149f2ca
 8029408:	007fffff 	.word	0x007fffff

0802940c <cosf>:
 802940c:	ee10 3a10 	vmov	r3, s0
 8029410:	b507      	push	{r0, r1, r2, lr}
 8029412:	4a1e      	ldr	r2, [pc, #120]	; (802948c <cosf+0x80>)
 8029414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8029418:	4293      	cmp	r3, r2
 802941a:	dc06      	bgt.n	802942a <cosf+0x1e>
 802941c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8029490 <cosf+0x84>
 8029420:	b003      	add	sp, #12
 8029422:	f85d eb04 	ldr.w	lr, [sp], #4
 8029426:	f002 ba1d 	b.w	802b864 <__kernel_cosf>
 802942a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802942e:	db04      	blt.n	802943a <cosf+0x2e>
 8029430:	ee30 0a40 	vsub.f32	s0, s0, s0
 8029434:	b003      	add	sp, #12
 8029436:	f85d fb04 	ldr.w	pc, [sp], #4
 802943a:	4668      	mov	r0, sp
 802943c:	f001 fbfc 	bl	802ac38 <__ieee754_rem_pio2f>
 8029440:	f000 0003 	and.w	r0, r0, #3
 8029444:	2801      	cmp	r0, #1
 8029446:	d009      	beq.n	802945c <cosf+0x50>
 8029448:	2802      	cmp	r0, #2
 802944a:	d010      	beq.n	802946e <cosf+0x62>
 802944c:	b9b0      	cbnz	r0, 802947c <cosf+0x70>
 802944e:	eddd 0a01 	vldr	s1, [sp, #4]
 8029452:	ed9d 0a00 	vldr	s0, [sp]
 8029456:	f002 fa05 	bl	802b864 <__kernel_cosf>
 802945a:	e7eb      	b.n	8029434 <cosf+0x28>
 802945c:	eddd 0a01 	vldr	s1, [sp, #4]
 8029460:	ed9d 0a00 	vldr	s0, [sp]
 8029464:	f002 fcd4 	bl	802be10 <__kernel_sinf>
 8029468:	eeb1 0a40 	vneg.f32	s0, s0
 802946c:	e7e2      	b.n	8029434 <cosf+0x28>
 802946e:	eddd 0a01 	vldr	s1, [sp, #4]
 8029472:	ed9d 0a00 	vldr	s0, [sp]
 8029476:	f002 f9f5 	bl	802b864 <__kernel_cosf>
 802947a:	e7f5      	b.n	8029468 <cosf+0x5c>
 802947c:	eddd 0a01 	vldr	s1, [sp, #4]
 8029480:	ed9d 0a00 	vldr	s0, [sp]
 8029484:	2001      	movs	r0, #1
 8029486:	f002 fcc3 	bl	802be10 <__kernel_sinf>
 802948a:	e7d3      	b.n	8029434 <cosf+0x28>
 802948c:	3f490fd8 	.word	0x3f490fd8
 8029490:	00000000 	.word	0x00000000

08029494 <floorf>:
 8029494:	ee10 3a10 	vmov	r3, s0
 8029498:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802949c:	3a7f      	subs	r2, #127	; 0x7f
 802949e:	2a16      	cmp	r2, #22
 80294a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80294a4:	dc2a      	bgt.n	80294fc <floorf+0x68>
 80294a6:	2a00      	cmp	r2, #0
 80294a8:	da11      	bge.n	80294ce <floorf+0x3a>
 80294aa:	eddf 7a18 	vldr	s15, [pc, #96]	; 802950c <floorf+0x78>
 80294ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 80294b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80294b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80294ba:	dd05      	ble.n	80294c8 <floorf+0x34>
 80294bc:	2b00      	cmp	r3, #0
 80294be:	da23      	bge.n	8029508 <floorf+0x74>
 80294c0:	4a13      	ldr	r2, [pc, #76]	; (8029510 <floorf+0x7c>)
 80294c2:	2900      	cmp	r1, #0
 80294c4:	bf18      	it	ne
 80294c6:	4613      	movne	r3, r2
 80294c8:	ee00 3a10 	vmov	s0, r3
 80294cc:	4770      	bx	lr
 80294ce:	4911      	ldr	r1, [pc, #68]	; (8029514 <floorf+0x80>)
 80294d0:	4111      	asrs	r1, r2
 80294d2:	420b      	tst	r3, r1
 80294d4:	d0fa      	beq.n	80294cc <floorf+0x38>
 80294d6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802950c <floorf+0x78>
 80294da:	ee30 0a27 	vadd.f32	s0, s0, s15
 80294de:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80294e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80294e6:	ddef      	ble.n	80294c8 <floorf+0x34>
 80294e8:	2b00      	cmp	r3, #0
 80294ea:	bfbe      	ittt	lt
 80294ec:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80294f0:	fa40 f202 	asrlt.w	r2, r0, r2
 80294f4:	189b      	addlt	r3, r3, r2
 80294f6:	ea23 0301 	bic.w	r3, r3, r1
 80294fa:	e7e5      	b.n	80294c8 <floorf+0x34>
 80294fc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8029500:	d3e4      	bcc.n	80294cc <floorf+0x38>
 8029502:	ee30 0a00 	vadd.f32	s0, s0, s0
 8029506:	4770      	bx	lr
 8029508:	2300      	movs	r3, #0
 802950a:	e7dd      	b.n	80294c8 <floorf+0x34>
 802950c:	7149f2ca 	.word	0x7149f2ca
 8029510:	bf800000 	.word	0xbf800000
 8029514:	007fffff 	.word	0x007fffff

08029518 <fmaf>:
 8029518:	eea0 0a20 	vfma.f32	s0, s0, s1
 802951c:	4770      	bx	lr
	...

08029520 <roundf>:
 8029520:	ee10 0a10 	vmov	r0, s0
 8029524:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8029528:	3a7f      	subs	r2, #127	; 0x7f
 802952a:	2a16      	cmp	r2, #22
 802952c:	dc15      	bgt.n	802955a <roundf+0x3a>
 802952e:	2a00      	cmp	r2, #0
 8029530:	da08      	bge.n	8029544 <roundf+0x24>
 8029532:	3201      	adds	r2, #1
 8029534:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8029538:	d101      	bne.n	802953e <roundf+0x1e>
 802953a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 802953e:	ee00 3a10 	vmov	s0, r3
 8029542:	4770      	bx	lr
 8029544:	4907      	ldr	r1, [pc, #28]	; (8029564 <roundf+0x44>)
 8029546:	4111      	asrs	r1, r2
 8029548:	4208      	tst	r0, r1
 802954a:	d0fa      	beq.n	8029542 <roundf+0x22>
 802954c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8029550:	4113      	asrs	r3, r2
 8029552:	4403      	add	r3, r0
 8029554:	ea23 0301 	bic.w	r3, r3, r1
 8029558:	e7f1      	b.n	802953e <roundf+0x1e>
 802955a:	2a80      	cmp	r2, #128	; 0x80
 802955c:	d1f1      	bne.n	8029542 <roundf+0x22>
 802955e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8029562:	4770      	bx	lr
 8029564:	007fffff 	.word	0x007fffff

08029568 <sinf>:
 8029568:	ee10 3a10 	vmov	r3, s0
 802956c:	b507      	push	{r0, r1, r2, lr}
 802956e:	4a1f      	ldr	r2, [pc, #124]	; (80295ec <sinf+0x84>)
 8029570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8029574:	4293      	cmp	r3, r2
 8029576:	dc07      	bgt.n	8029588 <sinf+0x20>
 8029578:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80295f0 <sinf+0x88>
 802957c:	2000      	movs	r0, #0
 802957e:	b003      	add	sp, #12
 8029580:	f85d eb04 	ldr.w	lr, [sp], #4
 8029584:	f002 bc44 	b.w	802be10 <__kernel_sinf>
 8029588:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802958c:	db04      	blt.n	8029598 <sinf+0x30>
 802958e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8029592:	b003      	add	sp, #12
 8029594:	f85d fb04 	ldr.w	pc, [sp], #4
 8029598:	4668      	mov	r0, sp
 802959a:	f001 fb4d 	bl	802ac38 <__ieee754_rem_pio2f>
 802959e:	f000 0003 	and.w	r0, r0, #3
 80295a2:	2801      	cmp	r0, #1
 80295a4:	d00a      	beq.n	80295bc <sinf+0x54>
 80295a6:	2802      	cmp	r0, #2
 80295a8:	d00f      	beq.n	80295ca <sinf+0x62>
 80295aa:	b9c0      	cbnz	r0, 80295de <sinf+0x76>
 80295ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80295b0:	ed9d 0a00 	vldr	s0, [sp]
 80295b4:	2001      	movs	r0, #1
 80295b6:	f002 fc2b 	bl	802be10 <__kernel_sinf>
 80295ba:	e7ea      	b.n	8029592 <sinf+0x2a>
 80295bc:	eddd 0a01 	vldr	s1, [sp, #4]
 80295c0:	ed9d 0a00 	vldr	s0, [sp]
 80295c4:	f002 f94e 	bl	802b864 <__kernel_cosf>
 80295c8:	e7e3      	b.n	8029592 <sinf+0x2a>
 80295ca:	eddd 0a01 	vldr	s1, [sp, #4]
 80295ce:	ed9d 0a00 	vldr	s0, [sp]
 80295d2:	2001      	movs	r0, #1
 80295d4:	f002 fc1c 	bl	802be10 <__kernel_sinf>
 80295d8:	eeb1 0a40 	vneg.f32	s0, s0
 80295dc:	e7d9      	b.n	8029592 <sinf+0x2a>
 80295de:	eddd 0a01 	vldr	s1, [sp, #4]
 80295e2:	ed9d 0a00 	vldr	s0, [sp]
 80295e6:	f002 f93d 	bl	802b864 <__kernel_cosf>
 80295ea:	e7f5      	b.n	80295d8 <sinf+0x70>
 80295ec:	3f490fd8 	.word	0x3f490fd8
 80295f0:	00000000 	.word	0x00000000

080295f4 <pow>:
 80295f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80295f6:	ed2d 8b02 	vpush	{d8}
 80295fa:	eeb0 8a40 	vmov.f32	s16, s0
 80295fe:	eef0 8a60 	vmov.f32	s17, s1
 8029602:	ec55 4b11 	vmov	r4, r5, d1
 8029606:	f000 f913 	bl	8029830 <__ieee754_pow>
 802960a:	4622      	mov	r2, r4
 802960c:	462b      	mov	r3, r5
 802960e:	4620      	mov	r0, r4
 8029610:	4629      	mov	r1, r5
 8029612:	ec57 6b10 	vmov	r6, r7, d0
 8029616:	f7d7 fab3 	bl	8000b80 <__aeabi_dcmpun>
 802961a:	2800      	cmp	r0, #0
 802961c:	d13b      	bne.n	8029696 <pow+0xa2>
 802961e:	ec51 0b18 	vmov	r0, r1, d8
 8029622:	2200      	movs	r2, #0
 8029624:	2300      	movs	r3, #0
 8029626:	f7d7 fa79 	bl	8000b1c <__aeabi_dcmpeq>
 802962a:	b1b8      	cbz	r0, 802965c <pow+0x68>
 802962c:	2200      	movs	r2, #0
 802962e:	2300      	movs	r3, #0
 8029630:	4620      	mov	r0, r4
 8029632:	4629      	mov	r1, r5
 8029634:	f7d7 fa72 	bl	8000b1c <__aeabi_dcmpeq>
 8029638:	2800      	cmp	r0, #0
 802963a:	d146      	bne.n	80296ca <pow+0xd6>
 802963c:	ec45 4b10 	vmov	d0, r4, r5
 8029640:	f002 fc89 	bl	802bf56 <finite>
 8029644:	b338      	cbz	r0, 8029696 <pow+0xa2>
 8029646:	2200      	movs	r2, #0
 8029648:	2300      	movs	r3, #0
 802964a:	4620      	mov	r0, r4
 802964c:	4629      	mov	r1, r5
 802964e:	f7d7 fa6f 	bl	8000b30 <__aeabi_dcmplt>
 8029652:	b300      	cbz	r0, 8029696 <pow+0xa2>
 8029654:	f002 fdcc 	bl	802c1f0 <__errno>
 8029658:	2322      	movs	r3, #34	; 0x22
 802965a:	e01b      	b.n	8029694 <pow+0xa0>
 802965c:	ec47 6b10 	vmov	d0, r6, r7
 8029660:	f002 fc79 	bl	802bf56 <finite>
 8029664:	b9e0      	cbnz	r0, 80296a0 <pow+0xac>
 8029666:	eeb0 0a48 	vmov.f32	s0, s16
 802966a:	eef0 0a68 	vmov.f32	s1, s17
 802966e:	f002 fc72 	bl	802bf56 <finite>
 8029672:	b1a8      	cbz	r0, 80296a0 <pow+0xac>
 8029674:	ec45 4b10 	vmov	d0, r4, r5
 8029678:	f002 fc6d 	bl	802bf56 <finite>
 802967c:	b180      	cbz	r0, 80296a0 <pow+0xac>
 802967e:	4632      	mov	r2, r6
 8029680:	463b      	mov	r3, r7
 8029682:	4630      	mov	r0, r6
 8029684:	4639      	mov	r1, r7
 8029686:	f7d7 fa7b 	bl	8000b80 <__aeabi_dcmpun>
 802968a:	2800      	cmp	r0, #0
 802968c:	d0e2      	beq.n	8029654 <pow+0x60>
 802968e:	f002 fdaf 	bl	802c1f0 <__errno>
 8029692:	2321      	movs	r3, #33	; 0x21
 8029694:	6003      	str	r3, [r0, #0]
 8029696:	ecbd 8b02 	vpop	{d8}
 802969a:	ec47 6b10 	vmov	d0, r6, r7
 802969e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80296a0:	2200      	movs	r2, #0
 80296a2:	2300      	movs	r3, #0
 80296a4:	4630      	mov	r0, r6
 80296a6:	4639      	mov	r1, r7
 80296a8:	f7d7 fa38 	bl	8000b1c <__aeabi_dcmpeq>
 80296ac:	2800      	cmp	r0, #0
 80296ae:	d0f2      	beq.n	8029696 <pow+0xa2>
 80296b0:	eeb0 0a48 	vmov.f32	s0, s16
 80296b4:	eef0 0a68 	vmov.f32	s1, s17
 80296b8:	f002 fc4d 	bl	802bf56 <finite>
 80296bc:	2800      	cmp	r0, #0
 80296be:	d0ea      	beq.n	8029696 <pow+0xa2>
 80296c0:	ec45 4b10 	vmov	d0, r4, r5
 80296c4:	f002 fc47 	bl	802bf56 <finite>
 80296c8:	e7c3      	b.n	8029652 <pow+0x5e>
 80296ca:	4f01      	ldr	r7, [pc, #4]	; (80296d0 <pow+0xdc>)
 80296cc:	2600      	movs	r6, #0
 80296ce:	e7e2      	b.n	8029696 <pow+0xa2>
 80296d0:	3ff00000 	.word	0x3ff00000

080296d4 <sqrt>:
 80296d4:	b538      	push	{r3, r4, r5, lr}
 80296d6:	ed2d 8b02 	vpush	{d8}
 80296da:	ec55 4b10 	vmov	r4, r5, d0
 80296de:	f000 ffe3 	bl	802a6a8 <__ieee754_sqrt>
 80296e2:	4622      	mov	r2, r4
 80296e4:	462b      	mov	r3, r5
 80296e6:	4620      	mov	r0, r4
 80296e8:	4629      	mov	r1, r5
 80296ea:	eeb0 8a40 	vmov.f32	s16, s0
 80296ee:	eef0 8a60 	vmov.f32	s17, s1
 80296f2:	f7d7 fa45 	bl	8000b80 <__aeabi_dcmpun>
 80296f6:	b990      	cbnz	r0, 802971e <sqrt+0x4a>
 80296f8:	2200      	movs	r2, #0
 80296fa:	2300      	movs	r3, #0
 80296fc:	4620      	mov	r0, r4
 80296fe:	4629      	mov	r1, r5
 8029700:	f7d7 fa16 	bl	8000b30 <__aeabi_dcmplt>
 8029704:	b158      	cbz	r0, 802971e <sqrt+0x4a>
 8029706:	f002 fd73 	bl	802c1f0 <__errno>
 802970a:	2321      	movs	r3, #33	; 0x21
 802970c:	6003      	str	r3, [r0, #0]
 802970e:	2200      	movs	r2, #0
 8029710:	2300      	movs	r3, #0
 8029712:	4610      	mov	r0, r2
 8029714:	4619      	mov	r1, r3
 8029716:	f7d7 f8c3 	bl	80008a0 <__aeabi_ddiv>
 802971a:	ec41 0b18 	vmov	d8, r0, r1
 802971e:	eeb0 0a48 	vmov.f32	s0, s16
 8029722:	eef0 0a68 	vmov.f32	s1, s17
 8029726:	ecbd 8b02 	vpop	{d8}
 802972a:	bd38      	pop	{r3, r4, r5, pc}

0802972c <expf>:
 802972c:	b508      	push	{r3, lr}
 802972e:	ed2d 8b02 	vpush	{d8}
 8029732:	eef0 8a40 	vmov.f32	s17, s0
 8029736:	f001 f869 	bl	802a80c <__ieee754_expf>
 802973a:	eeb0 8a40 	vmov.f32	s16, s0
 802973e:	eeb0 0a68 	vmov.f32	s0, s17
 8029742:	f002 fca2 	bl	802c08a <finitef>
 8029746:	b160      	cbz	r0, 8029762 <expf+0x36>
 8029748:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8029788 <expf+0x5c>
 802974c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8029750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029754:	dd0a      	ble.n	802976c <expf+0x40>
 8029756:	f002 fd4b 	bl	802c1f0 <__errno>
 802975a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 802978c <expf+0x60>
 802975e:	2322      	movs	r3, #34	; 0x22
 8029760:	6003      	str	r3, [r0, #0]
 8029762:	eeb0 0a48 	vmov.f32	s0, s16
 8029766:	ecbd 8b02 	vpop	{d8}
 802976a:	bd08      	pop	{r3, pc}
 802976c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8029790 <expf+0x64>
 8029770:	eef4 8ae7 	vcmpe.f32	s17, s15
 8029774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029778:	d5f3      	bpl.n	8029762 <expf+0x36>
 802977a:	f002 fd39 	bl	802c1f0 <__errno>
 802977e:	2322      	movs	r3, #34	; 0x22
 8029780:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8029794 <expf+0x68>
 8029784:	6003      	str	r3, [r0, #0]
 8029786:	e7ec      	b.n	8029762 <expf+0x36>
 8029788:	42b17180 	.word	0x42b17180
 802978c:	7f800000 	.word	0x7f800000
 8029790:	c2cff1b5 	.word	0xc2cff1b5
 8029794:	00000000 	.word	0x00000000

08029798 <log10f>:
 8029798:	b508      	push	{r3, lr}
 802979a:	ed2d 8b02 	vpush	{d8}
 802979e:	eeb0 8a40 	vmov.f32	s16, s0
 80297a2:	f001 f9f1 	bl	802ab88 <__ieee754_log10f>
 80297a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80297aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80297ae:	d60f      	bvs.n	80297d0 <log10f+0x38>
 80297b0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80297b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80297b8:	d80a      	bhi.n	80297d0 <log10f+0x38>
 80297ba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80297be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80297c2:	d108      	bne.n	80297d6 <log10f+0x3e>
 80297c4:	f002 fd14 	bl	802c1f0 <__errno>
 80297c8:	2322      	movs	r3, #34	; 0x22
 80297ca:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80297ec <log10f+0x54>
 80297ce:	6003      	str	r3, [r0, #0]
 80297d0:	ecbd 8b02 	vpop	{d8}
 80297d4:	bd08      	pop	{r3, pc}
 80297d6:	f002 fd0b 	bl	802c1f0 <__errno>
 80297da:	ecbd 8b02 	vpop	{d8}
 80297de:	2321      	movs	r3, #33	; 0x21
 80297e0:	6003      	str	r3, [r0, #0]
 80297e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80297e6:	4802      	ldr	r0, [pc, #8]	; (80297f0 <log10f+0x58>)
 80297e8:	f002 bc5c 	b.w	802c0a4 <nanf>
 80297ec:	ff800000 	.word	0xff800000
 80297f0:	080320bb 	.word	0x080320bb

080297f4 <sqrtf>:
 80297f4:	b508      	push	{r3, lr}
 80297f6:	ed2d 8b02 	vpush	{d8}
 80297fa:	eeb0 8a40 	vmov.f32	s16, s0
 80297fe:	f001 fb57 	bl	802aeb0 <__ieee754_sqrtf>
 8029802:	eeb4 8a48 	vcmp.f32	s16, s16
 8029806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802980a:	d60c      	bvs.n	8029826 <sqrtf+0x32>
 802980c:	eddf 8a07 	vldr	s17, [pc, #28]	; 802982c <sqrtf+0x38>
 8029810:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8029814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029818:	d505      	bpl.n	8029826 <sqrtf+0x32>
 802981a:	f002 fce9 	bl	802c1f0 <__errno>
 802981e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8029822:	2321      	movs	r3, #33	; 0x21
 8029824:	6003      	str	r3, [r0, #0]
 8029826:	ecbd 8b02 	vpop	{d8}
 802982a:	bd08      	pop	{r3, pc}
 802982c:	00000000 	.word	0x00000000

08029830 <__ieee754_pow>:
 8029830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029834:	ed2d 8b06 	vpush	{d8-d10}
 8029838:	b089      	sub	sp, #36	; 0x24
 802983a:	ed8d 1b00 	vstr	d1, [sp]
 802983e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8029842:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8029846:	ea58 0102 	orrs.w	r1, r8, r2
 802984a:	ec57 6b10 	vmov	r6, r7, d0
 802984e:	d115      	bne.n	802987c <__ieee754_pow+0x4c>
 8029850:	19b3      	adds	r3, r6, r6
 8029852:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8029856:	4152      	adcs	r2, r2
 8029858:	4299      	cmp	r1, r3
 802985a:	4b89      	ldr	r3, [pc, #548]	; (8029a80 <__ieee754_pow+0x250>)
 802985c:	4193      	sbcs	r3, r2
 802985e:	f080 84d2 	bcs.w	802a206 <__ieee754_pow+0x9d6>
 8029862:	e9dd 2300 	ldrd	r2, r3, [sp]
 8029866:	4630      	mov	r0, r6
 8029868:	4639      	mov	r1, r7
 802986a:	f7d6 fd39 	bl	80002e0 <__adddf3>
 802986e:	ec41 0b10 	vmov	d0, r0, r1
 8029872:	b009      	add	sp, #36	; 0x24
 8029874:	ecbd 8b06 	vpop	{d8-d10}
 8029878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802987c:	4b81      	ldr	r3, [pc, #516]	; (8029a84 <__ieee754_pow+0x254>)
 802987e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8029882:	429c      	cmp	r4, r3
 8029884:	ee10 aa10 	vmov	sl, s0
 8029888:	463d      	mov	r5, r7
 802988a:	dc06      	bgt.n	802989a <__ieee754_pow+0x6a>
 802988c:	d101      	bne.n	8029892 <__ieee754_pow+0x62>
 802988e:	2e00      	cmp	r6, #0
 8029890:	d1e7      	bne.n	8029862 <__ieee754_pow+0x32>
 8029892:	4598      	cmp	r8, r3
 8029894:	dc01      	bgt.n	802989a <__ieee754_pow+0x6a>
 8029896:	d10f      	bne.n	80298b8 <__ieee754_pow+0x88>
 8029898:	b172      	cbz	r2, 80298b8 <__ieee754_pow+0x88>
 802989a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 802989e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80298a2:	ea55 050a 	orrs.w	r5, r5, sl
 80298a6:	d1dc      	bne.n	8029862 <__ieee754_pow+0x32>
 80298a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80298ac:	18db      	adds	r3, r3, r3
 80298ae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80298b2:	4152      	adcs	r2, r2
 80298b4:	429d      	cmp	r5, r3
 80298b6:	e7d0      	b.n	802985a <__ieee754_pow+0x2a>
 80298b8:	2d00      	cmp	r5, #0
 80298ba:	da3b      	bge.n	8029934 <__ieee754_pow+0x104>
 80298bc:	4b72      	ldr	r3, [pc, #456]	; (8029a88 <__ieee754_pow+0x258>)
 80298be:	4598      	cmp	r8, r3
 80298c0:	dc51      	bgt.n	8029966 <__ieee754_pow+0x136>
 80298c2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80298c6:	4598      	cmp	r8, r3
 80298c8:	f340 84ac 	ble.w	802a224 <__ieee754_pow+0x9f4>
 80298cc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80298d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80298d4:	2b14      	cmp	r3, #20
 80298d6:	dd0f      	ble.n	80298f8 <__ieee754_pow+0xc8>
 80298d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80298dc:	fa22 f103 	lsr.w	r1, r2, r3
 80298e0:	fa01 f303 	lsl.w	r3, r1, r3
 80298e4:	4293      	cmp	r3, r2
 80298e6:	f040 849d 	bne.w	802a224 <__ieee754_pow+0x9f4>
 80298ea:	f001 0101 	and.w	r1, r1, #1
 80298ee:	f1c1 0302 	rsb	r3, r1, #2
 80298f2:	9304      	str	r3, [sp, #16]
 80298f4:	b182      	cbz	r2, 8029918 <__ieee754_pow+0xe8>
 80298f6:	e05f      	b.n	80299b8 <__ieee754_pow+0x188>
 80298f8:	2a00      	cmp	r2, #0
 80298fa:	d15b      	bne.n	80299b4 <__ieee754_pow+0x184>
 80298fc:	f1c3 0314 	rsb	r3, r3, #20
 8029900:	fa48 f103 	asr.w	r1, r8, r3
 8029904:	fa01 f303 	lsl.w	r3, r1, r3
 8029908:	4543      	cmp	r3, r8
 802990a:	f040 8488 	bne.w	802a21e <__ieee754_pow+0x9ee>
 802990e:	f001 0101 	and.w	r1, r1, #1
 8029912:	f1c1 0302 	rsb	r3, r1, #2
 8029916:	9304      	str	r3, [sp, #16]
 8029918:	4b5c      	ldr	r3, [pc, #368]	; (8029a8c <__ieee754_pow+0x25c>)
 802991a:	4598      	cmp	r8, r3
 802991c:	d132      	bne.n	8029984 <__ieee754_pow+0x154>
 802991e:	f1b9 0f00 	cmp.w	r9, #0
 8029922:	f280 8478 	bge.w	802a216 <__ieee754_pow+0x9e6>
 8029926:	4959      	ldr	r1, [pc, #356]	; (8029a8c <__ieee754_pow+0x25c>)
 8029928:	4632      	mov	r2, r6
 802992a:	463b      	mov	r3, r7
 802992c:	2000      	movs	r0, #0
 802992e:	f7d6 ffb7 	bl	80008a0 <__aeabi_ddiv>
 8029932:	e79c      	b.n	802986e <__ieee754_pow+0x3e>
 8029934:	2300      	movs	r3, #0
 8029936:	9304      	str	r3, [sp, #16]
 8029938:	2a00      	cmp	r2, #0
 802993a:	d13d      	bne.n	80299b8 <__ieee754_pow+0x188>
 802993c:	4b51      	ldr	r3, [pc, #324]	; (8029a84 <__ieee754_pow+0x254>)
 802993e:	4598      	cmp	r8, r3
 8029940:	d1ea      	bne.n	8029918 <__ieee754_pow+0xe8>
 8029942:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8029946:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802994a:	ea53 030a 	orrs.w	r3, r3, sl
 802994e:	f000 845a 	beq.w	802a206 <__ieee754_pow+0x9d6>
 8029952:	4b4f      	ldr	r3, [pc, #316]	; (8029a90 <__ieee754_pow+0x260>)
 8029954:	429c      	cmp	r4, r3
 8029956:	dd08      	ble.n	802996a <__ieee754_pow+0x13a>
 8029958:	f1b9 0f00 	cmp.w	r9, #0
 802995c:	f2c0 8457 	blt.w	802a20e <__ieee754_pow+0x9de>
 8029960:	e9dd 0100 	ldrd	r0, r1, [sp]
 8029964:	e783      	b.n	802986e <__ieee754_pow+0x3e>
 8029966:	2302      	movs	r3, #2
 8029968:	e7e5      	b.n	8029936 <__ieee754_pow+0x106>
 802996a:	f1b9 0f00 	cmp.w	r9, #0
 802996e:	f04f 0000 	mov.w	r0, #0
 8029972:	f04f 0100 	mov.w	r1, #0
 8029976:	f6bf af7a 	bge.w	802986e <__ieee754_pow+0x3e>
 802997a:	e9dd 0300 	ldrd	r0, r3, [sp]
 802997e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8029982:	e774      	b.n	802986e <__ieee754_pow+0x3e>
 8029984:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8029988:	d106      	bne.n	8029998 <__ieee754_pow+0x168>
 802998a:	4632      	mov	r2, r6
 802998c:	463b      	mov	r3, r7
 802998e:	4630      	mov	r0, r6
 8029990:	4639      	mov	r1, r7
 8029992:	f7d6 fe5b 	bl	800064c <__aeabi_dmul>
 8029996:	e76a      	b.n	802986e <__ieee754_pow+0x3e>
 8029998:	4b3e      	ldr	r3, [pc, #248]	; (8029a94 <__ieee754_pow+0x264>)
 802999a:	4599      	cmp	r9, r3
 802999c:	d10c      	bne.n	80299b8 <__ieee754_pow+0x188>
 802999e:	2d00      	cmp	r5, #0
 80299a0:	db0a      	blt.n	80299b8 <__ieee754_pow+0x188>
 80299a2:	ec47 6b10 	vmov	d0, r6, r7
 80299a6:	b009      	add	sp, #36	; 0x24
 80299a8:	ecbd 8b06 	vpop	{d8-d10}
 80299ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299b0:	f000 be7a 	b.w	802a6a8 <__ieee754_sqrt>
 80299b4:	2300      	movs	r3, #0
 80299b6:	9304      	str	r3, [sp, #16]
 80299b8:	ec47 6b10 	vmov	d0, r6, r7
 80299bc:	f002 fac2 	bl	802bf44 <fabs>
 80299c0:	ec51 0b10 	vmov	r0, r1, d0
 80299c4:	f1ba 0f00 	cmp.w	sl, #0
 80299c8:	d129      	bne.n	8029a1e <__ieee754_pow+0x1ee>
 80299ca:	b124      	cbz	r4, 80299d6 <__ieee754_pow+0x1a6>
 80299cc:	4b2f      	ldr	r3, [pc, #188]	; (8029a8c <__ieee754_pow+0x25c>)
 80299ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80299d2:	429a      	cmp	r2, r3
 80299d4:	d123      	bne.n	8029a1e <__ieee754_pow+0x1ee>
 80299d6:	f1b9 0f00 	cmp.w	r9, #0
 80299da:	da05      	bge.n	80299e8 <__ieee754_pow+0x1b8>
 80299dc:	4602      	mov	r2, r0
 80299de:	460b      	mov	r3, r1
 80299e0:	2000      	movs	r0, #0
 80299e2:	492a      	ldr	r1, [pc, #168]	; (8029a8c <__ieee754_pow+0x25c>)
 80299e4:	f7d6 ff5c 	bl	80008a0 <__aeabi_ddiv>
 80299e8:	2d00      	cmp	r5, #0
 80299ea:	f6bf af40 	bge.w	802986e <__ieee754_pow+0x3e>
 80299ee:	9b04      	ldr	r3, [sp, #16]
 80299f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80299f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80299f8:	4323      	orrs	r3, r4
 80299fa:	d108      	bne.n	8029a0e <__ieee754_pow+0x1de>
 80299fc:	4602      	mov	r2, r0
 80299fe:	460b      	mov	r3, r1
 8029a00:	4610      	mov	r0, r2
 8029a02:	4619      	mov	r1, r3
 8029a04:	f7d6 fc6a 	bl	80002dc <__aeabi_dsub>
 8029a08:	4602      	mov	r2, r0
 8029a0a:	460b      	mov	r3, r1
 8029a0c:	e78f      	b.n	802992e <__ieee754_pow+0xfe>
 8029a0e:	9b04      	ldr	r3, [sp, #16]
 8029a10:	2b01      	cmp	r3, #1
 8029a12:	f47f af2c 	bne.w	802986e <__ieee754_pow+0x3e>
 8029a16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8029a1a:	4619      	mov	r1, r3
 8029a1c:	e727      	b.n	802986e <__ieee754_pow+0x3e>
 8029a1e:	0feb      	lsrs	r3, r5, #31
 8029a20:	3b01      	subs	r3, #1
 8029a22:	9306      	str	r3, [sp, #24]
 8029a24:	9a06      	ldr	r2, [sp, #24]
 8029a26:	9b04      	ldr	r3, [sp, #16]
 8029a28:	4313      	orrs	r3, r2
 8029a2a:	d102      	bne.n	8029a32 <__ieee754_pow+0x202>
 8029a2c:	4632      	mov	r2, r6
 8029a2e:	463b      	mov	r3, r7
 8029a30:	e7e6      	b.n	8029a00 <__ieee754_pow+0x1d0>
 8029a32:	4b19      	ldr	r3, [pc, #100]	; (8029a98 <__ieee754_pow+0x268>)
 8029a34:	4598      	cmp	r8, r3
 8029a36:	f340 80fb 	ble.w	8029c30 <__ieee754_pow+0x400>
 8029a3a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8029a3e:	4598      	cmp	r8, r3
 8029a40:	4b13      	ldr	r3, [pc, #76]	; (8029a90 <__ieee754_pow+0x260>)
 8029a42:	dd0c      	ble.n	8029a5e <__ieee754_pow+0x22e>
 8029a44:	429c      	cmp	r4, r3
 8029a46:	dc0f      	bgt.n	8029a68 <__ieee754_pow+0x238>
 8029a48:	f1b9 0f00 	cmp.w	r9, #0
 8029a4c:	da0f      	bge.n	8029a6e <__ieee754_pow+0x23e>
 8029a4e:	2000      	movs	r0, #0
 8029a50:	b009      	add	sp, #36	; 0x24
 8029a52:	ecbd 8b06 	vpop	{d8-d10}
 8029a56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a5a:	f002 ba48 	b.w	802beee <__math_oflow>
 8029a5e:	429c      	cmp	r4, r3
 8029a60:	dbf2      	blt.n	8029a48 <__ieee754_pow+0x218>
 8029a62:	4b0a      	ldr	r3, [pc, #40]	; (8029a8c <__ieee754_pow+0x25c>)
 8029a64:	429c      	cmp	r4, r3
 8029a66:	dd19      	ble.n	8029a9c <__ieee754_pow+0x26c>
 8029a68:	f1b9 0f00 	cmp.w	r9, #0
 8029a6c:	dcef      	bgt.n	8029a4e <__ieee754_pow+0x21e>
 8029a6e:	2000      	movs	r0, #0
 8029a70:	b009      	add	sp, #36	; 0x24
 8029a72:	ecbd 8b06 	vpop	{d8-d10}
 8029a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a7a:	f002 ba2f 	b.w	802bedc <__math_uflow>
 8029a7e:	bf00      	nop
 8029a80:	fff00000 	.word	0xfff00000
 8029a84:	7ff00000 	.word	0x7ff00000
 8029a88:	433fffff 	.word	0x433fffff
 8029a8c:	3ff00000 	.word	0x3ff00000
 8029a90:	3fefffff 	.word	0x3fefffff
 8029a94:	3fe00000 	.word	0x3fe00000
 8029a98:	41e00000 	.word	0x41e00000
 8029a9c:	4b60      	ldr	r3, [pc, #384]	; (8029c20 <__ieee754_pow+0x3f0>)
 8029a9e:	2200      	movs	r2, #0
 8029aa0:	f7d6 fc1c 	bl	80002dc <__aeabi_dsub>
 8029aa4:	a354      	add	r3, pc, #336	; (adr r3, 8029bf8 <__ieee754_pow+0x3c8>)
 8029aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029aaa:	4604      	mov	r4, r0
 8029aac:	460d      	mov	r5, r1
 8029aae:	f7d6 fdcd 	bl	800064c <__aeabi_dmul>
 8029ab2:	a353      	add	r3, pc, #332	; (adr r3, 8029c00 <__ieee754_pow+0x3d0>)
 8029ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029ab8:	4606      	mov	r6, r0
 8029aba:	460f      	mov	r7, r1
 8029abc:	4620      	mov	r0, r4
 8029abe:	4629      	mov	r1, r5
 8029ac0:	f7d6 fdc4 	bl	800064c <__aeabi_dmul>
 8029ac4:	4b57      	ldr	r3, [pc, #348]	; (8029c24 <__ieee754_pow+0x3f4>)
 8029ac6:	4682      	mov	sl, r0
 8029ac8:	468b      	mov	fp, r1
 8029aca:	2200      	movs	r2, #0
 8029acc:	4620      	mov	r0, r4
 8029ace:	4629      	mov	r1, r5
 8029ad0:	f7d6 fdbc 	bl	800064c <__aeabi_dmul>
 8029ad4:	4602      	mov	r2, r0
 8029ad6:	460b      	mov	r3, r1
 8029ad8:	a14b      	add	r1, pc, #300	; (adr r1, 8029c08 <__ieee754_pow+0x3d8>)
 8029ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8029ade:	f7d6 fbfd 	bl	80002dc <__aeabi_dsub>
 8029ae2:	4622      	mov	r2, r4
 8029ae4:	462b      	mov	r3, r5
 8029ae6:	f7d6 fdb1 	bl	800064c <__aeabi_dmul>
 8029aea:	4602      	mov	r2, r0
 8029aec:	460b      	mov	r3, r1
 8029aee:	2000      	movs	r0, #0
 8029af0:	494d      	ldr	r1, [pc, #308]	; (8029c28 <__ieee754_pow+0x3f8>)
 8029af2:	f7d6 fbf3 	bl	80002dc <__aeabi_dsub>
 8029af6:	4622      	mov	r2, r4
 8029af8:	4680      	mov	r8, r0
 8029afa:	4689      	mov	r9, r1
 8029afc:	462b      	mov	r3, r5
 8029afe:	4620      	mov	r0, r4
 8029b00:	4629      	mov	r1, r5
 8029b02:	f7d6 fda3 	bl	800064c <__aeabi_dmul>
 8029b06:	4602      	mov	r2, r0
 8029b08:	460b      	mov	r3, r1
 8029b0a:	4640      	mov	r0, r8
 8029b0c:	4649      	mov	r1, r9
 8029b0e:	f7d6 fd9d 	bl	800064c <__aeabi_dmul>
 8029b12:	a33f      	add	r3, pc, #252	; (adr r3, 8029c10 <__ieee754_pow+0x3e0>)
 8029b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029b18:	f7d6 fd98 	bl	800064c <__aeabi_dmul>
 8029b1c:	4602      	mov	r2, r0
 8029b1e:	460b      	mov	r3, r1
 8029b20:	4650      	mov	r0, sl
 8029b22:	4659      	mov	r1, fp
 8029b24:	f7d6 fbda 	bl	80002dc <__aeabi_dsub>
 8029b28:	4602      	mov	r2, r0
 8029b2a:	460b      	mov	r3, r1
 8029b2c:	4680      	mov	r8, r0
 8029b2e:	4689      	mov	r9, r1
 8029b30:	4630      	mov	r0, r6
 8029b32:	4639      	mov	r1, r7
 8029b34:	f7d6 fbd4 	bl	80002e0 <__adddf3>
 8029b38:	2000      	movs	r0, #0
 8029b3a:	4632      	mov	r2, r6
 8029b3c:	463b      	mov	r3, r7
 8029b3e:	4604      	mov	r4, r0
 8029b40:	460d      	mov	r5, r1
 8029b42:	f7d6 fbcb 	bl	80002dc <__aeabi_dsub>
 8029b46:	4602      	mov	r2, r0
 8029b48:	460b      	mov	r3, r1
 8029b4a:	4640      	mov	r0, r8
 8029b4c:	4649      	mov	r1, r9
 8029b4e:	f7d6 fbc5 	bl	80002dc <__aeabi_dsub>
 8029b52:	9b04      	ldr	r3, [sp, #16]
 8029b54:	9a06      	ldr	r2, [sp, #24]
 8029b56:	3b01      	subs	r3, #1
 8029b58:	4313      	orrs	r3, r2
 8029b5a:	4682      	mov	sl, r0
 8029b5c:	468b      	mov	fp, r1
 8029b5e:	f040 81e7 	bne.w	8029f30 <__ieee754_pow+0x700>
 8029b62:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8029c18 <__ieee754_pow+0x3e8>
 8029b66:	eeb0 8a47 	vmov.f32	s16, s14
 8029b6a:	eef0 8a67 	vmov.f32	s17, s15
 8029b6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8029b72:	2600      	movs	r6, #0
 8029b74:	4632      	mov	r2, r6
 8029b76:	463b      	mov	r3, r7
 8029b78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8029b7c:	f7d6 fbae 	bl	80002dc <__aeabi_dsub>
 8029b80:	4622      	mov	r2, r4
 8029b82:	462b      	mov	r3, r5
 8029b84:	f7d6 fd62 	bl	800064c <__aeabi_dmul>
 8029b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8029b8c:	4680      	mov	r8, r0
 8029b8e:	4689      	mov	r9, r1
 8029b90:	4650      	mov	r0, sl
 8029b92:	4659      	mov	r1, fp
 8029b94:	f7d6 fd5a 	bl	800064c <__aeabi_dmul>
 8029b98:	4602      	mov	r2, r0
 8029b9a:	460b      	mov	r3, r1
 8029b9c:	4640      	mov	r0, r8
 8029b9e:	4649      	mov	r1, r9
 8029ba0:	f7d6 fb9e 	bl	80002e0 <__adddf3>
 8029ba4:	4632      	mov	r2, r6
 8029ba6:	463b      	mov	r3, r7
 8029ba8:	4680      	mov	r8, r0
 8029baa:	4689      	mov	r9, r1
 8029bac:	4620      	mov	r0, r4
 8029bae:	4629      	mov	r1, r5
 8029bb0:	f7d6 fd4c 	bl	800064c <__aeabi_dmul>
 8029bb4:	460b      	mov	r3, r1
 8029bb6:	4604      	mov	r4, r0
 8029bb8:	460d      	mov	r5, r1
 8029bba:	4602      	mov	r2, r0
 8029bbc:	4649      	mov	r1, r9
 8029bbe:	4640      	mov	r0, r8
 8029bc0:	f7d6 fb8e 	bl	80002e0 <__adddf3>
 8029bc4:	4b19      	ldr	r3, [pc, #100]	; (8029c2c <__ieee754_pow+0x3fc>)
 8029bc6:	4299      	cmp	r1, r3
 8029bc8:	ec45 4b19 	vmov	d9, r4, r5
 8029bcc:	4606      	mov	r6, r0
 8029bce:	460f      	mov	r7, r1
 8029bd0:	468b      	mov	fp, r1
 8029bd2:	f340 82f1 	ble.w	802a1b8 <__ieee754_pow+0x988>
 8029bd6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8029bda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8029bde:	4303      	orrs	r3, r0
 8029be0:	f000 81e4 	beq.w	8029fac <__ieee754_pow+0x77c>
 8029be4:	ec51 0b18 	vmov	r0, r1, d8
 8029be8:	2200      	movs	r2, #0
 8029bea:	2300      	movs	r3, #0
 8029bec:	f7d6 ffa0 	bl	8000b30 <__aeabi_dcmplt>
 8029bf0:	3800      	subs	r0, #0
 8029bf2:	bf18      	it	ne
 8029bf4:	2001      	movne	r0, #1
 8029bf6:	e72b      	b.n	8029a50 <__ieee754_pow+0x220>
 8029bf8:	60000000 	.word	0x60000000
 8029bfc:	3ff71547 	.word	0x3ff71547
 8029c00:	f85ddf44 	.word	0xf85ddf44
 8029c04:	3e54ae0b 	.word	0x3e54ae0b
 8029c08:	55555555 	.word	0x55555555
 8029c0c:	3fd55555 	.word	0x3fd55555
 8029c10:	652b82fe 	.word	0x652b82fe
 8029c14:	3ff71547 	.word	0x3ff71547
 8029c18:	00000000 	.word	0x00000000
 8029c1c:	bff00000 	.word	0xbff00000
 8029c20:	3ff00000 	.word	0x3ff00000
 8029c24:	3fd00000 	.word	0x3fd00000
 8029c28:	3fe00000 	.word	0x3fe00000
 8029c2c:	408fffff 	.word	0x408fffff
 8029c30:	4bd5      	ldr	r3, [pc, #852]	; (8029f88 <__ieee754_pow+0x758>)
 8029c32:	402b      	ands	r3, r5
 8029c34:	2200      	movs	r2, #0
 8029c36:	b92b      	cbnz	r3, 8029c44 <__ieee754_pow+0x414>
 8029c38:	4bd4      	ldr	r3, [pc, #848]	; (8029f8c <__ieee754_pow+0x75c>)
 8029c3a:	f7d6 fd07 	bl	800064c <__aeabi_dmul>
 8029c3e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8029c42:	460c      	mov	r4, r1
 8029c44:	1523      	asrs	r3, r4, #20
 8029c46:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8029c4a:	4413      	add	r3, r2
 8029c4c:	9305      	str	r3, [sp, #20]
 8029c4e:	4bd0      	ldr	r3, [pc, #832]	; (8029f90 <__ieee754_pow+0x760>)
 8029c50:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8029c54:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8029c58:	429c      	cmp	r4, r3
 8029c5a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8029c5e:	dd08      	ble.n	8029c72 <__ieee754_pow+0x442>
 8029c60:	4bcc      	ldr	r3, [pc, #816]	; (8029f94 <__ieee754_pow+0x764>)
 8029c62:	429c      	cmp	r4, r3
 8029c64:	f340 8162 	ble.w	8029f2c <__ieee754_pow+0x6fc>
 8029c68:	9b05      	ldr	r3, [sp, #20]
 8029c6a:	3301      	adds	r3, #1
 8029c6c:	9305      	str	r3, [sp, #20]
 8029c6e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8029c72:	2400      	movs	r4, #0
 8029c74:	00e3      	lsls	r3, r4, #3
 8029c76:	9307      	str	r3, [sp, #28]
 8029c78:	4bc7      	ldr	r3, [pc, #796]	; (8029f98 <__ieee754_pow+0x768>)
 8029c7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8029c7e:	ed93 7b00 	vldr	d7, [r3]
 8029c82:	4629      	mov	r1, r5
 8029c84:	ec53 2b17 	vmov	r2, r3, d7
 8029c88:	eeb0 9a47 	vmov.f32	s18, s14
 8029c8c:	eef0 9a67 	vmov.f32	s19, s15
 8029c90:	4682      	mov	sl, r0
 8029c92:	f7d6 fb23 	bl	80002dc <__aeabi_dsub>
 8029c96:	4652      	mov	r2, sl
 8029c98:	4606      	mov	r6, r0
 8029c9a:	460f      	mov	r7, r1
 8029c9c:	462b      	mov	r3, r5
 8029c9e:	ec51 0b19 	vmov	r0, r1, d9
 8029ca2:	f7d6 fb1d 	bl	80002e0 <__adddf3>
 8029ca6:	4602      	mov	r2, r0
 8029ca8:	460b      	mov	r3, r1
 8029caa:	2000      	movs	r0, #0
 8029cac:	49bb      	ldr	r1, [pc, #748]	; (8029f9c <__ieee754_pow+0x76c>)
 8029cae:	f7d6 fdf7 	bl	80008a0 <__aeabi_ddiv>
 8029cb2:	ec41 0b1a 	vmov	d10, r0, r1
 8029cb6:	4602      	mov	r2, r0
 8029cb8:	460b      	mov	r3, r1
 8029cba:	4630      	mov	r0, r6
 8029cbc:	4639      	mov	r1, r7
 8029cbe:	f7d6 fcc5 	bl	800064c <__aeabi_dmul>
 8029cc2:	2300      	movs	r3, #0
 8029cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029cc8:	9302      	str	r3, [sp, #8]
 8029cca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8029cce:	46ab      	mov	fp, r5
 8029cd0:	106d      	asrs	r5, r5, #1
 8029cd2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8029cd6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8029cda:	ec41 0b18 	vmov	d8, r0, r1
 8029cde:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8029ce2:	2200      	movs	r2, #0
 8029ce4:	4640      	mov	r0, r8
 8029ce6:	4649      	mov	r1, r9
 8029ce8:	4614      	mov	r4, r2
 8029cea:	461d      	mov	r5, r3
 8029cec:	f7d6 fcae 	bl	800064c <__aeabi_dmul>
 8029cf0:	4602      	mov	r2, r0
 8029cf2:	460b      	mov	r3, r1
 8029cf4:	4630      	mov	r0, r6
 8029cf6:	4639      	mov	r1, r7
 8029cf8:	f7d6 faf0 	bl	80002dc <__aeabi_dsub>
 8029cfc:	ec53 2b19 	vmov	r2, r3, d9
 8029d00:	4606      	mov	r6, r0
 8029d02:	460f      	mov	r7, r1
 8029d04:	4620      	mov	r0, r4
 8029d06:	4629      	mov	r1, r5
 8029d08:	f7d6 fae8 	bl	80002dc <__aeabi_dsub>
 8029d0c:	4602      	mov	r2, r0
 8029d0e:	460b      	mov	r3, r1
 8029d10:	4650      	mov	r0, sl
 8029d12:	4659      	mov	r1, fp
 8029d14:	f7d6 fae2 	bl	80002dc <__aeabi_dsub>
 8029d18:	4642      	mov	r2, r8
 8029d1a:	464b      	mov	r3, r9
 8029d1c:	f7d6 fc96 	bl	800064c <__aeabi_dmul>
 8029d20:	4602      	mov	r2, r0
 8029d22:	460b      	mov	r3, r1
 8029d24:	4630      	mov	r0, r6
 8029d26:	4639      	mov	r1, r7
 8029d28:	f7d6 fad8 	bl	80002dc <__aeabi_dsub>
 8029d2c:	ec53 2b1a 	vmov	r2, r3, d10
 8029d30:	f7d6 fc8c 	bl	800064c <__aeabi_dmul>
 8029d34:	ec53 2b18 	vmov	r2, r3, d8
 8029d38:	ec41 0b19 	vmov	d9, r0, r1
 8029d3c:	ec51 0b18 	vmov	r0, r1, d8
 8029d40:	f7d6 fc84 	bl	800064c <__aeabi_dmul>
 8029d44:	a37c      	add	r3, pc, #496	; (adr r3, 8029f38 <__ieee754_pow+0x708>)
 8029d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029d4a:	4604      	mov	r4, r0
 8029d4c:	460d      	mov	r5, r1
 8029d4e:	f7d6 fc7d 	bl	800064c <__aeabi_dmul>
 8029d52:	a37b      	add	r3, pc, #492	; (adr r3, 8029f40 <__ieee754_pow+0x710>)
 8029d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029d58:	f7d6 fac2 	bl	80002e0 <__adddf3>
 8029d5c:	4622      	mov	r2, r4
 8029d5e:	462b      	mov	r3, r5
 8029d60:	f7d6 fc74 	bl	800064c <__aeabi_dmul>
 8029d64:	a378      	add	r3, pc, #480	; (adr r3, 8029f48 <__ieee754_pow+0x718>)
 8029d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029d6a:	f7d6 fab9 	bl	80002e0 <__adddf3>
 8029d6e:	4622      	mov	r2, r4
 8029d70:	462b      	mov	r3, r5
 8029d72:	f7d6 fc6b 	bl	800064c <__aeabi_dmul>
 8029d76:	a376      	add	r3, pc, #472	; (adr r3, 8029f50 <__ieee754_pow+0x720>)
 8029d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029d7c:	f7d6 fab0 	bl	80002e0 <__adddf3>
 8029d80:	4622      	mov	r2, r4
 8029d82:	462b      	mov	r3, r5
 8029d84:	f7d6 fc62 	bl	800064c <__aeabi_dmul>
 8029d88:	a373      	add	r3, pc, #460	; (adr r3, 8029f58 <__ieee754_pow+0x728>)
 8029d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029d8e:	f7d6 faa7 	bl	80002e0 <__adddf3>
 8029d92:	4622      	mov	r2, r4
 8029d94:	462b      	mov	r3, r5
 8029d96:	f7d6 fc59 	bl	800064c <__aeabi_dmul>
 8029d9a:	a371      	add	r3, pc, #452	; (adr r3, 8029f60 <__ieee754_pow+0x730>)
 8029d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029da0:	f7d6 fa9e 	bl	80002e0 <__adddf3>
 8029da4:	4622      	mov	r2, r4
 8029da6:	4606      	mov	r6, r0
 8029da8:	460f      	mov	r7, r1
 8029daa:	462b      	mov	r3, r5
 8029dac:	4620      	mov	r0, r4
 8029dae:	4629      	mov	r1, r5
 8029db0:	f7d6 fc4c 	bl	800064c <__aeabi_dmul>
 8029db4:	4602      	mov	r2, r0
 8029db6:	460b      	mov	r3, r1
 8029db8:	4630      	mov	r0, r6
 8029dba:	4639      	mov	r1, r7
 8029dbc:	f7d6 fc46 	bl	800064c <__aeabi_dmul>
 8029dc0:	4642      	mov	r2, r8
 8029dc2:	4604      	mov	r4, r0
 8029dc4:	460d      	mov	r5, r1
 8029dc6:	464b      	mov	r3, r9
 8029dc8:	ec51 0b18 	vmov	r0, r1, d8
 8029dcc:	f7d6 fa88 	bl	80002e0 <__adddf3>
 8029dd0:	ec53 2b19 	vmov	r2, r3, d9
 8029dd4:	f7d6 fc3a 	bl	800064c <__aeabi_dmul>
 8029dd8:	4622      	mov	r2, r4
 8029dda:	462b      	mov	r3, r5
 8029ddc:	f7d6 fa80 	bl	80002e0 <__adddf3>
 8029de0:	4642      	mov	r2, r8
 8029de2:	4682      	mov	sl, r0
 8029de4:	468b      	mov	fp, r1
 8029de6:	464b      	mov	r3, r9
 8029de8:	4640      	mov	r0, r8
 8029dea:	4649      	mov	r1, r9
 8029dec:	f7d6 fc2e 	bl	800064c <__aeabi_dmul>
 8029df0:	4b6b      	ldr	r3, [pc, #428]	; (8029fa0 <__ieee754_pow+0x770>)
 8029df2:	2200      	movs	r2, #0
 8029df4:	4606      	mov	r6, r0
 8029df6:	460f      	mov	r7, r1
 8029df8:	f7d6 fa72 	bl	80002e0 <__adddf3>
 8029dfc:	4652      	mov	r2, sl
 8029dfe:	465b      	mov	r3, fp
 8029e00:	f7d6 fa6e 	bl	80002e0 <__adddf3>
 8029e04:	2000      	movs	r0, #0
 8029e06:	4604      	mov	r4, r0
 8029e08:	460d      	mov	r5, r1
 8029e0a:	4602      	mov	r2, r0
 8029e0c:	460b      	mov	r3, r1
 8029e0e:	4640      	mov	r0, r8
 8029e10:	4649      	mov	r1, r9
 8029e12:	f7d6 fc1b 	bl	800064c <__aeabi_dmul>
 8029e16:	4b62      	ldr	r3, [pc, #392]	; (8029fa0 <__ieee754_pow+0x770>)
 8029e18:	4680      	mov	r8, r0
 8029e1a:	4689      	mov	r9, r1
 8029e1c:	2200      	movs	r2, #0
 8029e1e:	4620      	mov	r0, r4
 8029e20:	4629      	mov	r1, r5
 8029e22:	f7d6 fa5b 	bl	80002dc <__aeabi_dsub>
 8029e26:	4632      	mov	r2, r6
 8029e28:	463b      	mov	r3, r7
 8029e2a:	f7d6 fa57 	bl	80002dc <__aeabi_dsub>
 8029e2e:	4602      	mov	r2, r0
 8029e30:	460b      	mov	r3, r1
 8029e32:	4650      	mov	r0, sl
 8029e34:	4659      	mov	r1, fp
 8029e36:	f7d6 fa51 	bl	80002dc <__aeabi_dsub>
 8029e3a:	ec53 2b18 	vmov	r2, r3, d8
 8029e3e:	f7d6 fc05 	bl	800064c <__aeabi_dmul>
 8029e42:	4622      	mov	r2, r4
 8029e44:	4606      	mov	r6, r0
 8029e46:	460f      	mov	r7, r1
 8029e48:	462b      	mov	r3, r5
 8029e4a:	ec51 0b19 	vmov	r0, r1, d9
 8029e4e:	f7d6 fbfd 	bl	800064c <__aeabi_dmul>
 8029e52:	4602      	mov	r2, r0
 8029e54:	460b      	mov	r3, r1
 8029e56:	4630      	mov	r0, r6
 8029e58:	4639      	mov	r1, r7
 8029e5a:	f7d6 fa41 	bl	80002e0 <__adddf3>
 8029e5e:	4606      	mov	r6, r0
 8029e60:	460f      	mov	r7, r1
 8029e62:	4602      	mov	r2, r0
 8029e64:	460b      	mov	r3, r1
 8029e66:	4640      	mov	r0, r8
 8029e68:	4649      	mov	r1, r9
 8029e6a:	f7d6 fa39 	bl	80002e0 <__adddf3>
 8029e6e:	a33e      	add	r3, pc, #248	; (adr r3, 8029f68 <__ieee754_pow+0x738>)
 8029e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029e74:	2000      	movs	r0, #0
 8029e76:	4604      	mov	r4, r0
 8029e78:	460d      	mov	r5, r1
 8029e7a:	f7d6 fbe7 	bl	800064c <__aeabi_dmul>
 8029e7e:	4642      	mov	r2, r8
 8029e80:	ec41 0b18 	vmov	d8, r0, r1
 8029e84:	464b      	mov	r3, r9
 8029e86:	4620      	mov	r0, r4
 8029e88:	4629      	mov	r1, r5
 8029e8a:	f7d6 fa27 	bl	80002dc <__aeabi_dsub>
 8029e8e:	4602      	mov	r2, r0
 8029e90:	460b      	mov	r3, r1
 8029e92:	4630      	mov	r0, r6
 8029e94:	4639      	mov	r1, r7
 8029e96:	f7d6 fa21 	bl	80002dc <__aeabi_dsub>
 8029e9a:	a335      	add	r3, pc, #212	; (adr r3, 8029f70 <__ieee754_pow+0x740>)
 8029e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029ea0:	f7d6 fbd4 	bl	800064c <__aeabi_dmul>
 8029ea4:	a334      	add	r3, pc, #208	; (adr r3, 8029f78 <__ieee754_pow+0x748>)
 8029ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029eaa:	4606      	mov	r6, r0
 8029eac:	460f      	mov	r7, r1
 8029eae:	4620      	mov	r0, r4
 8029eb0:	4629      	mov	r1, r5
 8029eb2:	f7d6 fbcb 	bl	800064c <__aeabi_dmul>
 8029eb6:	4602      	mov	r2, r0
 8029eb8:	460b      	mov	r3, r1
 8029eba:	4630      	mov	r0, r6
 8029ebc:	4639      	mov	r1, r7
 8029ebe:	f7d6 fa0f 	bl	80002e0 <__adddf3>
 8029ec2:	9a07      	ldr	r2, [sp, #28]
 8029ec4:	4b37      	ldr	r3, [pc, #220]	; (8029fa4 <__ieee754_pow+0x774>)
 8029ec6:	4413      	add	r3, r2
 8029ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029ecc:	f7d6 fa08 	bl	80002e0 <__adddf3>
 8029ed0:	4682      	mov	sl, r0
 8029ed2:	9805      	ldr	r0, [sp, #20]
 8029ed4:	468b      	mov	fp, r1
 8029ed6:	f7d6 fb4f 	bl	8000578 <__aeabi_i2d>
 8029eda:	9a07      	ldr	r2, [sp, #28]
 8029edc:	4b32      	ldr	r3, [pc, #200]	; (8029fa8 <__ieee754_pow+0x778>)
 8029ede:	4413      	add	r3, r2
 8029ee0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8029ee4:	4606      	mov	r6, r0
 8029ee6:	460f      	mov	r7, r1
 8029ee8:	4652      	mov	r2, sl
 8029eea:	465b      	mov	r3, fp
 8029eec:	ec51 0b18 	vmov	r0, r1, d8
 8029ef0:	f7d6 f9f6 	bl	80002e0 <__adddf3>
 8029ef4:	4642      	mov	r2, r8
 8029ef6:	464b      	mov	r3, r9
 8029ef8:	f7d6 f9f2 	bl	80002e0 <__adddf3>
 8029efc:	4632      	mov	r2, r6
 8029efe:	463b      	mov	r3, r7
 8029f00:	f7d6 f9ee 	bl	80002e0 <__adddf3>
 8029f04:	2000      	movs	r0, #0
 8029f06:	4632      	mov	r2, r6
 8029f08:	463b      	mov	r3, r7
 8029f0a:	4604      	mov	r4, r0
 8029f0c:	460d      	mov	r5, r1
 8029f0e:	f7d6 f9e5 	bl	80002dc <__aeabi_dsub>
 8029f12:	4642      	mov	r2, r8
 8029f14:	464b      	mov	r3, r9
 8029f16:	f7d6 f9e1 	bl	80002dc <__aeabi_dsub>
 8029f1a:	ec53 2b18 	vmov	r2, r3, d8
 8029f1e:	f7d6 f9dd 	bl	80002dc <__aeabi_dsub>
 8029f22:	4602      	mov	r2, r0
 8029f24:	460b      	mov	r3, r1
 8029f26:	4650      	mov	r0, sl
 8029f28:	4659      	mov	r1, fp
 8029f2a:	e610      	b.n	8029b4e <__ieee754_pow+0x31e>
 8029f2c:	2401      	movs	r4, #1
 8029f2e:	e6a1      	b.n	8029c74 <__ieee754_pow+0x444>
 8029f30:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8029f80 <__ieee754_pow+0x750>
 8029f34:	e617      	b.n	8029b66 <__ieee754_pow+0x336>
 8029f36:	bf00      	nop
 8029f38:	4a454eef 	.word	0x4a454eef
 8029f3c:	3fca7e28 	.word	0x3fca7e28
 8029f40:	93c9db65 	.word	0x93c9db65
 8029f44:	3fcd864a 	.word	0x3fcd864a
 8029f48:	a91d4101 	.word	0xa91d4101
 8029f4c:	3fd17460 	.word	0x3fd17460
 8029f50:	518f264d 	.word	0x518f264d
 8029f54:	3fd55555 	.word	0x3fd55555
 8029f58:	db6fabff 	.word	0xdb6fabff
 8029f5c:	3fdb6db6 	.word	0x3fdb6db6
 8029f60:	33333303 	.word	0x33333303
 8029f64:	3fe33333 	.word	0x3fe33333
 8029f68:	e0000000 	.word	0xe0000000
 8029f6c:	3feec709 	.word	0x3feec709
 8029f70:	dc3a03fd 	.word	0xdc3a03fd
 8029f74:	3feec709 	.word	0x3feec709
 8029f78:	145b01f5 	.word	0x145b01f5
 8029f7c:	be3e2fe0 	.word	0xbe3e2fe0
 8029f80:	00000000 	.word	0x00000000
 8029f84:	3ff00000 	.word	0x3ff00000
 8029f88:	7ff00000 	.word	0x7ff00000
 8029f8c:	43400000 	.word	0x43400000
 8029f90:	0003988e 	.word	0x0003988e
 8029f94:	000bb679 	.word	0x000bb679
 8029f98:	08031a90 	.word	0x08031a90
 8029f9c:	3ff00000 	.word	0x3ff00000
 8029fa0:	40080000 	.word	0x40080000
 8029fa4:	08031ab0 	.word	0x08031ab0
 8029fa8:	08031aa0 	.word	0x08031aa0
 8029fac:	a3b5      	add	r3, pc, #724	; (adr r3, 802a284 <__ieee754_pow+0xa54>)
 8029fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029fb2:	4640      	mov	r0, r8
 8029fb4:	4649      	mov	r1, r9
 8029fb6:	f7d6 f993 	bl	80002e0 <__adddf3>
 8029fba:	4622      	mov	r2, r4
 8029fbc:	ec41 0b1a 	vmov	d10, r0, r1
 8029fc0:	462b      	mov	r3, r5
 8029fc2:	4630      	mov	r0, r6
 8029fc4:	4639      	mov	r1, r7
 8029fc6:	f7d6 f989 	bl	80002dc <__aeabi_dsub>
 8029fca:	4602      	mov	r2, r0
 8029fcc:	460b      	mov	r3, r1
 8029fce:	ec51 0b1a 	vmov	r0, r1, d10
 8029fd2:	f7d6 fdcb 	bl	8000b6c <__aeabi_dcmpgt>
 8029fd6:	2800      	cmp	r0, #0
 8029fd8:	f47f ae04 	bne.w	8029be4 <__ieee754_pow+0x3b4>
 8029fdc:	4aa4      	ldr	r2, [pc, #656]	; (802a270 <__ieee754_pow+0xa40>)
 8029fde:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8029fe2:	4293      	cmp	r3, r2
 8029fe4:	f340 8108 	ble.w	802a1f8 <__ieee754_pow+0x9c8>
 8029fe8:	151b      	asrs	r3, r3, #20
 8029fea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8029fee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8029ff2:	fa4a f303 	asr.w	r3, sl, r3
 8029ff6:	445b      	add	r3, fp
 8029ff8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8029ffc:	4e9d      	ldr	r6, [pc, #628]	; (802a274 <__ieee754_pow+0xa44>)
 8029ffe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 802a002:	4116      	asrs	r6, r2
 802a004:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 802a008:	2000      	movs	r0, #0
 802a00a:	ea23 0106 	bic.w	r1, r3, r6
 802a00e:	f1c2 0214 	rsb	r2, r2, #20
 802a012:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 802a016:	fa4a fa02 	asr.w	sl, sl, r2
 802a01a:	f1bb 0f00 	cmp.w	fp, #0
 802a01e:	4602      	mov	r2, r0
 802a020:	460b      	mov	r3, r1
 802a022:	4620      	mov	r0, r4
 802a024:	4629      	mov	r1, r5
 802a026:	bfb8      	it	lt
 802a028:	f1ca 0a00 	rsblt	sl, sl, #0
 802a02c:	f7d6 f956 	bl	80002dc <__aeabi_dsub>
 802a030:	ec41 0b19 	vmov	d9, r0, r1
 802a034:	4642      	mov	r2, r8
 802a036:	464b      	mov	r3, r9
 802a038:	ec51 0b19 	vmov	r0, r1, d9
 802a03c:	f7d6 f950 	bl	80002e0 <__adddf3>
 802a040:	a37b      	add	r3, pc, #492	; (adr r3, 802a230 <__ieee754_pow+0xa00>)
 802a042:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a046:	2000      	movs	r0, #0
 802a048:	4604      	mov	r4, r0
 802a04a:	460d      	mov	r5, r1
 802a04c:	f7d6 fafe 	bl	800064c <__aeabi_dmul>
 802a050:	ec53 2b19 	vmov	r2, r3, d9
 802a054:	4606      	mov	r6, r0
 802a056:	460f      	mov	r7, r1
 802a058:	4620      	mov	r0, r4
 802a05a:	4629      	mov	r1, r5
 802a05c:	f7d6 f93e 	bl	80002dc <__aeabi_dsub>
 802a060:	4602      	mov	r2, r0
 802a062:	460b      	mov	r3, r1
 802a064:	4640      	mov	r0, r8
 802a066:	4649      	mov	r1, r9
 802a068:	f7d6 f938 	bl	80002dc <__aeabi_dsub>
 802a06c:	a372      	add	r3, pc, #456	; (adr r3, 802a238 <__ieee754_pow+0xa08>)
 802a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a072:	f7d6 faeb 	bl	800064c <__aeabi_dmul>
 802a076:	a372      	add	r3, pc, #456	; (adr r3, 802a240 <__ieee754_pow+0xa10>)
 802a078:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a07c:	4680      	mov	r8, r0
 802a07e:	4689      	mov	r9, r1
 802a080:	4620      	mov	r0, r4
 802a082:	4629      	mov	r1, r5
 802a084:	f7d6 fae2 	bl	800064c <__aeabi_dmul>
 802a088:	4602      	mov	r2, r0
 802a08a:	460b      	mov	r3, r1
 802a08c:	4640      	mov	r0, r8
 802a08e:	4649      	mov	r1, r9
 802a090:	f7d6 f926 	bl	80002e0 <__adddf3>
 802a094:	4604      	mov	r4, r0
 802a096:	460d      	mov	r5, r1
 802a098:	4602      	mov	r2, r0
 802a09a:	460b      	mov	r3, r1
 802a09c:	4630      	mov	r0, r6
 802a09e:	4639      	mov	r1, r7
 802a0a0:	f7d6 f91e 	bl	80002e0 <__adddf3>
 802a0a4:	4632      	mov	r2, r6
 802a0a6:	463b      	mov	r3, r7
 802a0a8:	4680      	mov	r8, r0
 802a0aa:	4689      	mov	r9, r1
 802a0ac:	f7d6 f916 	bl	80002dc <__aeabi_dsub>
 802a0b0:	4602      	mov	r2, r0
 802a0b2:	460b      	mov	r3, r1
 802a0b4:	4620      	mov	r0, r4
 802a0b6:	4629      	mov	r1, r5
 802a0b8:	f7d6 f910 	bl	80002dc <__aeabi_dsub>
 802a0bc:	4642      	mov	r2, r8
 802a0be:	4606      	mov	r6, r0
 802a0c0:	460f      	mov	r7, r1
 802a0c2:	464b      	mov	r3, r9
 802a0c4:	4640      	mov	r0, r8
 802a0c6:	4649      	mov	r1, r9
 802a0c8:	f7d6 fac0 	bl	800064c <__aeabi_dmul>
 802a0cc:	a35e      	add	r3, pc, #376	; (adr r3, 802a248 <__ieee754_pow+0xa18>)
 802a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a0d2:	4604      	mov	r4, r0
 802a0d4:	460d      	mov	r5, r1
 802a0d6:	f7d6 fab9 	bl	800064c <__aeabi_dmul>
 802a0da:	a35d      	add	r3, pc, #372	; (adr r3, 802a250 <__ieee754_pow+0xa20>)
 802a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a0e0:	f7d6 f8fc 	bl	80002dc <__aeabi_dsub>
 802a0e4:	4622      	mov	r2, r4
 802a0e6:	462b      	mov	r3, r5
 802a0e8:	f7d6 fab0 	bl	800064c <__aeabi_dmul>
 802a0ec:	a35a      	add	r3, pc, #360	; (adr r3, 802a258 <__ieee754_pow+0xa28>)
 802a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a0f2:	f7d6 f8f5 	bl	80002e0 <__adddf3>
 802a0f6:	4622      	mov	r2, r4
 802a0f8:	462b      	mov	r3, r5
 802a0fa:	f7d6 faa7 	bl	800064c <__aeabi_dmul>
 802a0fe:	a358      	add	r3, pc, #352	; (adr r3, 802a260 <__ieee754_pow+0xa30>)
 802a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a104:	f7d6 f8ea 	bl	80002dc <__aeabi_dsub>
 802a108:	4622      	mov	r2, r4
 802a10a:	462b      	mov	r3, r5
 802a10c:	f7d6 fa9e 	bl	800064c <__aeabi_dmul>
 802a110:	a355      	add	r3, pc, #340	; (adr r3, 802a268 <__ieee754_pow+0xa38>)
 802a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a116:	f7d6 f8e3 	bl	80002e0 <__adddf3>
 802a11a:	4622      	mov	r2, r4
 802a11c:	462b      	mov	r3, r5
 802a11e:	f7d6 fa95 	bl	800064c <__aeabi_dmul>
 802a122:	4602      	mov	r2, r0
 802a124:	460b      	mov	r3, r1
 802a126:	4640      	mov	r0, r8
 802a128:	4649      	mov	r1, r9
 802a12a:	f7d6 f8d7 	bl	80002dc <__aeabi_dsub>
 802a12e:	4604      	mov	r4, r0
 802a130:	460d      	mov	r5, r1
 802a132:	4602      	mov	r2, r0
 802a134:	460b      	mov	r3, r1
 802a136:	4640      	mov	r0, r8
 802a138:	4649      	mov	r1, r9
 802a13a:	f7d6 fa87 	bl	800064c <__aeabi_dmul>
 802a13e:	2200      	movs	r2, #0
 802a140:	ec41 0b19 	vmov	d9, r0, r1
 802a144:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802a148:	4620      	mov	r0, r4
 802a14a:	4629      	mov	r1, r5
 802a14c:	f7d6 f8c6 	bl	80002dc <__aeabi_dsub>
 802a150:	4602      	mov	r2, r0
 802a152:	460b      	mov	r3, r1
 802a154:	ec51 0b19 	vmov	r0, r1, d9
 802a158:	f7d6 fba2 	bl	80008a0 <__aeabi_ddiv>
 802a15c:	4632      	mov	r2, r6
 802a15e:	4604      	mov	r4, r0
 802a160:	460d      	mov	r5, r1
 802a162:	463b      	mov	r3, r7
 802a164:	4640      	mov	r0, r8
 802a166:	4649      	mov	r1, r9
 802a168:	f7d6 fa70 	bl	800064c <__aeabi_dmul>
 802a16c:	4632      	mov	r2, r6
 802a16e:	463b      	mov	r3, r7
 802a170:	f7d6 f8b6 	bl	80002e0 <__adddf3>
 802a174:	4602      	mov	r2, r0
 802a176:	460b      	mov	r3, r1
 802a178:	4620      	mov	r0, r4
 802a17a:	4629      	mov	r1, r5
 802a17c:	f7d6 f8ae 	bl	80002dc <__aeabi_dsub>
 802a180:	4642      	mov	r2, r8
 802a182:	464b      	mov	r3, r9
 802a184:	f7d6 f8aa 	bl	80002dc <__aeabi_dsub>
 802a188:	460b      	mov	r3, r1
 802a18a:	4602      	mov	r2, r0
 802a18c:	493a      	ldr	r1, [pc, #232]	; (802a278 <__ieee754_pow+0xa48>)
 802a18e:	2000      	movs	r0, #0
 802a190:	f7d6 f8a4 	bl	80002dc <__aeabi_dsub>
 802a194:	ec41 0b10 	vmov	d0, r0, r1
 802a198:	ee10 3a90 	vmov	r3, s1
 802a19c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 802a1a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802a1a4:	da2b      	bge.n	802a1fe <__ieee754_pow+0x9ce>
 802a1a6:	4650      	mov	r0, sl
 802a1a8:	f001 fee2 	bl	802bf70 <scalbn>
 802a1ac:	ec51 0b10 	vmov	r0, r1, d0
 802a1b0:	ec53 2b18 	vmov	r2, r3, d8
 802a1b4:	f7ff bbed 	b.w	8029992 <__ieee754_pow+0x162>
 802a1b8:	4b30      	ldr	r3, [pc, #192]	; (802a27c <__ieee754_pow+0xa4c>)
 802a1ba:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802a1be:	429e      	cmp	r6, r3
 802a1c0:	f77f af0c 	ble.w	8029fdc <__ieee754_pow+0x7ac>
 802a1c4:	4b2e      	ldr	r3, [pc, #184]	; (802a280 <__ieee754_pow+0xa50>)
 802a1c6:	440b      	add	r3, r1
 802a1c8:	4303      	orrs	r3, r0
 802a1ca:	d009      	beq.n	802a1e0 <__ieee754_pow+0x9b0>
 802a1cc:	ec51 0b18 	vmov	r0, r1, d8
 802a1d0:	2200      	movs	r2, #0
 802a1d2:	2300      	movs	r3, #0
 802a1d4:	f7d6 fcac 	bl	8000b30 <__aeabi_dcmplt>
 802a1d8:	3800      	subs	r0, #0
 802a1da:	bf18      	it	ne
 802a1dc:	2001      	movne	r0, #1
 802a1de:	e447      	b.n	8029a70 <__ieee754_pow+0x240>
 802a1e0:	4622      	mov	r2, r4
 802a1e2:	462b      	mov	r3, r5
 802a1e4:	f7d6 f87a 	bl	80002dc <__aeabi_dsub>
 802a1e8:	4642      	mov	r2, r8
 802a1ea:	464b      	mov	r3, r9
 802a1ec:	f7d6 fcb4 	bl	8000b58 <__aeabi_dcmpge>
 802a1f0:	2800      	cmp	r0, #0
 802a1f2:	f43f aef3 	beq.w	8029fdc <__ieee754_pow+0x7ac>
 802a1f6:	e7e9      	b.n	802a1cc <__ieee754_pow+0x99c>
 802a1f8:	f04f 0a00 	mov.w	sl, #0
 802a1fc:	e71a      	b.n	802a034 <__ieee754_pow+0x804>
 802a1fe:	ec51 0b10 	vmov	r0, r1, d0
 802a202:	4619      	mov	r1, r3
 802a204:	e7d4      	b.n	802a1b0 <__ieee754_pow+0x980>
 802a206:	491c      	ldr	r1, [pc, #112]	; (802a278 <__ieee754_pow+0xa48>)
 802a208:	2000      	movs	r0, #0
 802a20a:	f7ff bb30 	b.w	802986e <__ieee754_pow+0x3e>
 802a20e:	2000      	movs	r0, #0
 802a210:	2100      	movs	r1, #0
 802a212:	f7ff bb2c 	b.w	802986e <__ieee754_pow+0x3e>
 802a216:	4630      	mov	r0, r6
 802a218:	4639      	mov	r1, r7
 802a21a:	f7ff bb28 	b.w	802986e <__ieee754_pow+0x3e>
 802a21e:	9204      	str	r2, [sp, #16]
 802a220:	f7ff bb7a 	b.w	8029918 <__ieee754_pow+0xe8>
 802a224:	2300      	movs	r3, #0
 802a226:	f7ff bb64 	b.w	80298f2 <__ieee754_pow+0xc2>
 802a22a:	bf00      	nop
 802a22c:	f3af 8000 	nop.w
 802a230:	00000000 	.word	0x00000000
 802a234:	3fe62e43 	.word	0x3fe62e43
 802a238:	fefa39ef 	.word	0xfefa39ef
 802a23c:	3fe62e42 	.word	0x3fe62e42
 802a240:	0ca86c39 	.word	0x0ca86c39
 802a244:	be205c61 	.word	0xbe205c61
 802a248:	72bea4d0 	.word	0x72bea4d0
 802a24c:	3e663769 	.word	0x3e663769
 802a250:	c5d26bf1 	.word	0xc5d26bf1
 802a254:	3ebbbd41 	.word	0x3ebbbd41
 802a258:	af25de2c 	.word	0xaf25de2c
 802a25c:	3f11566a 	.word	0x3f11566a
 802a260:	16bebd93 	.word	0x16bebd93
 802a264:	3f66c16c 	.word	0x3f66c16c
 802a268:	5555553e 	.word	0x5555553e
 802a26c:	3fc55555 	.word	0x3fc55555
 802a270:	3fe00000 	.word	0x3fe00000
 802a274:	000fffff 	.word	0x000fffff
 802a278:	3ff00000 	.word	0x3ff00000
 802a27c:	4090cbff 	.word	0x4090cbff
 802a280:	3f6f3400 	.word	0x3f6f3400
 802a284:	652b82fe 	.word	0x652b82fe
 802a288:	3c971547 	.word	0x3c971547
 802a28c:	00000000 	.word	0x00000000

0802a290 <__ieee754_rem_pio2>:
 802a290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a294:	ed2d 8b02 	vpush	{d8}
 802a298:	ec55 4b10 	vmov	r4, r5, d0
 802a29c:	4bca      	ldr	r3, [pc, #808]	; (802a5c8 <__ieee754_rem_pio2+0x338>)
 802a29e:	b08b      	sub	sp, #44	; 0x2c
 802a2a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 802a2a4:	4598      	cmp	r8, r3
 802a2a6:	4682      	mov	sl, r0
 802a2a8:	9502      	str	r5, [sp, #8]
 802a2aa:	dc08      	bgt.n	802a2be <__ieee754_rem_pio2+0x2e>
 802a2ac:	2200      	movs	r2, #0
 802a2ae:	2300      	movs	r3, #0
 802a2b0:	ed80 0b00 	vstr	d0, [r0]
 802a2b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 802a2b8:	f04f 0b00 	mov.w	fp, #0
 802a2bc:	e028      	b.n	802a310 <__ieee754_rem_pio2+0x80>
 802a2be:	4bc3      	ldr	r3, [pc, #780]	; (802a5cc <__ieee754_rem_pio2+0x33c>)
 802a2c0:	4598      	cmp	r8, r3
 802a2c2:	dc78      	bgt.n	802a3b6 <__ieee754_rem_pio2+0x126>
 802a2c4:	9b02      	ldr	r3, [sp, #8]
 802a2c6:	4ec2      	ldr	r6, [pc, #776]	; (802a5d0 <__ieee754_rem_pio2+0x340>)
 802a2c8:	2b00      	cmp	r3, #0
 802a2ca:	ee10 0a10 	vmov	r0, s0
 802a2ce:	a3b0      	add	r3, pc, #704	; (adr r3, 802a590 <__ieee754_rem_pio2+0x300>)
 802a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a2d4:	4629      	mov	r1, r5
 802a2d6:	dd39      	ble.n	802a34c <__ieee754_rem_pio2+0xbc>
 802a2d8:	f7d6 f800 	bl	80002dc <__aeabi_dsub>
 802a2dc:	45b0      	cmp	r8, r6
 802a2de:	4604      	mov	r4, r0
 802a2e0:	460d      	mov	r5, r1
 802a2e2:	d01b      	beq.n	802a31c <__ieee754_rem_pio2+0x8c>
 802a2e4:	a3ac      	add	r3, pc, #688	; (adr r3, 802a598 <__ieee754_rem_pio2+0x308>)
 802a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a2ea:	f7d5 fff7 	bl	80002dc <__aeabi_dsub>
 802a2ee:	4602      	mov	r2, r0
 802a2f0:	460b      	mov	r3, r1
 802a2f2:	e9ca 2300 	strd	r2, r3, [sl]
 802a2f6:	4620      	mov	r0, r4
 802a2f8:	4629      	mov	r1, r5
 802a2fa:	f7d5 ffef 	bl	80002dc <__aeabi_dsub>
 802a2fe:	a3a6      	add	r3, pc, #664	; (adr r3, 802a598 <__ieee754_rem_pio2+0x308>)
 802a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a304:	f7d5 ffea 	bl	80002dc <__aeabi_dsub>
 802a308:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802a30c:	f04f 0b01 	mov.w	fp, #1
 802a310:	4658      	mov	r0, fp
 802a312:	b00b      	add	sp, #44	; 0x2c
 802a314:	ecbd 8b02 	vpop	{d8}
 802a318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a31c:	a3a0      	add	r3, pc, #640	; (adr r3, 802a5a0 <__ieee754_rem_pio2+0x310>)
 802a31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a322:	f7d5 ffdb 	bl	80002dc <__aeabi_dsub>
 802a326:	a3a0      	add	r3, pc, #640	; (adr r3, 802a5a8 <__ieee754_rem_pio2+0x318>)
 802a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a32c:	4604      	mov	r4, r0
 802a32e:	460d      	mov	r5, r1
 802a330:	f7d5 ffd4 	bl	80002dc <__aeabi_dsub>
 802a334:	4602      	mov	r2, r0
 802a336:	460b      	mov	r3, r1
 802a338:	e9ca 2300 	strd	r2, r3, [sl]
 802a33c:	4620      	mov	r0, r4
 802a33e:	4629      	mov	r1, r5
 802a340:	f7d5 ffcc 	bl	80002dc <__aeabi_dsub>
 802a344:	a398      	add	r3, pc, #608	; (adr r3, 802a5a8 <__ieee754_rem_pio2+0x318>)
 802a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a34a:	e7db      	b.n	802a304 <__ieee754_rem_pio2+0x74>
 802a34c:	f7d5 ffc8 	bl	80002e0 <__adddf3>
 802a350:	45b0      	cmp	r8, r6
 802a352:	4604      	mov	r4, r0
 802a354:	460d      	mov	r5, r1
 802a356:	d016      	beq.n	802a386 <__ieee754_rem_pio2+0xf6>
 802a358:	a38f      	add	r3, pc, #572	; (adr r3, 802a598 <__ieee754_rem_pio2+0x308>)
 802a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a35e:	f7d5 ffbf 	bl	80002e0 <__adddf3>
 802a362:	4602      	mov	r2, r0
 802a364:	460b      	mov	r3, r1
 802a366:	e9ca 2300 	strd	r2, r3, [sl]
 802a36a:	4620      	mov	r0, r4
 802a36c:	4629      	mov	r1, r5
 802a36e:	f7d5 ffb5 	bl	80002dc <__aeabi_dsub>
 802a372:	a389      	add	r3, pc, #548	; (adr r3, 802a598 <__ieee754_rem_pio2+0x308>)
 802a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a378:	f7d5 ffb2 	bl	80002e0 <__adddf3>
 802a37c:	f04f 3bff 	mov.w	fp, #4294967295
 802a380:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802a384:	e7c4      	b.n	802a310 <__ieee754_rem_pio2+0x80>
 802a386:	a386      	add	r3, pc, #536	; (adr r3, 802a5a0 <__ieee754_rem_pio2+0x310>)
 802a388:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a38c:	f7d5 ffa8 	bl	80002e0 <__adddf3>
 802a390:	a385      	add	r3, pc, #532	; (adr r3, 802a5a8 <__ieee754_rem_pio2+0x318>)
 802a392:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a396:	4604      	mov	r4, r0
 802a398:	460d      	mov	r5, r1
 802a39a:	f7d5 ffa1 	bl	80002e0 <__adddf3>
 802a39e:	4602      	mov	r2, r0
 802a3a0:	460b      	mov	r3, r1
 802a3a2:	e9ca 2300 	strd	r2, r3, [sl]
 802a3a6:	4620      	mov	r0, r4
 802a3a8:	4629      	mov	r1, r5
 802a3aa:	f7d5 ff97 	bl	80002dc <__aeabi_dsub>
 802a3ae:	a37e      	add	r3, pc, #504	; (adr r3, 802a5a8 <__ieee754_rem_pio2+0x318>)
 802a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a3b4:	e7e0      	b.n	802a378 <__ieee754_rem_pio2+0xe8>
 802a3b6:	4b87      	ldr	r3, [pc, #540]	; (802a5d4 <__ieee754_rem_pio2+0x344>)
 802a3b8:	4598      	cmp	r8, r3
 802a3ba:	f300 80d9 	bgt.w	802a570 <__ieee754_rem_pio2+0x2e0>
 802a3be:	f001 fdc1 	bl	802bf44 <fabs>
 802a3c2:	ec55 4b10 	vmov	r4, r5, d0
 802a3c6:	ee10 0a10 	vmov	r0, s0
 802a3ca:	a379      	add	r3, pc, #484	; (adr r3, 802a5b0 <__ieee754_rem_pio2+0x320>)
 802a3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a3d0:	4629      	mov	r1, r5
 802a3d2:	f7d6 f93b 	bl	800064c <__aeabi_dmul>
 802a3d6:	4b80      	ldr	r3, [pc, #512]	; (802a5d8 <__ieee754_rem_pio2+0x348>)
 802a3d8:	2200      	movs	r2, #0
 802a3da:	f7d5 ff81 	bl	80002e0 <__adddf3>
 802a3de:	f7d6 fbe5 	bl	8000bac <__aeabi_d2iz>
 802a3e2:	4683      	mov	fp, r0
 802a3e4:	f7d6 f8c8 	bl	8000578 <__aeabi_i2d>
 802a3e8:	4602      	mov	r2, r0
 802a3ea:	460b      	mov	r3, r1
 802a3ec:	ec43 2b18 	vmov	d8, r2, r3
 802a3f0:	a367      	add	r3, pc, #412	; (adr r3, 802a590 <__ieee754_rem_pio2+0x300>)
 802a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a3f6:	f7d6 f929 	bl	800064c <__aeabi_dmul>
 802a3fa:	4602      	mov	r2, r0
 802a3fc:	460b      	mov	r3, r1
 802a3fe:	4620      	mov	r0, r4
 802a400:	4629      	mov	r1, r5
 802a402:	f7d5 ff6b 	bl	80002dc <__aeabi_dsub>
 802a406:	a364      	add	r3, pc, #400	; (adr r3, 802a598 <__ieee754_rem_pio2+0x308>)
 802a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a40c:	4606      	mov	r6, r0
 802a40e:	460f      	mov	r7, r1
 802a410:	ec51 0b18 	vmov	r0, r1, d8
 802a414:	f7d6 f91a 	bl	800064c <__aeabi_dmul>
 802a418:	f1bb 0f1f 	cmp.w	fp, #31
 802a41c:	4604      	mov	r4, r0
 802a41e:	460d      	mov	r5, r1
 802a420:	dc0d      	bgt.n	802a43e <__ieee754_rem_pio2+0x1ae>
 802a422:	4b6e      	ldr	r3, [pc, #440]	; (802a5dc <__ieee754_rem_pio2+0x34c>)
 802a424:	f10b 32ff 	add.w	r2, fp, #4294967295
 802a428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802a42c:	4543      	cmp	r3, r8
 802a42e:	d006      	beq.n	802a43e <__ieee754_rem_pio2+0x1ae>
 802a430:	4622      	mov	r2, r4
 802a432:	462b      	mov	r3, r5
 802a434:	4630      	mov	r0, r6
 802a436:	4639      	mov	r1, r7
 802a438:	f7d5 ff50 	bl	80002dc <__aeabi_dsub>
 802a43c:	e00f      	b.n	802a45e <__ieee754_rem_pio2+0x1ce>
 802a43e:	462b      	mov	r3, r5
 802a440:	4622      	mov	r2, r4
 802a442:	4630      	mov	r0, r6
 802a444:	4639      	mov	r1, r7
 802a446:	f7d5 ff49 	bl	80002dc <__aeabi_dsub>
 802a44a:	ea4f 5328 	mov.w	r3, r8, asr #20
 802a44e:	9303      	str	r3, [sp, #12]
 802a450:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802a454:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 802a458:	f1b8 0f10 	cmp.w	r8, #16
 802a45c:	dc02      	bgt.n	802a464 <__ieee754_rem_pio2+0x1d4>
 802a45e:	e9ca 0100 	strd	r0, r1, [sl]
 802a462:	e039      	b.n	802a4d8 <__ieee754_rem_pio2+0x248>
 802a464:	a34e      	add	r3, pc, #312	; (adr r3, 802a5a0 <__ieee754_rem_pio2+0x310>)
 802a466:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a46a:	ec51 0b18 	vmov	r0, r1, d8
 802a46e:	f7d6 f8ed 	bl	800064c <__aeabi_dmul>
 802a472:	4604      	mov	r4, r0
 802a474:	460d      	mov	r5, r1
 802a476:	4602      	mov	r2, r0
 802a478:	460b      	mov	r3, r1
 802a47a:	4630      	mov	r0, r6
 802a47c:	4639      	mov	r1, r7
 802a47e:	f7d5 ff2d 	bl	80002dc <__aeabi_dsub>
 802a482:	4602      	mov	r2, r0
 802a484:	460b      	mov	r3, r1
 802a486:	4680      	mov	r8, r0
 802a488:	4689      	mov	r9, r1
 802a48a:	4630      	mov	r0, r6
 802a48c:	4639      	mov	r1, r7
 802a48e:	f7d5 ff25 	bl	80002dc <__aeabi_dsub>
 802a492:	4622      	mov	r2, r4
 802a494:	462b      	mov	r3, r5
 802a496:	f7d5 ff21 	bl	80002dc <__aeabi_dsub>
 802a49a:	a343      	add	r3, pc, #268	; (adr r3, 802a5a8 <__ieee754_rem_pio2+0x318>)
 802a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a4a0:	4604      	mov	r4, r0
 802a4a2:	460d      	mov	r5, r1
 802a4a4:	ec51 0b18 	vmov	r0, r1, d8
 802a4a8:	f7d6 f8d0 	bl	800064c <__aeabi_dmul>
 802a4ac:	4622      	mov	r2, r4
 802a4ae:	462b      	mov	r3, r5
 802a4b0:	f7d5 ff14 	bl	80002dc <__aeabi_dsub>
 802a4b4:	4602      	mov	r2, r0
 802a4b6:	460b      	mov	r3, r1
 802a4b8:	4604      	mov	r4, r0
 802a4ba:	460d      	mov	r5, r1
 802a4bc:	4640      	mov	r0, r8
 802a4be:	4649      	mov	r1, r9
 802a4c0:	f7d5 ff0c 	bl	80002dc <__aeabi_dsub>
 802a4c4:	9a03      	ldr	r2, [sp, #12]
 802a4c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802a4ca:	1ad3      	subs	r3, r2, r3
 802a4cc:	2b31      	cmp	r3, #49	; 0x31
 802a4ce:	dc24      	bgt.n	802a51a <__ieee754_rem_pio2+0x28a>
 802a4d0:	e9ca 0100 	strd	r0, r1, [sl]
 802a4d4:	4646      	mov	r6, r8
 802a4d6:	464f      	mov	r7, r9
 802a4d8:	e9da 8900 	ldrd	r8, r9, [sl]
 802a4dc:	4630      	mov	r0, r6
 802a4de:	4642      	mov	r2, r8
 802a4e0:	464b      	mov	r3, r9
 802a4e2:	4639      	mov	r1, r7
 802a4e4:	f7d5 fefa 	bl	80002dc <__aeabi_dsub>
 802a4e8:	462b      	mov	r3, r5
 802a4ea:	4622      	mov	r2, r4
 802a4ec:	f7d5 fef6 	bl	80002dc <__aeabi_dsub>
 802a4f0:	9b02      	ldr	r3, [sp, #8]
 802a4f2:	2b00      	cmp	r3, #0
 802a4f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802a4f8:	f6bf af0a 	bge.w	802a310 <__ieee754_rem_pio2+0x80>
 802a4fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802a500:	f8ca 3004 	str.w	r3, [sl, #4]
 802a504:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802a508:	f8ca 8000 	str.w	r8, [sl]
 802a50c:	f8ca 0008 	str.w	r0, [sl, #8]
 802a510:	f8ca 300c 	str.w	r3, [sl, #12]
 802a514:	f1cb 0b00 	rsb	fp, fp, #0
 802a518:	e6fa      	b.n	802a310 <__ieee754_rem_pio2+0x80>
 802a51a:	a327      	add	r3, pc, #156	; (adr r3, 802a5b8 <__ieee754_rem_pio2+0x328>)
 802a51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a520:	ec51 0b18 	vmov	r0, r1, d8
 802a524:	f7d6 f892 	bl	800064c <__aeabi_dmul>
 802a528:	4604      	mov	r4, r0
 802a52a:	460d      	mov	r5, r1
 802a52c:	4602      	mov	r2, r0
 802a52e:	460b      	mov	r3, r1
 802a530:	4640      	mov	r0, r8
 802a532:	4649      	mov	r1, r9
 802a534:	f7d5 fed2 	bl	80002dc <__aeabi_dsub>
 802a538:	4602      	mov	r2, r0
 802a53a:	460b      	mov	r3, r1
 802a53c:	4606      	mov	r6, r0
 802a53e:	460f      	mov	r7, r1
 802a540:	4640      	mov	r0, r8
 802a542:	4649      	mov	r1, r9
 802a544:	f7d5 feca 	bl	80002dc <__aeabi_dsub>
 802a548:	4622      	mov	r2, r4
 802a54a:	462b      	mov	r3, r5
 802a54c:	f7d5 fec6 	bl	80002dc <__aeabi_dsub>
 802a550:	a31b      	add	r3, pc, #108	; (adr r3, 802a5c0 <__ieee754_rem_pio2+0x330>)
 802a552:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a556:	4604      	mov	r4, r0
 802a558:	460d      	mov	r5, r1
 802a55a:	ec51 0b18 	vmov	r0, r1, d8
 802a55e:	f7d6 f875 	bl	800064c <__aeabi_dmul>
 802a562:	4622      	mov	r2, r4
 802a564:	462b      	mov	r3, r5
 802a566:	f7d5 feb9 	bl	80002dc <__aeabi_dsub>
 802a56a:	4604      	mov	r4, r0
 802a56c:	460d      	mov	r5, r1
 802a56e:	e75f      	b.n	802a430 <__ieee754_rem_pio2+0x1a0>
 802a570:	4b1b      	ldr	r3, [pc, #108]	; (802a5e0 <__ieee754_rem_pio2+0x350>)
 802a572:	4598      	cmp	r8, r3
 802a574:	dd36      	ble.n	802a5e4 <__ieee754_rem_pio2+0x354>
 802a576:	ee10 2a10 	vmov	r2, s0
 802a57a:	462b      	mov	r3, r5
 802a57c:	4620      	mov	r0, r4
 802a57e:	4629      	mov	r1, r5
 802a580:	f7d5 feac 	bl	80002dc <__aeabi_dsub>
 802a584:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802a588:	e9ca 0100 	strd	r0, r1, [sl]
 802a58c:	e694      	b.n	802a2b8 <__ieee754_rem_pio2+0x28>
 802a58e:	bf00      	nop
 802a590:	54400000 	.word	0x54400000
 802a594:	3ff921fb 	.word	0x3ff921fb
 802a598:	1a626331 	.word	0x1a626331
 802a59c:	3dd0b461 	.word	0x3dd0b461
 802a5a0:	1a600000 	.word	0x1a600000
 802a5a4:	3dd0b461 	.word	0x3dd0b461
 802a5a8:	2e037073 	.word	0x2e037073
 802a5ac:	3ba3198a 	.word	0x3ba3198a
 802a5b0:	6dc9c883 	.word	0x6dc9c883
 802a5b4:	3fe45f30 	.word	0x3fe45f30
 802a5b8:	2e000000 	.word	0x2e000000
 802a5bc:	3ba3198a 	.word	0x3ba3198a
 802a5c0:	252049c1 	.word	0x252049c1
 802a5c4:	397b839a 	.word	0x397b839a
 802a5c8:	3fe921fb 	.word	0x3fe921fb
 802a5cc:	4002d97b 	.word	0x4002d97b
 802a5d0:	3ff921fb 	.word	0x3ff921fb
 802a5d4:	413921fb 	.word	0x413921fb
 802a5d8:	3fe00000 	.word	0x3fe00000
 802a5dc:	08031ac0 	.word	0x08031ac0
 802a5e0:	7fefffff 	.word	0x7fefffff
 802a5e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 802a5e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 802a5ec:	ee10 0a10 	vmov	r0, s0
 802a5f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 802a5f4:	ee10 6a10 	vmov	r6, s0
 802a5f8:	460f      	mov	r7, r1
 802a5fa:	f7d6 fad7 	bl	8000bac <__aeabi_d2iz>
 802a5fe:	f7d5 ffbb 	bl	8000578 <__aeabi_i2d>
 802a602:	4602      	mov	r2, r0
 802a604:	460b      	mov	r3, r1
 802a606:	4630      	mov	r0, r6
 802a608:	4639      	mov	r1, r7
 802a60a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a60e:	f7d5 fe65 	bl	80002dc <__aeabi_dsub>
 802a612:	4b23      	ldr	r3, [pc, #140]	; (802a6a0 <__ieee754_rem_pio2+0x410>)
 802a614:	2200      	movs	r2, #0
 802a616:	f7d6 f819 	bl	800064c <__aeabi_dmul>
 802a61a:	460f      	mov	r7, r1
 802a61c:	4606      	mov	r6, r0
 802a61e:	f7d6 fac5 	bl	8000bac <__aeabi_d2iz>
 802a622:	f7d5 ffa9 	bl	8000578 <__aeabi_i2d>
 802a626:	4602      	mov	r2, r0
 802a628:	460b      	mov	r3, r1
 802a62a:	4630      	mov	r0, r6
 802a62c:	4639      	mov	r1, r7
 802a62e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802a632:	f7d5 fe53 	bl	80002dc <__aeabi_dsub>
 802a636:	4b1a      	ldr	r3, [pc, #104]	; (802a6a0 <__ieee754_rem_pio2+0x410>)
 802a638:	2200      	movs	r2, #0
 802a63a:	f7d6 f807 	bl	800064c <__aeabi_dmul>
 802a63e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802a642:	ad04      	add	r5, sp, #16
 802a644:	f04f 0803 	mov.w	r8, #3
 802a648:	46a9      	mov	r9, r5
 802a64a:	2600      	movs	r6, #0
 802a64c:	2700      	movs	r7, #0
 802a64e:	4632      	mov	r2, r6
 802a650:	463b      	mov	r3, r7
 802a652:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 802a656:	46c3      	mov	fp, r8
 802a658:	3d08      	subs	r5, #8
 802a65a:	f108 38ff 	add.w	r8, r8, #4294967295
 802a65e:	f7d6 fa5d 	bl	8000b1c <__aeabi_dcmpeq>
 802a662:	2800      	cmp	r0, #0
 802a664:	d1f3      	bne.n	802a64e <__ieee754_rem_pio2+0x3be>
 802a666:	4b0f      	ldr	r3, [pc, #60]	; (802a6a4 <__ieee754_rem_pio2+0x414>)
 802a668:	9301      	str	r3, [sp, #4]
 802a66a:	2302      	movs	r3, #2
 802a66c:	9300      	str	r3, [sp, #0]
 802a66e:	4622      	mov	r2, r4
 802a670:	465b      	mov	r3, fp
 802a672:	4651      	mov	r1, sl
 802a674:	4648      	mov	r0, r9
 802a676:	f000 fce7 	bl	802b048 <__kernel_rem_pio2>
 802a67a:	9b02      	ldr	r3, [sp, #8]
 802a67c:	2b00      	cmp	r3, #0
 802a67e:	4683      	mov	fp, r0
 802a680:	f6bf ae46 	bge.w	802a310 <__ieee754_rem_pio2+0x80>
 802a684:	e9da 2100 	ldrd	r2, r1, [sl]
 802a688:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802a68c:	e9ca 2300 	strd	r2, r3, [sl]
 802a690:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 802a694:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802a698:	e9ca 2302 	strd	r2, r3, [sl, #8]
 802a69c:	e73a      	b.n	802a514 <__ieee754_rem_pio2+0x284>
 802a69e:	bf00      	nop
 802a6a0:	41700000 	.word	0x41700000
 802a6a4:	08031b40 	.word	0x08031b40

0802a6a8 <__ieee754_sqrt>:
 802a6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a6ac:	ec55 4b10 	vmov	r4, r5, d0
 802a6b0:	4e55      	ldr	r6, [pc, #340]	; (802a808 <__ieee754_sqrt+0x160>)
 802a6b2:	43ae      	bics	r6, r5
 802a6b4:	ee10 0a10 	vmov	r0, s0
 802a6b8:	ee10 3a10 	vmov	r3, s0
 802a6bc:	462a      	mov	r2, r5
 802a6be:	4629      	mov	r1, r5
 802a6c0:	d110      	bne.n	802a6e4 <__ieee754_sqrt+0x3c>
 802a6c2:	ee10 2a10 	vmov	r2, s0
 802a6c6:	462b      	mov	r3, r5
 802a6c8:	f7d5 ffc0 	bl	800064c <__aeabi_dmul>
 802a6cc:	4602      	mov	r2, r0
 802a6ce:	460b      	mov	r3, r1
 802a6d0:	4620      	mov	r0, r4
 802a6d2:	4629      	mov	r1, r5
 802a6d4:	f7d5 fe04 	bl	80002e0 <__adddf3>
 802a6d8:	4604      	mov	r4, r0
 802a6da:	460d      	mov	r5, r1
 802a6dc:	ec45 4b10 	vmov	d0, r4, r5
 802a6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a6e4:	2d00      	cmp	r5, #0
 802a6e6:	dc10      	bgt.n	802a70a <__ieee754_sqrt+0x62>
 802a6e8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802a6ec:	4330      	orrs	r0, r6
 802a6ee:	d0f5      	beq.n	802a6dc <__ieee754_sqrt+0x34>
 802a6f0:	b15d      	cbz	r5, 802a70a <__ieee754_sqrt+0x62>
 802a6f2:	ee10 2a10 	vmov	r2, s0
 802a6f6:	462b      	mov	r3, r5
 802a6f8:	ee10 0a10 	vmov	r0, s0
 802a6fc:	f7d5 fdee 	bl	80002dc <__aeabi_dsub>
 802a700:	4602      	mov	r2, r0
 802a702:	460b      	mov	r3, r1
 802a704:	f7d6 f8cc 	bl	80008a0 <__aeabi_ddiv>
 802a708:	e7e6      	b.n	802a6d8 <__ieee754_sqrt+0x30>
 802a70a:	1512      	asrs	r2, r2, #20
 802a70c:	d074      	beq.n	802a7f8 <__ieee754_sqrt+0x150>
 802a70e:	07d4      	lsls	r4, r2, #31
 802a710:	f3c1 0113 	ubfx	r1, r1, #0, #20
 802a714:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 802a718:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802a71c:	bf5e      	ittt	pl
 802a71e:	0fda      	lsrpl	r2, r3, #31
 802a720:	005b      	lslpl	r3, r3, #1
 802a722:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 802a726:	2400      	movs	r4, #0
 802a728:	0fda      	lsrs	r2, r3, #31
 802a72a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 802a72e:	107f      	asrs	r7, r7, #1
 802a730:	005b      	lsls	r3, r3, #1
 802a732:	2516      	movs	r5, #22
 802a734:	4620      	mov	r0, r4
 802a736:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 802a73a:	1886      	adds	r6, r0, r2
 802a73c:	428e      	cmp	r6, r1
 802a73e:	bfde      	ittt	le
 802a740:	1b89      	suble	r1, r1, r6
 802a742:	18b0      	addle	r0, r6, r2
 802a744:	18a4      	addle	r4, r4, r2
 802a746:	0049      	lsls	r1, r1, #1
 802a748:	3d01      	subs	r5, #1
 802a74a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 802a74e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 802a752:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802a756:	d1f0      	bne.n	802a73a <__ieee754_sqrt+0x92>
 802a758:	462a      	mov	r2, r5
 802a75a:	f04f 0e20 	mov.w	lr, #32
 802a75e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 802a762:	4281      	cmp	r1, r0
 802a764:	eb06 0c05 	add.w	ip, r6, r5
 802a768:	dc02      	bgt.n	802a770 <__ieee754_sqrt+0xc8>
 802a76a:	d113      	bne.n	802a794 <__ieee754_sqrt+0xec>
 802a76c:	459c      	cmp	ip, r3
 802a76e:	d811      	bhi.n	802a794 <__ieee754_sqrt+0xec>
 802a770:	f1bc 0f00 	cmp.w	ip, #0
 802a774:	eb0c 0506 	add.w	r5, ip, r6
 802a778:	da43      	bge.n	802a802 <__ieee754_sqrt+0x15a>
 802a77a:	2d00      	cmp	r5, #0
 802a77c:	db41      	blt.n	802a802 <__ieee754_sqrt+0x15a>
 802a77e:	f100 0801 	add.w	r8, r0, #1
 802a782:	1a09      	subs	r1, r1, r0
 802a784:	459c      	cmp	ip, r3
 802a786:	bf88      	it	hi
 802a788:	f101 31ff 	addhi.w	r1, r1, #4294967295
 802a78c:	eba3 030c 	sub.w	r3, r3, ip
 802a790:	4432      	add	r2, r6
 802a792:	4640      	mov	r0, r8
 802a794:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 802a798:	f1be 0e01 	subs.w	lr, lr, #1
 802a79c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 802a7a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802a7a4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802a7a8:	d1db      	bne.n	802a762 <__ieee754_sqrt+0xba>
 802a7aa:	430b      	orrs	r3, r1
 802a7ac:	d006      	beq.n	802a7bc <__ieee754_sqrt+0x114>
 802a7ae:	1c50      	adds	r0, r2, #1
 802a7b0:	bf13      	iteet	ne
 802a7b2:	3201      	addne	r2, #1
 802a7b4:	3401      	addeq	r4, #1
 802a7b6:	4672      	moveq	r2, lr
 802a7b8:	f022 0201 	bicne.w	r2, r2, #1
 802a7bc:	1063      	asrs	r3, r4, #1
 802a7be:	0852      	lsrs	r2, r2, #1
 802a7c0:	07e1      	lsls	r1, r4, #31
 802a7c2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 802a7c6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 802a7ca:	bf48      	it	mi
 802a7cc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 802a7d0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 802a7d4:	4614      	mov	r4, r2
 802a7d6:	e781      	b.n	802a6dc <__ieee754_sqrt+0x34>
 802a7d8:	0ad9      	lsrs	r1, r3, #11
 802a7da:	3815      	subs	r0, #21
 802a7dc:	055b      	lsls	r3, r3, #21
 802a7de:	2900      	cmp	r1, #0
 802a7e0:	d0fa      	beq.n	802a7d8 <__ieee754_sqrt+0x130>
 802a7e2:	02cd      	lsls	r5, r1, #11
 802a7e4:	d50a      	bpl.n	802a7fc <__ieee754_sqrt+0x154>
 802a7e6:	f1c2 0420 	rsb	r4, r2, #32
 802a7ea:	fa23 f404 	lsr.w	r4, r3, r4
 802a7ee:	1e55      	subs	r5, r2, #1
 802a7f0:	4093      	lsls	r3, r2
 802a7f2:	4321      	orrs	r1, r4
 802a7f4:	1b42      	subs	r2, r0, r5
 802a7f6:	e78a      	b.n	802a70e <__ieee754_sqrt+0x66>
 802a7f8:	4610      	mov	r0, r2
 802a7fa:	e7f0      	b.n	802a7de <__ieee754_sqrt+0x136>
 802a7fc:	0049      	lsls	r1, r1, #1
 802a7fe:	3201      	adds	r2, #1
 802a800:	e7ef      	b.n	802a7e2 <__ieee754_sqrt+0x13a>
 802a802:	4680      	mov	r8, r0
 802a804:	e7bd      	b.n	802a782 <__ieee754_sqrt+0xda>
 802a806:	bf00      	nop
 802a808:	7ff00000 	.word	0x7ff00000

0802a80c <__ieee754_expf>:
 802a80c:	ee10 2a10 	vmov	r2, s0
 802a810:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 802a814:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802a818:	d902      	bls.n	802a820 <__ieee754_expf+0x14>
 802a81a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802a81e:	4770      	bx	lr
 802a820:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 802a824:	d106      	bne.n	802a834 <__ieee754_expf+0x28>
 802a826:	eddf 7a4e 	vldr	s15, [pc, #312]	; 802a960 <__ieee754_expf+0x154>
 802a82a:	2b00      	cmp	r3, #0
 802a82c:	bf18      	it	ne
 802a82e:	eeb0 0a67 	vmovne.f32	s0, s15
 802a832:	4770      	bx	lr
 802a834:	484b      	ldr	r0, [pc, #300]	; (802a964 <__ieee754_expf+0x158>)
 802a836:	4282      	cmp	r2, r0
 802a838:	dd02      	ble.n	802a840 <__ieee754_expf+0x34>
 802a83a:	2000      	movs	r0, #0
 802a83c:	f001 bb7c 	b.w	802bf38 <__math_oflowf>
 802a840:	2a00      	cmp	r2, #0
 802a842:	da05      	bge.n	802a850 <__ieee754_expf+0x44>
 802a844:	4a48      	ldr	r2, [pc, #288]	; (802a968 <__ieee754_expf+0x15c>)
 802a846:	4291      	cmp	r1, r2
 802a848:	d902      	bls.n	802a850 <__ieee754_expf+0x44>
 802a84a:	2000      	movs	r0, #0
 802a84c:	f001 bb6e 	b.w	802bf2c <__math_uflowf>
 802a850:	4a46      	ldr	r2, [pc, #280]	; (802a96c <__ieee754_expf+0x160>)
 802a852:	4291      	cmp	r1, r2
 802a854:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 802a858:	d952      	bls.n	802a900 <__ieee754_expf+0xf4>
 802a85a:	4a45      	ldr	r2, [pc, #276]	; (802a970 <__ieee754_expf+0x164>)
 802a85c:	4291      	cmp	r1, r2
 802a85e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 802a862:	d834      	bhi.n	802a8ce <__ieee754_expf+0xc2>
 802a864:	4943      	ldr	r1, [pc, #268]	; (802a974 <__ieee754_expf+0x168>)
 802a866:	4411      	add	r1, r2
 802a868:	ed91 7a00 	vldr	s14, [r1]
 802a86c:	4942      	ldr	r1, [pc, #264]	; (802a978 <__ieee754_expf+0x16c>)
 802a86e:	440a      	add	r2, r1
 802a870:	edd2 7a00 	vldr	s15, [r2]
 802a874:	ee30 7a47 	vsub.f32	s14, s0, s14
 802a878:	f1c3 0201 	rsb	r2, r3, #1
 802a87c:	1ad2      	subs	r2, r2, r3
 802a87e:	ee37 0a67 	vsub.f32	s0, s14, s15
 802a882:	ee20 6a00 	vmul.f32	s12, s0, s0
 802a886:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 802a97c <__ieee754_expf+0x170>
 802a88a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 802a980 <__ieee754_expf+0x174>
 802a88e:	eee6 6a05 	vfma.f32	s13, s12, s10
 802a892:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 802a984 <__ieee754_expf+0x178>
 802a896:	eea6 5a86 	vfma.f32	s10, s13, s12
 802a89a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 802a988 <__ieee754_expf+0x17c>
 802a89e:	eee5 6a06 	vfma.f32	s13, s10, s12
 802a8a2:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 802a98c <__ieee754_expf+0x180>
 802a8a6:	eea6 5a86 	vfma.f32	s10, s13, s12
 802a8aa:	eef0 6a40 	vmov.f32	s13, s0
 802a8ae:	eee5 6a46 	vfms.f32	s13, s10, s12
 802a8b2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 802a8b6:	ee20 5a26 	vmul.f32	s10, s0, s13
 802a8ba:	bb92      	cbnz	r2, 802a922 <__ieee754_expf+0x116>
 802a8bc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 802a8c0:	eec5 7a26 	vdiv.f32	s15, s10, s13
 802a8c4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 802a8c8:	ee35 0ac0 	vsub.f32	s0, s11, s0
 802a8cc:	4770      	bx	lr
 802a8ce:	4b30      	ldr	r3, [pc, #192]	; (802a990 <__ieee754_expf+0x184>)
 802a8d0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 802a994 <__ieee754_expf+0x188>
 802a8d4:	eddf 6a30 	vldr	s13, [pc, #192]	; 802a998 <__ieee754_expf+0x18c>
 802a8d8:	4413      	add	r3, r2
 802a8da:	edd3 7a00 	vldr	s15, [r3]
 802a8de:	eee0 7a07 	vfma.f32	s15, s0, s14
 802a8e2:	eeb0 7a40 	vmov.f32	s14, s0
 802a8e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802a8ea:	ee17 2a90 	vmov	r2, s15
 802a8ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802a8f2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802a8f6:	eddf 6a29 	vldr	s13, [pc, #164]	; 802a99c <__ieee754_expf+0x190>
 802a8fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802a8fe:	e7be      	b.n	802a87e <__ieee754_expf+0x72>
 802a900:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 802a904:	d20b      	bcs.n	802a91e <__ieee754_expf+0x112>
 802a906:	eddf 6a26 	vldr	s13, [pc, #152]	; 802a9a0 <__ieee754_expf+0x194>
 802a90a:	ee70 6a26 	vadd.f32	s13, s0, s13
 802a90e:	eef4 6ae5 	vcmpe.f32	s13, s11
 802a912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a916:	dd02      	ble.n	802a91e <__ieee754_expf+0x112>
 802a918:	ee30 0a25 	vadd.f32	s0, s0, s11
 802a91c:	4770      	bx	lr
 802a91e:	2200      	movs	r2, #0
 802a920:	e7af      	b.n	802a882 <__ieee754_expf+0x76>
 802a922:	ee76 6a66 	vsub.f32	s13, s12, s13
 802a926:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 802a92a:	ee85 0a26 	vdiv.f32	s0, s10, s13
 802a92e:	bfb8      	it	lt
 802a930:	3264      	addlt	r2, #100	; 0x64
 802a932:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802a936:	ee37 0ac7 	vsub.f32	s0, s15, s14
 802a93a:	ee75 7ac0 	vsub.f32	s15, s11, s0
 802a93e:	ee17 3a90 	vmov	r3, s15
 802a942:	bfab      	itete	ge
 802a944:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 802a948:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 802a94c:	ee00 3a10 	vmovge	s0, r3
 802a950:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 802a9a4 <__ieee754_expf+0x198>
 802a954:	bfbc      	itt	lt
 802a956:	ee00 3a10 	vmovlt	s0, r3
 802a95a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 802a95e:	4770      	bx	lr
 802a960:	00000000 	.word	0x00000000
 802a964:	42b17217 	.word	0x42b17217
 802a968:	42cff1b5 	.word	0x42cff1b5
 802a96c:	3eb17218 	.word	0x3eb17218
 802a970:	3f851591 	.word	0x3f851591
 802a974:	08031c50 	.word	0x08031c50
 802a978:	08031c58 	.word	0x08031c58
 802a97c:	3331bb4c 	.word	0x3331bb4c
 802a980:	b5ddea0e 	.word	0xb5ddea0e
 802a984:	388ab355 	.word	0x388ab355
 802a988:	bb360b61 	.word	0xbb360b61
 802a98c:	3e2aaaab 	.word	0x3e2aaaab
 802a990:	08031c48 	.word	0x08031c48
 802a994:	3fb8aa3b 	.word	0x3fb8aa3b
 802a998:	3f317180 	.word	0x3f317180
 802a99c:	3717f7d1 	.word	0x3717f7d1
 802a9a0:	7149f2ca 	.word	0x7149f2ca
 802a9a4:	0d800000 	.word	0x0d800000

0802a9a8 <__ieee754_logf>:
 802a9a8:	ee10 3a10 	vmov	r3, s0
 802a9ac:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802a9b0:	d106      	bne.n	802a9c0 <__ieee754_logf+0x18>
 802a9b2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 802ab48 <__ieee754_logf+0x1a0>
 802a9b6:	eddf 7a65 	vldr	s15, [pc, #404]	; 802ab4c <__ieee754_logf+0x1a4>
 802a9ba:	ee87 0a27 	vdiv.f32	s0, s14, s15
 802a9be:	4770      	bx	lr
 802a9c0:	2b00      	cmp	r3, #0
 802a9c2:	da02      	bge.n	802a9ca <__ieee754_logf+0x22>
 802a9c4:	ee30 7a40 	vsub.f32	s14, s0, s0
 802a9c8:	e7f5      	b.n	802a9b6 <__ieee754_logf+0xe>
 802a9ca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802a9ce:	db02      	blt.n	802a9d6 <__ieee754_logf+0x2e>
 802a9d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 802a9d4:	4770      	bx	lr
 802a9d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802a9da:	bfb8      	it	lt
 802a9dc:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 802ab50 <__ieee754_logf+0x1a8>
 802a9e0:	485c      	ldr	r0, [pc, #368]	; (802ab54 <__ieee754_logf+0x1ac>)
 802a9e2:	bfbe      	ittt	lt
 802a9e4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 802a9e8:	f06f 0118 	mvnlt.w	r1, #24
 802a9ec:	ee17 3a90 	vmovlt	r3, s15
 802a9f0:	ea4f 52e3 	mov.w	r2, r3, asr #23
 802a9f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 802a9f8:	4418      	add	r0, r3
 802a9fa:	bfa8      	it	ge
 802a9fc:	2100      	movge	r1, #0
 802a9fe:	3a7f      	subs	r2, #127	; 0x7f
 802aa00:	440a      	add	r2, r1
 802aa02:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 802aa06:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 802aa0a:	4319      	orrs	r1, r3
 802aa0c:	ee00 1a10 	vmov	s0, r1
 802aa10:	4951      	ldr	r1, [pc, #324]	; (802ab58 <__ieee754_logf+0x1b0>)
 802aa12:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 802aa16:	f103 000f 	add.w	r0, r3, #15
 802aa1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802aa1e:	4001      	ands	r1, r0
 802aa20:	ee30 0a67 	vsub.f32	s0, s0, s15
 802aa24:	bb89      	cbnz	r1, 802aa8a <__ieee754_logf+0xe2>
 802aa26:	eeb5 0a40 	vcmp.f32	s0, #0.0
 802aa2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802aa2e:	d10f      	bne.n	802aa50 <__ieee754_logf+0xa8>
 802aa30:	2a00      	cmp	r2, #0
 802aa32:	f000 8085 	beq.w	802ab40 <__ieee754_logf+0x198>
 802aa36:	ee07 2a90 	vmov	s15, r2
 802aa3a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 802ab5c <__ieee754_logf+0x1b4>
 802aa3e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 802ab60 <__ieee754_logf+0x1b8>
 802aa42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802aa46:	ee27 0a80 	vmul.f32	s0, s15, s0
 802aa4a:	eea7 0a87 	vfma.f32	s0, s15, s14
 802aa4e:	4770      	bx	lr
 802aa50:	eddf 6a44 	vldr	s13, [pc, #272]	; 802ab64 <__ieee754_logf+0x1bc>
 802aa54:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802aa58:	eee0 7a66 	vfms.f32	s15, s0, s13
 802aa5c:	ee20 7a00 	vmul.f32	s14, s0, s0
 802aa60:	ee27 7a27 	vmul.f32	s14, s14, s15
 802aa64:	b912      	cbnz	r2, 802aa6c <__ieee754_logf+0xc4>
 802aa66:	ee30 0a47 	vsub.f32	s0, s0, s14
 802aa6a:	4770      	bx	lr
 802aa6c:	ee07 2a90 	vmov	s15, r2
 802aa70:	eddf 6a3a 	vldr	s13, [pc, #232]	; 802ab5c <__ieee754_logf+0x1b4>
 802aa74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802aa78:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802aa7c:	ee37 0a40 	vsub.f32	s0, s14, s0
 802aa80:	ed9f 7a37 	vldr	s14, [pc, #220]	; 802ab60 <__ieee754_logf+0x1b8>
 802aa84:	ee97 0a87 	vfnms.f32	s0, s15, s14
 802aa88:	4770      	bx	lr
 802aa8a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 802aa8e:	ee70 7a27 	vadd.f32	s15, s0, s15
 802aa92:	eddf 5a35 	vldr	s11, [pc, #212]	; 802ab68 <__ieee754_logf+0x1c0>
 802aa96:	eddf 4a35 	vldr	s9, [pc, #212]	; 802ab6c <__ieee754_logf+0x1c4>
 802aa9a:	4935      	ldr	r1, [pc, #212]	; (802ab70 <__ieee754_logf+0x1c8>)
 802aa9c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 802aaa0:	4419      	add	r1, r3
 802aaa2:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 802aaa6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 802aaaa:	430b      	orrs	r3, r1
 802aaac:	2b00      	cmp	r3, #0
 802aaae:	ee07 2a90 	vmov	s15, r2
 802aab2:	ee26 5a06 	vmul.f32	s10, s12, s12
 802aab6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802aaba:	ee25 7a05 	vmul.f32	s14, s10, s10
 802aabe:	eddf 7a2d 	vldr	s15, [pc, #180]	; 802ab74 <__ieee754_logf+0x1cc>
 802aac2:	eee7 7a25 	vfma.f32	s15, s14, s11
 802aac6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 802ab78 <__ieee754_logf+0x1d0>
 802aaca:	eee7 5a87 	vfma.f32	s11, s15, s14
 802aace:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802ab7c <__ieee754_logf+0x1d4>
 802aad2:	eee7 7a24 	vfma.f32	s15, s14, s9
 802aad6:	eddf 4a2a 	vldr	s9, [pc, #168]	; 802ab80 <__ieee754_logf+0x1d8>
 802aada:	eee7 4a87 	vfma.f32	s9, s15, s14
 802aade:	eddf 7a29 	vldr	s15, [pc, #164]	; 802ab84 <__ieee754_logf+0x1dc>
 802aae2:	eee4 7a87 	vfma.f32	s15, s9, s14
 802aae6:	ee67 7a85 	vmul.f32	s15, s15, s10
 802aaea:	eee5 7a87 	vfma.f32	s15, s11, s14
 802aaee:	dd1c      	ble.n	802ab2a <__ieee754_logf+0x182>
 802aaf0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802aaf4:	ee20 7a07 	vmul.f32	s14, s0, s14
 802aaf8:	ee27 7a00 	vmul.f32	s14, s14, s0
 802aafc:	ee77 7a87 	vadd.f32	s15, s15, s14
 802ab00:	ee67 7a86 	vmul.f32	s15, s15, s12
 802ab04:	b922      	cbnz	r2, 802ab10 <__ieee754_logf+0x168>
 802ab06:	ee77 7a67 	vsub.f32	s15, s14, s15
 802ab0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802ab0e:	4770      	bx	lr
 802ab10:	ed9f 6a12 	vldr	s12, [pc, #72]	; 802ab5c <__ieee754_logf+0x1b4>
 802ab14:	eee6 7a86 	vfma.f32	s15, s13, s12
 802ab18:	ee77 7a67 	vsub.f32	s15, s14, s15
 802ab1c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 802ab20:	eddf 7a0f 	vldr	s15, [pc, #60]	; 802ab60 <__ieee754_logf+0x1b8>
 802ab24:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 802ab28:	4770      	bx	lr
 802ab2a:	ee70 7a67 	vsub.f32	s15, s0, s15
 802ab2e:	ee67 7a86 	vmul.f32	s15, s15, s12
 802ab32:	2a00      	cmp	r2, #0
 802ab34:	d0e9      	beq.n	802ab0a <__ieee754_logf+0x162>
 802ab36:	ed9f 7a09 	vldr	s14, [pc, #36]	; 802ab5c <__ieee754_logf+0x1b4>
 802ab3a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 802ab3e:	e7ed      	b.n	802ab1c <__ieee754_logf+0x174>
 802ab40:	ed9f 0a02 	vldr	s0, [pc, #8]	; 802ab4c <__ieee754_logf+0x1a4>
 802ab44:	4770      	bx	lr
 802ab46:	bf00      	nop
 802ab48:	cc000000 	.word	0xcc000000
 802ab4c:	00000000 	.word	0x00000000
 802ab50:	4c000000 	.word	0x4c000000
 802ab54:	004afb20 	.word	0x004afb20
 802ab58:	007ffff0 	.word	0x007ffff0
 802ab5c:	3717f7d1 	.word	0x3717f7d1
 802ab60:	3f317180 	.word	0x3f317180
 802ab64:	3eaaaaab 	.word	0x3eaaaaab
 802ab68:	3e1cd04f 	.word	0x3e1cd04f
 802ab6c:	3e178897 	.word	0x3e178897
 802ab70:	ffcf5c30 	.word	0xffcf5c30
 802ab74:	3e638e29 	.word	0x3e638e29
 802ab78:	3ecccccd 	.word	0x3ecccccd
 802ab7c:	3e3a3325 	.word	0x3e3a3325
 802ab80:	3e924925 	.word	0x3e924925
 802ab84:	3f2aaaab 	.word	0x3f2aaaab

0802ab88 <__ieee754_log10f>:
 802ab88:	b508      	push	{r3, lr}
 802ab8a:	ee10 2a10 	vmov	r2, s0
 802ab8e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 802ab92:	ed2d 8b02 	vpush	{d8}
 802ab96:	d108      	bne.n	802abaa <__ieee754_log10f+0x22>
 802ab98:	ed9f 7a21 	vldr	s14, [pc, #132]	; 802ac20 <__ieee754_log10f+0x98>
 802ab9c:	eddf 7a21 	vldr	s15, [pc, #132]	; 802ac24 <__ieee754_log10f+0x9c>
 802aba0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 802aba4:	ecbd 8b02 	vpop	{d8}
 802aba8:	bd08      	pop	{r3, pc}
 802abaa:	2a00      	cmp	r2, #0
 802abac:	da02      	bge.n	802abb4 <__ieee754_log10f+0x2c>
 802abae:	ee30 7a40 	vsub.f32	s14, s0, s0
 802abb2:	e7f3      	b.n	802ab9c <__ieee754_log10f+0x14>
 802abb4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802abb8:	db02      	blt.n	802abc0 <__ieee754_log10f+0x38>
 802abba:	ee30 0a00 	vadd.f32	s0, s0, s0
 802abbe:	e7f1      	b.n	802aba4 <__ieee754_log10f+0x1c>
 802abc0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 802abc4:	bfbf      	itttt	lt
 802abc6:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 802ac28 <__ieee754_log10f+0xa0>
 802abca:	ee60 7a27 	vmullt.f32	s15, s0, s15
 802abce:	f06f 0118 	mvnlt.w	r1, #24
 802abd2:	ee17 2a90 	vmovlt	r2, s15
 802abd6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 802abda:	bfa8      	it	ge
 802abdc:	2100      	movge	r1, #0
 802abde:	3b7f      	subs	r3, #127	; 0x7f
 802abe0:	440b      	add	r3, r1
 802abe2:	0fd9      	lsrs	r1, r3, #31
 802abe4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802abe8:	ee07 3a90 	vmov	s15, r3
 802abec:	f3c2 0216 	ubfx	r2, r2, #0, #23
 802abf0:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 802abf4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 802abf8:	ee00 3a10 	vmov	s0, r3
 802abfc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 802ac00:	f7ff fed2 	bl	802a9a8 <__ieee754_logf>
 802ac04:	eddf 7a09 	vldr	s15, [pc, #36]	; 802ac2c <__ieee754_log10f+0xa4>
 802ac08:	ee20 0a27 	vmul.f32	s0, s0, s15
 802ac0c:	eddf 7a08 	vldr	s15, [pc, #32]	; 802ac30 <__ieee754_log10f+0xa8>
 802ac10:	eea8 0a27 	vfma.f32	s0, s16, s15
 802ac14:	eddf 7a07 	vldr	s15, [pc, #28]	; 802ac34 <__ieee754_log10f+0xac>
 802ac18:	eea8 0a27 	vfma.f32	s0, s16, s15
 802ac1c:	e7c2      	b.n	802aba4 <__ieee754_log10f+0x1c>
 802ac1e:	bf00      	nop
 802ac20:	cc000000 	.word	0xcc000000
 802ac24:	00000000 	.word	0x00000000
 802ac28:	4c000000 	.word	0x4c000000
 802ac2c:	3ede5bd9 	.word	0x3ede5bd9
 802ac30:	355427db 	.word	0x355427db
 802ac34:	3e9a2080 	.word	0x3e9a2080

0802ac38 <__ieee754_rem_pio2f>:
 802ac38:	b5f0      	push	{r4, r5, r6, r7, lr}
 802ac3a:	ee10 6a10 	vmov	r6, s0
 802ac3e:	4b8e      	ldr	r3, [pc, #568]	; (802ae78 <__ieee754_rem_pio2f+0x240>)
 802ac40:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802ac44:	429d      	cmp	r5, r3
 802ac46:	b087      	sub	sp, #28
 802ac48:	eef0 7a40 	vmov.f32	s15, s0
 802ac4c:	4604      	mov	r4, r0
 802ac4e:	dc05      	bgt.n	802ac5c <__ieee754_rem_pio2f+0x24>
 802ac50:	2300      	movs	r3, #0
 802ac52:	ed80 0a00 	vstr	s0, [r0]
 802ac56:	6043      	str	r3, [r0, #4]
 802ac58:	2000      	movs	r0, #0
 802ac5a:	e01a      	b.n	802ac92 <__ieee754_rem_pio2f+0x5a>
 802ac5c:	4b87      	ldr	r3, [pc, #540]	; (802ae7c <__ieee754_rem_pio2f+0x244>)
 802ac5e:	429d      	cmp	r5, r3
 802ac60:	dc46      	bgt.n	802acf0 <__ieee754_rem_pio2f+0xb8>
 802ac62:	2e00      	cmp	r6, #0
 802ac64:	ed9f 0a86 	vldr	s0, [pc, #536]	; 802ae80 <__ieee754_rem_pio2f+0x248>
 802ac68:	4b86      	ldr	r3, [pc, #536]	; (802ae84 <__ieee754_rem_pio2f+0x24c>)
 802ac6a:	f025 050f 	bic.w	r5, r5, #15
 802ac6e:	dd1f      	ble.n	802acb0 <__ieee754_rem_pio2f+0x78>
 802ac70:	429d      	cmp	r5, r3
 802ac72:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802ac76:	d00e      	beq.n	802ac96 <__ieee754_rem_pio2f+0x5e>
 802ac78:	ed9f 7a83 	vldr	s14, [pc, #524]	; 802ae88 <__ieee754_rem_pio2f+0x250>
 802ac7c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 802ac80:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802ac84:	ed80 0a00 	vstr	s0, [r0]
 802ac88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802ac8c:	2001      	movs	r0, #1
 802ac8e:	edc4 7a01 	vstr	s15, [r4, #4]
 802ac92:	b007      	add	sp, #28
 802ac94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ac96:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 802ae8c <__ieee754_rem_pio2f+0x254>
 802ac9a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 802ae90 <__ieee754_rem_pio2f+0x258>
 802ac9e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802aca2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802aca6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802acaa:	edc0 6a00 	vstr	s13, [r0]
 802acae:	e7eb      	b.n	802ac88 <__ieee754_rem_pio2f+0x50>
 802acb0:	429d      	cmp	r5, r3
 802acb2:	ee77 7a80 	vadd.f32	s15, s15, s0
 802acb6:	d00e      	beq.n	802acd6 <__ieee754_rem_pio2f+0x9e>
 802acb8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 802ae88 <__ieee754_rem_pio2f+0x250>
 802acbc:	ee37 0a87 	vadd.f32	s0, s15, s14
 802acc0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802acc4:	ed80 0a00 	vstr	s0, [r0]
 802acc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 802accc:	f04f 30ff 	mov.w	r0, #4294967295
 802acd0:	edc4 7a01 	vstr	s15, [r4, #4]
 802acd4:	e7dd      	b.n	802ac92 <__ieee754_rem_pio2f+0x5a>
 802acd6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 802ae8c <__ieee754_rem_pio2f+0x254>
 802acda:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 802ae90 <__ieee754_rem_pio2f+0x258>
 802acde:	ee77 7a80 	vadd.f32	s15, s15, s0
 802ace2:	ee77 6a87 	vadd.f32	s13, s15, s14
 802ace6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802acea:	edc0 6a00 	vstr	s13, [r0]
 802acee:	e7eb      	b.n	802acc8 <__ieee754_rem_pio2f+0x90>
 802acf0:	4b68      	ldr	r3, [pc, #416]	; (802ae94 <__ieee754_rem_pio2f+0x25c>)
 802acf2:	429d      	cmp	r5, r3
 802acf4:	dc72      	bgt.n	802addc <__ieee754_rem_pio2f+0x1a4>
 802acf6:	f001 f9c1 	bl	802c07c <fabsf>
 802acfa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802ae98 <__ieee754_rem_pio2f+0x260>
 802acfe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802ad02:	eee0 7a07 	vfma.f32	s15, s0, s14
 802ad06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802ad0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802ad0e:	ee17 0a90 	vmov	r0, s15
 802ad12:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802ae80 <__ieee754_rem_pio2f+0x248>
 802ad16:	eea7 0a67 	vfms.f32	s0, s14, s15
 802ad1a:	281f      	cmp	r0, #31
 802ad1c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802ae88 <__ieee754_rem_pio2f+0x250>
 802ad20:	ee67 7a27 	vmul.f32	s15, s14, s15
 802ad24:	eeb1 6a47 	vneg.f32	s12, s14
 802ad28:	ee70 6a67 	vsub.f32	s13, s0, s15
 802ad2c:	ee16 2a90 	vmov	r2, s13
 802ad30:	dc1c      	bgt.n	802ad6c <__ieee754_rem_pio2f+0x134>
 802ad32:	495a      	ldr	r1, [pc, #360]	; (802ae9c <__ieee754_rem_pio2f+0x264>)
 802ad34:	1e47      	subs	r7, r0, #1
 802ad36:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 802ad3a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802ad3e:	428b      	cmp	r3, r1
 802ad40:	d014      	beq.n	802ad6c <__ieee754_rem_pio2f+0x134>
 802ad42:	6022      	str	r2, [r4, #0]
 802ad44:	ed94 7a00 	vldr	s14, [r4]
 802ad48:	ee30 0a47 	vsub.f32	s0, s0, s14
 802ad4c:	2e00      	cmp	r6, #0
 802ad4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 802ad52:	ed84 0a01 	vstr	s0, [r4, #4]
 802ad56:	da9c      	bge.n	802ac92 <__ieee754_rem_pio2f+0x5a>
 802ad58:	eeb1 7a47 	vneg.f32	s14, s14
 802ad5c:	eeb1 0a40 	vneg.f32	s0, s0
 802ad60:	ed84 7a00 	vstr	s14, [r4]
 802ad64:	ed84 0a01 	vstr	s0, [r4, #4]
 802ad68:	4240      	negs	r0, r0
 802ad6a:	e792      	b.n	802ac92 <__ieee754_rem_pio2f+0x5a>
 802ad6c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802ad70:	15eb      	asrs	r3, r5, #23
 802ad72:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 802ad76:	2d08      	cmp	r5, #8
 802ad78:	dde3      	ble.n	802ad42 <__ieee754_rem_pio2f+0x10a>
 802ad7a:	eddf 7a44 	vldr	s15, [pc, #272]	; 802ae8c <__ieee754_rem_pio2f+0x254>
 802ad7e:	eddf 5a44 	vldr	s11, [pc, #272]	; 802ae90 <__ieee754_rem_pio2f+0x258>
 802ad82:	eef0 6a40 	vmov.f32	s13, s0
 802ad86:	eee6 6a27 	vfma.f32	s13, s12, s15
 802ad8a:	ee30 0a66 	vsub.f32	s0, s0, s13
 802ad8e:	eea6 0a27 	vfma.f32	s0, s12, s15
 802ad92:	eef0 7a40 	vmov.f32	s15, s0
 802ad96:	eed7 7a25 	vfnms.f32	s15, s14, s11
 802ad9a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 802ad9e:	ee15 2a90 	vmov	r2, s11
 802ada2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802ada6:	1a5b      	subs	r3, r3, r1
 802ada8:	2b19      	cmp	r3, #25
 802adaa:	dc04      	bgt.n	802adb6 <__ieee754_rem_pio2f+0x17e>
 802adac:	edc4 5a00 	vstr	s11, [r4]
 802adb0:	eeb0 0a66 	vmov.f32	s0, s13
 802adb4:	e7c6      	b.n	802ad44 <__ieee754_rem_pio2f+0x10c>
 802adb6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 802aea0 <__ieee754_rem_pio2f+0x268>
 802adba:	eeb0 0a66 	vmov.f32	s0, s13
 802adbe:	eea6 0a25 	vfma.f32	s0, s12, s11
 802adc2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802adc6:	eddf 6a37 	vldr	s13, [pc, #220]	; 802aea4 <__ieee754_rem_pio2f+0x26c>
 802adca:	eee6 7a25 	vfma.f32	s15, s12, s11
 802adce:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802add2:	ee30 7a67 	vsub.f32	s14, s0, s15
 802add6:	ed84 7a00 	vstr	s14, [r4]
 802adda:	e7b3      	b.n	802ad44 <__ieee754_rem_pio2f+0x10c>
 802addc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802ade0:	db06      	blt.n	802adf0 <__ieee754_rem_pio2f+0x1b8>
 802ade2:	ee70 7a40 	vsub.f32	s15, s0, s0
 802ade6:	edc0 7a01 	vstr	s15, [r0, #4]
 802adea:	edc0 7a00 	vstr	s15, [r0]
 802adee:	e733      	b.n	802ac58 <__ieee754_rem_pio2f+0x20>
 802adf0:	15ea      	asrs	r2, r5, #23
 802adf2:	3a86      	subs	r2, #134	; 0x86
 802adf4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802adf8:	ee07 3a90 	vmov	s15, r3
 802adfc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802ae00:	eddf 6a29 	vldr	s13, [pc, #164]	; 802aea8 <__ieee754_rem_pio2f+0x270>
 802ae04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802ae08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802ae0c:	ed8d 7a03 	vstr	s14, [sp, #12]
 802ae10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802ae14:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802ae18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802ae1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802ae20:	ed8d 7a04 	vstr	s14, [sp, #16]
 802ae24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802ae28:	eef5 7a40 	vcmp.f32	s15, #0.0
 802ae2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ae30:	edcd 7a05 	vstr	s15, [sp, #20]
 802ae34:	d11e      	bne.n	802ae74 <__ieee754_rem_pio2f+0x23c>
 802ae36:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802ae3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ae3e:	bf14      	ite	ne
 802ae40:	2302      	movne	r3, #2
 802ae42:	2301      	moveq	r3, #1
 802ae44:	4919      	ldr	r1, [pc, #100]	; (802aeac <__ieee754_rem_pio2f+0x274>)
 802ae46:	9101      	str	r1, [sp, #4]
 802ae48:	2102      	movs	r1, #2
 802ae4a:	9100      	str	r1, [sp, #0]
 802ae4c:	a803      	add	r0, sp, #12
 802ae4e:	4621      	mov	r1, r4
 802ae50:	f000 fd68 	bl	802b924 <__kernel_rem_pio2f>
 802ae54:	2e00      	cmp	r6, #0
 802ae56:	f6bf af1c 	bge.w	802ac92 <__ieee754_rem_pio2f+0x5a>
 802ae5a:	edd4 7a00 	vldr	s15, [r4]
 802ae5e:	eef1 7a67 	vneg.f32	s15, s15
 802ae62:	edc4 7a00 	vstr	s15, [r4]
 802ae66:	edd4 7a01 	vldr	s15, [r4, #4]
 802ae6a:	eef1 7a67 	vneg.f32	s15, s15
 802ae6e:	edc4 7a01 	vstr	s15, [r4, #4]
 802ae72:	e779      	b.n	802ad68 <__ieee754_rem_pio2f+0x130>
 802ae74:	2303      	movs	r3, #3
 802ae76:	e7e5      	b.n	802ae44 <__ieee754_rem_pio2f+0x20c>
 802ae78:	3f490fd8 	.word	0x3f490fd8
 802ae7c:	4016cbe3 	.word	0x4016cbe3
 802ae80:	3fc90f80 	.word	0x3fc90f80
 802ae84:	3fc90fd0 	.word	0x3fc90fd0
 802ae88:	37354443 	.word	0x37354443
 802ae8c:	37354400 	.word	0x37354400
 802ae90:	2e85a308 	.word	0x2e85a308
 802ae94:	43490f80 	.word	0x43490f80
 802ae98:	3f22f984 	.word	0x3f22f984
 802ae9c:	08031c60 	.word	0x08031c60
 802aea0:	2e85a300 	.word	0x2e85a300
 802aea4:	248d3132 	.word	0x248d3132
 802aea8:	43800000 	.word	0x43800000
 802aeac:	08031ce0 	.word	0x08031ce0

0802aeb0 <__ieee754_sqrtf>:
 802aeb0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802aeb4:	4770      	bx	lr
	...

0802aeb8 <__kernel_cos>:
 802aeb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aebc:	ec57 6b10 	vmov	r6, r7, d0
 802aec0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 802aec4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 802aec8:	ed8d 1b00 	vstr	d1, [sp]
 802aecc:	da07      	bge.n	802aede <__kernel_cos+0x26>
 802aece:	ee10 0a10 	vmov	r0, s0
 802aed2:	4639      	mov	r1, r7
 802aed4:	f7d5 fe6a 	bl	8000bac <__aeabi_d2iz>
 802aed8:	2800      	cmp	r0, #0
 802aeda:	f000 8088 	beq.w	802afee <__kernel_cos+0x136>
 802aede:	4632      	mov	r2, r6
 802aee0:	463b      	mov	r3, r7
 802aee2:	4630      	mov	r0, r6
 802aee4:	4639      	mov	r1, r7
 802aee6:	f7d5 fbb1 	bl	800064c <__aeabi_dmul>
 802aeea:	4b51      	ldr	r3, [pc, #324]	; (802b030 <__kernel_cos+0x178>)
 802aeec:	2200      	movs	r2, #0
 802aeee:	4604      	mov	r4, r0
 802aef0:	460d      	mov	r5, r1
 802aef2:	f7d5 fbab 	bl	800064c <__aeabi_dmul>
 802aef6:	a340      	add	r3, pc, #256	; (adr r3, 802aff8 <__kernel_cos+0x140>)
 802aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802aefc:	4682      	mov	sl, r0
 802aefe:	468b      	mov	fp, r1
 802af00:	4620      	mov	r0, r4
 802af02:	4629      	mov	r1, r5
 802af04:	f7d5 fba2 	bl	800064c <__aeabi_dmul>
 802af08:	a33d      	add	r3, pc, #244	; (adr r3, 802b000 <__kernel_cos+0x148>)
 802af0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802af0e:	f7d5 f9e7 	bl	80002e0 <__adddf3>
 802af12:	4622      	mov	r2, r4
 802af14:	462b      	mov	r3, r5
 802af16:	f7d5 fb99 	bl	800064c <__aeabi_dmul>
 802af1a:	a33b      	add	r3, pc, #236	; (adr r3, 802b008 <__kernel_cos+0x150>)
 802af1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802af20:	f7d5 f9dc 	bl	80002dc <__aeabi_dsub>
 802af24:	4622      	mov	r2, r4
 802af26:	462b      	mov	r3, r5
 802af28:	f7d5 fb90 	bl	800064c <__aeabi_dmul>
 802af2c:	a338      	add	r3, pc, #224	; (adr r3, 802b010 <__kernel_cos+0x158>)
 802af2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802af32:	f7d5 f9d5 	bl	80002e0 <__adddf3>
 802af36:	4622      	mov	r2, r4
 802af38:	462b      	mov	r3, r5
 802af3a:	f7d5 fb87 	bl	800064c <__aeabi_dmul>
 802af3e:	a336      	add	r3, pc, #216	; (adr r3, 802b018 <__kernel_cos+0x160>)
 802af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 802af44:	f7d5 f9ca 	bl	80002dc <__aeabi_dsub>
 802af48:	4622      	mov	r2, r4
 802af4a:	462b      	mov	r3, r5
 802af4c:	f7d5 fb7e 	bl	800064c <__aeabi_dmul>
 802af50:	a333      	add	r3, pc, #204	; (adr r3, 802b020 <__kernel_cos+0x168>)
 802af52:	e9d3 2300 	ldrd	r2, r3, [r3]
 802af56:	f7d5 f9c3 	bl	80002e0 <__adddf3>
 802af5a:	4622      	mov	r2, r4
 802af5c:	462b      	mov	r3, r5
 802af5e:	f7d5 fb75 	bl	800064c <__aeabi_dmul>
 802af62:	4622      	mov	r2, r4
 802af64:	462b      	mov	r3, r5
 802af66:	f7d5 fb71 	bl	800064c <__aeabi_dmul>
 802af6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802af6e:	4604      	mov	r4, r0
 802af70:	460d      	mov	r5, r1
 802af72:	4630      	mov	r0, r6
 802af74:	4639      	mov	r1, r7
 802af76:	f7d5 fb69 	bl	800064c <__aeabi_dmul>
 802af7a:	460b      	mov	r3, r1
 802af7c:	4602      	mov	r2, r0
 802af7e:	4629      	mov	r1, r5
 802af80:	4620      	mov	r0, r4
 802af82:	f7d5 f9ab 	bl	80002dc <__aeabi_dsub>
 802af86:	4b2b      	ldr	r3, [pc, #172]	; (802b034 <__kernel_cos+0x17c>)
 802af88:	4598      	cmp	r8, r3
 802af8a:	4606      	mov	r6, r0
 802af8c:	460f      	mov	r7, r1
 802af8e:	dc10      	bgt.n	802afb2 <__kernel_cos+0xfa>
 802af90:	4602      	mov	r2, r0
 802af92:	460b      	mov	r3, r1
 802af94:	4650      	mov	r0, sl
 802af96:	4659      	mov	r1, fp
 802af98:	f7d5 f9a0 	bl	80002dc <__aeabi_dsub>
 802af9c:	460b      	mov	r3, r1
 802af9e:	4926      	ldr	r1, [pc, #152]	; (802b038 <__kernel_cos+0x180>)
 802afa0:	4602      	mov	r2, r0
 802afa2:	2000      	movs	r0, #0
 802afa4:	f7d5 f99a 	bl	80002dc <__aeabi_dsub>
 802afa8:	ec41 0b10 	vmov	d0, r0, r1
 802afac:	b003      	add	sp, #12
 802afae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802afb2:	4b22      	ldr	r3, [pc, #136]	; (802b03c <__kernel_cos+0x184>)
 802afb4:	4920      	ldr	r1, [pc, #128]	; (802b038 <__kernel_cos+0x180>)
 802afb6:	4598      	cmp	r8, r3
 802afb8:	bfcc      	ite	gt
 802afba:	4d21      	ldrgt	r5, [pc, #132]	; (802b040 <__kernel_cos+0x188>)
 802afbc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 802afc0:	2400      	movs	r4, #0
 802afc2:	4622      	mov	r2, r4
 802afc4:	462b      	mov	r3, r5
 802afc6:	2000      	movs	r0, #0
 802afc8:	f7d5 f988 	bl	80002dc <__aeabi_dsub>
 802afcc:	4622      	mov	r2, r4
 802afce:	4680      	mov	r8, r0
 802afd0:	4689      	mov	r9, r1
 802afd2:	462b      	mov	r3, r5
 802afd4:	4650      	mov	r0, sl
 802afd6:	4659      	mov	r1, fp
 802afd8:	f7d5 f980 	bl	80002dc <__aeabi_dsub>
 802afdc:	4632      	mov	r2, r6
 802afde:	463b      	mov	r3, r7
 802afe0:	f7d5 f97c 	bl	80002dc <__aeabi_dsub>
 802afe4:	4602      	mov	r2, r0
 802afe6:	460b      	mov	r3, r1
 802afe8:	4640      	mov	r0, r8
 802afea:	4649      	mov	r1, r9
 802afec:	e7da      	b.n	802afa4 <__kernel_cos+0xec>
 802afee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 802b028 <__kernel_cos+0x170>
 802aff2:	e7db      	b.n	802afac <__kernel_cos+0xf4>
 802aff4:	f3af 8000 	nop.w
 802aff8:	be8838d4 	.word	0xbe8838d4
 802affc:	bda8fae9 	.word	0xbda8fae9
 802b000:	bdb4b1c4 	.word	0xbdb4b1c4
 802b004:	3e21ee9e 	.word	0x3e21ee9e
 802b008:	809c52ad 	.word	0x809c52ad
 802b00c:	3e927e4f 	.word	0x3e927e4f
 802b010:	19cb1590 	.word	0x19cb1590
 802b014:	3efa01a0 	.word	0x3efa01a0
 802b018:	16c15177 	.word	0x16c15177
 802b01c:	3f56c16c 	.word	0x3f56c16c
 802b020:	5555554c 	.word	0x5555554c
 802b024:	3fa55555 	.word	0x3fa55555
 802b028:	00000000 	.word	0x00000000
 802b02c:	3ff00000 	.word	0x3ff00000
 802b030:	3fe00000 	.word	0x3fe00000
 802b034:	3fd33332 	.word	0x3fd33332
 802b038:	3ff00000 	.word	0x3ff00000
 802b03c:	3fe90000 	.word	0x3fe90000
 802b040:	3fd20000 	.word	0x3fd20000
 802b044:	00000000 	.word	0x00000000

0802b048 <__kernel_rem_pio2>:
 802b048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b04c:	ed2d 8b02 	vpush	{d8}
 802b050:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 802b054:	f112 0f14 	cmn.w	r2, #20
 802b058:	9308      	str	r3, [sp, #32]
 802b05a:	9101      	str	r1, [sp, #4]
 802b05c:	4bc4      	ldr	r3, [pc, #784]	; (802b370 <__kernel_rem_pio2+0x328>)
 802b05e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 802b060:	900b      	str	r0, [sp, #44]	; 0x2c
 802b062:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802b066:	9302      	str	r3, [sp, #8]
 802b068:	9b08      	ldr	r3, [sp, #32]
 802b06a:	f103 33ff 	add.w	r3, r3, #4294967295
 802b06e:	bfa8      	it	ge
 802b070:	1ed4      	subge	r4, r2, #3
 802b072:	9306      	str	r3, [sp, #24]
 802b074:	bfb2      	itee	lt
 802b076:	2400      	movlt	r4, #0
 802b078:	2318      	movge	r3, #24
 802b07a:	fb94 f4f3 	sdivge	r4, r4, r3
 802b07e:	f06f 0317 	mvn.w	r3, #23
 802b082:	fb04 3303 	mla	r3, r4, r3, r3
 802b086:	eb03 0a02 	add.w	sl, r3, r2
 802b08a:	9b02      	ldr	r3, [sp, #8]
 802b08c:	9a06      	ldr	r2, [sp, #24]
 802b08e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 802b360 <__kernel_rem_pio2+0x318>
 802b092:	eb03 0802 	add.w	r8, r3, r2
 802b096:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 802b098:	1aa7      	subs	r7, r4, r2
 802b09a:	ae22      	add	r6, sp, #136	; 0x88
 802b09c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 802b0a0:	2500      	movs	r5, #0
 802b0a2:	4545      	cmp	r5, r8
 802b0a4:	dd13      	ble.n	802b0ce <__kernel_rem_pio2+0x86>
 802b0a6:	9b08      	ldr	r3, [sp, #32]
 802b0a8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 802b360 <__kernel_rem_pio2+0x318>
 802b0ac:	aa22      	add	r2, sp, #136	; 0x88
 802b0ae:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 802b0b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 802b0b6:	f04f 0800 	mov.w	r8, #0
 802b0ba:	9b02      	ldr	r3, [sp, #8]
 802b0bc:	4598      	cmp	r8, r3
 802b0be:	dc2f      	bgt.n	802b120 <__kernel_rem_pio2+0xd8>
 802b0c0:	ed8d 8b04 	vstr	d8, [sp, #16]
 802b0c4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 802b0c8:	462f      	mov	r7, r5
 802b0ca:	2600      	movs	r6, #0
 802b0cc:	e01b      	b.n	802b106 <__kernel_rem_pio2+0xbe>
 802b0ce:	42ef      	cmn	r7, r5
 802b0d0:	d407      	bmi.n	802b0e2 <__kernel_rem_pio2+0x9a>
 802b0d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 802b0d6:	f7d5 fa4f 	bl	8000578 <__aeabi_i2d>
 802b0da:	e8e6 0102 	strd	r0, r1, [r6], #8
 802b0de:	3501      	adds	r5, #1
 802b0e0:	e7df      	b.n	802b0a2 <__kernel_rem_pio2+0x5a>
 802b0e2:	ec51 0b18 	vmov	r0, r1, d8
 802b0e6:	e7f8      	b.n	802b0da <__kernel_rem_pio2+0x92>
 802b0e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 802b0ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 802b0f0:	f7d5 faac 	bl	800064c <__aeabi_dmul>
 802b0f4:	4602      	mov	r2, r0
 802b0f6:	460b      	mov	r3, r1
 802b0f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802b0fc:	f7d5 f8f0 	bl	80002e0 <__adddf3>
 802b100:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802b104:	3601      	adds	r6, #1
 802b106:	9b06      	ldr	r3, [sp, #24]
 802b108:	429e      	cmp	r6, r3
 802b10a:	f1a7 0708 	sub.w	r7, r7, #8
 802b10e:	ddeb      	ble.n	802b0e8 <__kernel_rem_pio2+0xa0>
 802b110:	ed9d 7b04 	vldr	d7, [sp, #16]
 802b114:	f108 0801 	add.w	r8, r8, #1
 802b118:	ecab 7b02 	vstmia	fp!, {d7}
 802b11c:	3508      	adds	r5, #8
 802b11e:	e7cc      	b.n	802b0ba <__kernel_rem_pio2+0x72>
 802b120:	9b02      	ldr	r3, [sp, #8]
 802b122:	aa0e      	add	r2, sp, #56	; 0x38
 802b124:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802b128:	930d      	str	r3, [sp, #52]	; 0x34
 802b12a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 802b12c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802b130:	9c02      	ldr	r4, [sp, #8]
 802b132:	930c      	str	r3, [sp, #48]	; 0x30
 802b134:	00e3      	lsls	r3, r4, #3
 802b136:	930a      	str	r3, [sp, #40]	; 0x28
 802b138:	ab9a      	add	r3, sp, #616	; 0x268
 802b13a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802b13e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 802b142:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 802b146:	ab72      	add	r3, sp, #456	; 0x1c8
 802b148:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 802b14c:	46c3      	mov	fp, r8
 802b14e:	46a1      	mov	r9, r4
 802b150:	f1b9 0f00 	cmp.w	r9, #0
 802b154:	f1a5 0508 	sub.w	r5, r5, #8
 802b158:	dc77      	bgt.n	802b24a <__kernel_rem_pio2+0x202>
 802b15a:	ec47 6b10 	vmov	d0, r6, r7
 802b15e:	4650      	mov	r0, sl
 802b160:	f000 ff06 	bl	802bf70 <scalbn>
 802b164:	ec57 6b10 	vmov	r6, r7, d0
 802b168:	2200      	movs	r2, #0
 802b16a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 802b16e:	ee10 0a10 	vmov	r0, s0
 802b172:	4639      	mov	r1, r7
 802b174:	f7d5 fa6a 	bl	800064c <__aeabi_dmul>
 802b178:	ec41 0b10 	vmov	d0, r0, r1
 802b17c:	f7fd ffac 	bl	80290d8 <floor>
 802b180:	4b7c      	ldr	r3, [pc, #496]	; (802b374 <__kernel_rem_pio2+0x32c>)
 802b182:	ec51 0b10 	vmov	r0, r1, d0
 802b186:	2200      	movs	r2, #0
 802b188:	f7d5 fa60 	bl	800064c <__aeabi_dmul>
 802b18c:	4602      	mov	r2, r0
 802b18e:	460b      	mov	r3, r1
 802b190:	4630      	mov	r0, r6
 802b192:	4639      	mov	r1, r7
 802b194:	f7d5 f8a2 	bl	80002dc <__aeabi_dsub>
 802b198:	460f      	mov	r7, r1
 802b19a:	4606      	mov	r6, r0
 802b19c:	f7d5 fd06 	bl	8000bac <__aeabi_d2iz>
 802b1a0:	9004      	str	r0, [sp, #16]
 802b1a2:	f7d5 f9e9 	bl	8000578 <__aeabi_i2d>
 802b1a6:	4602      	mov	r2, r0
 802b1a8:	460b      	mov	r3, r1
 802b1aa:	4630      	mov	r0, r6
 802b1ac:	4639      	mov	r1, r7
 802b1ae:	f7d5 f895 	bl	80002dc <__aeabi_dsub>
 802b1b2:	f1ba 0f00 	cmp.w	sl, #0
 802b1b6:	4606      	mov	r6, r0
 802b1b8:	460f      	mov	r7, r1
 802b1ba:	dd6d      	ble.n	802b298 <__kernel_rem_pio2+0x250>
 802b1bc:	1e62      	subs	r2, r4, #1
 802b1be:	ab0e      	add	r3, sp, #56	; 0x38
 802b1c0:	9d04      	ldr	r5, [sp, #16]
 802b1c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802b1c6:	f1ca 0118 	rsb	r1, sl, #24
 802b1ca:	fa40 f301 	asr.w	r3, r0, r1
 802b1ce:	441d      	add	r5, r3
 802b1d0:	408b      	lsls	r3, r1
 802b1d2:	1ac0      	subs	r0, r0, r3
 802b1d4:	ab0e      	add	r3, sp, #56	; 0x38
 802b1d6:	9504      	str	r5, [sp, #16]
 802b1d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 802b1dc:	f1ca 0317 	rsb	r3, sl, #23
 802b1e0:	fa40 fb03 	asr.w	fp, r0, r3
 802b1e4:	f1bb 0f00 	cmp.w	fp, #0
 802b1e8:	dd65      	ble.n	802b2b6 <__kernel_rem_pio2+0x26e>
 802b1ea:	9b04      	ldr	r3, [sp, #16]
 802b1ec:	2200      	movs	r2, #0
 802b1ee:	3301      	adds	r3, #1
 802b1f0:	9304      	str	r3, [sp, #16]
 802b1f2:	4615      	mov	r5, r2
 802b1f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 802b1f8:	4294      	cmp	r4, r2
 802b1fa:	f300 809c 	bgt.w	802b336 <__kernel_rem_pio2+0x2ee>
 802b1fe:	f1ba 0f00 	cmp.w	sl, #0
 802b202:	dd07      	ble.n	802b214 <__kernel_rem_pio2+0x1cc>
 802b204:	f1ba 0f01 	cmp.w	sl, #1
 802b208:	f000 80c0 	beq.w	802b38c <__kernel_rem_pio2+0x344>
 802b20c:	f1ba 0f02 	cmp.w	sl, #2
 802b210:	f000 80c6 	beq.w	802b3a0 <__kernel_rem_pio2+0x358>
 802b214:	f1bb 0f02 	cmp.w	fp, #2
 802b218:	d14d      	bne.n	802b2b6 <__kernel_rem_pio2+0x26e>
 802b21a:	4632      	mov	r2, r6
 802b21c:	463b      	mov	r3, r7
 802b21e:	4956      	ldr	r1, [pc, #344]	; (802b378 <__kernel_rem_pio2+0x330>)
 802b220:	2000      	movs	r0, #0
 802b222:	f7d5 f85b 	bl	80002dc <__aeabi_dsub>
 802b226:	4606      	mov	r6, r0
 802b228:	460f      	mov	r7, r1
 802b22a:	2d00      	cmp	r5, #0
 802b22c:	d043      	beq.n	802b2b6 <__kernel_rem_pio2+0x26e>
 802b22e:	4650      	mov	r0, sl
 802b230:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 802b368 <__kernel_rem_pio2+0x320>
 802b234:	f000 fe9c 	bl	802bf70 <scalbn>
 802b238:	4630      	mov	r0, r6
 802b23a:	4639      	mov	r1, r7
 802b23c:	ec53 2b10 	vmov	r2, r3, d0
 802b240:	f7d5 f84c 	bl	80002dc <__aeabi_dsub>
 802b244:	4606      	mov	r6, r0
 802b246:	460f      	mov	r7, r1
 802b248:	e035      	b.n	802b2b6 <__kernel_rem_pio2+0x26e>
 802b24a:	4b4c      	ldr	r3, [pc, #304]	; (802b37c <__kernel_rem_pio2+0x334>)
 802b24c:	2200      	movs	r2, #0
 802b24e:	4630      	mov	r0, r6
 802b250:	4639      	mov	r1, r7
 802b252:	f7d5 f9fb 	bl	800064c <__aeabi_dmul>
 802b256:	f7d5 fca9 	bl	8000bac <__aeabi_d2iz>
 802b25a:	f7d5 f98d 	bl	8000578 <__aeabi_i2d>
 802b25e:	4602      	mov	r2, r0
 802b260:	460b      	mov	r3, r1
 802b262:	ec43 2b18 	vmov	d8, r2, r3
 802b266:	4b46      	ldr	r3, [pc, #280]	; (802b380 <__kernel_rem_pio2+0x338>)
 802b268:	2200      	movs	r2, #0
 802b26a:	f7d5 f9ef 	bl	800064c <__aeabi_dmul>
 802b26e:	4602      	mov	r2, r0
 802b270:	460b      	mov	r3, r1
 802b272:	4630      	mov	r0, r6
 802b274:	4639      	mov	r1, r7
 802b276:	f7d5 f831 	bl	80002dc <__aeabi_dsub>
 802b27a:	f7d5 fc97 	bl	8000bac <__aeabi_d2iz>
 802b27e:	e9d5 2300 	ldrd	r2, r3, [r5]
 802b282:	f84b 0b04 	str.w	r0, [fp], #4
 802b286:	ec51 0b18 	vmov	r0, r1, d8
 802b28a:	f7d5 f829 	bl	80002e0 <__adddf3>
 802b28e:	f109 39ff 	add.w	r9, r9, #4294967295
 802b292:	4606      	mov	r6, r0
 802b294:	460f      	mov	r7, r1
 802b296:	e75b      	b.n	802b150 <__kernel_rem_pio2+0x108>
 802b298:	d106      	bne.n	802b2a8 <__kernel_rem_pio2+0x260>
 802b29a:	1e63      	subs	r3, r4, #1
 802b29c:	aa0e      	add	r2, sp, #56	; 0x38
 802b29e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 802b2a2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 802b2a6:	e79d      	b.n	802b1e4 <__kernel_rem_pio2+0x19c>
 802b2a8:	4b36      	ldr	r3, [pc, #216]	; (802b384 <__kernel_rem_pio2+0x33c>)
 802b2aa:	2200      	movs	r2, #0
 802b2ac:	f7d5 fc54 	bl	8000b58 <__aeabi_dcmpge>
 802b2b0:	2800      	cmp	r0, #0
 802b2b2:	d13d      	bne.n	802b330 <__kernel_rem_pio2+0x2e8>
 802b2b4:	4683      	mov	fp, r0
 802b2b6:	2200      	movs	r2, #0
 802b2b8:	2300      	movs	r3, #0
 802b2ba:	4630      	mov	r0, r6
 802b2bc:	4639      	mov	r1, r7
 802b2be:	f7d5 fc2d 	bl	8000b1c <__aeabi_dcmpeq>
 802b2c2:	2800      	cmp	r0, #0
 802b2c4:	f000 80c0 	beq.w	802b448 <__kernel_rem_pio2+0x400>
 802b2c8:	1e65      	subs	r5, r4, #1
 802b2ca:	462b      	mov	r3, r5
 802b2cc:	2200      	movs	r2, #0
 802b2ce:	9902      	ldr	r1, [sp, #8]
 802b2d0:	428b      	cmp	r3, r1
 802b2d2:	da6c      	bge.n	802b3ae <__kernel_rem_pio2+0x366>
 802b2d4:	2a00      	cmp	r2, #0
 802b2d6:	f000 8089 	beq.w	802b3ec <__kernel_rem_pio2+0x3a4>
 802b2da:	ab0e      	add	r3, sp, #56	; 0x38
 802b2dc:	f1aa 0a18 	sub.w	sl, sl, #24
 802b2e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802b2e4:	2b00      	cmp	r3, #0
 802b2e6:	f000 80ad 	beq.w	802b444 <__kernel_rem_pio2+0x3fc>
 802b2ea:	4650      	mov	r0, sl
 802b2ec:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 802b368 <__kernel_rem_pio2+0x320>
 802b2f0:	f000 fe3e 	bl	802bf70 <scalbn>
 802b2f4:	ab9a      	add	r3, sp, #616	; 0x268
 802b2f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802b2fa:	ec57 6b10 	vmov	r6, r7, d0
 802b2fe:	00ec      	lsls	r4, r5, #3
 802b300:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 802b304:	46aa      	mov	sl, r5
 802b306:	f1ba 0f00 	cmp.w	sl, #0
 802b30a:	f280 80d6 	bge.w	802b4ba <__kernel_rem_pio2+0x472>
 802b30e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 802b360 <__kernel_rem_pio2+0x318>
 802b312:	462e      	mov	r6, r5
 802b314:	2e00      	cmp	r6, #0
 802b316:	f2c0 8104 	blt.w	802b522 <__kernel_rem_pio2+0x4da>
 802b31a:	ab72      	add	r3, sp, #456	; 0x1c8
 802b31c:	ed8d 8b06 	vstr	d8, [sp, #24]
 802b320:	f8df a064 	ldr.w	sl, [pc, #100]	; 802b388 <__kernel_rem_pio2+0x340>
 802b324:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 802b328:	f04f 0800 	mov.w	r8, #0
 802b32c:	1baf      	subs	r7, r5, r6
 802b32e:	e0ea      	b.n	802b506 <__kernel_rem_pio2+0x4be>
 802b330:	f04f 0b02 	mov.w	fp, #2
 802b334:	e759      	b.n	802b1ea <__kernel_rem_pio2+0x1a2>
 802b336:	f8d8 3000 	ldr.w	r3, [r8]
 802b33a:	b955      	cbnz	r5, 802b352 <__kernel_rem_pio2+0x30a>
 802b33c:	b123      	cbz	r3, 802b348 <__kernel_rem_pio2+0x300>
 802b33e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 802b342:	f8c8 3000 	str.w	r3, [r8]
 802b346:	2301      	movs	r3, #1
 802b348:	3201      	adds	r2, #1
 802b34a:	f108 0804 	add.w	r8, r8, #4
 802b34e:	461d      	mov	r5, r3
 802b350:	e752      	b.n	802b1f8 <__kernel_rem_pio2+0x1b0>
 802b352:	1acb      	subs	r3, r1, r3
 802b354:	f8c8 3000 	str.w	r3, [r8]
 802b358:	462b      	mov	r3, r5
 802b35a:	e7f5      	b.n	802b348 <__kernel_rem_pio2+0x300>
 802b35c:	f3af 8000 	nop.w
	...
 802b36c:	3ff00000 	.word	0x3ff00000
 802b370:	08032038 	.word	0x08032038
 802b374:	40200000 	.word	0x40200000
 802b378:	3ff00000 	.word	0x3ff00000
 802b37c:	3e700000 	.word	0x3e700000
 802b380:	41700000 	.word	0x41700000
 802b384:	3fe00000 	.word	0x3fe00000
 802b388:	08031ff8 	.word	0x08031ff8
 802b38c:	1e62      	subs	r2, r4, #1
 802b38e:	ab0e      	add	r3, sp, #56	; 0x38
 802b390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802b394:	f3c3 0316 	ubfx	r3, r3, #0, #23
 802b398:	a90e      	add	r1, sp, #56	; 0x38
 802b39a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 802b39e:	e739      	b.n	802b214 <__kernel_rem_pio2+0x1cc>
 802b3a0:	1e62      	subs	r2, r4, #1
 802b3a2:	ab0e      	add	r3, sp, #56	; 0x38
 802b3a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802b3a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 802b3ac:	e7f4      	b.n	802b398 <__kernel_rem_pio2+0x350>
 802b3ae:	a90e      	add	r1, sp, #56	; 0x38
 802b3b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 802b3b4:	3b01      	subs	r3, #1
 802b3b6:	430a      	orrs	r2, r1
 802b3b8:	e789      	b.n	802b2ce <__kernel_rem_pio2+0x286>
 802b3ba:	3301      	adds	r3, #1
 802b3bc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 802b3c0:	2900      	cmp	r1, #0
 802b3c2:	d0fa      	beq.n	802b3ba <__kernel_rem_pio2+0x372>
 802b3c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802b3c6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 802b3ca:	446a      	add	r2, sp
 802b3cc:	3a98      	subs	r2, #152	; 0x98
 802b3ce:	920a      	str	r2, [sp, #40]	; 0x28
 802b3d0:	9a08      	ldr	r2, [sp, #32]
 802b3d2:	18e3      	adds	r3, r4, r3
 802b3d4:	18a5      	adds	r5, r4, r2
 802b3d6:	aa22      	add	r2, sp, #136	; 0x88
 802b3d8:	f104 0801 	add.w	r8, r4, #1
 802b3dc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 802b3e0:	9304      	str	r3, [sp, #16]
 802b3e2:	9b04      	ldr	r3, [sp, #16]
 802b3e4:	4543      	cmp	r3, r8
 802b3e6:	da04      	bge.n	802b3f2 <__kernel_rem_pio2+0x3aa>
 802b3e8:	461c      	mov	r4, r3
 802b3ea:	e6a3      	b.n	802b134 <__kernel_rem_pio2+0xec>
 802b3ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802b3ee:	2301      	movs	r3, #1
 802b3f0:	e7e4      	b.n	802b3bc <__kernel_rem_pio2+0x374>
 802b3f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802b3f4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 802b3f8:	f7d5 f8be 	bl	8000578 <__aeabi_i2d>
 802b3fc:	e8e5 0102 	strd	r0, r1, [r5], #8
 802b400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802b402:	46ab      	mov	fp, r5
 802b404:	461c      	mov	r4, r3
 802b406:	f04f 0900 	mov.w	r9, #0
 802b40a:	2600      	movs	r6, #0
 802b40c:	2700      	movs	r7, #0
 802b40e:	9b06      	ldr	r3, [sp, #24]
 802b410:	4599      	cmp	r9, r3
 802b412:	dd06      	ble.n	802b422 <__kernel_rem_pio2+0x3da>
 802b414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b416:	e8e3 6702 	strd	r6, r7, [r3], #8
 802b41a:	f108 0801 	add.w	r8, r8, #1
 802b41e:	930a      	str	r3, [sp, #40]	; 0x28
 802b420:	e7df      	b.n	802b3e2 <__kernel_rem_pio2+0x39a>
 802b422:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 802b426:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 802b42a:	f7d5 f90f 	bl	800064c <__aeabi_dmul>
 802b42e:	4602      	mov	r2, r0
 802b430:	460b      	mov	r3, r1
 802b432:	4630      	mov	r0, r6
 802b434:	4639      	mov	r1, r7
 802b436:	f7d4 ff53 	bl	80002e0 <__adddf3>
 802b43a:	f109 0901 	add.w	r9, r9, #1
 802b43e:	4606      	mov	r6, r0
 802b440:	460f      	mov	r7, r1
 802b442:	e7e4      	b.n	802b40e <__kernel_rem_pio2+0x3c6>
 802b444:	3d01      	subs	r5, #1
 802b446:	e748      	b.n	802b2da <__kernel_rem_pio2+0x292>
 802b448:	ec47 6b10 	vmov	d0, r6, r7
 802b44c:	f1ca 0000 	rsb	r0, sl, #0
 802b450:	f000 fd8e 	bl	802bf70 <scalbn>
 802b454:	ec57 6b10 	vmov	r6, r7, d0
 802b458:	4ba0      	ldr	r3, [pc, #640]	; (802b6dc <__kernel_rem_pio2+0x694>)
 802b45a:	ee10 0a10 	vmov	r0, s0
 802b45e:	2200      	movs	r2, #0
 802b460:	4639      	mov	r1, r7
 802b462:	f7d5 fb79 	bl	8000b58 <__aeabi_dcmpge>
 802b466:	b1f8      	cbz	r0, 802b4a8 <__kernel_rem_pio2+0x460>
 802b468:	4b9d      	ldr	r3, [pc, #628]	; (802b6e0 <__kernel_rem_pio2+0x698>)
 802b46a:	2200      	movs	r2, #0
 802b46c:	4630      	mov	r0, r6
 802b46e:	4639      	mov	r1, r7
 802b470:	f7d5 f8ec 	bl	800064c <__aeabi_dmul>
 802b474:	f7d5 fb9a 	bl	8000bac <__aeabi_d2iz>
 802b478:	4680      	mov	r8, r0
 802b47a:	f7d5 f87d 	bl	8000578 <__aeabi_i2d>
 802b47e:	4b97      	ldr	r3, [pc, #604]	; (802b6dc <__kernel_rem_pio2+0x694>)
 802b480:	2200      	movs	r2, #0
 802b482:	f7d5 f8e3 	bl	800064c <__aeabi_dmul>
 802b486:	460b      	mov	r3, r1
 802b488:	4602      	mov	r2, r0
 802b48a:	4639      	mov	r1, r7
 802b48c:	4630      	mov	r0, r6
 802b48e:	f7d4 ff25 	bl	80002dc <__aeabi_dsub>
 802b492:	f7d5 fb8b 	bl	8000bac <__aeabi_d2iz>
 802b496:	1c65      	adds	r5, r4, #1
 802b498:	ab0e      	add	r3, sp, #56	; 0x38
 802b49a:	f10a 0a18 	add.w	sl, sl, #24
 802b49e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 802b4a2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 802b4a6:	e720      	b.n	802b2ea <__kernel_rem_pio2+0x2a2>
 802b4a8:	4630      	mov	r0, r6
 802b4aa:	4639      	mov	r1, r7
 802b4ac:	f7d5 fb7e 	bl	8000bac <__aeabi_d2iz>
 802b4b0:	ab0e      	add	r3, sp, #56	; 0x38
 802b4b2:	4625      	mov	r5, r4
 802b4b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 802b4b8:	e717      	b.n	802b2ea <__kernel_rem_pio2+0x2a2>
 802b4ba:	ab0e      	add	r3, sp, #56	; 0x38
 802b4bc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 802b4c0:	f7d5 f85a 	bl	8000578 <__aeabi_i2d>
 802b4c4:	4632      	mov	r2, r6
 802b4c6:	463b      	mov	r3, r7
 802b4c8:	f7d5 f8c0 	bl	800064c <__aeabi_dmul>
 802b4cc:	4b84      	ldr	r3, [pc, #528]	; (802b6e0 <__kernel_rem_pio2+0x698>)
 802b4ce:	e968 0102 	strd	r0, r1, [r8, #-8]!
 802b4d2:	2200      	movs	r2, #0
 802b4d4:	4630      	mov	r0, r6
 802b4d6:	4639      	mov	r1, r7
 802b4d8:	f7d5 f8b8 	bl	800064c <__aeabi_dmul>
 802b4dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 802b4e0:	4606      	mov	r6, r0
 802b4e2:	460f      	mov	r7, r1
 802b4e4:	e70f      	b.n	802b306 <__kernel_rem_pio2+0x2be>
 802b4e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 802b4ea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 802b4ee:	f7d5 f8ad 	bl	800064c <__aeabi_dmul>
 802b4f2:	4602      	mov	r2, r0
 802b4f4:	460b      	mov	r3, r1
 802b4f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802b4fa:	f7d4 fef1 	bl	80002e0 <__adddf3>
 802b4fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802b502:	f108 0801 	add.w	r8, r8, #1
 802b506:	9b02      	ldr	r3, [sp, #8]
 802b508:	4598      	cmp	r8, r3
 802b50a:	dc01      	bgt.n	802b510 <__kernel_rem_pio2+0x4c8>
 802b50c:	45b8      	cmp	r8, r7
 802b50e:	ddea      	ble.n	802b4e6 <__kernel_rem_pio2+0x49e>
 802b510:	ed9d 7b06 	vldr	d7, [sp, #24]
 802b514:	ab4a      	add	r3, sp, #296	; 0x128
 802b516:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 802b51a:	ed87 7b00 	vstr	d7, [r7]
 802b51e:	3e01      	subs	r6, #1
 802b520:	e6f8      	b.n	802b314 <__kernel_rem_pio2+0x2cc>
 802b522:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 802b524:	2b02      	cmp	r3, #2
 802b526:	dc0b      	bgt.n	802b540 <__kernel_rem_pio2+0x4f8>
 802b528:	2b00      	cmp	r3, #0
 802b52a:	dc35      	bgt.n	802b598 <__kernel_rem_pio2+0x550>
 802b52c:	d059      	beq.n	802b5e2 <__kernel_rem_pio2+0x59a>
 802b52e:	9b04      	ldr	r3, [sp, #16]
 802b530:	f003 0007 	and.w	r0, r3, #7
 802b534:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 802b538:	ecbd 8b02 	vpop	{d8}
 802b53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b540:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 802b542:	2b03      	cmp	r3, #3
 802b544:	d1f3      	bne.n	802b52e <__kernel_rem_pio2+0x4e6>
 802b546:	ab4a      	add	r3, sp, #296	; 0x128
 802b548:	4423      	add	r3, r4
 802b54a:	9306      	str	r3, [sp, #24]
 802b54c:	461c      	mov	r4, r3
 802b54e:	469a      	mov	sl, r3
 802b550:	9502      	str	r5, [sp, #8]
 802b552:	9b02      	ldr	r3, [sp, #8]
 802b554:	2b00      	cmp	r3, #0
 802b556:	f1aa 0a08 	sub.w	sl, sl, #8
 802b55a:	dc6b      	bgt.n	802b634 <__kernel_rem_pio2+0x5ec>
 802b55c:	46aa      	mov	sl, r5
 802b55e:	f1ba 0f01 	cmp.w	sl, #1
 802b562:	f1a4 0408 	sub.w	r4, r4, #8
 802b566:	f300 8085 	bgt.w	802b674 <__kernel_rem_pio2+0x62c>
 802b56a:	9c06      	ldr	r4, [sp, #24]
 802b56c:	2000      	movs	r0, #0
 802b56e:	3408      	adds	r4, #8
 802b570:	2100      	movs	r1, #0
 802b572:	2d01      	cmp	r5, #1
 802b574:	f300 809d 	bgt.w	802b6b2 <__kernel_rem_pio2+0x66a>
 802b578:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 802b57c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 802b580:	f1bb 0f00 	cmp.w	fp, #0
 802b584:	f040 809b 	bne.w	802b6be <__kernel_rem_pio2+0x676>
 802b588:	9b01      	ldr	r3, [sp, #4]
 802b58a:	e9c3 5600 	strd	r5, r6, [r3]
 802b58e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 802b592:	e9c3 0104 	strd	r0, r1, [r3, #16]
 802b596:	e7ca      	b.n	802b52e <__kernel_rem_pio2+0x4e6>
 802b598:	3408      	adds	r4, #8
 802b59a:	ab4a      	add	r3, sp, #296	; 0x128
 802b59c:	441c      	add	r4, r3
 802b59e:	462e      	mov	r6, r5
 802b5a0:	2000      	movs	r0, #0
 802b5a2:	2100      	movs	r1, #0
 802b5a4:	2e00      	cmp	r6, #0
 802b5a6:	da36      	bge.n	802b616 <__kernel_rem_pio2+0x5ce>
 802b5a8:	f1bb 0f00 	cmp.w	fp, #0
 802b5ac:	d039      	beq.n	802b622 <__kernel_rem_pio2+0x5da>
 802b5ae:	4602      	mov	r2, r0
 802b5b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802b5b4:	9c01      	ldr	r4, [sp, #4]
 802b5b6:	e9c4 2300 	strd	r2, r3, [r4]
 802b5ba:	4602      	mov	r2, r0
 802b5bc:	460b      	mov	r3, r1
 802b5be:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 802b5c2:	f7d4 fe8b 	bl	80002dc <__aeabi_dsub>
 802b5c6:	ae4c      	add	r6, sp, #304	; 0x130
 802b5c8:	2401      	movs	r4, #1
 802b5ca:	42a5      	cmp	r5, r4
 802b5cc:	da2c      	bge.n	802b628 <__kernel_rem_pio2+0x5e0>
 802b5ce:	f1bb 0f00 	cmp.w	fp, #0
 802b5d2:	d002      	beq.n	802b5da <__kernel_rem_pio2+0x592>
 802b5d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802b5d8:	4619      	mov	r1, r3
 802b5da:	9b01      	ldr	r3, [sp, #4]
 802b5dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802b5e0:	e7a5      	b.n	802b52e <__kernel_rem_pio2+0x4e6>
 802b5e2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 802b5e6:	eb0d 0403 	add.w	r4, sp, r3
 802b5ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 802b5ee:	2000      	movs	r0, #0
 802b5f0:	2100      	movs	r1, #0
 802b5f2:	2d00      	cmp	r5, #0
 802b5f4:	da09      	bge.n	802b60a <__kernel_rem_pio2+0x5c2>
 802b5f6:	f1bb 0f00 	cmp.w	fp, #0
 802b5fa:	d002      	beq.n	802b602 <__kernel_rem_pio2+0x5ba>
 802b5fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802b600:	4619      	mov	r1, r3
 802b602:	9b01      	ldr	r3, [sp, #4]
 802b604:	e9c3 0100 	strd	r0, r1, [r3]
 802b608:	e791      	b.n	802b52e <__kernel_rem_pio2+0x4e6>
 802b60a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802b60e:	f7d4 fe67 	bl	80002e0 <__adddf3>
 802b612:	3d01      	subs	r5, #1
 802b614:	e7ed      	b.n	802b5f2 <__kernel_rem_pio2+0x5aa>
 802b616:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802b61a:	f7d4 fe61 	bl	80002e0 <__adddf3>
 802b61e:	3e01      	subs	r6, #1
 802b620:	e7c0      	b.n	802b5a4 <__kernel_rem_pio2+0x55c>
 802b622:	4602      	mov	r2, r0
 802b624:	460b      	mov	r3, r1
 802b626:	e7c5      	b.n	802b5b4 <__kernel_rem_pio2+0x56c>
 802b628:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 802b62c:	f7d4 fe58 	bl	80002e0 <__adddf3>
 802b630:	3401      	adds	r4, #1
 802b632:	e7ca      	b.n	802b5ca <__kernel_rem_pio2+0x582>
 802b634:	e9da 8900 	ldrd	r8, r9, [sl]
 802b638:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 802b63c:	9b02      	ldr	r3, [sp, #8]
 802b63e:	3b01      	subs	r3, #1
 802b640:	9302      	str	r3, [sp, #8]
 802b642:	4632      	mov	r2, r6
 802b644:	463b      	mov	r3, r7
 802b646:	4640      	mov	r0, r8
 802b648:	4649      	mov	r1, r9
 802b64a:	f7d4 fe49 	bl	80002e0 <__adddf3>
 802b64e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802b652:	4602      	mov	r2, r0
 802b654:	460b      	mov	r3, r1
 802b656:	4640      	mov	r0, r8
 802b658:	4649      	mov	r1, r9
 802b65a:	f7d4 fe3f 	bl	80002dc <__aeabi_dsub>
 802b65e:	4632      	mov	r2, r6
 802b660:	463b      	mov	r3, r7
 802b662:	f7d4 fe3d 	bl	80002e0 <__adddf3>
 802b666:	ed9d 7b08 	vldr	d7, [sp, #32]
 802b66a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802b66e:	ed8a 7b00 	vstr	d7, [sl]
 802b672:	e76e      	b.n	802b552 <__kernel_rem_pio2+0x50a>
 802b674:	e9d4 8900 	ldrd	r8, r9, [r4]
 802b678:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 802b67c:	4640      	mov	r0, r8
 802b67e:	4632      	mov	r2, r6
 802b680:	463b      	mov	r3, r7
 802b682:	4649      	mov	r1, r9
 802b684:	f7d4 fe2c 	bl	80002e0 <__adddf3>
 802b688:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802b68c:	4602      	mov	r2, r0
 802b68e:	460b      	mov	r3, r1
 802b690:	4640      	mov	r0, r8
 802b692:	4649      	mov	r1, r9
 802b694:	f7d4 fe22 	bl	80002dc <__aeabi_dsub>
 802b698:	4632      	mov	r2, r6
 802b69a:	463b      	mov	r3, r7
 802b69c:	f7d4 fe20 	bl	80002e0 <__adddf3>
 802b6a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 802b6a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802b6a8:	ed84 7b00 	vstr	d7, [r4]
 802b6ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 802b6b0:	e755      	b.n	802b55e <__kernel_rem_pio2+0x516>
 802b6b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802b6b6:	f7d4 fe13 	bl	80002e0 <__adddf3>
 802b6ba:	3d01      	subs	r5, #1
 802b6bc:	e759      	b.n	802b572 <__kernel_rem_pio2+0x52a>
 802b6be:	9b01      	ldr	r3, [sp, #4]
 802b6c0:	9a01      	ldr	r2, [sp, #4]
 802b6c2:	601d      	str	r5, [r3, #0]
 802b6c4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 802b6c8:	605c      	str	r4, [r3, #4]
 802b6ca:	609f      	str	r7, [r3, #8]
 802b6cc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 802b6d0:	60d3      	str	r3, [r2, #12]
 802b6d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802b6d6:	6110      	str	r0, [r2, #16]
 802b6d8:	6153      	str	r3, [r2, #20]
 802b6da:	e728      	b.n	802b52e <__kernel_rem_pio2+0x4e6>
 802b6dc:	41700000 	.word	0x41700000
 802b6e0:	3e700000 	.word	0x3e700000
 802b6e4:	00000000 	.word	0x00000000

0802b6e8 <__kernel_sin>:
 802b6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b6ec:	ed2d 8b04 	vpush	{d8-d9}
 802b6f0:	eeb0 8a41 	vmov.f32	s16, s2
 802b6f4:	eef0 8a61 	vmov.f32	s17, s3
 802b6f8:	ec55 4b10 	vmov	r4, r5, d0
 802b6fc:	b083      	sub	sp, #12
 802b6fe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802b702:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 802b706:	9001      	str	r0, [sp, #4]
 802b708:	da06      	bge.n	802b718 <__kernel_sin+0x30>
 802b70a:	ee10 0a10 	vmov	r0, s0
 802b70e:	4629      	mov	r1, r5
 802b710:	f7d5 fa4c 	bl	8000bac <__aeabi_d2iz>
 802b714:	2800      	cmp	r0, #0
 802b716:	d051      	beq.n	802b7bc <__kernel_sin+0xd4>
 802b718:	4622      	mov	r2, r4
 802b71a:	462b      	mov	r3, r5
 802b71c:	4620      	mov	r0, r4
 802b71e:	4629      	mov	r1, r5
 802b720:	f7d4 ff94 	bl	800064c <__aeabi_dmul>
 802b724:	4682      	mov	sl, r0
 802b726:	468b      	mov	fp, r1
 802b728:	4602      	mov	r2, r0
 802b72a:	460b      	mov	r3, r1
 802b72c:	4620      	mov	r0, r4
 802b72e:	4629      	mov	r1, r5
 802b730:	f7d4 ff8c 	bl	800064c <__aeabi_dmul>
 802b734:	a341      	add	r3, pc, #260	; (adr r3, 802b83c <__kernel_sin+0x154>)
 802b736:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b73a:	4680      	mov	r8, r0
 802b73c:	4689      	mov	r9, r1
 802b73e:	4650      	mov	r0, sl
 802b740:	4659      	mov	r1, fp
 802b742:	f7d4 ff83 	bl	800064c <__aeabi_dmul>
 802b746:	a33f      	add	r3, pc, #252	; (adr r3, 802b844 <__kernel_sin+0x15c>)
 802b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b74c:	f7d4 fdc6 	bl	80002dc <__aeabi_dsub>
 802b750:	4652      	mov	r2, sl
 802b752:	465b      	mov	r3, fp
 802b754:	f7d4 ff7a 	bl	800064c <__aeabi_dmul>
 802b758:	a33c      	add	r3, pc, #240	; (adr r3, 802b84c <__kernel_sin+0x164>)
 802b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b75e:	f7d4 fdbf 	bl	80002e0 <__adddf3>
 802b762:	4652      	mov	r2, sl
 802b764:	465b      	mov	r3, fp
 802b766:	f7d4 ff71 	bl	800064c <__aeabi_dmul>
 802b76a:	a33a      	add	r3, pc, #232	; (adr r3, 802b854 <__kernel_sin+0x16c>)
 802b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b770:	f7d4 fdb4 	bl	80002dc <__aeabi_dsub>
 802b774:	4652      	mov	r2, sl
 802b776:	465b      	mov	r3, fp
 802b778:	f7d4 ff68 	bl	800064c <__aeabi_dmul>
 802b77c:	a337      	add	r3, pc, #220	; (adr r3, 802b85c <__kernel_sin+0x174>)
 802b77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b782:	f7d4 fdad 	bl	80002e0 <__adddf3>
 802b786:	9b01      	ldr	r3, [sp, #4]
 802b788:	4606      	mov	r6, r0
 802b78a:	460f      	mov	r7, r1
 802b78c:	b9eb      	cbnz	r3, 802b7ca <__kernel_sin+0xe2>
 802b78e:	4602      	mov	r2, r0
 802b790:	460b      	mov	r3, r1
 802b792:	4650      	mov	r0, sl
 802b794:	4659      	mov	r1, fp
 802b796:	f7d4 ff59 	bl	800064c <__aeabi_dmul>
 802b79a:	a325      	add	r3, pc, #148	; (adr r3, 802b830 <__kernel_sin+0x148>)
 802b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b7a0:	f7d4 fd9c 	bl	80002dc <__aeabi_dsub>
 802b7a4:	4642      	mov	r2, r8
 802b7a6:	464b      	mov	r3, r9
 802b7a8:	f7d4 ff50 	bl	800064c <__aeabi_dmul>
 802b7ac:	4602      	mov	r2, r0
 802b7ae:	460b      	mov	r3, r1
 802b7b0:	4620      	mov	r0, r4
 802b7b2:	4629      	mov	r1, r5
 802b7b4:	f7d4 fd94 	bl	80002e0 <__adddf3>
 802b7b8:	4604      	mov	r4, r0
 802b7ba:	460d      	mov	r5, r1
 802b7bc:	ec45 4b10 	vmov	d0, r4, r5
 802b7c0:	b003      	add	sp, #12
 802b7c2:	ecbd 8b04 	vpop	{d8-d9}
 802b7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b7ca:	4b1b      	ldr	r3, [pc, #108]	; (802b838 <__kernel_sin+0x150>)
 802b7cc:	ec51 0b18 	vmov	r0, r1, d8
 802b7d0:	2200      	movs	r2, #0
 802b7d2:	f7d4 ff3b 	bl	800064c <__aeabi_dmul>
 802b7d6:	4632      	mov	r2, r6
 802b7d8:	ec41 0b19 	vmov	d9, r0, r1
 802b7dc:	463b      	mov	r3, r7
 802b7de:	4640      	mov	r0, r8
 802b7e0:	4649      	mov	r1, r9
 802b7e2:	f7d4 ff33 	bl	800064c <__aeabi_dmul>
 802b7e6:	4602      	mov	r2, r0
 802b7e8:	460b      	mov	r3, r1
 802b7ea:	ec51 0b19 	vmov	r0, r1, d9
 802b7ee:	f7d4 fd75 	bl	80002dc <__aeabi_dsub>
 802b7f2:	4652      	mov	r2, sl
 802b7f4:	465b      	mov	r3, fp
 802b7f6:	f7d4 ff29 	bl	800064c <__aeabi_dmul>
 802b7fa:	ec53 2b18 	vmov	r2, r3, d8
 802b7fe:	f7d4 fd6d 	bl	80002dc <__aeabi_dsub>
 802b802:	a30b      	add	r3, pc, #44	; (adr r3, 802b830 <__kernel_sin+0x148>)
 802b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b808:	4606      	mov	r6, r0
 802b80a:	460f      	mov	r7, r1
 802b80c:	4640      	mov	r0, r8
 802b80e:	4649      	mov	r1, r9
 802b810:	f7d4 ff1c 	bl	800064c <__aeabi_dmul>
 802b814:	4602      	mov	r2, r0
 802b816:	460b      	mov	r3, r1
 802b818:	4630      	mov	r0, r6
 802b81a:	4639      	mov	r1, r7
 802b81c:	f7d4 fd60 	bl	80002e0 <__adddf3>
 802b820:	4602      	mov	r2, r0
 802b822:	460b      	mov	r3, r1
 802b824:	4620      	mov	r0, r4
 802b826:	4629      	mov	r1, r5
 802b828:	f7d4 fd58 	bl	80002dc <__aeabi_dsub>
 802b82c:	e7c4      	b.n	802b7b8 <__kernel_sin+0xd0>
 802b82e:	bf00      	nop
 802b830:	55555549 	.word	0x55555549
 802b834:	3fc55555 	.word	0x3fc55555
 802b838:	3fe00000 	.word	0x3fe00000
 802b83c:	5acfd57c 	.word	0x5acfd57c
 802b840:	3de5d93a 	.word	0x3de5d93a
 802b844:	8a2b9ceb 	.word	0x8a2b9ceb
 802b848:	3e5ae5e6 	.word	0x3e5ae5e6
 802b84c:	57b1fe7d 	.word	0x57b1fe7d
 802b850:	3ec71de3 	.word	0x3ec71de3
 802b854:	19c161d5 	.word	0x19c161d5
 802b858:	3f2a01a0 	.word	0x3f2a01a0
 802b85c:	1110f8a6 	.word	0x1110f8a6
 802b860:	3f811111 	.word	0x3f811111

0802b864 <__kernel_cosf>:
 802b864:	ee10 3a10 	vmov	r3, s0
 802b868:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b86c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802b870:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 802b874:	da05      	bge.n	802b882 <__kernel_cosf+0x1e>
 802b876:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802b87a:	ee17 2a90 	vmov	r2, s15
 802b87e:	2a00      	cmp	r2, #0
 802b880:	d03d      	beq.n	802b8fe <__kernel_cosf+0x9a>
 802b882:	ee60 5a00 	vmul.f32	s11, s0, s0
 802b886:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802b904 <__kernel_cosf+0xa0>
 802b88a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 802b908 <__kernel_cosf+0xa4>
 802b88e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 802b90c <__kernel_cosf+0xa8>
 802b892:	4a1f      	ldr	r2, [pc, #124]	; (802b910 <__kernel_cosf+0xac>)
 802b894:	eea5 7aa7 	vfma.f32	s14, s11, s15
 802b898:	4293      	cmp	r3, r2
 802b89a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802b914 <__kernel_cosf+0xb0>
 802b89e:	eee7 7a25 	vfma.f32	s15, s14, s11
 802b8a2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 802b918 <__kernel_cosf+0xb4>
 802b8a6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802b8aa:	eddf 7a1c 	vldr	s15, [pc, #112]	; 802b91c <__kernel_cosf+0xb8>
 802b8ae:	eee7 7a25 	vfma.f32	s15, s14, s11
 802b8b2:	eeb0 7a66 	vmov.f32	s14, s13
 802b8b6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802b8ba:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 802b8be:	ee65 7aa6 	vmul.f32	s15, s11, s13
 802b8c2:	ee67 6a25 	vmul.f32	s13, s14, s11
 802b8c6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 802b8ca:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802b8ce:	dc04      	bgt.n	802b8da <__kernel_cosf+0x76>
 802b8d0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 802b8d4:	ee36 0a47 	vsub.f32	s0, s12, s14
 802b8d8:	4770      	bx	lr
 802b8da:	4a11      	ldr	r2, [pc, #68]	; (802b920 <__kernel_cosf+0xbc>)
 802b8dc:	4293      	cmp	r3, r2
 802b8de:	bfda      	itte	le
 802b8e0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802b8e4:	ee06 3a90 	vmovle	s13, r3
 802b8e8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 802b8ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802b8f0:	ee36 0a66 	vsub.f32	s0, s12, s13
 802b8f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b8f8:	ee30 0a67 	vsub.f32	s0, s0, s15
 802b8fc:	4770      	bx	lr
 802b8fe:	eeb0 0a46 	vmov.f32	s0, s12
 802b902:	4770      	bx	lr
 802b904:	ad47d74e 	.word	0xad47d74e
 802b908:	310f74f6 	.word	0x310f74f6
 802b90c:	3d2aaaab 	.word	0x3d2aaaab
 802b910:	3e999999 	.word	0x3e999999
 802b914:	b493f27c 	.word	0xb493f27c
 802b918:	37d00d01 	.word	0x37d00d01
 802b91c:	bab60b61 	.word	0xbab60b61
 802b920:	3f480000 	.word	0x3f480000

0802b924 <__kernel_rem_pio2f>:
 802b924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b928:	ed2d 8b04 	vpush	{d8-d9}
 802b92c:	b0d9      	sub	sp, #356	; 0x164
 802b92e:	4688      	mov	r8, r1
 802b930:	9002      	str	r0, [sp, #8]
 802b932:	49bb      	ldr	r1, [pc, #748]	; (802bc20 <__kernel_rem_pio2f+0x2fc>)
 802b934:	9866      	ldr	r0, [sp, #408]	; 0x198
 802b936:	9301      	str	r3, [sp, #4]
 802b938:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 802b93c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 802b940:	1e59      	subs	r1, r3, #1
 802b942:	1d13      	adds	r3, r2, #4
 802b944:	db27      	blt.n	802b996 <__kernel_rem_pio2f+0x72>
 802b946:	f1b2 0b03 	subs.w	fp, r2, #3
 802b94a:	bf48      	it	mi
 802b94c:	f102 0b04 	addmi.w	fp, r2, #4
 802b950:	ea4f 00eb 	mov.w	r0, fp, asr #3
 802b954:	1c45      	adds	r5, r0, #1
 802b956:	00ec      	lsls	r4, r5, #3
 802b958:	1a47      	subs	r7, r0, r1
 802b95a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 802bc30 <__kernel_rem_pio2f+0x30c>
 802b95e:	9403      	str	r4, [sp, #12]
 802b960:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 802b964:	eb0a 0c01 	add.w	ip, sl, r1
 802b968:	ae1c      	add	r6, sp, #112	; 0x70
 802b96a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 802b96e:	2400      	movs	r4, #0
 802b970:	4564      	cmp	r4, ip
 802b972:	dd12      	ble.n	802b99a <__kernel_rem_pio2f+0x76>
 802b974:	9b01      	ldr	r3, [sp, #4]
 802b976:	ac1c      	add	r4, sp, #112	; 0x70
 802b978:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 802b97c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 802b980:	f04f 0c00 	mov.w	ip, #0
 802b984:	45d4      	cmp	ip, sl
 802b986:	dc27      	bgt.n	802b9d8 <__kernel_rem_pio2f+0xb4>
 802b988:	f8dd 9008 	ldr.w	r9, [sp, #8]
 802b98c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 802bc30 <__kernel_rem_pio2f+0x30c>
 802b990:	4627      	mov	r7, r4
 802b992:	2600      	movs	r6, #0
 802b994:	e016      	b.n	802b9c4 <__kernel_rem_pio2f+0xa0>
 802b996:	2000      	movs	r0, #0
 802b998:	e7dc      	b.n	802b954 <__kernel_rem_pio2f+0x30>
 802b99a:	42e7      	cmn	r7, r4
 802b99c:	bf5d      	ittte	pl
 802b99e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 802b9a2:	ee07 3a90 	vmovpl	s15, r3
 802b9a6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802b9aa:	eef0 7a47 	vmovmi.f32	s15, s14
 802b9ae:	ece6 7a01 	vstmia	r6!, {s15}
 802b9b2:	3401      	adds	r4, #1
 802b9b4:	e7dc      	b.n	802b970 <__kernel_rem_pio2f+0x4c>
 802b9b6:	ecf9 6a01 	vldmia	r9!, {s13}
 802b9ba:	ed97 7a00 	vldr	s14, [r7]
 802b9be:	eee6 7a87 	vfma.f32	s15, s13, s14
 802b9c2:	3601      	adds	r6, #1
 802b9c4:	428e      	cmp	r6, r1
 802b9c6:	f1a7 0704 	sub.w	r7, r7, #4
 802b9ca:	ddf4      	ble.n	802b9b6 <__kernel_rem_pio2f+0x92>
 802b9cc:	eceb 7a01 	vstmia	fp!, {s15}
 802b9d0:	f10c 0c01 	add.w	ip, ip, #1
 802b9d4:	3404      	adds	r4, #4
 802b9d6:	e7d5      	b.n	802b984 <__kernel_rem_pio2f+0x60>
 802b9d8:	ab08      	add	r3, sp, #32
 802b9da:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 802b9de:	eddf 8a93 	vldr	s17, [pc, #588]	; 802bc2c <__kernel_rem_pio2f+0x308>
 802b9e2:	ed9f 9a91 	vldr	s18, [pc, #580]	; 802bc28 <__kernel_rem_pio2f+0x304>
 802b9e6:	9304      	str	r3, [sp, #16]
 802b9e8:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 802b9ec:	4656      	mov	r6, sl
 802b9ee:	00b3      	lsls	r3, r6, #2
 802b9f0:	9305      	str	r3, [sp, #20]
 802b9f2:	ab58      	add	r3, sp, #352	; 0x160
 802b9f4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802b9f8:	ac08      	add	r4, sp, #32
 802b9fa:	ab44      	add	r3, sp, #272	; 0x110
 802b9fc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 802ba00:	46a4      	mov	ip, r4
 802ba02:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802ba06:	4637      	mov	r7, r6
 802ba08:	2f00      	cmp	r7, #0
 802ba0a:	f1a0 0004 	sub.w	r0, r0, #4
 802ba0e:	dc4f      	bgt.n	802bab0 <__kernel_rem_pio2f+0x18c>
 802ba10:	4628      	mov	r0, r5
 802ba12:	e9cd 1206 	strd	r1, r2, [sp, #24]
 802ba16:	f000 fb4b 	bl	802c0b0 <scalbnf>
 802ba1a:	eeb0 8a40 	vmov.f32	s16, s0
 802ba1e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802ba22:	ee28 0a00 	vmul.f32	s0, s16, s0
 802ba26:	f7fd fd35 	bl	8029494 <floorf>
 802ba2a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802ba2e:	eea0 8a67 	vfms.f32	s16, s0, s15
 802ba32:	2d00      	cmp	r5, #0
 802ba34:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802ba38:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802ba3c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 802ba40:	ee17 9a90 	vmov	r9, s15
 802ba44:	ee38 8a40 	vsub.f32	s16, s16, s0
 802ba48:	dd44      	ble.n	802bad4 <__kernel_rem_pio2f+0x1b0>
 802ba4a:	f106 3cff 	add.w	ip, r6, #4294967295
 802ba4e:	ab08      	add	r3, sp, #32
 802ba50:	f1c5 0e08 	rsb	lr, r5, #8
 802ba54:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 802ba58:	fa47 f00e 	asr.w	r0, r7, lr
 802ba5c:	4481      	add	r9, r0
 802ba5e:	fa00 f00e 	lsl.w	r0, r0, lr
 802ba62:	1a3f      	subs	r7, r7, r0
 802ba64:	f1c5 0007 	rsb	r0, r5, #7
 802ba68:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 802ba6c:	4107      	asrs	r7, r0
 802ba6e:	2f00      	cmp	r7, #0
 802ba70:	dd3f      	ble.n	802baf2 <__kernel_rem_pio2f+0x1ce>
 802ba72:	f04f 0e00 	mov.w	lr, #0
 802ba76:	f109 0901 	add.w	r9, r9, #1
 802ba7a:	4673      	mov	r3, lr
 802ba7c:	4576      	cmp	r6, lr
 802ba7e:	dc6b      	bgt.n	802bb58 <__kernel_rem_pio2f+0x234>
 802ba80:	2d00      	cmp	r5, #0
 802ba82:	dd04      	ble.n	802ba8e <__kernel_rem_pio2f+0x16a>
 802ba84:	2d01      	cmp	r5, #1
 802ba86:	d078      	beq.n	802bb7a <__kernel_rem_pio2f+0x256>
 802ba88:	2d02      	cmp	r5, #2
 802ba8a:	f000 8081 	beq.w	802bb90 <__kernel_rem_pio2f+0x26c>
 802ba8e:	2f02      	cmp	r7, #2
 802ba90:	d12f      	bne.n	802baf2 <__kernel_rem_pio2f+0x1ce>
 802ba92:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802ba96:	ee30 8a48 	vsub.f32	s16, s0, s16
 802ba9a:	b353      	cbz	r3, 802baf2 <__kernel_rem_pio2f+0x1ce>
 802ba9c:	4628      	mov	r0, r5
 802ba9e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 802baa2:	f000 fb05 	bl	802c0b0 <scalbnf>
 802baa6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802baaa:	ee38 8a40 	vsub.f32	s16, s16, s0
 802baae:	e020      	b.n	802baf2 <__kernel_rem_pio2f+0x1ce>
 802bab0:	ee60 7a28 	vmul.f32	s15, s0, s17
 802bab4:	3f01      	subs	r7, #1
 802bab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802baba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802babe:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802bac2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802bac6:	ecac 0a01 	vstmia	ip!, {s0}
 802baca:	ed90 0a00 	vldr	s0, [r0]
 802bace:	ee37 0a80 	vadd.f32	s0, s15, s0
 802bad2:	e799      	b.n	802ba08 <__kernel_rem_pio2f+0xe4>
 802bad4:	d105      	bne.n	802bae2 <__kernel_rem_pio2f+0x1be>
 802bad6:	1e70      	subs	r0, r6, #1
 802bad8:	ab08      	add	r3, sp, #32
 802bada:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 802bade:	11ff      	asrs	r7, r7, #7
 802bae0:	e7c5      	b.n	802ba6e <__kernel_rem_pio2f+0x14a>
 802bae2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802bae6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802baea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802baee:	da31      	bge.n	802bb54 <__kernel_rem_pio2f+0x230>
 802baf0:	2700      	movs	r7, #0
 802baf2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802baf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bafa:	f040 809b 	bne.w	802bc34 <__kernel_rem_pio2f+0x310>
 802bafe:	1e74      	subs	r4, r6, #1
 802bb00:	46a4      	mov	ip, r4
 802bb02:	2000      	movs	r0, #0
 802bb04:	45d4      	cmp	ip, sl
 802bb06:	da4a      	bge.n	802bb9e <__kernel_rem_pio2f+0x27a>
 802bb08:	2800      	cmp	r0, #0
 802bb0a:	d07a      	beq.n	802bc02 <__kernel_rem_pio2f+0x2de>
 802bb0c:	ab08      	add	r3, sp, #32
 802bb0e:	3d08      	subs	r5, #8
 802bb10:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802bb14:	2b00      	cmp	r3, #0
 802bb16:	f000 8081 	beq.w	802bc1c <__kernel_rem_pio2f+0x2f8>
 802bb1a:	4628      	mov	r0, r5
 802bb1c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802bb20:	00a5      	lsls	r5, r4, #2
 802bb22:	f000 fac5 	bl	802c0b0 <scalbnf>
 802bb26:	aa44      	add	r2, sp, #272	; 0x110
 802bb28:	1d2b      	adds	r3, r5, #4
 802bb2a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 802bc2c <__kernel_rem_pio2f+0x308>
 802bb2e:	18d1      	adds	r1, r2, r3
 802bb30:	4622      	mov	r2, r4
 802bb32:	2a00      	cmp	r2, #0
 802bb34:	f280 80ae 	bge.w	802bc94 <__kernel_rem_pio2f+0x370>
 802bb38:	4622      	mov	r2, r4
 802bb3a:	2a00      	cmp	r2, #0
 802bb3c:	f2c0 80cc 	blt.w	802bcd8 <__kernel_rem_pio2f+0x3b4>
 802bb40:	a944      	add	r1, sp, #272	; 0x110
 802bb42:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 802bb46:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 802bc24 <__kernel_rem_pio2f+0x300>
 802bb4a:	eddf 7a39 	vldr	s15, [pc, #228]	; 802bc30 <__kernel_rem_pio2f+0x30c>
 802bb4e:	2000      	movs	r0, #0
 802bb50:	1aa1      	subs	r1, r4, r2
 802bb52:	e0b6      	b.n	802bcc2 <__kernel_rem_pio2f+0x39e>
 802bb54:	2702      	movs	r7, #2
 802bb56:	e78c      	b.n	802ba72 <__kernel_rem_pio2f+0x14e>
 802bb58:	6820      	ldr	r0, [r4, #0]
 802bb5a:	b94b      	cbnz	r3, 802bb70 <__kernel_rem_pio2f+0x24c>
 802bb5c:	b118      	cbz	r0, 802bb66 <__kernel_rem_pio2f+0x242>
 802bb5e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802bb62:	6020      	str	r0, [r4, #0]
 802bb64:	2001      	movs	r0, #1
 802bb66:	f10e 0e01 	add.w	lr, lr, #1
 802bb6a:	3404      	adds	r4, #4
 802bb6c:	4603      	mov	r3, r0
 802bb6e:	e785      	b.n	802ba7c <__kernel_rem_pio2f+0x158>
 802bb70:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 802bb74:	6020      	str	r0, [r4, #0]
 802bb76:	4618      	mov	r0, r3
 802bb78:	e7f5      	b.n	802bb66 <__kernel_rem_pio2f+0x242>
 802bb7a:	1e74      	subs	r4, r6, #1
 802bb7c:	a808      	add	r0, sp, #32
 802bb7e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 802bb82:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 802bb86:	f10d 0c20 	add.w	ip, sp, #32
 802bb8a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 802bb8e:	e77e      	b.n	802ba8e <__kernel_rem_pio2f+0x16a>
 802bb90:	1e74      	subs	r4, r6, #1
 802bb92:	a808      	add	r0, sp, #32
 802bb94:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 802bb98:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 802bb9c:	e7f3      	b.n	802bb86 <__kernel_rem_pio2f+0x262>
 802bb9e:	ab08      	add	r3, sp, #32
 802bba0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802bba4:	f10c 3cff 	add.w	ip, ip, #4294967295
 802bba8:	4318      	orrs	r0, r3
 802bbaa:	e7ab      	b.n	802bb04 <__kernel_rem_pio2f+0x1e0>
 802bbac:	f10c 0c01 	add.w	ip, ip, #1
 802bbb0:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 802bbb4:	2c00      	cmp	r4, #0
 802bbb6:	d0f9      	beq.n	802bbac <__kernel_rem_pio2f+0x288>
 802bbb8:	9b05      	ldr	r3, [sp, #20]
 802bbba:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 802bbbe:	eb0d 0003 	add.w	r0, sp, r3
 802bbc2:	9b01      	ldr	r3, [sp, #4]
 802bbc4:	18f4      	adds	r4, r6, r3
 802bbc6:	ab1c      	add	r3, sp, #112	; 0x70
 802bbc8:	1c77      	adds	r7, r6, #1
 802bbca:	384c      	subs	r0, #76	; 0x4c
 802bbcc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802bbd0:	4466      	add	r6, ip
 802bbd2:	42be      	cmp	r6, r7
 802bbd4:	f6ff af0b 	blt.w	802b9ee <__kernel_rem_pio2f+0xca>
 802bbd8:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 802bbdc:	f8dd e008 	ldr.w	lr, [sp, #8]
 802bbe0:	ee07 3a90 	vmov	s15, r3
 802bbe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802bbe8:	f04f 0c00 	mov.w	ip, #0
 802bbec:	ece4 7a01 	vstmia	r4!, {s15}
 802bbf0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 802bc30 <__kernel_rem_pio2f+0x30c>
 802bbf4:	46a1      	mov	r9, r4
 802bbf6:	458c      	cmp	ip, r1
 802bbf8:	dd07      	ble.n	802bc0a <__kernel_rem_pio2f+0x2e6>
 802bbfa:	ece0 7a01 	vstmia	r0!, {s15}
 802bbfe:	3701      	adds	r7, #1
 802bc00:	e7e7      	b.n	802bbd2 <__kernel_rem_pio2f+0x2ae>
 802bc02:	9804      	ldr	r0, [sp, #16]
 802bc04:	f04f 0c01 	mov.w	ip, #1
 802bc08:	e7d2      	b.n	802bbb0 <__kernel_rem_pio2f+0x28c>
 802bc0a:	ecfe 6a01 	vldmia	lr!, {s13}
 802bc0e:	ed39 7a01 	vldmdb	r9!, {s14}
 802bc12:	f10c 0c01 	add.w	ip, ip, #1
 802bc16:	eee6 7a87 	vfma.f32	s15, s13, s14
 802bc1a:	e7ec      	b.n	802bbf6 <__kernel_rem_pio2f+0x2d2>
 802bc1c:	3c01      	subs	r4, #1
 802bc1e:	e775      	b.n	802bb0c <__kernel_rem_pio2f+0x1e8>
 802bc20:	08032074 	.word	0x08032074
 802bc24:	08032048 	.word	0x08032048
 802bc28:	43800000 	.word	0x43800000
 802bc2c:	3b800000 	.word	0x3b800000
 802bc30:	00000000 	.word	0x00000000
 802bc34:	9b03      	ldr	r3, [sp, #12]
 802bc36:	eeb0 0a48 	vmov.f32	s0, s16
 802bc3a:	1a98      	subs	r0, r3, r2
 802bc3c:	f000 fa38 	bl	802c0b0 <scalbnf>
 802bc40:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 802bc28 <__kernel_rem_pio2f+0x304>
 802bc44:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802bc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bc4c:	db19      	blt.n	802bc82 <__kernel_rem_pio2f+0x35e>
 802bc4e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802bc2c <__kernel_rem_pio2f+0x308>
 802bc52:	ee60 7a27 	vmul.f32	s15, s0, s15
 802bc56:	aa08      	add	r2, sp, #32
 802bc58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802bc5c:	1c74      	adds	r4, r6, #1
 802bc5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802bc62:	3508      	adds	r5, #8
 802bc64:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802bc68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802bc6c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802bc70:	ee10 3a10 	vmov	r3, s0
 802bc74:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802bc78:	ee17 3a90 	vmov	r3, s15
 802bc7c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802bc80:	e74b      	b.n	802bb1a <__kernel_rem_pio2f+0x1f6>
 802bc82:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802bc86:	aa08      	add	r2, sp, #32
 802bc88:	ee10 3a10 	vmov	r3, s0
 802bc8c:	4634      	mov	r4, r6
 802bc8e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802bc92:	e742      	b.n	802bb1a <__kernel_rem_pio2f+0x1f6>
 802bc94:	a808      	add	r0, sp, #32
 802bc96:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 802bc9a:	9001      	str	r0, [sp, #4]
 802bc9c:	ee07 0a90 	vmov	s15, r0
 802bca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802bca4:	3a01      	subs	r2, #1
 802bca6:	ee67 7a80 	vmul.f32	s15, s15, s0
 802bcaa:	ee20 0a07 	vmul.f32	s0, s0, s14
 802bcae:	ed61 7a01 	vstmdb	r1!, {s15}
 802bcb2:	e73e      	b.n	802bb32 <__kernel_rem_pio2f+0x20e>
 802bcb4:	ecfc 6a01 	vldmia	ip!, {s13}
 802bcb8:	ecb6 7a01 	vldmia	r6!, {s14}
 802bcbc:	eee6 7a87 	vfma.f32	s15, s13, s14
 802bcc0:	3001      	adds	r0, #1
 802bcc2:	4550      	cmp	r0, sl
 802bcc4:	dc01      	bgt.n	802bcca <__kernel_rem_pio2f+0x3a6>
 802bcc6:	4288      	cmp	r0, r1
 802bcc8:	ddf4      	ble.n	802bcb4 <__kernel_rem_pio2f+0x390>
 802bcca:	a858      	add	r0, sp, #352	; 0x160
 802bccc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802bcd0:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 802bcd4:	3a01      	subs	r2, #1
 802bcd6:	e730      	b.n	802bb3a <__kernel_rem_pio2f+0x216>
 802bcd8:	9a66      	ldr	r2, [sp, #408]	; 0x198
 802bcda:	2a02      	cmp	r2, #2
 802bcdc:	dc09      	bgt.n	802bcf2 <__kernel_rem_pio2f+0x3ce>
 802bcde:	2a00      	cmp	r2, #0
 802bce0:	dc2a      	bgt.n	802bd38 <__kernel_rem_pio2f+0x414>
 802bce2:	d043      	beq.n	802bd6c <__kernel_rem_pio2f+0x448>
 802bce4:	f009 0007 	and.w	r0, r9, #7
 802bce8:	b059      	add	sp, #356	; 0x164
 802bcea:	ecbd 8b04 	vpop	{d8-d9}
 802bcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bcf2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 802bcf4:	2b03      	cmp	r3, #3
 802bcf6:	d1f5      	bne.n	802bce4 <__kernel_rem_pio2f+0x3c0>
 802bcf8:	ab30      	add	r3, sp, #192	; 0xc0
 802bcfa:	442b      	add	r3, r5
 802bcfc:	461a      	mov	r2, r3
 802bcfe:	4619      	mov	r1, r3
 802bd00:	4620      	mov	r0, r4
 802bd02:	2800      	cmp	r0, #0
 802bd04:	f1a1 0104 	sub.w	r1, r1, #4
 802bd08:	dc51      	bgt.n	802bdae <__kernel_rem_pio2f+0x48a>
 802bd0a:	4621      	mov	r1, r4
 802bd0c:	2901      	cmp	r1, #1
 802bd0e:	f1a2 0204 	sub.w	r2, r2, #4
 802bd12:	dc5c      	bgt.n	802bdce <__kernel_rem_pio2f+0x4aa>
 802bd14:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 802bc30 <__kernel_rem_pio2f+0x30c>
 802bd18:	3304      	adds	r3, #4
 802bd1a:	2c01      	cmp	r4, #1
 802bd1c:	dc67      	bgt.n	802bdee <__kernel_rem_pio2f+0x4ca>
 802bd1e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 802bd22:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 802bd26:	2f00      	cmp	r7, #0
 802bd28:	d167      	bne.n	802bdfa <__kernel_rem_pio2f+0x4d6>
 802bd2a:	edc8 6a00 	vstr	s13, [r8]
 802bd2e:	ed88 7a01 	vstr	s14, [r8, #4]
 802bd32:	edc8 7a02 	vstr	s15, [r8, #8]
 802bd36:	e7d5      	b.n	802bce4 <__kernel_rem_pio2f+0x3c0>
 802bd38:	aa30      	add	r2, sp, #192	; 0xc0
 802bd3a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 802bc30 <__kernel_rem_pio2f+0x30c>
 802bd3e:	4413      	add	r3, r2
 802bd40:	4622      	mov	r2, r4
 802bd42:	2a00      	cmp	r2, #0
 802bd44:	da24      	bge.n	802bd90 <__kernel_rem_pio2f+0x46c>
 802bd46:	b34f      	cbz	r7, 802bd9c <__kernel_rem_pio2f+0x478>
 802bd48:	eef1 7a47 	vneg.f32	s15, s14
 802bd4c:	edc8 7a00 	vstr	s15, [r8]
 802bd50:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 802bd54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bd58:	aa31      	add	r2, sp, #196	; 0xc4
 802bd5a:	2301      	movs	r3, #1
 802bd5c:	429c      	cmp	r4, r3
 802bd5e:	da20      	bge.n	802bda2 <__kernel_rem_pio2f+0x47e>
 802bd60:	b10f      	cbz	r7, 802bd66 <__kernel_rem_pio2f+0x442>
 802bd62:	eef1 7a67 	vneg.f32	s15, s15
 802bd66:	edc8 7a01 	vstr	s15, [r8, #4]
 802bd6a:	e7bb      	b.n	802bce4 <__kernel_rem_pio2f+0x3c0>
 802bd6c:	aa30      	add	r2, sp, #192	; 0xc0
 802bd6e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 802bc30 <__kernel_rem_pio2f+0x30c>
 802bd72:	4413      	add	r3, r2
 802bd74:	2c00      	cmp	r4, #0
 802bd76:	da05      	bge.n	802bd84 <__kernel_rem_pio2f+0x460>
 802bd78:	b10f      	cbz	r7, 802bd7e <__kernel_rem_pio2f+0x45a>
 802bd7a:	eef1 7a67 	vneg.f32	s15, s15
 802bd7e:	edc8 7a00 	vstr	s15, [r8]
 802bd82:	e7af      	b.n	802bce4 <__kernel_rem_pio2f+0x3c0>
 802bd84:	ed33 7a01 	vldmdb	r3!, {s14}
 802bd88:	3c01      	subs	r4, #1
 802bd8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802bd8e:	e7f1      	b.n	802bd74 <__kernel_rem_pio2f+0x450>
 802bd90:	ed73 7a01 	vldmdb	r3!, {s15}
 802bd94:	3a01      	subs	r2, #1
 802bd96:	ee37 7a27 	vadd.f32	s14, s14, s15
 802bd9a:	e7d2      	b.n	802bd42 <__kernel_rem_pio2f+0x41e>
 802bd9c:	eef0 7a47 	vmov.f32	s15, s14
 802bda0:	e7d4      	b.n	802bd4c <__kernel_rem_pio2f+0x428>
 802bda2:	ecb2 7a01 	vldmia	r2!, {s14}
 802bda6:	3301      	adds	r3, #1
 802bda8:	ee77 7a87 	vadd.f32	s15, s15, s14
 802bdac:	e7d6      	b.n	802bd5c <__kernel_rem_pio2f+0x438>
 802bdae:	edd1 7a00 	vldr	s15, [r1]
 802bdb2:	edd1 6a01 	vldr	s13, [r1, #4]
 802bdb6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802bdba:	3801      	subs	r0, #1
 802bdbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bdc0:	ed81 7a00 	vstr	s14, [r1]
 802bdc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802bdc8:	edc1 7a01 	vstr	s15, [r1, #4]
 802bdcc:	e799      	b.n	802bd02 <__kernel_rem_pio2f+0x3de>
 802bdce:	edd2 7a00 	vldr	s15, [r2]
 802bdd2:	edd2 6a01 	vldr	s13, [r2, #4]
 802bdd6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802bdda:	3901      	subs	r1, #1
 802bddc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bde0:	ed82 7a00 	vstr	s14, [r2]
 802bde4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802bde8:	edc2 7a01 	vstr	s15, [r2, #4]
 802bdec:	e78e      	b.n	802bd0c <__kernel_rem_pio2f+0x3e8>
 802bdee:	ed33 7a01 	vldmdb	r3!, {s14}
 802bdf2:	3c01      	subs	r4, #1
 802bdf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 802bdf8:	e78f      	b.n	802bd1a <__kernel_rem_pio2f+0x3f6>
 802bdfa:	eef1 6a66 	vneg.f32	s13, s13
 802bdfe:	eeb1 7a47 	vneg.f32	s14, s14
 802be02:	edc8 6a00 	vstr	s13, [r8]
 802be06:	ed88 7a01 	vstr	s14, [r8, #4]
 802be0a:	eef1 7a67 	vneg.f32	s15, s15
 802be0e:	e790      	b.n	802bd32 <__kernel_rem_pio2f+0x40e>

0802be10 <__kernel_sinf>:
 802be10:	ee10 3a10 	vmov	r3, s0
 802be14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802be18:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802be1c:	da04      	bge.n	802be28 <__kernel_sinf+0x18>
 802be1e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802be22:	ee17 3a90 	vmov	r3, s15
 802be26:	b35b      	cbz	r3, 802be80 <__kernel_sinf+0x70>
 802be28:	ee20 7a00 	vmul.f32	s14, s0, s0
 802be2c:	eddf 7a15 	vldr	s15, [pc, #84]	; 802be84 <__kernel_sinf+0x74>
 802be30:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802be88 <__kernel_sinf+0x78>
 802be34:	eea7 6a27 	vfma.f32	s12, s14, s15
 802be38:	eddf 7a14 	vldr	s15, [pc, #80]	; 802be8c <__kernel_sinf+0x7c>
 802be3c:	eee6 7a07 	vfma.f32	s15, s12, s14
 802be40:	ed9f 6a13 	vldr	s12, [pc, #76]	; 802be90 <__kernel_sinf+0x80>
 802be44:	eea7 6a87 	vfma.f32	s12, s15, s14
 802be48:	eddf 7a12 	vldr	s15, [pc, #72]	; 802be94 <__kernel_sinf+0x84>
 802be4c:	ee60 6a07 	vmul.f32	s13, s0, s14
 802be50:	eee6 7a07 	vfma.f32	s15, s12, s14
 802be54:	b930      	cbnz	r0, 802be64 <__kernel_sinf+0x54>
 802be56:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802be98 <__kernel_sinf+0x88>
 802be5a:	eea7 6a27 	vfma.f32	s12, s14, s15
 802be5e:	eea6 0a26 	vfma.f32	s0, s12, s13
 802be62:	4770      	bx	lr
 802be64:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802be68:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802be6c:	eee0 7a86 	vfma.f32	s15, s1, s12
 802be70:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802be74:	eddf 7a09 	vldr	s15, [pc, #36]	; 802be9c <__kernel_sinf+0x8c>
 802be78:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802be7c:	ee30 0a60 	vsub.f32	s0, s0, s1
 802be80:	4770      	bx	lr
 802be82:	bf00      	nop
 802be84:	2f2ec9d3 	.word	0x2f2ec9d3
 802be88:	b2d72f34 	.word	0xb2d72f34
 802be8c:	3638ef1b 	.word	0x3638ef1b
 802be90:	b9500d01 	.word	0xb9500d01
 802be94:	3c088889 	.word	0x3c088889
 802be98:	be2aaaab 	.word	0xbe2aaaab
 802be9c:	3e2aaaab 	.word	0x3e2aaaab

0802bea0 <with_errno>:
 802bea0:	b570      	push	{r4, r5, r6, lr}
 802bea2:	4604      	mov	r4, r0
 802bea4:	460d      	mov	r5, r1
 802bea6:	4616      	mov	r6, r2
 802bea8:	f000 f9a2 	bl	802c1f0 <__errno>
 802beac:	4629      	mov	r1, r5
 802beae:	6006      	str	r6, [r0, #0]
 802beb0:	4620      	mov	r0, r4
 802beb2:	bd70      	pop	{r4, r5, r6, pc}

0802beb4 <xflow>:
 802beb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802beb6:	4614      	mov	r4, r2
 802beb8:	461d      	mov	r5, r3
 802beba:	b108      	cbz	r0, 802bec0 <xflow+0xc>
 802bebc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802bec0:	e9cd 2300 	strd	r2, r3, [sp]
 802bec4:	e9dd 2300 	ldrd	r2, r3, [sp]
 802bec8:	4620      	mov	r0, r4
 802beca:	4629      	mov	r1, r5
 802becc:	f7d4 fbbe 	bl	800064c <__aeabi_dmul>
 802bed0:	2222      	movs	r2, #34	; 0x22
 802bed2:	b003      	add	sp, #12
 802bed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802bed8:	f7ff bfe2 	b.w	802bea0 <with_errno>

0802bedc <__math_uflow>:
 802bedc:	b508      	push	{r3, lr}
 802bede:	2200      	movs	r2, #0
 802bee0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 802bee4:	f7ff ffe6 	bl	802beb4 <xflow>
 802bee8:	ec41 0b10 	vmov	d0, r0, r1
 802beec:	bd08      	pop	{r3, pc}

0802beee <__math_oflow>:
 802beee:	b508      	push	{r3, lr}
 802bef0:	2200      	movs	r2, #0
 802bef2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 802bef6:	f7ff ffdd 	bl	802beb4 <xflow>
 802befa:	ec41 0b10 	vmov	d0, r0, r1
 802befe:	bd08      	pop	{r3, pc}

0802bf00 <with_errnof>:
 802bf00:	b513      	push	{r0, r1, r4, lr}
 802bf02:	4604      	mov	r4, r0
 802bf04:	ed8d 0a01 	vstr	s0, [sp, #4]
 802bf08:	f000 f972 	bl	802c1f0 <__errno>
 802bf0c:	ed9d 0a01 	vldr	s0, [sp, #4]
 802bf10:	6004      	str	r4, [r0, #0]
 802bf12:	b002      	add	sp, #8
 802bf14:	bd10      	pop	{r4, pc}

0802bf16 <xflowf>:
 802bf16:	b130      	cbz	r0, 802bf26 <xflowf+0x10>
 802bf18:	eef1 7a40 	vneg.f32	s15, s0
 802bf1c:	ee27 0a80 	vmul.f32	s0, s15, s0
 802bf20:	2022      	movs	r0, #34	; 0x22
 802bf22:	f7ff bfed 	b.w	802bf00 <with_errnof>
 802bf26:	eef0 7a40 	vmov.f32	s15, s0
 802bf2a:	e7f7      	b.n	802bf1c <xflowf+0x6>

0802bf2c <__math_uflowf>:
 802bf2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802bf34 <__math_uflowf+0x8>
 802bf30:	f7ff bff1 	b.w	802bf16 <xflowf>
 802bf34:	10000000 	.word	0x10000000

0802bf38 <__math_oflowf>:
 802bf38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802bf40 <__math_oflowf+0x8>
 802bf3c:	f7ff bfeb 	b.w	802bf16 <xflowf>
 802bf40:	70000000 	.word	0x70000000

0802bf44 <fabs>:
 802bf44:	ec51 0b10 	vmov	r0, r1, d0
 802bf48:	ee10 2a10 	vmov	r2, s0
 802bf4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802bf50:	ec43 2b10 	vmov	d0, r2, r3
 802bf54:	4770      	bx	lr

0802bf56 <finite>:
 802bf56:	b082      	sub	sp, #8
 802bf58:	ed8d 0b00 	vstr	d0, [sp]
 802bf5c:	9801      	ldr	r0, [sp, #4]
 802bf5e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 802bf62:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802bf66:	0fc0      	lsrs	r0, r0, #31
 802bf68:	b002      	add	sp, #8
 802bf6a:	4770      	bx	lr
 802bf6c:	0000      	movs	r0, r0
	...

0802bf70 <scalbn>:
 802bf70:	b570      	push	{r4, r5, r6, lr}
 802bf72:	ec55 4b10 	vmov	r4, r5, d0
 802bf76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802bf7a:	4606      	mov	r6, r0
 802bf7c:	462b      	mov	r3, r5
 802bf7e:	b99a      	cbnz	r2, 802bfa8 <scalbn+0x38>
 802bf80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802bf84:	4323      	orrs	r3, r4
 802bf86:	d036      	beq.n	802bff6 <scalbn+0x86>
 802bf88:	4b39      	ldr	r3, [pc, #228]	; (802c070 <scalbn+0x100>)
 802bf8a:	4629      	mov	r1, r5
 802bf8c:	ee10 0a10 	vmov	r0, s0
 802bf90:	2200      	movs	r2, #0
 802bf92:	f7d4 fb5b 	bl	800064c <__aeabi_dmul>
 802bf96:	4b37      	ldr	r3, [pc, #220]	; (802c074 <scalbn+0x104>)
 802bf98:	429e      	cmp	r6, r3
 802bf9a:	4604      	mov	r4, r0
 802bf9c:	460d      	mov	r5, r1
 802bf9e:	da10      	bge.n	802bfc2 <scalbn+0x52>
 802bfa0:	a32b      	add	r3, pc, #172	; (adr r3, 802c050 <scalbn+0xe0>)
 802bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bfa6:	e03a      	b.n	802c01e <scalbn+0xae>
 802bfa8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802bfac:	428a      	cmp	r2, r1
 802bfae:	d10c      	bne.n	802bfca <scalbn+0x5a>
 802bfb0:	ee10 2a10 	vmov	r2, s0
 802bfb4:	4620      	mov	r0, r4
 802bfb6:	4629      	mov	r1, r5
 802bfb8:	f7d4 f992 	bl	80002e0 <__adddf3>
 802bfbc:	4604      	mov	r4, r0
 802bfbe:	460d      	mov	r5, r1
 802bfc0:	e019      	b.n	802bff6 <scalbn+0x86>
 802bfc2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802bfc6:	460b      	mov	r3, r1
 802bfc8:	3a36      	subs	r2, #54	; 0x36
 802bfca:	4432      	add	r2, r6
 802bfcc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 802bfd0:	428a      	cmp	r2, r1
 802bfd2:	dd08      	ble.n	802bfe6 <scalbn+0x76>
 802bfd4:	2d00      	cmp	r5, #0
 802bfd6:	a120      	add	r1, pc, #128	; (adr r1, 802c058 <scalbn+0xe8>)
 802bfd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 802bfdc:	da1c      	bge.n	802c018 <scalbn+0xa8>
 802bfde:	a120      	add	r1, pc, #128	; (adr r1, 802c060 <scalbn+0xf0>)
 802bfe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 802bfe4:	e018      	b.n	802c018 <scalbn+0xa8>
 802bfe6:	2a00      	cmp	r2, #0
 802bfe8:	dd08      	ble.n	802bffc <scalbn+0x8c>
 802bfea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802bfee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802bff2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802bff6:	ec45 4b10 	vmov	d0, r4, r5
 802bffa:	bd70      	pop	{r4, r5, r6, pc}
 802bffc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802c000:	da19      	bge.n	802c036 <scalbn+0xc6>
 802c002:	f24c 3350 	movw	r3, #50000	; 0xc350
 802c006:	429e      	cmp	r6, r3
 802c008:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 802c00c:	dd0a      	ble.n	802c024 <scalbn+0xb4>
 802c00e:	a112      	add	r1, pc, #72	; (adr r1, 802c058 <scalbn+0xe8>)
 802c010:	e9d1 0100 	ldrd	r0, r1, [r1]
 802c014:	2b00      	cmp	r3, #0
 802c016:	d1e2      	bne.n	802bfde <scalbn+0x6e>
 802c018:	a30f      	add	r3, pc, #60	; (adr r3, 802c058 <scalbn+0xe8>)
 802c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c01e:	f7d4 fb15 	bl	800064c <__aeabi_dmul>
 802c022:	e7cb      	b.n	802bfbc <scalbn+0x4c>
 802c024:	a10a      	add	r1, pc, #40	; (adr r1, 802c050 <scalbn+0xe0>)
 802c026:	e9d1 0100 	ldrd	r0, r1, [r1]
 802c02a:	2b00      	cmp	r3, #0
 802c02c:	d0b8      	beq.n	802bfa0 <scalbn+0x30>
 802c02e:	a10e      	add	r1, pc, #56	; (adr r1, 802c068 <scalbn+0xf8>)
 802c030:	e9d1 0100 	ldrd	r0, r1, [r1]
 802c034:	e7b4      	b.n	802bfa0 <scalbn+0x30>
 802c036:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802c03a:	3236      	adds	r2, #54	; 0x36
 802c03c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802c040:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802c044:	4620      	mov	r0, r4
 802c046:	4b0c      	ldr	r3, [pc, #48]	; (802c078 <scalbn+0x108>)
 802c048:	2200      	movs	r2, #0
 802c04a:	e7e8      	b.n	802c01e <scalbn+0xae>
 802c04c:	f3af 8000 	nop.w
 802c050:	c2f8f359 	.word	0xc2f8f359
 802c054:	01a56e1f 	.word	0x01a56e1f
 802c058:	8800759c 	.word	0x8800759c
 802c05c:	7e37e43c 	.word	0x7e37e43c
 802c060:	8800759c 	.word	0x8800759c
 802c064:	fe37e43c 	.word	0xfe37e43c
 802c068:	c2f8f359 	.word	0xc2f8f359
 802c06c:	81a56e1f 	.word	0x81a56e1f
 802c070:	43500000 	.word	0x43500000
 802c074:	ffff3cb0 	.word	0xffff3cb0
 802c078:	3c900000 	.word	0x3c900000

0802c07c <fabsf>:
 802c07c:	ee10 3a10 	vmov	r3, s0
 802c080:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c084:	ee00 3a10 	vmov	s0, r3
 802c088:	4770      	bx	lr

0802c08a <finitef>:
 802c08a:	b082      	sub	sp, #8
 802c08c:	ed8d 0a01 	vstr	s0, [sp, #4]
 802c090:	9801      	ldr	r0, [sp, #4]
 802c092:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802c096:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 802c09a:	bfac      	ite	ge
 802c09c:	2000      	movge	r0, #0
 802c09e:	2001      	movlt	r0, #1
 802c0a0:	b002      	add	sp, #8
 802c0a2:	4770      	bx	lr

0802c0a4 <nanf>:
 802c0a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802c0ac <nanf+0x8>
 802c0a8:	4770      	bx	lr
 802c0aa:	bf00      	nop
 802c0ac:	7fc00000 	.word	0x7fc00000

0802c0b0 <scalbnf>:
 802c0b0:	ee10 3a10 	vmov	r3, s0
 802c0b4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802c0b8:	d025      	beq.n	802c106 <scalbnf+0x56>
 802c0ba:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802c0be:	d302      	bcc.n	802c0c6 <scalbnf+0x16>
 802c0c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 802c0c4:	4770      	bx	lr
 802c0c6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802c0ca:	d122      	bne.n	802c112 <scalbnf+0x62>
 802c0cc:	4b2a      	ldr	r3, [pc, #168]	; (802c178 <scalbnf+0xc8>)
 802c0ce:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802c17c <scalbnf+0xcc>
 802c0d2:	4298      	cmp	r0, r3
 802c0d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 802c0d8:	db16      	blt.n	802c108 <scalbnf+0x58>
 802c0da:	ee10 3a10 	vmov	r3, s0
 802c0de:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802c0e2:	3a19      	subs	r2, #25
 802c0e4:	4402      	add	r2, r0
 802c0e6:	2afe      	cmp	r2, #254	; 0xfe
 802c0e8:	dd15      	ble.n	802c116 <scalbnf+0x66>
 802c0ea:	ee10 3a10 	vmov	r3, s0
 802c0ee:	eddf 7a24 	vldr	s15, [pc, #144]	; 802c180 <scalbnf+0xd0>
 802c0f2:	eddf 6a24 	vldr	s13, [pc, #144]	; 802c184 <scalbnf+0xd4>
 802c0f6:	2b00      	cmp	r3, #0
 802c0f8:	eeb0 7a67 	vmov.f32	s14, s15
 802c0fc:	bfb8      	it	lt
 802c0fe:	eef0 7a66 	vmovlt.f32	s15, s13
 802c102:	ee27 0a27 	vmul.f32	s0, s14, s15
 802c106:	4770      	bx	lr
 802c108:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802c188 <scalbnf+0xd8>
 802c10c:	ee20 0a27 	vmul.f32	s0, s0, s15
 802c110:	4770      	bx	lr
 802c112:	0dd2      	lsrs	r2, r2, #23
 802c114:	e7e6      	b.n	802c0e4 <scalbnf+0x34>
 802c116:	2a00      	cmp	r2, #0
 802c118:	dd06      	ble.n	802c128 <scalbnf+0x78>
 802c11a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802c11e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802c122:	ee00 3a10 	vmov	s0, r3
 802c126:	4770      	bx	lr
 802c128:	f112 0f16 	cmn.w	r2, #22
 802c12c:	da1a      	bge.n	802c164 <scalbnf+0xb4>
 802c12e:	f24c 3350 	movw	r3, #50000	; 0xc350
 802c132:	4298      	cmp	r0, r3
 802c134:	ee10 3a10 	vmov	r3, s0
 802c138:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802c13c:	dd0a      	ble.n	802c154 <scalbnf+0xa4>
 802c13e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 802c180 <scalbnf+0xd0>
 802c142:	ed9f 7a10 	vldr	s14, [pc, #64]	; 802c184 <scalbnf+0xd4>
 802c146:	eef0 7a40 	vmov.f32	s15, s0
 802c14a:	2b00      	cmp	r3, #0
 802c14c:	bf18      	it	ne
 802c14e:	eeb0 0a47 	vmovne.f32	s0, s14
 802c152:	e7db      	b.n	802c10c <scalbnf+0x5c>
 802c154:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 802c188 <scalbnf+0xd8>
 802c158:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 802c18c <scalbnf+0xdc>
 802c15c:	eef0 7a40 	vmov.f32	s15, s0
 802c160:	2b00      	cmp	r3, #0
 802c162:	e7f3      	b.n	802c14c <scalbnf+0x9c>
 802c164:	3219      	adds	r2, #25
 802c166:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802c16a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802c16e:	eddf 7a08 	vldr	s15, [pc, #32]	; 802c190 <scalbnf+0xe0>
 802c172:	ee07 3a10 	vmov	s14, r3
 802c176:	e7c4      	b.n	802c102 <scalbnf+0x52>
 802c178:	ffff3cb0 	.word	0xffff3cb0
 802c17c:	4c000000 	.word	0x4c000000
 802c180:	7149f2ca 	.word	0x7149f2ca
 802c184:	f149f2ca 	.word	0xf149f2ca
 802c188:	0da24260 	.word	0x0da24260
 802c18c:	8da24260 	.word	0x8da24260
 802c190:	33000000 	.word	0x33000000

0802c194 <abort>:
 802c194:	b508      	push	{r3, lr}
 802c196:	2006      	movs	r0, #6
 802c198:	f000 fd54 	bl	802cc44 <raise>
 802c19c:	2001      	movs	r0, #1
 802c19e:	f7db fc53 	bl	8007a48 <_exit>
	...

0802c1a4 <__assert_func>:
 802c1a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802c1a6:	4614      	mov	r4, r2
 802c1a8:	461a      	mov	r2, r3
 802c1aa:	4b09      	ldr	r3, [pc, #36]	; (802c1d0 <__assert_func+0x2c>)
 802c1ac:	681b      	ldr	r3, [r3, #0]
 802c1ae:	4605      	mov	r5, r0
 802c1b0:	68d8      	ldr	r0, [r3, #12]
 802c1b2:	b14c      	cbz	r4, 802c1c8 <__assert_func+0x24>
 802c1b4:	4b07      	ldr	r3, [pc, #28]	; (802c1d4 <__assert_func+0x30>)
 802c1b6:	9100      	str	r1, [sp, #0]
 802c1b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802c1bc:	4906      	ldr	r1, [pc, #24]	; (802c1d8 <__assert_func+0x34>)
 802c1be:	462b      	mov	r3, r5
 802c1c0:	f000 f81c 	bl	802c1fc <fiprintf>
 802c1c4:	f7ff ffe6 	bl	802c194 <abort>
 802c1c8:	4b04      	ldr	r3, [pc, #16]	; (802c1dc <__assert_func+0x38>)
 802c1ca:	461c      	mov	r4, r3
 802c1cc:	e7f3      	b.n	802c1b6 <__assert_func+0x12>
 802c1ce:	bf00      	nop
 802c1d0:	2000029c 	.word	0x2000029c
 802c1d4:	08032080 	.word	0x08032080
 802c1d8:	0803208d 	.word	0x0803208d
 802c1dc:	080320bb 	.word	0x080320bb

0802c1e0 <calloc>:
 802c1e0:	4b02      	ldr	r3, [pc, #8]	; (802c1ec <calloc+0xc>)
 802c1e2:	460a      	mov	r2, r1
 802c1e4:	4601      	mov	r1, r0
 802c1e6:	6818      	ldr	r0, [r3, #0]
 802c1e8:	f000 b882 	b.w	802c2f0 <_calloc_r>
 802c1ec:	2000029c 	.word	0x2000029c

0802c1f0 <__errno>:
 802c1f0:	4b01      	ldr	r3, [pc, #4]	; (802c1f8 <__errno+0x8>)
 802c1f2:	6818      	ldr	r0, [r3, #0]
 802c1f4:	4770      	bx	lr
 802c1f6:	bf00      	nop
 802c1f8:	2000029c 	.word	0x2000029c

0802c1fc <fiprintf>:
 802c1fc:	b40e      	push	{r1, r2, r3}
 802c1fe:	b503      	push	{r0, r1, lr}
 802c200:	4601      	mov	r1, r0
 802c202:	ab03      	add	r3, sp, #12
 802c204:	4805      	ldr	r0, [pc, #20]	; (802c21c <fiprintf+0x20>)
 802c206:	f853 2b04 	ldr.w	r2, [r3], #4
 802c20a:	6800      	ldr	r0, [r0, #0]
 802c20c:	9301      	str	r3, [sp, #4]
 802c20e:	f000 f98f 	bl	802c530 <_vfiprintf_r>
 802c212:	b002      	add	sp, #8
 802c214:	f85d eb04 	ldr.w	lr, [sp], #4
 802c218:	b003      	add	sp, #12
 802c21a:	4770      	bx	lr
 802c21c:	2000029c 	.word	0x2000029c

0802c220 <__libc_init_array>:
 802c220:	b570      	push	{r4, r5, r6, lr}
 802c222:	4d0d      	ldr	r5, [pc, #52]	; (802c258 <__libc_init_array+0x38>)
 802c224:	4c0d      	ldr	r4, [pc, #52]	; (802c25c <__libc_init_array+0x3c>)
 802c226:	1b64      	subs	r4, r4, r5
 802c228:	10a4      	asrs	r4, r4, #2
 802c22a:	2600      	movs	r6, #0
 802c22c:	42a6      	cmp	r6, r4
 802c22e:	d109      	bne.n	802c244 <__libc_init_array+0x24>
 802c230:	4d0b      	ldr	r5, [pc, #44]	; (802c260 <__libc_init_array+0x40>)
 802c232:	4c0c      	ldr	r4, [pc, #48]	; (802c264 <__libc_init_array+0x44>)
 802c234:	f001 fa68 	bl	802d708 <_init>
 802c238:	1b64      	subs	r4, r4, r5
 802c23a:	10a4      	asrs	r4, r4, #2
 802c23c:	2600      	movs	r6, #0
 802c23e:	42a6      	cmp	r6, r4
 802c240:	d105      	bne.n	802c24e <__libc_init_array+0x2e>
 802c242:	bd70      	pop	{r4, r5, r6, pc}
 802c244:	f855 3b04 	ldr.w	r3, [r5], #4
 802c248:	4798      	blx	r3
 802c24a:	3601      	adds	r6, #1
 802c24c:	e7ee      	b.n	802c22c <__libc_init_array+0xc>
 802c24e:	f855 3b04 	ldr.w	r3, [r5], #4
 802c252:	4798      	blx	r3
 802c254:	3601      	adds	r6, #1
 802c256:	e7f2      	b.n	802c23e <__libc_init_array+0x1e>
 802c258:	0803215c 	.word	0x0803215c
 802c25c:	0803215c 	.word	0x0803215c
 802c260:	0803215c 	.word	0x0803215c
 802c264:	08032164 	.word	0x08032164

0802c268 <__retarget_lock_init_recursive>:
 802c268:	4770      	bx	lr

0802c26a <__retarget_lock_acquire_recursive>:
 802c26a:	4770      	bx	lr

0802c26c <__retarget_lock_release_recursive>:
 802c26c:	4770      	bx	lr
	...

0802c270 <malloc>:
 802c270:	4b02      	ldr	r3, [pc, #8]	; (802c27c <malloc+0xc>)
 802c272:	4601      	mov	r1, r0
 802c274:	6818      	ldr	r0, [r3, #0]
 802c276:	f000 b8bd 	b.w	802c3f4 <_malloc_r>
 802c27a:	bf00      	nop
 802c27c:	2000029c 	.word	0x2000029c

0802c280 <free>:
 802c280:	4b02      	ldr	r3, [pc, #8]	; (802c28c <free+0xc>)
 802c282:	4601      	mov	r1, r0
 802c284:	6818      	ldr	r0, [r3, #0]
 802c286:	f000 b849 	b.w	802c31c <_free_r>
 802c28a:	bf00      	nop
 802c28c:	2000029c 	.word	0x2000029c

0802c290 <memcpy>:
 802c290:	440a      	add	r2, r1
 802c292:	4291      	cmp	r1, r2
 802c294:	f100 33ff 	add.w	r3, r0, #4294967295
 802c298:	d100      	bne.n	802c29c <memcpy+0xc>
 802c29a:	4770      	bx	lr
 802c29c:	b510      	push	{r4, lr}
 802c29e:	f811 4b01 	ldrb.w	r4, [r1], #1
 802c2a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 802c2a6:	4291      	cmp	r1, r2
 802c2a8:	d1f9      	bne.n	802c29e <memcpy+0xe>
 802c2aa:	bd10      	pop	{r4, pc}

0802c2ac <memmove>:
 802c2ac:	4288      	cmp	r0, r1
 802c2ae:	b510      	push	{r4, lr}
 802c2b0:	eb01 0402 	add.w	r4, r1, r2
 802c2b4:	d902      	bls.n	802c2bc <memmove+0x10>
 802c2b6:	4284      	cmp	r4, r0
 802c2b8:	4623      	mov	r3, r4
 802c2ba:	d807      	bhi.n	802c2cc <memmove+0x20>
 802c2bc:	1e43      	subs	r3, r0, #1
 802c2be:	42a1      	cmp	r1, r4
 802c2c0:	d008      	beq.n	802c2d4 <memmove+0x28>
 802c2c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c2c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 802c2ca:	e7f8      	b.n	802c2be <memmove+0x12>
 802c2cc:	4402      	add	r2, r0
 802c2ce:	4601      	mov	r1, r0
 802c2d0:	428a      	cmp	r2, r1
 802c2d2:	d100      	bne.n	802c2d6 <memmove+0x2a>
 802c2d4:	bd10      	pop	{r4, pc}
 802c2d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802c2da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802c2de:	e7f7      	b.n	802c2d0 <memmove+0x24>

0802c2e0 <memset>:
 802c2e0:	4402      	add	r2, r0
 802c2e2:	4603      	mov	r3, r0
 802c2e4:	4293      	cmp	r3, r2
 802c2e6:	d100      	bne.n	802c2ea <memset+0xa>
 802c2e8:	4770      	bx	lr
 802c2ea:	f803 1b01 	strb.w	r1, [r3], #1
 802c2ee:	e7f9      	b.n	802c2e4 <memset+0x4>

0802c2f0 <_calloc_r>:
 802c2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c2f2:	fba1 2402 	umull	r2, r4, r1, r2
 802c2f6:	b94c      	cbnz	r4, 802c30c <_calloc_r+0x1c>
 802c2f8:	4611      	mov	r1, r2
 802c2fa:	9201      	str	r2, [sp, #4]
 802c2fc:	f000 f87a 	bl	802c3f4 <_malloc_r>
 802c300:	9a01      	ldr	r2, [sp, #4]
 802c302:	4605      	mov	r5, r0
 802c304:	b930      	cbnz	r0, 802c314 <_calloc_r+0x24>
 802c306:	4628      	mov	r0, r5
 802c308:	b003      	add	sp, #12
 802c30a:	bd30      	pop	{r4, r5, pc}
 802c30c:	220c      	movs	r2, #12
 802c30e:	6002      	str	r2, [r0, #0]
 802c310:	2500      	movs	r5, #0
 802c312:	e7f8      	b.n	802c306 <_calloc_r+0x16>
 802c314:	4621      	mov	r1, r4
 802c316:	f7ff ffe3 	bl	802c2e0 <memset>
 802c31a:	e7f4      	b.n	802c306 <_calloc_r+0x16>

0802c31c <_free_r>:
 802c31c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c31e:	2900      	cmp	r1, #0
 802c320:	d044      	beq.n	802c3ac <_free_r+0x90>
 802c322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c326:	9001      	str	r0, [sp, #4]
 802c328:	2b00      	cmp	r3, #0
 802c32a:	f1a1 0404 	sub.w	r4, r1, #4
 802c32e:	bfb8      	it	lt
 802c330:	18e4      	addlt	r4, r4, r3
 802c332:	f000 ff9f 	bl	802d274 <__malloc_lock>
 802c336:	4a1e      	ldr	r2, [pc, #120]	; (802c3b0 <_free_r+0x94>)
 802c338:	9801      	ldr	r0, [sp, #4]
 802c33a:	6813      	ldr	r3, [r2, #0]
 802c33c:	b933      	cbnz	r3, 802c34c <_free_r+0x30>
 802c33e:	6063      	str	r3, [r4, #4]
 802c340:	6014      	str	r4, [r2, #0]
 802c342:	b003      	add	sp, #12
 802c344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c348:	f000 bf9a 	b.w	802d280 <__malloc_unlock>
 802c34c:	42a3      	cmp	r3, r4
 802c34e:	d908      	bls.n	802c362 <_free_r+0x46>
 802c350:	6825      	ldr	r5, [r4, #0]
 802c352:	1961      	adds	r1, r4, r5
 802c354:	428b      	cmp	r3, r1
 802c356:	bf01      	itttt	eq
 802c358:	6819      	ldreq	r1, [r3, #0]
 802c35a:	685b      	ldreq	r3, [r3, #4]
 802c35c:	1949      	addeq	r1, r1, r5
 802c35e:	6021      	streq	r1, [r4, #0]
 802c360:	e7ed      	b.n	802c33e <_free_r+0x22>
 802c362:	461a      	mov	r2, r3
 802c364:	685b      	ldr	r3, [r3, #4]
 802c366:	b10b      	cbz	r3, 802c36c <_free_r+0x50>
 802c368:	42a3      	cmp	r3, r4
 802c36a:	d9fa      	bls.n	802c362 <_free_r+0x46>
 802c36c:	6811      	ldr	r1, [r2, #0]
 802c36e:	1855      	adds	r5, r2, r1
 802c370:	42a5      	cmp	r5, r4
 802c372:	d10b      	bne.n	802c38c <_free_r+0x70>
 802c374:	6824      	ldr	r4, [r4, #0]
 802c376:	4421      	add	r1, r4
 802c378:	1854      	adds	r4, r2, r1
 802c37a:	42a3      	cmp	r3, r4
 802c37c:	6011      	str	r1, [r2, #0]
 802c37e:	d1e0      	bne.n	802c342 <_free_r+0x26>
 802c380:	681c      	ldr	r4, [r3, #0]
 802c382:	685b      	ldr	r3, [r3, #4]
 802c384:	6053      	str	r3, [r2, #4]
 802c386:	4421      	add	r1, r4
 802c388:	6011      	str	r1, [r2, #0]
 802c38a:	e7da      	b.n	802c342 <_free_r+0x26>
 802c38c:	d902      	bls.n	802c394 <_free_r+0x78>
 802c38e:	230c      	movs	r3, #12
 802c390:	6003      	str	r3, [r0, #0]
 802c392:	e7d6      	b.n	802c342 <_free_r+0x26>
 802c394:	6825      	ldr	r5, [r4, #0]
 802c396:	1961      	adds	r1, r4, r5
 802c398:	428b      	cmp	r3, r1
 802c39a:	bf04      	itt	eq
 802c39c:	6819      	ldreq	r1, [r3, #0]
 802c39e:	685b      	ldreq	r3, [r3, #4]
 802c3a0:	6063      	str	r3, [r4, #4]
 802c3a2:	bf04      	itt	eq
 802c3a4:	1949      	addeq	r1, r1, r5
 802c3a6:	6021      	streq	r1, [r4, #0]
 802c3a8:	6054      	str	r4, [r2, #4]
 802c3aa:	e7ca      	b.n	802c342 <_free_r+0x26>
 802c3ac:	b003      	add	sp, #12
 802c3ae:	bd30      	pop	{r4, r5, pc}
 802c3b0:	20007334 	.word	0x20007334

0802c3b4 <sbrk_aligned>:
 802c3b4:	b570      	push	{r4, r5, r6, lr}
 802c3b6:	4e0e      	ldr	r6, [pc, #56]	; (802c3f0 <sbrk_aligned+0x3c>)
 802c3b8:	460c      	mov	r4, r1
 802c3ba:	6831      	ldr	r1, [r6, #0]
 802c3bc:	4605      	mov	r5, r0
 802c3be:	b911      	cbnz	r1, 802c3c6 <sbrk_aligned+0x12>
 802c3c0:	f000 fc08 	bl	802cbd4 <_sbrk_r>
 802c3c4:	6030      	str	r0, [r6, #0]
 802c3c6:	4621      	mov	r1, r4
 802c3c8:	4628      	mov	r0, r5
 802c3ca:	f000 fc03 	bl	802cbd4 <_sbrk_r>
 802c3ce:	1c43      	adds	r3, r0, #1
 802c3d0:	d00a      	beq.n	802c3e8 <sbrk_aligned+0x34>
 802c3d2:	1cc4      	adds	r4, r0, #3
 802c3d4:	f024 0403 	bic.w	r4, r4, #3
 802c3d8:	42a0      	cmp	r0, r4
 802c3da:	d007      	beq.n	802c3ec <sbrk_aligned+0x38>
 802c3dc:	1a21      	subs	r1, r4, r0
 802c3de:	4628      	mov	r0, r5
 802c3e0:	f000 fbf8 	bl	802cbd4 <_sbrk_r>
 802c3e4:	3001      	adds	r0, #1
 802c3e6:	d101      	bne.n	802c3ec <sbrk_aligned+0x38>
 802c3e8:	f04f 34ff 	mov.w	r4, #4294967295
 802c3ec:	4620      	mov	r0, r4
 802c3ee:	bd70      	pop	{r4, r5, r6, pc}
 802c3f0:	20007338 	.word	0x20007338

0802c3f4 <_malloc_r>:
 802c3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c3f8:	1ccd      	adds	r5, r1, #3
 802c3fa:	f025 0503 	bic.w	r5, r5, #3
 802c3fe:	3508      	adds	r5, #8
 802c400:	2d0c      	cmp	r5, #12
 802c402:	bf38      	it	cc
 802c404:	250c      	movcc	r5, #12
 802c406:	2d00      	cmp	r5, #0
 802c408:	4607      	mov	r7, r0
 802c40a:	db01      	blt.n	802c410 <_malloc_r+0x1c>
 802c40c:	42a9      	cmp	r1, r5
 802c40e:	d905      	bls.n	802c41c <_malloc_r+0x28>
 802c410:	230c      	movs	r3, #12
 802c412:	603b      	str	r3, [r7, #0]
 802c414:	2600      	movs	r6, #0
 802c416:	4630      	mov	r0, r6
 802c418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c41c:	4e2e      	ldr	r6, [pc, #184]	; (802c4d8 <_malloc_r+0xe4>)
 802c41e:	f000 ff29 	bl	802d274 <__malloc_lock>
 802c422:	6833      	ldr	r3, [r6, #0]
 802c424:	461c      	mov	r4, r3
 802c426:	bb34      	cbnz	r4, 802c476 <_malloc_r+0x82>
 802c428:	4629      	mov	r1, r5
 802c42a:	4638      	mov	r0, r7
 802c42c:	f7ff ffc2 	bl	802c3b4 <sbrk_aligned>
 802c430:	1c43      	adds	r3, r0, #1
 802c432:	4604      	mov	r4, r0
 802c434:	d14d      	bne.n	802c4d2 <_malloc_r+0xde>
 802c436:	6834      	ldr	r4, [r6, #0]
 802c438:	4626      	mov	r6, r4
 802c43a:	2e00      	cmp	r6, #0
 802c43c:	d140      	bne.n	802c4c0 <_malloc_r+0xcc>
 802c43e:	6823      	ldr	r3, [r4, #0]
 802c440:	4631      	mov	r1, r6
 802c442:	4638      	mov	r0, r7
 802c444:	eb04 0803 	add.w	r8, r4, r3
 802c448:	f000 fbc4 	bl	802cbd4 <_sbrk_r>
 802c44c:	4580      	cmp	r8, r0
 802c44e:	d13a      	bne.n	802c4c6 <_malloc_r+0xd2>
 802c450:	6821      	ldr	r1, [r4, #0]
 802c452:	3503      	adds	r5, #3
 802c454:	1a6d      	subs	r5, r5, r1
 802c456:	f025 0503 	bic.w	r5, r5, #3
 802c45a:	3508      	adds	r5, #8
 802c45c:	2d0c      	cmp	r5, #12
 802c45e:	bf38      	it	cc
 802c460:	250c      	movcc	r5, #12
 802c462:	4629      	mov	r1, r5
 802c464:	4638      	mov	r0, r7
 802c466:	f7ff ffa5 	bl	802c3b4 <sbrk_aligned>
 802c46a:	3001      	adds	r0, #1
 802c46c:	d02b      	beq.n	802c4c6 <_malloc_r+0xd2>
 802c46e:	6823      	ldr	r3, [r4, #0]
 802c470:	442b      	add	r3, r5
 802c472:	6023      	str	r3, [r4, #0]
 802c474:	e00e      	b.n	802c494 <_malloc_r+0xa0>
 802c476:	6822      	ldr	r2, [r4, #0]
 802c478:	1b52      	subs	r2, r2, r5
 802c47a:	d41e      	bmi.n	802c4ba <_malloc_r+0xc6>
 802c47c:	2a0b      	cmp	r2, #11
 802c47e:	d916      	bls.n	802c4ae <_malloc_r+0xba>
 802c480:	1961      	adds	r1, r4, r5
 802c482:	42a3      	cmp	r3, r4
 802c484:	6025      	str	r5, [r4, #0]
 802c486:	bf18      	it	ne
 802c488:	6059      	strne	r1, [r3, #4]
 802c48a:	6863      	ldr	r3, [r4, #4]
 802c48c:	bf08      	it	eq
 802c48e:	6031      	streq	r1, [r6, #0]
 802c490:	5162      	str	r2, [r4, r5]
 802c492:	604b      	str	r3, [r1, #4]
 802c494:	4638      	mov	r0, r7
 802c496:	f104 060b 	add.w	r6, r4, #11
 802c49a:	f000 fef1 	bl	802d280 <__malloc_unlock>
 802c49e:	f026 0607 	bic.w	r6, r6, #7
 802c4a2:	1d23      	adds	r3, r4, #4
 802c4a4:	1af2      	subs	r2, r6, r3
 802c4a6:	d0b6      	beq.n	802c416 <_malloc_r+0x22>
 802c4a8:	1b9b      	subs	r3, r3, r6
 802c4aa:	50a3      	str	r3, [r4, r2]
 802c4ac:	e7b3      	b.n	802c416 <_malloc_r+0x22>
 802c4ae:	6862      	ldr	r2, [r4, #4]
 802c4b0:	42a3      	cmp	r3, r4
 802c4b2:	bf0c      	ite	eq
 802c4b4:	6032      	streq	r2, [r6, #0]
 802c4b6:	605a      	strne	r2, [r3, #4]
 802c4b8:	e7ec      	b.n	802c494 <_malloc_r+0xa0>
 802c4ba:	4623      	mov	r3, r4
 802c4bc:	6864      	ldr	r4, [r4, #4]
 802c4be:	e7b2      	b.n	802c426 <_malloc_r+0x32>
 802c4c0:	4634      	mov	r4, r6
 802c4c2:	6876      	ldr	r6, [r6, #4]
 802c4c4:	e7b9      	b.n	802c43a <_malloc_r+0x46>
 802c4c6:	230c      	movs	r3, #12
 802c4c8:	603b      	str	r3, [r7, #0]
 802c4ca:	4638      	mov	r0, r7
 802c4cc:	f000 fed8 	bl	802d280 <__malloc_unlock>
 802c4d0:	e7a1      	b.n	802c416 <_malloc_r+0x22>
 802c4d2:	6025      	str	r5, [r4, #0]
 802c4d4:	e7de      	b.n	802c494 <_malloc_r+0xa0>
 802c4d6:	bf00      	nop
 802c4d8:	20007334 	.word	0x20007334

0802c4dc <__sfputc_r>:
 802c4dc:	6893      	ldr	r3, [r2, #8]
 802c4de:	3b01      	subs	r3, #1
 802c4e0:	2b00      	cmp	r3, #0
 802c4e2:	b410      	push	{r4}
 802c4e4:	6093      	str	r3, [r2, #8]
 802c4e6:	da08      	bge.n	802c4fa <__sfputc_r+0x1e>
 802c4e8:	6994      	ldr	r4, [r2, #24]
 802c4ea:	42a3      	cmp	r3, r4
 802c4ec:	db01      	blt.n	802c4f2 <__sfputc_r+0x16>
 802c4ee:	290a      	cmp	r1, #10
 802c4f0:	d103      	bne.n	802c4fa <__sfputc_r+0x1e>
 802c4f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c4f6:	f000 bbe1 	b.w	802ccbc <__swbuf_r>
 802c4fa:	6813      	ldr	r3, [r2, #0]
 802c4fc:	1c58      	adds	r0, r3, #1
 802c4fe:	6010      	str	r0, [r2, #0]
 802c500:	7019      	strb	r1, [r3, #0]
 802c502:	4608      	mov	r0, r1
 802c504:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c508:	4770      	bx	lr

0802c50a <__sfputs_r>:
 802c50a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c50c:	4606      	mov	r6, r0
 802c50e:	460f      	mov	r7, r1
 802c510:	4614      	mov	r4, r2
 802c512:	18d5      	adds	r5, r2, r3
 802c514:	42ac      	cmp	r4, r5
 802c516:	d101      	bne.n	802c51c <__sfputs_r+0x12>
 802c518:	2000      	movs	r0, #0
 802c51a:	e007      	b.n	802c52c <__sfputs_r+0x22>
 802c51c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c520:	463a      	mov	r2, r7
 802c522:	4630      	mov	r0, r6
 802c524:	f7ff ffda 	bl	802c4dc <__sfputc_r>
 802c528:	1c43      	adds	r3, r0, #1
 802c52a:	d1f3      	bne.n	802c514 <__sfputs_r+0xa>
 802c52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802c530 <_vfiprintf_r>:
 802c530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c534:	460d      	mov	r5, r1
 802c536:	b09d      	sub	sp, #116	; 0x74
 802c538:	4614      	mov	r4, r2
 802c53a:	4698      	mov	r8, r3
 802c53c:	4606      	mov	r6, r0
 802c53e:	b118      	cbz	r0, 802c548 <_vfiprintf_r+0x18>
 802c540:	6983      	ldr	r3, [r0, #24]
 802c542:	b90b      	cbnz	r3, 802c548 <_vfiprintf_r+0x18>
 802c544:	f000 fd94 	bl	802d070 <__sinit>
 802c548:	4b89      	ldr	r3, [pc, #548]	; (802c770 <_vfiprintf_r+0x240>)
 802c54a:	429d      	cmp	r5, r3
 802c54c:	d11b      	bne.n	802c586 <_vfiprintf_r+0x56>
 802c54e:	6875      	ldr	r5, [r6, #4]
 802c550:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802c552:	07d9      	lsls	r1, r3, #31
 802c554:	d405      	bmi.n	802c562 <_vfiprintf_r+0x32>
 802c556:	89ab      	ldrh	r3, [r5, #12]
 802c558:	059a      	lsls	r2, r3, #22
 802c55a:	d402      	bmi.n	802c562 <_vfiprintf_r+0x32>
 802c55c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802c55e:	f7ff fe84 	bl	802c26a <__retarget_lock_acquire_recursive>
 802c562:	89ab      	ldrh	r3, [r5, #12]
 802c564:	071b      	lsls	r3, r3, #28
 802c566:	d501      	bpl.n	802c56c <_vfiprintf_r+0x3c>
 802c568:	692b      	ldr	r3, [r5, #16]
 802c56a:	b9eb      	cbnz	r3, 802c5a8 <_vfiprintf_r+0x78>
 802c56c:	4629      	mov	r1, r5
 802c56e:	4630      	mov	r0, r6
 802c570:	f000 fbf6 	bl	802cd60 <__swsetup_r>
 802c574:	b1c0      	cbz	r0, 802c5a8 <_vfiprintf_r+0x78>
 802c576:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802c578:	07dc      	lsls	r4, r3, #31
 802c57a:	d50e      	bpl.n	802c59a <_vfiprintf_r+0x6a>
 802c57c:	f04f 30ff 	mov.w	r0, #4294967295
 802c580:	b01d      	add	sp, #116	; 0x74
 802c582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c586:	4b7b      	ldr	r3, [pc, #492]	; (802c774 <_vfiprintf_r+0x244>)
 802c588:	429d      	cmp	r5, r3
 802c58a:	d101      	bne.n	802c590 <_vfiprintf_r+0x60>
 802c58c:	68b5      	ldr	r5, [r6, #8]
 802c58e:	e7df      	b.n	802c550 <_vfiprintf_r+0x20>
 802c590:	4b79      	ldr	r3, [pc, #484]	; (802c778 <_vfiprintf_r+0x248>)
 802c592:	429d      	cmp	r5, r3
 802c594:	bf08      	it	eq
 802c596:	68f5      	ldreq	r5, [r6, #12]
 802c598:	e7da      	b.n	802c550 <_vfiprintf_r+0x20>
 802c59a:	89ab      	ldrh	r3, [r5, #12]
 802c59c:	0598      	lsls	r0, r3, #22
 802c59e:	d4ed      	bmi.n	802c57c <_vfiprintf_r+0x4c>
 802c5a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802c5a2:	f7ff fe63 	bl	802c26c <__retarget_lock_release_recursive>
 802c5a6:	e7e9      	b.n	802c57c <_vfiprintf_r+0x4c>
 802c5a8:	2300      	movs	r3, #0
 802c5aa:	9309      	str	r3, [sp, #36]	; 0x24
 802c5ac:	2320      	movs	r3, #32
 802c5ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802c5b2:	f8cd 800c 	str.w	r8, [sp, #12]
 802c5b6:	2330      	movs	r3, #48	; 0x30
 802c5b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802c77c <_vfiprintf_r+0x24c>
 802c5bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802c5c0:	f04f 0901 	mov.w	r9, #1
 802c5c4:	4623      	mov	r3, r4
 802c5c6:	469a      	mov	sl, r3
 802c5c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c5cc:	b10a      	cbz	r2, 802c5d2 <_vfiprintf_r+0xa2>
 802c5ce:	2a25      	cmp	r2, #37	; 0x25
 802c5d0:	d1f9      	bne.n	802c5c6 <_vfiprintf_r+0x96>
 802c5d2:	ebba 0b04 	subs.w	fp, sl, r4
 802c5d6:	d00b      	beq.n	802c5f0 <_vfiprintf_r+0xc0>
 802c5d8:	465b      	mov	r3, fp
 802c5da:	4622      	mov	r2, r4
 802c5dc:	4629      	mov	r1, r5
 802c5de:	4630      	mov	r0, r6
 802c5e0:	f7ff ff93 	bl	802c50a <__sfputs_r>
 802c5e4:	3001      	adds	r0, #1
 802c5e6:	f000 80aa 	beq.w	802c73e <_vfiprintf_r+0x20e>
 802c5ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802c5ec:	445a      	add	r2, fp
 802c5ee:	9209      	str	r2, [sp, #36]	; 0x24
 802c5f0:	f89a 3000 	ldrb.w	r3, [sl]
 802c5f4:	2b00      	cmp	r3, #0
 802c5f6:	f000 80a2 	beq.w	802c73e <_vfiprintf_r+0x20e>
 802c5fa:	2300      	movs	r3, #0
 802c5fc:	f04f 32ff 	mov.w	r2, #4294967295
 802c600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802c604:	f10a 0a01 	add.w	sl, sl, #1
 802c608:	9304      	str	r3, [sp, #16]
 802c60a:	9307      	str	r3, [sp, #28]
 802c60c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802c610:	931a      	str	r3, [sp, #104]	; 0x68
 802c612:	4654      	mov	r4, sl
 802c614:	2205      	movs	r2, #5
 802c616:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c61a:	4858      	ldr	r0, [pc, #352]	; (802c77c <_vfiprintf_r+0x24c>)
 802c61c:	f7d3 fdf8 	bl	8000210 <memchr>
 802c620:	9a04      	ldr	r2, [sp, #16]
 802c622:	b9d8      	cbnz	r0, 802c65c <_vfiprintf_r+0x12c>
 802c624:	06d1      	lsls	r1, r2, #27
 802c626:	bf44      	itt	mi
 802c628:	2320      	movmi	r3, #32
 802c62a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802c62e:	0713      	lsls	r3, r2, #28
 802c630:	bf44      	itt	mi
 802c632:	232b      	movmi	r3, #43	; 0x2b
 802c634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802c638:	f89a 3000 	ldrb.w	r3, [sl]
 802c63c:	2b2a      	cmp	r3, #42	; 0x2a
 802c63e:	d015      	beq.n	802c66c <_vfiprintf_r+0x13c>
 802c640:	9a07      	ldr	r2, [sp, #28]
 802c642:	4654      	mov	r4, sl
 802c644:	2000      	movs	r0, #0
 802c646:	f04f 0c0a 	mov.w	ip, #10
 802c64a:	4621      	mov	r1, r4
 802c64c:	f811 3b01 	ldrb.w	r3, [r1], #1
 802c650:	3b30      	subs	r3, #48	; 0x30
 802c652:	2b09      	cmp	r3, #9
 802c654:	d94e      	bls.n	802c6f4 <_vfiprintf_r+0x1c4>
 802c656:	b1b0      	cbz	r0, 802c686 <_vfiprintf_r+0x156>
 802c658:	9207      	str	r2, [sp, #28]
 802c65a:	e014      	b.n	802c686 <_vfiprintf_r+0x156>
 802c65c:	eba0 0308 	sub.w	r3, r0, r8
 802c660:	fa09 f303 	lsl.w	r3, r9, r3
 802c664:	4313      	orrs	r3, r2
 802c666:	9304      	str	r3, [sp, #16]
 802c668:	46a2      	mov	sl, r4
 802c66a:	e7d2      	b.n	802c612 <_vfiprintf_r+0xe2>
 802c66c:	9b03      	ldr	r3, [sp, #12]
 802c66e:	1d19      	adds	r1, r3, #4
 802c670:	681b      	ldr	r3, [r3, #0]
 802c672:	9103      	str	r1, [sp, #12]
 802c674:	2b00      	cmp	r3, #0
 802c676:	bfbb      	ittet	lt
 802c678:	425b      	neglt	r3, r3
 802c67a:	f042 0202 	orrlt.w	r2, r2, #2
 802c67e:	9307      	strge	r3, [sp, #28]
 802c680:	9307      	strlt	r3, [sp, #28]
 802c682:	bfb8      	it	lt
 802c684:	9204      	strlt	r2, [sp, #16]
 802c686:	7823      	ldrb	r3, [r4, #0]
 802c688:	2b2e      	cmp	r3, #46	; 0x2e
 802c68a:	d10c      	bne.n	802c6a6 <_vfiprintf_r+0x176>
 802c68c:	7863      	ldrb	r3, [r4, #1]
 802c68e:	2b2a      	cmp	r3, #42	; 0x2a
 802c690:	d135      	bne.n	802c6fe <_vfiprintf_r+0x1ce>
 802c692:	9b03      	ldr	r3, [sp, #12]
 802c694:	1d1a      	adds	r2, r3, #4
 802c696:	681b      	ldr	r3, [r3, #0]
 802c698:	9203      	str	r2, [sp, #12]
 802c69a:	2b00      	cmp	r3, #0
 802c69c:	bfb8      	it	lt
 802c69e:	f04f 33ff 	movlt.w	r3, #4294967295
 802c6a2:	3402      	adds	r4, #2
 802c6a4:	9305      	str	r3, [sp, #20]
 802c6a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802c78c <_vfiprintf_r+0x25c>
 802c6aa:	7821      	ldrb	r1, [r4, #0]
 802c6ac:	2203      	movs	r2, #3
 802c6ae:	4650      	mov	r0, sl
 802c6b0:	f7d3 fdae 	bl	8000210 <memchr>
 802c6b4:	b140      	cbz	r0, 802c6c8 <_vfiprintf_r+0x198>
 802c6b6:	2340      	movs	r3, #64	; 0x40
 802c6b8:	eba0 000a 	sub.w	r0, r0, sl
 802c6bc:	fa03 f000 	lsl.w	r0, r3, r0
 802c6c0:	9b04      	ldr	r3, [sp, #16]
 802c6c2:	4303      	orrs	r3, r0
 802c6c4:	3401      	adds	r4, #1
 802c6c6:	9304      	str	r3, [sp, #16]
 802c6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c6cc:	482c      	ldr	r0, [pc, #176]	; (802c780 <_vfiprintf_r+0x250>)
 802c6ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802c6d2:	2206      	movs	r2, #6
 802c6d4:	f7d3 fd9c 	bl	8000210 <memchr>
 802c6d8:	2800      	cmp	r0, #0
 802c6da:	d03f      	beq.n	802c75c <_vfiprintf_r+0x22c>
 802c6dc:	4b29      	ldr	r3, [pc, #164]	; (802c784 <_vfiprintf_r+0x254>)
 802c6de:	bb1b      	cbnz	r3, 802c728 <_vfiprintf_r+0x1f8>
 802c6e0:	9b03      	ldr	r3, [sp, #12]
 802c6e2:	3307      	adds	r3, #7
 802c6e4:	f023 0307 	bic.w	r3, r3, #7
 802c6e8:	3308      	adds	r3, #8
 802c6ea:	9303      	str	r3, [sp, #12]
 802c6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c6ee:	443b      	add	r3, r7
 802c6f0:	9309      	str	r3, [sp, #36]	; 0x24
 802c6f2:	e767      	b.n	802c5c4 <_vfiprintf_r+0x94>
 802c6f4:	fb0c 3202 	mla	r2, ip, r2, r3
 802c6f8:	460c      	mov	r4, r1
 802c6fa:	2001      	movs	r0, #1
 802c6fc:	e7a5      	b.n	802c64a <_vfiprintf_r+0x11a>
 802c6fe:	2300      	movs	r3, #0
 802c700:	3401      	adds	r4, #1
 802c702:	9305      	str	r3, [sp, #20]
 802c704:	4619      	mov	r1, r3
 802c706:	f04f 0c0a 	mov.w	ip, #10
 802c70a:	4620      	mov	r0, r4
 802c70c:	f810 2b01 	ldrb.w	r2, [r0], #1
 802c710:	3a30      	subs	r2, #48	; 0x30
 802c712:	2a09      	cmp	r2, #9
 802c714:	d903      	bls.n	802c71e <_vfiprintf_r+0x1ee>
 802c716:	2b00      	cmp	r3, #0
 802c718:	d0c5      	beq.n	802c6a6 <_vfiprintf_r+0x176>
 802c71a:	9105      	str	r1, [sp, #20]
 802c71c:	e7c3      	b.n	802c6a6 <_vfiprintf_r+0x176>
 802c71e:	fb0c 2101 	mla	r1, ip, r1, r2
 802c722:	4604      	mov	r4, r0
 802c724:	2301      	movs	r3, #1
 802c726:	e7f0      	b.n	802c70a <_vfiprintf_r+0x1da>
 802c728:	ab03      	add	r3, sp, #12
 802c72a:	9300      	str	r3, [sp, #0]
 802c72c:	462a      	mov	r2, r5
 802c72e:	4b16      	ldr	r3, [pc, #88]	; (802c788 <_vfiprintf_r+0x258>)
 802c730:	a904      	add	r1, sp, #16
 802c732:	4630      	mov	r0, r6
 802c734:	f3af 8000 	nop.w
 802c738:	4607      	mov	r7, r0
 802c73a:	1c78      	adds	r0, r7, #1
 802c73c:	d1d6      	bne.n	802c6ec <_vfiprintf_r+0x1bc>
 802c73e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802c740:	07d9      	lsls	r1, r3, #31
 802c742:	d405      	bmi.n	802c750 <_vfiprintf_r+0x220>
 802c744:	89ab      	ldrh	r3, [r5, #12]
 802c746:	059a      	lsls	r2, r3, #22
 802c748:	d402      	bmi.n	802c750 <_vfiprintf_r+0x220>
 802c74a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802c74c:	f7ff fd8e 	bl	802c26c <__retarget_lock_release_recursive>
 802c750:	89ab      	ldrh	r3, [r5, #12]
 802c752:	065b      	lsls	r3, r3, #25
 802c754:	f53f af12 	bmi.w	802c57c <_vfiprintf_r+0x4c>
 802c758:	9809      	ldr	r0, [sp, #36]	; 0x24
 802c75a:	e711      	b.n	802c580 <_vfiprintf_r+0x50>
 802c75c:	ab03      	add	r3, sp, #12
 802c75e:	9300      	str	r3, [sp, #0]
 802c760:	462a      	mov	r2, r5
 802c762:	4b09      	ldr	r3, [pc, #36]	; (802c788 <_vfiprintf_r+0x258>)
 802c764:	a904      	add	r1, sp, #16
 802c766:	4630      	mov	r0, r6
 802c768:	f000 f880 	bl	802c86c <_printf_i>
 802c76c:	e7e4      	b.n	802c738 <_vfiprintf_r+0x208>
 802c76e:	bf00      	nop
 802c770:	08032114 	.word	0x08032114
 802c774:	08032134 	.word	0x08032134
 802c778:	080320f4 	.word	0x080320f4
 802c77c:	080320c0 	.word	0x080320c0
 802c780:	080320ca 	.word	0x080320ca
 802c784:	00000000 	.word	0x00000000
 802c788:	0802c50b 	.word	0x0802c50b
 802c78c:	080320c6 	.word	0x080320c6

0802c790 <_printf_common>:
 802c790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c794:	4616      	mov	r6, r2
 802c796:	4699      	mov	r9, r3
 802c798:	688a      	ldr	r2, [r1, #8]
 802c79a:	690b      	ldr	r3, [r1, #16]
 802c79c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802c7a0:	4293      	cmp	r3, r2
 802c7a2:	bfb8      	it	lt
 802c7a4:	4613      	movlt	r3, r2
 802c7a6:	6033      	str	r3, [r6, #0]
 802c7a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802c7ac:	4607      	mov	r7, r0
 802c7ae:	460c      	mov	r4, r1
 802c7b0:	b10a      	cbz	r2, 802c7b6 <_printf_common+0x26>
 802c7b2:	3301      	adds	r3, #1
 802c7b4:	6033      	str	r3, [r6, #0]
 802c7b6:	6823      	ldr	r3, [r4, #0]
 802c7b8:	0699      	lsls	r1, r3, #26
 802c7ba:	bf42      	ittt	mi
 802c7bc:	6833      	ldrmi	r3, [r6, #0]
 802c7be:	3302      	addmi	r3, #2
 802c7c0:	6033      	strmi	r3, [r6, #0]
 802c7c2:	6825      	ldr	r5, [r4, #0]
 802c7c4:	f015 0506 	ands.w	r5, r5, #6
 802c7c8:	d106      	bne.n	802c7d8 <_printf_common+0x48>
 802c7ca:	f104 0a19 	add.w	sl, r4, #25
 802c7ce:	68e3      	ldr	r3, [r4, #12]
 802c7d0:	6832      	ldr	r2, [r6, #0]
 802c7d2:	1a9b      	subs	r3, r3, r2
 802c7d4:	42ab      	cmp	r3, r5
 802c7d6:	dc26      	bgt.n	802c826 <_printf_common+0x96>
 802c7d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802c7dc:	1e13      	subs	r3, r2, #0
 802c7de:	6822      	ldr	r2, [r4, #0]
 802c7e0:	bf18      	it	ne
 802c7e2:	2301      	movne	r3, #1
 802c7e4:	0692      	lsls	r2, r2, #26
 802c7e6:	d42b      	bmi.n	802c840 <_printf_common+0xb0>
 802c7e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802c7ec:	4649      	mov	r1, r9
 802c7ee:	4638      	mov	r0, r7
 802c7f0:	47c0      	blx	r8
 802c7f2:	3001      	adds	r0, #1
 802c7f4:	d01e      	beq.n	802c834 <_printf_common+0xa4>
 802c7f6:	6823      	ldr	r3, [r4, #0]
 802c7f8:	68e5      	ldr	r5, [r4, #12]
 802c7fa:	6832      	ldr	r2, [r6, #0]
 802c7fc:	f003 0306 	and.w	r3, r3, #6
 802c800:	2b04      	cmp	r3, #4
 802c802:	bf08      	it	eq
 802c804:	1aad      	subeq	r5, r5, r2
 802c806:	68a3      	ldr	r3, [r4, #8]
 802c808:	6922      	ldr	r2, [r4, #16]
 802c80a:	bf0c      	ite	eq
 802c80c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802c810:	2500      	movne	r5, #0
 802c812:	4293      	cmp	r3, r2
 802c814:	bfc4      	itt	gt
 802c816:	1a9b      	subgt	r3, r3, r2
 802c818:	18ed      	addgt	r5, r5, r3
 802c81a:	2600      	movs	r6, #0
 802c81c:	341a      	adds	r4, #26
 802c81e:	42b5      	cmp	r5, r6
 802c820:	d11a      	bne.n	802c858 <_printf_common+0xc8>
 802c822:	2000      	movs	r0, #0
 802c824:	e008      	b.n	802c838 <_printf_common+0xa8>
 802c826:	2301      	movs	r3, #1
 802c828:	4652      	mov	r2, sl
 802c82a:	4649      	mov	r1, r9
 802c82c:	4638      	mov	r0, r7
 802c82e:	47c0      	blx	r8
 802c830:	3001      	adds	r0, #1
 802c832:	d103      	bne.n	802c83c <_printf_common+0xac>
 802c834:	f04f 30ff 	mov.w	r0, #4294967295
 802c838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c83c:	3501      	adds	r5, #1
 802c83e:	e7c6      	b.n	802c7ce <_printf_common+0x3e>
 802c840:	18e1      	adds	r1, r4, r3
 802c842:	1c5a      	adds	r2, r3, #1
 802c844:	2030      	movs	r0, #48	; 0x30
 802c846:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802c84a:	4422      	add	r2, r4
 802c84c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802c850:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802c854:	3302      	adds	r3, #2
 802c856:	e7c7      	b.n	802c7e8 <_printf_common+0x58>
 802c858:	2301      	movs	r3, #1
 802c85a:	4622      	mov	r2, r4
 802c85c:	4649      	mov	r1, r9
 802c85e:	4638      	mov	r0, r7
 802c860:	47c0      	blx	r8
 802c862:	3001      	adds	r0, #1
 802c864:	d0e6      	beq.n	802c834 <_printf_common+0xa4>
 802c866:	3601      	adds	r6, #1
 802c868:	e7d9      	b.n	802c81e <_printf_common+0x8e>
	...

0802c86c <_printf_i>:
 802c86c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c870:	7e0f      	ldrb	r7, [r1, #24]
 802c872:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802c874:	2f78      	cmp	r7, #120	; 0x78
 802c876:	4691      	mov	r9, r2
 802c878:	4680      	mov	r8, r0
 802c87a:	460c      	mov	r4, r1
 802c87c:	469a      	mov	sl, r3
 802c87e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802c882:	d807      	bhi.n	802c894 <_printf_i+0x28>
 802c884:	2f62      	cmp	r7, #98	; 0x62
 802c886:	d80a      	bhi.n	802c89e <_printf_i+0x32>
 802c888:	2f00      	cmp	r7, #0
 802c88a:	f000 80d8 	beq.w	802ca3e <_printf_i+0x1d2>
 802c88e:	2f58      	cmp	r7, #88	; 0x58
 802c890:	f000 80a3 	beq.w	802c9da <_printf_i+0x16e>
 802c894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802c898:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802c89c:	e03a      	b.n	802c914 <_printf_i+0xa8>
 802c89e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802c8a2:	2b15      	cmp	r3, #21
 802c8a4:	d8f6      	bhi.n	802c894 <_printf_i+0x28>
 802c8a6:	a101      	add	r1, pc, #4	; (adr r1, 802c8ac <_printf_i+0x40>)
 802c8a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802c8ac:	0802c905 	.word	0x0802c905
 802c8b0:	0802c919 	.word	0x0802c919
 802c8b4:	0802c895 	.word	0x0802c895
 802c8b8:	0802c895 	.word	0x0802c895
 802c8bc:	0802c895 	.word	0x0802c895
 802c8c0:	0802c895 	.word	0x0802c895
 802c8c4:	0802c919 	.word	0x0802c919
 802c8c8:	0802c895 	.word	0x0802c895
 802c8cc:	0802c895 	.word	0x0802c895
 802c8d0:	0802c895 	.word	0x0802c895
 802c8d4:	0802c895 	.word	0x0802c895
 802c8d8:	0802ca25 	.word	0x0802ca25
 802c8dc:	0802c949 	.word	0x0802c949
 802c8e0:	0802ca07 	.word	0x0802ca07
 802c8e4:	0802c895 	.word	0x0802c895
 802c8e8:	0802c895 	.word	0x0802c895
 802c8ec:	0802ca47 	.word	0x0802ca47
 802c8f0:	0802c895 	.word	0x0802c895
 802c8f4:	0802c949 	.word	0x0802c949
 802c8f8:	0802c895 	.word	0x0802c895
 802c8fc:	0802c895 	.word	0x0802c895
 802c900:	0802ca0f 	.word	0x0802ca0f
 802c904:	682b      	ldr	r3, [r5, #0]
 802c906:	1d1a      	adds	r2, r3, #4
 802c908:	681b      	ldr	r3, [r3, #0]
 802c90a:	602a      	str	r2, [r5, #0]
 802c90c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802c910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802c914:	2301      	movs	r3, #1
 802c916:	e0a3      	b.n	802ca60 <_printf_i+0x1f4>
 802c918:	6820      	ldr	r0, [r4, #0]
 802c91a:	6829      	ldr	r1, [r5, #0]
 802c91c:	0606      	lsls	r6, r0, #24
 802c91e:	f101 0304 	add.w	r3, r1, #4
 802c922:	d50a      	bpl.n	802c93a <_printf_i+0xce>
 802c924:	680e      	ldr	r6, [r1, #0]
 802c926:	602b      	str	r3, [r5, #0]
 802c928:	2e00      	cmp	r6, #0
 802c92a:	da03      	bge.n	802c934 <_printf_i+0xc8>
 802c92c:	232d      	movs	r3, #45	; 0x2d
 802c92e:	4276      	negs	r6, r6
 802c930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c934:	485e      	ldr	r0, [pc, #376]	; (802cab0 <_printf_i+0x244>)
 802c936:	230a      	movs	r3, #10
 802c938:	e019      	b.n	802c96e <_printf_i+0x102>
 802c93a:	680e      	ldr	r6, [r1, #0]
 802c93c:	602b      	str	r3, [r5, #0]
 802c93e:	f010 0f40 	tst.w	r0, #64	; 0x40
 802c942:	bf18      	it	ne
 802c944:	b236      	sxthne	r6, r6
 802c946:	e7ef      	b.n	802c928 <_printf_i+0xbc>
 802c948:	682b      	ldr	r3, [r5, #0]
 802c94a:	6820      	ldr	r0, [r4, #0]
 802c94c:	1d19      	adds	r1, r3, #4
 802c94e:	6029      	str	r1, [r5, #0]
 802c950:	0601      	lsls	r1, r0, #24
 802c952:	d501      	bpl.n	802c958 <_printf_i+0xec>
 802c954:	681e      	ldr	r6, [r3, #0]
 802c956:	e002      	b.n	802c95e <_printf_i+0xf2>
 802c958:	0646      	lsls	r6, r0, #25
 802c95a:	d5fb      	bpl.n	802c954 <_printf_i+0xe8>
 802c95c:	881e      	ldrh	r6, [r3, #0]
 802c95e:	4854      	ldr	r0, [pc, #336]	; (802cab0 <_printf_i+0x244>)
 802c960:	2f6f      	cmp	r7, #111	; 0x6f
 802c962:	bf0c      	ite	eq
 802c964:	2308      	moveq	r3, #8
 802c966:	230a      	movne	r3, #10
 802c968:	2100      	movs	r1, #0
 802c96a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802c96e:	6865      	ldr	r5, [r4, #4]
 802c970:	60a5      	str	r5, [r4, #8]
 802c972:	2d00      	cmp	r5, #0
 802c974:	bfa2      	ittt	ge
 802c976:	6821      	ldrge	r1, [r4, #0]
 802c978:	f021 0104 	bicge.w	r1, r1, #4
 802c97c:	6021      	strge	r1, [r4, #0]
 802c97e:	b90e      	cbnz	r6, 802c984 <_printf_i+0x118>
 802c980:	2d00      	cmp	r5, #0
 802c982:	d04d      	beq.n	802ca20 <_printf_i+0x1b4>
 802c984:	4615      	mov	r5, r2
 802c986:	fbb6 f1f3 	udiv	r1, r6, r3
 802c98a:	fb03 6711 	mls	r7, r3, r1, r6
 802c98e:	5dc7      	ldrb	r7, [r0, r7]
 802c990:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802c994:	4637      	mov	r7, r6
 802c996:	42bb      	cmp	r3, r7
 802c998:	460e      	mov	r6, r1
 802c99a:	d9f4      	bls.n	802c986 <_printf_i+0x11a>
 802c99c:	2b08      	cmp	r3, #8
 802c99e:	d10b      	bne.n	802c9b8 <_printf_i+0x14c>
 802c9a0:	6823      	ldr	r3, [r4, #0]
 802c9a2:	07de      	lsls	r6, r3, #31
 802c9a4:	d508      	bpl.n	802c9b8 <_printf_i+0x14c>
 802c9a6:	6923      	ldr	r3, [r4, #16]
 802c9a8:	6861      	ldr	r1, [r4, #4]
 802c9aa:	4299      	cmp	r1, r3
 802c9ac:	bfde      	ittt	le
 802c9ae:	2330      	movle	r3, #48	; 0x30
 802c9b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 802c9b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 802c9b8:	1b52      	subs	r2, r2, r5
 802c9ba:	6122      	str	r2, [r4, #16]
 802c9bc:	f8cd a000 	str.w	sl, [sp]
 802c9c0:	464b      	mov	r3, r9
 802c9c2:	aa03      	add	r2, sp, #12
 802c9c4:	4621      	mov	r1, r4
 802c9c6:	4640      	mov	r0, r8
 802c9c8:	f7ff fee2 	bl	802c790 <_printf_common>
 802c9cc:	3001      	adds	r0, #1
 802c9ce:	d14c      	bne.n	802ca6a <_printf_i+0x1fe>
 802c9d0:	f04f 30ff 	mov.w	r0, #4294967295
 802c9d4:	b004      	add	sp, #16
 802c9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c9da:	4835      	ldr	r0, [pc, #212]	; (802cab0 <_printf_i+0x244>)
 802c9dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802c9e0:	6829      	ldr	r1, [r5, #0]
 802c9e2:	6823      	ldr	r3, [r4, #0]
 802c9e4:	f851 6b04 	ldr.w	r6, [r1], #4
 802c9e8:	6029      	str	r1, [r5, #0]
 802c9ea:	061d      	lsls	r5, r3, #24
 802c9ec:	d514      	bpl.n	802ca18 <_printf_i+0x1ac>
 802c9ee:	07df      	lsls	r7, r3, #31
 802c9f0:	bf44      	itt	mi
 802c9f2:	f043 0320 	orrmi.w	r3, r3, #32
 802c9f6:	6023      	strmi	r3, [r4, #0]
 802c9f8:	b91e      	cbnz	r6, 802ca02 <_printf_i+0x196>
 802c9fa:	6823      	ldr	r3, [r4, #0]
 802c9fc:	f023 0320 	bic.w	r3, r3, #32
 802ca00:	6023      	str	r3, [r4, #0]
 802ca02:	2310      	movs	r3, #16
 802ca04:	e7b0      	b.n	802c968 <_printf_i+0xfc>
 802ca06:	6823      	ldr	r3, [r4, #0]
 802ca08:	f043 0320 	orr.w	r3, r3, #32
 802ca0c:	6023      	str	r3, [r4, #0]
 802ca0e:	2378      	movs	r3, #120	; 0x78
 802ca10:	4828      	ldr	r0, [pc, #160]	; (802cab4 <_printf_i+0x248>)
 802ca12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802ca16:	e7e3      	b.n	802c9e0 <_printf_i+0x174>
 802ca18:	0659      	lsls	r1, r3, #25
 802ca1a:	bf48      	it	mi
 802ca1c:	b2b6      	uxthmi	r6, r6
 802ca1e:	e7e6      	b.n	802c9ee <_printf_i+0x182>
 802ca20:	4615      	mov	r5, r2
 802ca22:	e7bb      	b.n	802c99c <_printf_i+0x130>
 802ca24:	682b      	ldr	r3, [r5, #0]
 802ca26:	6826      	ldr	r6, [r4, #0]
 802ca28:	6961      	ldr	r1, [r4, #20]
 802ca2a:	1d18      	adds	r0, r3, #4
 802ca2c:	6028      	str	r0, [r5, #0]
 802ca2e:	0635      	lsls	r5, r6, #24
 802ca30:	681b      	ldr	r3, [r3, #0]
 802ca32:	d501      	bpl.n	802ca38 <_printf_i+0x1cc>
 802ca34:	6019      	str	r1, [r3, #0]
 802ca36:	e002      	b.n	802ca3e <_printf_i+0x1d2>
 802ca38:	0670      	lsls	r0, r6, #25
 802ca3a:	d5fb      	bpl.n	802ca34 <_printf_i+0x1c8>
 802ca3c:	8019      	strh	r1, [r3, #0]
 802ca3e:	2300      	movs	r3, #0
 802ca40:	6123      	str	r3, [r4, #16]
 802ca42:	4615      	mov	r5, r2
 802ca44:	e7ba      	b.n	802c9bc <_printf_i+0x150>
 802ca46:	682b      	ldr	r3, [r5, #0]
 802ca48:	1d1a      	adds	r2, r3, #4
 802ca4a:	602a      	str	r2, [r5, #0]
 802ca4c:	681d      	ldr	r5, [r3, #0]
 802ca4e:	6862      	ldr	r2, [r4, #4]
 802ca50:	2100      	movs	r1, #0
 802ca52:	4628      	mov	r0, r5
 802ca54:	f7d3 fbdc 	bl	8000210 <memchr>
 802ca58:	b108      	cbz	r0, 802ca5e <_printf_i+0x1f2>
 802ca5a:	1b40      	subs	r0, r0, r5
 802ca5c:	6060      	str	r0, [r4, #4]
 802ca5e:	6863      	ldr	r3, [r4, #4]
 802ca60:	6123      	str	r3, [r4, #16]
 802ca62:	2300      	movs	r3, #0
 802ca64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ca68:	e7a8      	b.n	802c9bc <_printf_i+0x150>
 802ca6a:	6923      	ldr	r3, [r4, #16]
 802ca6c:	462a      	mov	r2, r5
 802ca6e:	4649      	mov	r1, r9
 802ca70:	4640      	mov	r0, r8
 802ca72:	47d0      	blx	sl
 802ca74:	3001      	adds	r0, #1
 802ca76:	d0ab      	beq.n	802c9d0 <_printf_i+0x164>
 802ca78:	6823      	ldr	r3, [r4, #0]
 802ca7a:	079b      	lsls	r3, r3, #30
 802ca7c:	d413      	bmi.n	802caa6 <_printf_i+0x23a>
 802ca7e:	68e0      	ldr	r0, [r4, #12]
 802ca80:	9b03      	ldr	r3, [sp, #12]
 802ca82:	4298      	cmp	r0, r3
 802ca84:	bfb8      	it	lt
 802ca86:	4618      	movlt	r0, r3
 802ca88:	e7a4      	b.n	802c9d4 <_printf_i+0x168>
 802ca8a:	2301      	movs	r3, #1
 802ca8c:	4632      	mov	r2, r6
 802ca8e:	4649      	mov	r1, r9
 802ca90:	4640      	mov	r0, r8
 802ca92:	47d0      	blx	sl
 802ca94:	3001      	adds	r0, #1
 802ca96:	d09b      	beq.n	802c9d0 <_printf_i+0x164>
 802ca98:	3501      	adds	r5, #1
 802ca9a:	68e3      	ldr	r3, [r4, #12]
 802ca9c:	9903      	ldr	r1, [sp, #12]
 802ca9e:	1a5b      	subs	r3, r3, r1
 802caa0:	42ab      	cmp	r3, r5
 802caa2:	dcf2      	bgt.n	802ca8a <_printf_i+0x21e>
 802caa4:	e7eb      	b.n	802ca7e <_printf_i+0x212>
 802caa6:	2500      	movs	r5, #0
 802caa8:	f104 0619 	add.w	r6, r4, #25
 802caac:	e7f5      	b.n	802ca9a <_printf_i+0x22e>
 802caae:	bf00      	nop
 802cab0:	080320d1 	.word	0x080320d1
 802cab4:	080320e2 	.word	0x080320e2

0802cab8 <iprintf>:
 802cab8:	b40f      	push	{r0, r1, r2, r3}
 802caba:	4b0a      	ldr	r3, [pc, #40]	; (802cae4 <iprintf+0x2c>)
 802cabc:	b513      	push	{r0, r1, r4, lr}
 802cabe:	681c      	ldr	r4, [r3, #0]
 802cac0:	b124      	cbz	r4, 802cacc <iprintf+0x14>
 802cac2:	69a3      	ldr	r3, [r4, #24]
 802cac4:	b913      	cbnz	r3, 802cacc <iprintf+0x14>
 802cac6:	4620      	mov	r0, r4
 802cac8:	f000 fad2 	bl	802d070 <__sinit>
 802cacc:	ab05      	add	r3, sp, #20
 802cace:	9a04      	ldr	r2, [sp, #16]
 802cad0:	68a1      	ldr	r1, [r4, #8]
 802cad2:	9301      	str	r3, [sp, #4]
 802cad4:	4620      	mov	r0, r4
 802cad6:	f7ff fd2b 	bl	802c530 <_vfiprintf_r>
 802cada:	b002      	add	sp, #8
 802cadc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cae0:	b004      	add	sp, #16
 802cae2:	4770      	bx	lr
 802cae4:	2000029c 	.word	0x2000029c

0802cae8 <_puts_r>:
 802cae8:	b570      	push	{r4, r5, r6, lr}
 802caea:	460e      	mov	r6, r1
 802caec:	4605      	mov	r5, r0
 802caee:	b118      	cbz	r0, 802caf8 <_puts_r+0x10>
 802caf0:	6983      	ldr	r3, [r0, #24]
 802caf2:	b90b      	cbnz	r3, 802caf8 <_puts_r+0x10>
 802caf4:	f000 fabc 	bl	802d070 <__sinit>
 802caf8:	69ab      	ldr	r3, [r5, #24]
 802cafa:	68ac      	ldr	r4, [r5, #8]
 802cafc:	b913      	cbnz	r3, 802cb04 <_puts_r+0x1c>
 802cafe:	4628      	mov	r0, r5
 802cb00:	f000 fab6 	bl	802d070 <__sinit>
 802cb04:	4b2c      	ldr	r3, [pc, #176]	; (802cbb8 <_puts_r+0xd0>)
 802cb06:	429c      	cmp	r4, r3
 802cb08:	d120      	bne.n	802cb4c <_puts_r+0x64>
 802cb0a:	686c      	ldr	r4, [r5, #4]
 802cb0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802cb0e:	07db      	lsls	r3, r3, #31
 802cb10:	d405      	bmi.n	802cb1e <_puts_r+0x36>
 802cb12:	89a3      	ldrh	r3, [r4, #12]
 802cb14:	0598      	lsls	r0, r3, #22
 802cb16:	d402      	bmi.n	802cb1e <_puts_r+0x36>
 802cb18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802cb1a:	f7ff fba6 	bl	802c26a <__retarget_lock_acquire_recursive>
 802cb1e:	89a3      	ldrh	r3, [r4, #12]
 802cb20:	0719      	lsls	r1, r3, #28
 802cb22:	d51d      	bpl.n	802cb60 <_puts_r+0x78>
 802cb24:	6923      	ldr	r3, [r4, #16]
 802cb26:	b1db      	cbz	r3, 802cb60 <_puts_r+0x78>
 802cb28:	3e01      	subs	r6, #1
 802cb2a:	68a3      	ldr	r3, [r4, #8]
 802cb2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802cb30:	3b01      	subs	r3, #1
 802cb32:	60a3      	str	r3, [r4, #8]
 802cb34:	bb39      	cbnz	r1, 802cb86 <_puts_r+0x9e>
 802cb36:	2b00      	cmp	r3, #0
 802cb38:	da38      	bge.n	802cbac <_puts_r+0xc4>
 802cb3a:	4622      	mov	r2, r4
 802cb3c:	210a      	movs	r1, #10
 802cb3e:	4628      	mov	r0, r5
 802cb40:	f000 f8bc 	bl	802ccbc <__swbuf_r>
 802cb44:	3001      	adds	r0, #1
 802cb46:	d011      	beq.n	802cb6c <_puts_r+0x84>
 802cb48:	250a      	movs	r5, #10
 802cb4a:	e011      	b.n	802cb70 <_puts_r+0x88>
 802cb4c:	4b1b      	ldr	r3, [pc, #108]	; (802cbbc <_puts_r+0xd4>)
 802cb4e:	429c      	cmp	r4, r3
 802cb50:	d101      	bne.n	802cb56 <_puts_r+0x6e>
 802cb52:	68ac      	ldr	r4, [r5, #8]
 802cb54:	e7da      	b.n	802cb0c <_puts_r+0x24>
 802cb56:	4b1a      	ldr	r3, [pc, #104]	; (802cbc0 <_puts_r+0xd8>)
 802cb58:	429c      	cmp	r4, r3
 802cb5a:	bf08      	it	eq
 802cb5c:	68ec      	ldreq	r4, [r5, #12]
 802cb5e:	e7d5      	b.n	802cb0c <_puts_r+0x24>
 802cb60:	4621      	mov	r1, r4
 802cb62:	4628      	mov	r0, r5
 802cb64:	f000 f8fc 	bl	802cd60 <__swsetup_r>
 802cb68:	2800      	cmp	r0, #0
 802cb6a:	d0dd      	beq.n	802cb28 <_puts_r+0x40>
 802cb6c:	f04f 35ff 	mov.w	r5, #4294967295
 802cb70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802cb72:	07da      	lsls	r2, r3, #31
 802cb74:	d405      	bmi.n	802cb82 <_puts_r+0x9a>
 802cb76:	89a3      	ldrh	r3, [r4, #12]
 802cb78:	059b      	lsls	r3, r3, #22
 802cb7a:	d402      	bmi.n	802cb82 <_puts_r+0x9a>
 802cb7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802cb7e:	f7ff fb75 	bl	802c26c <__retarget_lock_release_recursive>
 802cb82:	4628      	mov	r0, r5
 802cb84:	bd70      	pop	{r4, r5, r6, pc}
 802cb86:	2b00      	cmp	r3, #0
 802cb88:	da04      	bge.n	802cb94 <_puts_r+0xac>
 802cb8a:	69a2      	ldr	r2, [r4, #24]
 802cb8c:	429a      	cmp	r2, r3
 802cb8e:	dc06      	bgt.n	802cb9e <_puts_r+0xb6>
 802cb90:	290a      	cmp	r1, #10
 802cb92:	d004      	beq.n	802cb9e <_puts_r+0xb6>
 802cb94:	6823      	ldr	r3, [r4, #0]
 802cb96:	1c5a      	adds	r2, r3, #1
 802cb98:	6022      	str	r2, [r4, #0]
 802cb9a:	7019      	strb	r1, [r3, #0]
 802cb9c:	e7c5      	b.n	802cb2a <_puts_r+0x42>
 802cb9e:	4622      	mov	r2, r4
 802cba0:	4628      	mov	r0, r5
 802cba2:	f000 f88b 	bl	802ccbc <__swbuf_r>
 802cba6:	3001      	adds	r0, #1
 802cba8:	d1bf      	bne.n	802cb2a <_puts_r+0x42>
 802cbaa:	e7df      	b.n	802cb6c <_puts_r+0x84>
 802cbac:	6823      	ldr	r3, [r4, #0]
 802cbae:	250a      	movs	r5, #10
 802cbb0:	1c5a      	adds	r2, r3, #1
 802cbb2:	6022      	str	r2, [r4, #0]
 802cbb4:	701d      	strb	r5, [r3, #0]
 802cbb6:	e7db      	b.n	802cb70 <_puts_r+0x88>
 802cbb8:	08032114 	.word	0x08032114
 802cbbc:	08032134 	.word	0x08032134
 802cbc0:	080320f4 	.word	0x080320f4

0802cbc4 <puts>:
 802cbc4:	4b02      	ldr	r3, [pc, #8]	; (802cbd0 <puts+0xc>)
 802cbc6:	4601      	mov	r1, r0
 802cbc8:	6818      	ldr	r0, [r3, #0]
 802cbca:	f7ff bf8d 	b.w	802cae8 <_puts_r>
 802cbce:	bf00      	nop
 802cbd0:	2000029c 	.word	0x2000029c

0802cbd4 <_sbrk_r>:
 802cbd4:	b538      	push	{r3, r4, r5, lr}
 802cbd6:	4d06      	ldr	r5, [pc, #24]	; (802cbf0 <_sbrk_r+0x1c>)
 802cbd8:	2300      	movs	r3, #0
 802cbda:	4604      	mov	r4, r0
 802cbdc:	4608      	mov	r0, r1
 802cbde:	602b      	str	r3, [r5, #0]
 802cbe0:	f7da ffaa 	bl	8007b38 <_sbrk>
 802cbe4:	1c43      	adds	r3, r0, #1
 802cbe6:	d102      	bne.n	802cbee <_sbrk_r+0x1a>
 802cbe8:	682b      	ldr	r3, [r5, #0]
 802cbea:	b103      	cbz	r3, 802cbee <_sbrk_r+0x1a>
 802cbec:	6023      	str	r3, [r4, #0]
 802cbee:	bd38      	pop	{r3, r4, r5, pc}
 802cbf0:	2000733c 	.word	0x2000733c

0802cbf4 <_raise_r>:
 802cbf4:	291f      	cmp	r1, #31
 802cbf6:	b538      	push	{r3, r4, r5, lr}
 802cbf8:	4604      	mov	r4, r0
 802cbfa:	460d      	mov	r5, r1
 802cbfc:	d904      	bls.n	802cc08 <_raise_r+0x14>
 802cbfe:	2316      	movs	r3, #22
 802cc00:	6003      	str	r3, [r0, #0]
 802cc02:	f04f 30ff 	mov.w	r0, #4294967295
 802cc06:	bd38      	pop	{r3, r4, r5, pc}
 802cc08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802cc0a:	b112      	cbz	r2, 802cc12 <_raise_r+0x1e>
 802cc0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802cc10:	b94b      	cbnz	r3, 802cc26 <_raise_r+0x32>
 802cc12:	4620      	mov	r0, r4
 802cc14:	f000 f830 	bl	802cc78 <_getpid_r>
 802cc18:	462a      	mov	r2, r5
 802cc1a:	4601      	mov	r1, r0
 802cc1c:	4620      	mov	r0, r4
 802cc1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802cc22:	f000 b817 	b.w	802cc54 <_kill_r>
 802cc26:	2b01      	cmp	r3, #1
 802cc28:	d00a      	beq.n	802cc40 <_raise_r+0x4c>
 802cc2a:	1c59      	adds	r1, r3, #1
 802cc2c:	d103      	bne.n	802cc36 <_raise_r+0x42>
 802cc2e:	2316      	movs	r3, #22
 802cc30:	6003      	str	r3, [r0, #0]
 802cc32:	2001      	movs	r0, #1
 802cc34:	e7e7      	b.n	802cc06 <_raise_r+0x12>
 802cc36:	2400      	movs	r4, #0
 802cc38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802cc3c:	4628      	mov	r0, r5
 802cc3e:	4798      	blx	r3
 802cc40:	2000      	movs	r0, #0
 802cc42:	e7e0      	b.n	802cc06 <_raise_r+0x12>

0802cc44 <raise>:
 802cc44:	4b02      	ldr	r3, [pc, #8]	; (802cc50 <raise+0xc>)
 802cc46:	4601      	mov	r1, r0
 802cc48:	6818      	ldr	r0, [r3, #0]
 802cc4a:	f7ff bfd3 	b.w	802cbf4 <_raise_r>
 802cc4e:	bf00      	nop
 802cc50:	2000029c 	.word	0x2000029c

0802cc54 <_kill_r>:
 802cc54:	b538      	push	{r3, r4, r5, lr}
 802cc56:	4d07      	ldr	r5, [pc, #28]	; (802cc74 <_kill_r+0x20>)
 802cc58:	2300      	movs	r3, #0
 802cc5a:	4604      	mov	r4, r0
 802cc5c:	4608      	mov	r0, r1
 802cc5e:	4611      	mov	r1, r2
 802cc60:	602b      	str	r3, [r5, #0]
 802cc62:	f7da fee1 	bl	8007a28 <_kill>
 802cc66:	1c43      	adds	r3, r0, #1
 802cc68:	d102      	bne.n	802cc70 <_kill_r+0x1c>
 802cc6a:	682b      	ldr	r3, [r5, #0]
 802cc6c:	b103      	cbz	r3, 802cc70 <_kill_r+0x1c>
 802cc6e:	6023      	str	r3, [r4, #0]
 802cc70:	bd38      	pop	{r3, r4, r5, pc}
 802cc72:	bf00      	nop
 802cc74:	2000733c 	.word	0x2000733c

0802cc78 <_getpid_r>:
 802cc78:	f7da bece 	b.w	8007a18 <_getpid>

0802cc7c <_vsiprintf_r>:
 802cc7c:	b500      	push	{lr}
 802cc7e:	b09b      	sub	sp, #108	; 0x6c
 802cc80:	9100      	str	r1, [sp, #0]
 802cc82:	9104      	str	r1, [sp, #16]
 802cc84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802cc88:	9105      	str	r1, [sp, #20]
 802cc8a:	9102      	str	r1, [sp, #8]
 802cc8c:	4905      	ldr	r1, [pc, #20]	; (802cca4 <_vsiprintf_r+0x28>)
 802cc8e:	9103      	str	r1, [sp, #12]
 802cc90:	4669      	mov	r1, sp
 802cc92:	f000 fb85 	bl	802d3a0 <_svfiprintf_r>
 802cc96:	9b00      	ldr	r3, [sp, #0]
 802cc98:	2200      	movs	r2, #0
 802cc9a:	701a      	strb	r2, [r3, #0]
 802cc9c:	b01b      	add	sp, #108	; 0x6c
 802cc9e:	f85d fb04 	ldr.w	pc, [sp], #4
 802cca2:	bf00      	nop
 802cca4:	ffff0208 	.word	0xffff0208

0802cca8 <vsiprintf>:
 802cca8:	4613      	mov	r3, r2
 802ccaa:	460a      	mov	r2, r1
 802ccac:	4601      	mov	r1, r0
 802ccae:	4802      	ldr	r0, [pc, #8]	; (802ccb8 <vsiprintf+0x10>)
 802ccb0:	6800      	ldr	r0, [r0, #0]
 802ccb2:	f7ff bfe3 	b.w	802cc7c <_vsiprintf_r>
 802ccb6:	bf00      	nop
 802ccb8:	2000029c 	.word	0x2000029c

0802ccbc <__swbuf_r>:
 802ccbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ccbe:	460e      	mov	r6, r1
 802ccc0:	4614      	mov	r4, r2
 802ccc2:	4605      	mov	r5, r0
 802ccc4:	b118      	cbz	r0, 802ccce <__swbuf_r+0x12>
 802ccc6:	6983      	ldr	r3, [r0, #24]
 802ccc8:	b90b      	cbnz	r3, 802ccce <__swbuf_r+0x12>
 802ccca:	f000 f9d1 	bl	802d070 <__sinit>
 802ccce:	4b21      	ldr	r3, [pc, #132]	; (802cd54 <__swbuf_r+0x98>)
 802ccd0:	429c      	cmp	r4, r3
 802ccd2:	d12b      	bne.n	802cd2c <__swbuf_r+0x70>
 802ccd4:	686c      	ldr	r4, [r5, #4]
 802ccd6:	69a3      	ldr	r3, [r4, #24]
 802ccd8:	60a3      	str	r3, [r4, #8]
 802ccda:	89a3      	ldrh	r3, [r4, #12]
 802ccdc:	071a      	lsls	r2, r3, #28
 802ccde:	d52f      	bpl.n	802cd40 <__swbuf_r+0x84>
 802cce0:	6923      	ldr	r3, [r4, #16]
 802cce2:	b36b      	cbz	r3, 802cd40 <__swbuf_r+0x84>
 802cce4:	6923      	ldr	r3, [r4, #16]
 802cce6:	6820      	ldr	r0, [r4, #0]
 802cce8:	1ac0      	subs	r0, r0, r3
 802ccea:	6963      	ldr	r3, [r4, #20]
 802ccec:	b2f6      	uxtb	r6, r6
 802ccee:	4283      	cmp	r3, r0
 802ccf0:	4637      	mov	r7, r6
 802ccf2:	dc04      	bgt.n	802ccfe <__swbuf_r+0x42>
 802ccf4:	4621      	mov	r1, r4
 802ccf6:	4628      	mov	r0, r5
 802ccf8:	f000 f926 	bl	802cf48 <_fflush_r>
 802ccfc:	bb30      	cbnz	r0, 802cd4c <__swbuf_r+0x90>
 802ccfe:	68a3      	ldr	r3, [r4, #8]
 802cd00:	3b01      	subs	r3, #1
 802cd02:	60a3      	str	r3, [r4, #8]
 802cd04:	6823      	ldr	r3, [r4, #0]
 802cd06:	1c5a      	adds	r2, r3, #1
 802cd08:	6022      	str	r2, [r4, #0]
 802cd0a:	701e      	strb	r6, [r3, #0]
 802cd0c:	6963      	ldr	r3, [r4, #20]
 802cd0e:	3001      	adds	r0, #1
 802cd10:	4283      	cmp	r3, r0
 802cd12:	d004      	beq.n	802cd1e <__swbuf_r+0x62>
 802cd14:	89a3      	ldrh	r3, [r4, #12]
 802cd16:	07db      	lsls	r3, r3, #31
 802cd18:	d506      	bpl.n	802cd28 <__swbuf_r+0x6c>
 802cd1a:	2e0a      	cmp	r6, #10
 802cd1c:	d104      	bne.n	802cd28 <__swbuf_r+0x6c>
 802cd1e:	4621      	mov	r1, r4
 802cd20:	4628      	mov	r0, r5
 802cd22:	f000 f911 	bl	802cf48 <_fflush_r>
 802cd26:	b988      	cbnz	r0, 802cd4c <__swbuf_r+0x90>
 802cd28:	4638      	mov	r0, r7
 802cd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802cd2c:	4b0a      	ldr	r3, [pc, #40]	; (802cd58 <__swbuf_r+0x9c>)
 802cd2e:	429c      	cmp	r4, r3
 802cd30:	d101      	bne.n	802cd36 <__swbuf_r+0x7a>
 802cd32:	68ac      	ldr	r4, [r5, #8]
 802cd34:	e7cf      	b.n	802ccd6 <__swbuf_r+0x1a>
 802cd36:	4b09      	ldr	r3, [pc, #36]	; (802cd5c <__swbuf_r+0xa0>)
 802cd38:	429c      	cmp	r4, r3
 802cd3a:	bf08      	it	eq
 802cd3c:	68ec      	ldreq	r4, [r5, #12]
 802cd3e:	e7ca      	b.n	802ccd6 <__swbuf_r+0x1a>
 802cd40:	4621      	mov	r1, r4
 802cd42:	4628      	mov	r0, r5
 802cd44:	f000 f80c 	bl	802cd60 <__swsetup_r>
 802cd48:	2800      	cmp	r0, #0
 802cd4a:	d0cb      	beq.n	802cce4 <__swbuf_r+0x28>
 802cd4c:	f04f 37ff 	mov.w	r7, #4294967295
 802cd50:	e7ea      	b.n	802cd28 <__swbuf_r+0x6c>
 802cd52:	bf00      	nop
 802cd54:	08032114 	.word	0x08032114
 802cd58:	08032134 	.word	0x08032134
 802cd5c:	080320f4 	.word	0x080320f4

0802cd60 <__swsetup_r>:
 802cd60:	4b32      	ldr	r3, [pc, #200]	; (802ce2c <__swsetup_r+0xcc>)
 802cd62:	b570      	push	{r4, r5, r6, lr}
 802cd64:	681d      	ldr	r5, [r3, #0]
 802cd66:	4606      	mov	r6, r0
 802cd68:	460c      	mov	r4, r1
 802cd6a:	b125      	cbz	r5, 802cd76 <__swsetup_r+0x16>
 802cd6c:	69ab      	ldr	r3, [r5, #24]
 802cd6e:	b913      	cbnz	r3, 802cd76 <__swsetup_r+0x16>
 802cd70:	4628      	mov	r0, r5
 802cd72:	f000 f97d 	bl	802d070 <__sinit>
 802cd76:	4b2e      	ldr	r3, [pc, #184]	; (802ce30 <__swsetup_r+0xd0>)
 802cd78:	429c      	cmp	r4, r3
 802cd7a:	d10f      	bne.n	802cd9c <__swsetup_r+0x3c>
 802cd7c:	686c      	ldr	r4, [r5, #4]
 802cd7e:	89a3      	ldrh	r3, [r4, #12]
 802cd80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802cd84:	0719      	lsls	r1, r3, #28
 802cd86:	d42c      	bmi.n	802cde2 <__swsetup_r+0x82>
 802cd88:	06dd      	lsls	r5, r3, #27
 802cd8a:	d411      	bmi.n	802cdb0 <__swsetup_r+0x50>
 802cd8c:	2309      	movs	r3, #9
 802cd8e:	6033      	str	r3, [r6, #0]
 802cd90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802cd94:	81a3      	strh	r3, [r4, #12]
 802cd96:	f04f 30ff 	mov.w	r0, #4294967295
 802cd9a:	e03e      	b.n	802ce1a <__swsetup_r+0xba>
 802cd9c:	4b25      	ldr	r3, [pc, #148]	; (802ce34 <__swsetup_r+0xd4>)
 802cd9e:	429c      	cmp	r4, r3
 802cda0:	d101      	bne.n	802cda6 <__swsetup_r+0x46>
 802cda2:	68ac      	ldr	r4, [r5, #8]
 802cda4:	e7eb      	b.n	802cd7e <__swsetup_r+0x1e>
 802cda6:	4b24      	ldr	r3, [pc, #144]	; (802ce38 <__swsetup_r+0xd8>)
 802cda8:	429c      	cmp	r4, r3
 802cdaa:	bf08      	it	eq
 802cdac:	68ec      	ldreq	r4, [r5, #12]
 802cdae:	e7e6      	b.n	802cd7e <__swsetup_r+0x1e>
 802cdb0:	0758      	lsls	r0, r3, #29
 802cdb2:	d512      	bpl.n	802cdda <__swsetup_r+0x7a>
 802cdb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802cdb6:	b141      	cbz	r1, 802cdca <__swsetup_r+0x6a>
 802cdb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802cdbc:	4299      	cmp	r1, r3
 802cdbe:	d002      	beq.n	802cdc6 <__swsetup_r+0x66>
 802cdc0:	4630      	mov	r0, r6
 802cdc2:	f7ff faab 	bl	802c31c <_free_r>
 802cdc6:	2300      	movs	r3, #0
 802cdc8:	6363      	str	r3, [r4, #52]	; 0x34
 802cdca:	89a3      	ldrh	r3, [r4, #12]
 802cdcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802cdd0:	81a3      	strh	r3, [r4, #12]
 802cdd2:	2300      	movs	r3, #0
 802cdd4:	6063      	str	r3, [r4, #4]
 802cdd6:	6923      	ldr	r3, [r4, #16]
 802cdd8:	6023      	str	r3, [r4, #0]
 802cdda:	89a3      	ldrh	r3, [r4, #12]
 802cddc:	f043 0308 	orr.w	r3, r3, #8
 802cde0:	81a3      	strh	r3, [r4, #12]
 802cde2:	6923      	ldr	r3, [r4, #16]
 802cde4:	b94b      	cbnz	r3, 802cdfa <__swsetup_r+0x9a>
 802cde6:	89a3      	ldrh	r3, [r4, #12]
 802cde8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802cdec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802cdf0:	d003      	beq.n	802cdfa <__swsetup_r+0x9a>
 802cdf2:	4621      	mov	r1, r4
 802cdf4:	4630      	mov	r0, r6
 802cdf6:	f000 f9fd 	bl	802d1f4 <__smakebuf_r>
 802cdfa:	89a0      	ldrh	r0, [r4, #12]
 802cdfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ce00:	f010 0301 	ands.w	r3, r0, #1
 802ce04:	d00a      	beq.n	802ce1c <__swsetup_r+0xbc>
 802ce06:	2300      	movs	r3, #0
 802ce08:	60a3      	str	r3, [r4, #8]
 802ce0a:	6963      	ldr	r3, [r4, #20]
 802ce0c:	425b      	negs	r3, r3
 802ce0e:	61a3      	str	r3, [r4, #24]
 802ce10:	6923      	ldr	r3, [r4, #16]
 802ce12:	b943      	cbnz	r3, 802ce26 <__swsetup_r+0xc6>
 802ce14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802ce18:	d1ba      	bne.n	802cd90 <__swsetup_r+0x30>
 802ce1a:	bd70      	pop	{r4, r5, r6, pc}
 802ce1c:	0781      	lsls	r1, r0, #30
 802ce1e:	bf58      	it	pl
 802ce20:	6963      	ldrpl	r3, [r4, #20]
 802ce22:	60a3      	str	r3, [r4, #8]
 802ce24:	e7f4      	b.n	802ce10 <__swsetup_r+0xb0>
 802ce26:	2000      	movs	r0, #0
 802ce28:	e7f7      	b.n	802ce1a <__swsetup_r+0xba>
 802ce2a:	bf00      	nop
 802ce2c:	2000029c 	.word	0x2000029c
 802ce30:	08032114 	.word	0x08032114
 802ce34:	08032134 	.word	0x08032134
 802ce38:	080320f4 	.word	0x080320f4

0802ce3c <__sflush_r>:
 802ce3c:	898a      	ldrh	r2, [r1, #12]
 802ce3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ce42:	4605      	mov	r5, r0
 802ce44:	0710      	lsls	r0, r2, #28
 802ce46:	460c      	mov	r4, r1
 802ce48:	d458      	bmi.n	802cefc <__sflush_r+0xc0>
 802ce4a:	684b      	ldr	r3, [r1, #4]
 802ce4c:	2b00      	cmp	r3, #0
 802ce4e:	dc05      	bgt.n	802ce5c <__sflush_r+0x20>
 802ce50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802ce52:	2b00      	cmp	r3, #0
 802ce54:	dc02      	bgt.n	802ce5c <__sflush_r+0x20>
 802ce56:	2000      	movs	r0, #0
 802ce58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ce5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802ce5e:	2e00      	cmp	r6, #0
 802ce60:	d0f9      	beq.n	802ce56 <__sflush_r+0x1a>
 802ce62:	2300      	movs	r3, #0
 802ce64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802ce68:	682f      	ldr	r7, [r5, #0]
 802ce6a:	602b      	str	r3, [r5, #0]
 802ce6c:	d032      	beq.n	802ced4 <__sflush_r+0x98>
 802ce6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802ce70:	89a3      	ldrh	r3, [r4, #12]
 802ce72:	075a      	lsls	r2, r3, #29
 802ce74:	d505      	bpl.n	802ce82 <__sflush_r+0x46>
 802ce76:	6863      	ldr	r3, [r4, #4]
 802ce78:	1ac0      	subs	r0, r0, r3
 802ce7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802ce7c:	b10b      	cbz	r3, 802ce82 <__sflush_r+0x46>
 802ce7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802ce80:	1ac0      	subs	r0, r0, r3
 802ce82:	2300      	movs	r3, #0
 802ce84:	4602      	mov	r2, r0
 802ce86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802ce88:	6a21      	ldr	r1, [r4, #32]
 802ce8a:	4628      	mov	r0, r5
 802ce8c:	47b0      	blx	r6
 802ce8e:	1c43      	adds	r3, r0, #1
 802ce90:	89a3      	ldrh	r3, [r4, #12]
 802ce92:	d106      	bne.n	802cea2 <__sflush_r+0x66>
 802ce94:	6829      	ldr	r1, [r5, #0]
 802ce96:	291d      	cmp	r1, #29
 802ce98:	d82c      	bhi.n	802cef4 <__sflush_r+0xb8>
 802ce9a:	4a2a      	ldr	r2, [pc, #168]	; (802cf44 <__sflush_r+0x108>)
 802ce9c:	40ca      	lsrs	r2, r1
 802ce9e:	07d6      	lsls	r6, r2, #31
 802cea0:	d528      	bpl.n	802cef4 <__sflush_r+0xb8>
 802cea2:	2200      	movs	r2, #0
 802cea4:	6062      	str	r2, [r4, #4]
 802cea6:	04d9      	lsls	r1, r3, #19
 802cea8:	6922      	ldr	r2, [r4, #16]
 802ceaa:	6022      	str	r2, [r4, #0]
 802ceac:	d504      	bpl.n	802ceb8 <__sflush_r+0x7c>
 802ceae:	1c42      	adds	r2, r0, #1
 802ceb0:	d101      	bne.n	802ceb6 <__sflush_r+0x7a>
 802ceb2:	682b      	ldr	r3, [r5, #0]
 802ceb4:	b903      	cbnz	r3, 802ceb8 <__sflush_r+0x7c>
 802ceb6:	6560      	str	r0, [r4, #84]	; 0x54
 802ceb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802ceba:	602f      	str	r7, [r5, #0]
 802cebc:	2900      	cmp	r1, #0
 802cebe:	d0ca      	beq.n	802ce56 <__sflush_r+0x1a>
 802cec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802cec4:	4299      	cmp	r1, r3
 802cec6:	d002      	beq.n	802cece <__sflush_r+0x92>
 802cec8:	4628      	mov	r0, r5
 802ceca:	f7ff fa27 	bl	802c31c <_free_r>
 802cece:	2000      	movs	r0, #0
 802ced0:	6360      	str	r0, [r4, #52]	; 0x34
 802ced2:	e7c1      	b.n	802ce58 <__sflush_r+0x1c>
 802ced4:	6a21      	ldr	r1, [r4, #32]
 802ced6:	2301      	movs	r3, #1
 802ced8:	4628      	mov	r0, r5
 802ceda:	47b0      	blx	r6
 802cedc:	1c41      	adds	r1, r0, #1
 802cede:	d1c7      	bne.n	802ce70 <__sflush_r+0x34>
 802cee0:	682b      	ldr	r3, [r5, #0]
 802cee2:	2b00      	cmp	r3, #0
 802cee4:	d0c4      	beq.n	802ce70 <__sflush_r+0x34>
 802cee6:	2b1d      	cmp	r3, #29
 802cee8:	d001      	beq.n	802ceee <__sflush_r+0xb2>
 802ceea:	2b16      	cmp	r3, #22
 802ceec:	d101      	bne.n	802cef2 <__sflush_r+0xb6>
 802ceee:	602f      	str	r7, [r5, #0]
 802cef0:	e7b1      	b.n	802ce56 <__sflush_r+0x1a>
 802cef2:	89a3      	ldrh	r3, [r4, #12]
 802cef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802cef8:	81a3      	strh	r3, [r4, #12]
 802cefa:	e7ad      	b.n	802ce58 <__sflush_r+0x1c>
 802cefc:	690f      	ldr	r7, [r1, #16]
 802cefe:	2f00      	cmp	r7, #0
 802cf00:	d0a9      	beq.n	802ce56 <__sflush_r+0x1a>
 802cf02:	0793      	lsls	r3, r2, #30
 802cf04:	680e      	ldr	r6, [r1, #0]
 802cf06:	bf08      	it	eq
 802cf08:	694b      	ldreq	r3, [r1, #20]
 802cf0a:	600f      	str	r7, [r1, #0]
 802cf0c:	bf18      	it	ne
 802cf0e:	2300      	movne	r3, #0
 802cf10:	eba6 0807 	sub.w	r8, r6, r7
 802cf14:	608b      	str	r3, [r1, #8]
 802cf16:	f1b8 0f00 	cmp.w	r8, #0
 802cf1a:	dd9c      	ble.n	802ce56 <__sflush_r+0x1a>
 802cf1c:	6a21      	ldr	r1, [r4, #32]
 802cf1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802cf20:	4643      	mov	r3, r8
 802cf22:	463a      	mov	r2, r7
 802cf24:	4628      	mov	r0, r5
 802cf26:	47b0      	blx	r6
 802cf28:	2800      	cmp	r0, #0
 802cf2a:	dc06      	bgt.n	802cf3a <__sflush_r+0xfe>
 802cf2c:	89a3      	ldrh	r3, [r4, #12]
 802cf2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802cf32:	81a3      	strh	r3, [r4, #12]
 802cf34:	f04f 30ff 	mov.w	r0, #4294967295
 802cf38:	e78e      	b.n	802ce58 <__sflush_r+0x1c>
 802cf3a:	4407      	add	r7, r0
 802cf3c:	eba8 0800 	sub.w	r8, r8, r0
 802cf40:	e7e9      	b.n	802cf16 <__sflush_r+0xda>
 802cf42:	bf00      	nop
 802cf44:	20400001 	.word	0x20400001

0802cf48 <_fflush_r>:
 802cf48:	b538      	push	{r3, r4, r5, lr}
 802cf4a:	690b      	ldr	r3, [r1, #16]
 802cf4c:	4605      	mov	r5, r0
 802cf4e:	460c      	mov	r4, r1
 802cf50:	b913      	cbnz	r3, 802cf58 <_fflush_r+0x10>
 802cf52:	2500      	movs	r5, #0
 802cf54:	4628      	mov	r0, r5
 802cf56:	bd38      	pop	{r3, r4, r5, pc}
 802cf58:	b118      	cbz	r0, 802cf62 <_fflush_r+0x1a>
 802cf5a:	6983      	ldr	r3, [r0, #24]
 802cf5c:	b90b      	cbnz	r3, 802cf62 <_fflush_r+0x1a>
 802cf5e:	f000 f887 	bl	802d070 <__sinit>
 802cf62:	4b14      	ldr	r3, [pc, #80]	; (802cfb4 <_fflush_r+0x6c>)
 802cf64:	429c      	cmp	r4, r3
 802cf66:	d11b      	bne.n	802cfa0 <_fflush_r+0x58>
 802cf68:	686c      	ldr	r4, [r5, #4]
 802cf6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cf6e:	2b00      	cmp	r3, #0
 802cf70:	d0ef      	beq.n	802cf52 <_fflush_r+0xa>
 802cf72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802cf74:	07d0      	lsls	r0, r2, #31
 802cf76:	d404      	bmi.n	802cf82 <_fflush_r+0x3a>
 802cf78:	0599      	lsls	r1, r3, #22
 802cf7a:	d402      	bmi.n	802cf82 <_fflush_r+0x3a>
 802cf7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802cf7e:	f7ff f974 	bl	802c26a <__retarget_lock_acquire_recursive>
 802cf82:	4628      	mov	r0, r5
 802cf84:	4621      	mov	r1, r4
 802cf86:	f7ff ff59 	bl	802ce3c <__sflush_r>
 802cf8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802cf8c:	07da      	lsls	r2, r3, #31
 802cf8e:	4605      	mov	r5, r0
 802cf90:	d4e0      	bmi.n	802cf54 <_fflush_r+0xc>
 802cf92:	89a3      	ldrh	r3, [r4, #12]
 802cf94:	059b      	lsls	r3, r3, #22
 802cf96:	d4dd      	bmi.n	802cf54 <_fflush_r+0xc>
 802cf98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802cf9a:	f7ff f967 	bl	802c26c <__retarget_lock_release_recursive>
 802cf9e:	e7d9      	b.n	802cf54 <_fflush_r+0xc>
 802cfa0:	4b05      	ldr	r3, [pc, #20]	; (802cfb8 <_fflush_r+0x70>)
 802cfa2:	429c      	cmp	r4, r3
 802cfa4:	d101      	bne.n	802cfaa <_fflush_r+0x62>
 802cfa6:	68ac      	ldr	r4, [r5, #8]
 802cfa8:	e7df      	b.n	802cf6a <_fflush_r+0x22>
 802cfaa:	4b04      	ldr	r3, [pc, #16]	; (802cfbc <_fflush_r+0x74>)
 802cfac:	429c      	cmp	r4, r3
 802cfae:	bf08      	it	eq
 802cfb0:	68ec      	ldreq	r4, [r5, #12]
 802cfb2:	e7da      	b.n	802cf6a <_fflush_r+0x22>
 802cfb4:	08032114 	.word	0x08032114
 802cfb8:	08032134 	.word	0x08032134
 802cfbc:	080320f4 	.word	0x080320f4

0802cfc0 <std>:
 802cfc0:	2300      	movs	r3, #0
 802cfc2:	b510      	push	{r4, lr}
 802cfc4:	4604      	mov	r4, r0
 802cfc6:	e9c0 3300 	strd	r3, r3, [r0]
 802cfca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802cfce:	6083      	str	r3, [r0, #8]
 802cfd0:	8181      	strh	r1, [r0, #12]
 802cfd2:	6643      	str	r3, [r0, #100]	; 0x64
 802cfd4:	81c2      	strh	r2, [r0, #14]
 802cfd6:	6183      	str	r3, [r0, #24]
 802cfd8:	4619      	mov	r1, r3
 802cfda:	2208      	movs	r2, #8
 802cfdc:	305c      	adds	r0, #92	; 0x5c
 802cfde:	f7ff f97f 	bl	802c2e0 <memset>
 802cfe2:	4b05      	ldr	r3, [pc, #20]	; (802cff8 <std+0x38>)
 802cfe4:	6263      	str	r3, [r4, #36]	; 0x24
 802cfe6:	4b05      	ldr	r3, [pc, #20]	; (802cffc <std+0x3c>)
 802cfe8:	62a3      	str	r3, [r4, #40]	; 0x28
 802cfea:	4b05      	ldr	r3, [pc, #20]	; (802d000 <std+0x40>)
 802cfec:	62e3      	str	r3, [r4, #44]	; 0x2c
 802cfee:	4b05      	ldr	r3, [pc, #20]	; (802d004 <std+0x44>)
 802cff0:	6224      	str	r4, [r4, #32]
 802cff2:	6323      	str	r3, [r4, #48]	; 0x30
 802cff4:	bd10      	pop	{r4, pc}
 802cff6:	bf00      	nop
 802cff8:	0802d5a1 	.word	0x0802d5a1
 802cffc:	0802d5c3 	.word	0x0802d5c3
 802d000:	0802d5fb 	.word	0x0802d5fb
 802d004:	0802d61f 	.word	0x0802d61f

0802d008 <_cleanup_r>:
 802d008:	4901      	ldr	r1, [pc, #4]	; (802d010 <_cleanup_r+0x8>)
 802d00a:	f000 b8af 	b.w	802d16c <_fwalk_reent>
 802d00e:	bf00      	nop
 802d010:	0802cf49 	.word	0x0802cf49

0802d014 <__sfmoreglue>:
 802d014:	b570      	push	{r4, r5, r6, lr}
 802d016:	2268      	movs	r2, #104	; 0x68
 802d018:	1e4d      	subs	r5, r1, #1
 802d01a:	4355      	muls	r5, r2
 802d01c:	460e      	mov	r6, r1
 802d01e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802d022:	f7ff f9e7 	bl	802c3f4 <_malloc_r>
 802d026:	4604      	mov	r4, r0
 802d028:	b140      	cbz	r0, 802d03c <__sfmoreglue+0x28>
 802d02a:	2100      	movs	r1, #0
 802d02c:	e9c0 1600 	strd	r1, r6, [r0]
 802d030:	300c      	adds	r0, #12
 802d032:	60a0      	str	r0, [r4, #8]
 802d034:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802d038:	f7ff f952 	bl	802c2e0 <memset>
 802d03c:	4620      	mov	r0, r4
 802d03e:	bd70      	pop	{r4, r5, r6, pc}

0802d040 <__sfp_lock_acquire>:
 802d040:	4801      	ldr	r0, [pc, #4]	; (802d048 <__sfp_lock_acquire+0x8>)
 802d042:	f7ff b912 	b.w	802c26a <__retarget_lock_acquire_recursive>
 802d046:	bf00      	nop
 802d048:	20007331 	.word	0x20007331

0802d04c <__sfp_lock_release>:
 802d04c:	4801      	ldr	r0, [pc, #4]	; (802d054 <__sfp_lock_release+0x8>)
 802d04e:	f7ff b90d 	b.w	802c26c <__retarget_lock_release_recursive>
 802d052:	bf00      	nop
 802d054:	20007331 	.word	0x20007331

0802d058 <__sinit_lock_acquire>:
 802d058:	4801      	ldr	r0, [pc, #4]	; (802d060 <__sinit_lock_acquire+0x8>)
 802d05a:	f7ff b906 	b.w	802c26a <__retarget_lock_acquire_recursive>
 802d05e:	bf00      	nop
 802d060:	20007332 	.word	0x20007332

0802d064 <__sinit_lock_release>:
 802d064:	4801      	ldr	r0, [pc, #4]	; (802d06c <__sinit_lock_release+0x8>)
 802d066:	f7ff b901 	b.w	802c26c <__retarget_lock_release_recursive>
 802d06a:	bf00      	nop
 802d06c:	20007332 	.word	0x20007332

0802d070 <__sinit>:
 802d070:	b510      	push	{r4, lr}
 802d072:	4604      	mov	r4, r0
 802d074:	f7ff fff0 	bl	802d058 <__sinit_lock_acquire>
 802d078:	69a3      	ldr	r3, [r4, #24]
 802d07a:	b11b      	cbz	r3, 802d084 <__sinit+0x14>
 802d07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d080:	f7ff bff0 	b.w	802d064 <__sinit_lock_release>
 802d084:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802d088:	6523      	str	r3, [r4, #80]	; 0x50
 802d08a:	4b13      	ldr	r3, [pc, #76]	; (802d0d8 <__sinit+0x68>)
 802d08c:	4a13      	ldr	r2, [pc, #76]	; (802d0dc <__sinit+0x6c>)
 802d08e:	681b      	ldr	r3, [r3, #0]
 802d090:	62a2      	str	r2, [r4, #40]	; 0x28
 802d092:	42a3      	cmp	r3, r4
 802d094:	bf04      	itt	eq
 802d096:	2301      	moveq	r3, #1
 802d098:	61a3      	streq	r3, [r4, #24]
 802d09a:	4620      	mov	r0, r4
 802d09c:	f000 f820 	bl	802d0e0 <__sfp>
 802d0a0:	6060      	str	r0, [r4, #4]
 802d0a2:	4620      	mov	r0, r4
 802d0a4:	f000 f81c 	bl	802d0e0 <__sfp>
 802d0a8:	60a0      	str	r0, [r4, #8]
 802d0aa:	4620      	mov	r0, r4
 802d0ac:	f000 f818 	bl	802d0e0 <__sfp>
 802d0b0:	2200      	movs	r2, #0
 802d0b2:	60e0      	str	r0, [r4, #12]
 802d0b4:	2104      	movs	r1, #4
 802d0b6:	6860      	ldr	r0, [r4, #4]
 802d0b8:	f7ff ff82 	bl	802cfc0 <std>
 802d0bc:	68a0      	ldr	r0, [r4, #8]
 802d0be:	2201      	movs	r2, #1
 802d0c0:	2109      	movs	r1, #9
 802d0c2:	f7ff ff7d 	bl	802cfc0 <std>
 802d0c6:	68e0      	ldr	r0, [r4, #12]
 802d0c8:	2202      	movs	r2, #2
 802d0ca:	2112      	movs	r1, #18
 802d0cc:	f7ff ff78 	bl	802cfc0 <std>
 802d0d0:	2301      	movs	r3, #1
 802d0d2:	61a3      	str	r3, [r4, #24]
 802d0d4:	e7d2      	b.n	802d07c <__sinit+0xc>
 802d0d6:	bf00      	nop
 802d0d8:	080320bc 	.word	0x080320bc
 802d0dc:	0802d009 	.word	0x0802d009

0802d0e0 <__sfp>:
 802d0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d0e2:	4607      	mov	r7, r0
 802d0e4:	f7ff ffac 	bl	802d040 <__sfp_lock_acquire>
 802d0e8:	4b1e      	ldr	r3, [pc, #120]	; (802d164 <__sfp+0x84>)
 802d0ea:	681e      	ldr	r6, [r3, #0]
 802d0ec:	69b3      	ldr	r3, [r6, #24]
 802d0ee:	b913      	cbnz	r3, 802d0f6 <__sfp+0x16>
 802d0f0:	4630      	mov	r0, r6
 802d0f2:	f7ff ffbd 	bl	802d070 <__sinit>
 802d0f6:	3648      	adds	r6, #72	; 0x48
 802d0f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802d0fc:	3b01      	subs	r3, #1
 802d0fe:	d503      	bpl.n	802d108 <__sfp+0x28>
 802d100:	6833      	ldr	r3, [r6, #0]
 802d102:	b30b      	cbz	r3, 802d148 <__sfp+0x68>
 802d104:	6836      	ldr	r6, [r6, #0]
 802d106:	e7f7      	b.n	802d0f8 <__sfp+0x18>
 802d108:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802d10c:	b9d5      	cbnz	r5, 802d144 <__sfp+0x64>
 802d10e:	4b16      	ldr	r3, [pc, #88]	; (802d168 <__sfp+0x88>)
 802d110:	60e3      	str	r3, [r4, #12]
 802d112:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802d116:	6665      	str	r5, [r4, #100]	; 0x64
 802d118:	f7ff f8a6 	bl	802c268 <__retarget_lock_init_recursive>
 802d11c:	f7ff ff96 	bl	802d04c <__sfp_lock_release>
 802d120:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802d124:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802d128:	6025      	str	r5, [r4, #0]
 802d12a:	61a5      	str	r5, [r4, #24]
 802d12c:	2208      	movs	r2, #8
 802d12e:	4629      	mov	r1, r5
 802d130:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802d134:	f7ff f8d4 	bl	802c2e0 <memset>
 802d138:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802d13c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802d140:	4620      	mov	r0, r4
 802d142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d144:	3468      	adds	r4, #104	; 0x68
 802d146:	e7d9      	b.n	802d0fc <__sfp+0x1c>
 802d148:	2104      	movs	r1, #4
 802d14a:	4638      	mov	r0, r7
 802d14c:	f7ff ff62 	bl	802d014 <__sfmoreglue>
 802d150:	4604      	mov	r4, r0
 802d152:	6030      	str	r0, [r6, #0]
 802d154:	2800      	cmp	r0, #0
 802d156:	d1d5      	bne.n	802d104 <__sfp+0x24>
 802d158:	f7ff ff78 	bl	802d04c <__sfp_lock_release>
 802d15c:	230c      	movs	r3, #12
 802d15e:	603b      	str	r3, [r7, #0]
 802d160:	e7ee      	b.n	802d140 <__sfp+0x60>
 802d162:	bf00      	nop
 802d164:	080320bc 	.word	0x080320bc
 802d168:	ffff0001 	.word	0xffff0001

0802d16c <_fwalk_reent>:
 802d16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d170:	4606      	mov	r6, r0
 802d172:	4688      	mov	r8, r1
 802d174:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802d178:	2700      	movs	r7, #0
 802d17a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802d17e:	f1b9 0901 	subs.w	r9, r9, #1
 802d182:	d505      	bpl.n	802d190 <_fwalk_reent+0x24>
 802d184:	6824      	ldr	r4, [r4, #0]
 802d186:	2c00      	cmp	r4, #0
 802d188:	d1f7      	bne.n	802d17a <_fwalk_reent+0xe>
 802d18a:	4638      	mov	r0, r7
 802d18c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d190:	89ab      	ldrh	r3, [r5, #12]
 802d192:	2b01      	cmp	r3, #1
 802d194:	d907      	bls.n	802d1a6 <_fwalk_reent+0x3a>
 802d196:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802d19a:	3301      	adds	r3, #1
 802d19c:	d003      	beq.n	802d1a6 <_fwalk_reent+0x3a>
 802d19e:	4629      	mov	r1, r5
 802d1a0:	4630      	mov	r0, r6
 802d1a2:	47c0      	blx	r8
 802d1a4:	4307      	orrs	r7, r0
 802d1a6:	3568      	adds	r5, #104	; 0x68
 802d1a8:	e7e9      	b.n	802d17e <_fwalk_reent+0x12>

0802d1aa <__swhatbuf_r>:
 802d1aa:	b570      	push	{r4, r5, r6, lr}
 802d1ac:	460e      	mov	r6, r1
 802d1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d1b2:	2900      	cmp	r1, #0
 802d1b4:	b096      	sub	sp, #88	; 0x58
 802d1b6:	4614      	mov	r4, r2
 802d1b8:	461d      	mov	r5, r3
 802d1ba:	da08      	bge.n	802d1ce <__swhatbuf_r+0x24>
 802d1bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802d1c0:	2200      	movs	r2, #0
 802d1c2:	602a      	str	r2, [r5, #0]
 802d1c4:	061a      	lsls	r2, r3, #24
 802d1c6:	d410      	bmi.n	802d1ea <__swhatbuf_r+0x40>
 802d1c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802d1cc:	e00e      	b.n	802d1ec <__swhatbuf_r+0x42>
 802d1ce:	466a      	mov	r2, sp
 802d1d0:	f000 fa4c 	bl	802d66c <_fstat_r>
 802d1d4:	2800      	cmp	r0, #0
 802d1d6:	dbf1      	blt.n	802d1bc <__swhatbuf_r+0x12>
 802d1d8:	9a01      	ldr	r2, [sp, #4]
 802d1da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802d1de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802d1e2:	425a      	negs	r2, r3
 802d1e4:	415a      	adcs	r2, r3
 802d1e6:	602a      	str	r2, [r5, #0]
 802d1e8:	e7ee      	b.n	802d1c8 <__swhatbuf_r+0x1e>
 802d1ea:	2340      	movs	r3, #64	; 0x40
 802d1ec:	2000      	movs	r0, #0
 802d1ee:	6023      	str	r3, [r4, #0]
 802d1f0:	b016      	add	sp, #88	; 0x58
 802d1f2:	bd70      	pop	{r4, r5, r6, pc}

0802d1f4 <__smakebuf_r>:
 802d1f4:	898b      	ldrh	r3, [r1, #12]
 802d1f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802d1f8:	079d      	lsls	r5, r3, #30
 802d1fa:	4606      	mov	r6, r0
 802d1fc:	460c      	mov	r4, r1
 802d1fe:	d507      	bpl.n	802d210 <__smakebuf_r+0x1c>
 802d200:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802d204:	6023      	str	r3, [r4, #0]
 802d206:	6123      	str	r3, [r4, #16]
 802d208:	2301      	movs	r3, #1
 802d20a:	6163      	str	r3, [r4, #20]
 802d20c:	b002      	add	sp, #8
 802d20e:	bd70      	pop	{r4, r5, r6, pc}
 802d210:	ab01      	add	r3, sp, #4
 802d212:	466a      	mov	r2, sp
 802d214:	f7ff ffc9 	bl	802d1aa <__swhatbuf_r>
 802d218:	9900      	ldr	r1, [sp, #0]
 802d21a:	4605      	mov	r5, r0
 802d21c:	4630      	mov	r0, r6
 802d21e:	f7ff f8e9 	bl	802c3f4 <_malloc_r>
 802d222:	b948      	cbnz	r0, 802d238 <__smakebuf_r+0x44>
 802d224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d228:	059a      	lsls	r2, r3, #22
 802d22a:	d4ef      	bmi.n	802d20c <__smakebuf_r+0x18>
 802d22c:	f023 0303 	bic.w	r3, r3, #3
 802d230:	f043 0302 	orr.w	r3, r3, #2
 802d234:	81a3      	strh	r3, [r4, #12]
 802d236:	e7e3      	b.n	802d200 <__smakebuf_r+0xc>
 802d238:	4b0d      	ldr	r3, [pc, #52]	; (802d270 <__smakebuf_r+0x7c>)
 802d23a:	62b3      	str	r3, [r6, #40]	; 0x28
 802d23c:	89a3      	ldrh	r3, [r4, #12]
 802d23e:	6020      	str	r0, [r4, #0]
 802d240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802d244:	81a3      	strh	r3, [r4, #12]
 802d246:	9b00      	ldr	r3, [sp, #0]
 802d248:	6163      	str	r3, [r4, #20]
 802d24a:	9b01      	ldr	r3, [sp, #4]
 802d24c:	6120      	str	r0, [r4, #16]
 802d24e:	b15b      	cbz	r3, 802d268 <__smakebuf_r+0x74>
 802d250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d254:	4630      	mov	r0, r6
 802d256:	f000 fa1b 	bl	802d690 <_isatty_r>
 802d25a:	b128      	cbz	r0, 802d268 <__smakebuf_r+0x74>
 802d25c:	89a3      	ldrh	r3, [r4, #12]
 802d25e:	f023 0303 	bic.w	r3, r3, #3
 802d262:	f043 0301 	orr.w	r3, r3, #1
 802d266:	81a3      	strh	r3, [r4, #12]
 802d268:	89a0      	ldrh	r0, [r4, #12]
 802d26a:	4305      	orrs	r5, r0
 802d26c:	81a5      	strh	r5, [r4, #12]
 802d26e:	e7cd      	b.n	802d20c <__smakebuf_r+0x18>
 802d270:	0802d009 	.word	0x0802d009

0802d274 <__malloc_lock>:
 802d274:	4801      	ldr	r0, [pc, #4]	; (802d27c <__malloc_lock+0x8>)
 802d276:	f7fe bff8 	b.w	802c26a <__retarget_lock_acquire_recursive>
 802d27a:	bf00      	nop
 802d27c:	20007330 	.word	0x20007330

0802d280 <__malloc_unlock>:
 802d280:	4801      	ldr	r0, [pc, #4]	; (802d288 <__malloc_unlock+0x8>)
 802d282:	f7fe bff3 	b.w	802c26c <__retarget_lock_release_recursive>
 802d286:	bf00      	nop
 802d288:	20007330 	.word	0x20007330

0802d28c <_realloc_r>:
 802d28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d290:	4680      	mov	r8, r0
 802d292:	4614      	mov	r4, r2
 802d294:	460e      	mov	r6, r1
 802d296:	b921      	cbnz	r1, 802d2a2 <_realloc_r+0x16>
 802d298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d29c:	4611      	mov	r1, r2
 802d29e:	f7ff b8a9 	b.w	802c3f4 <_malloc_r>
 802d2a2:	b92a      	cbnz	r2, 802d2b0 <_realloc_r+0x24>
 802d2a4:	f7ff f83a 	bl	802c31c <_free_r>
 802d2a8:	4625      	mov	r5, r4
 802d2aa:	4628      	mov	r0, r5
 802d2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d2b0:	f000 fa10 	bl	802d6d4 <_malloc_usable_size_r>
 802d2b4:	4284      	cmp	r4, r0
 802d2b6:	4607      	mov	r7, r0
 802d2b8:	d802      	bhi.n	802d2c0 <_realloc_r+0x34>
 802d2ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802d2be:	d812      	bhi.n	802d2e6 <_realloc_r+0x5a>
 802d2c0:	4621      	mov	r1, r4
 802d2c2:	4640      	mov	r0, r8
 802d2c4:	f7ff f896 	bl	802c3f4 <_malloc_r>
 802d2c8:	4605      	mov	r5, r0
 802d2ca:	2800      	cmp	r0, #0
 802d2cc:	d0ed      	beq.n	802d2aa <_realloc_r+0x1e>
 802d2ce:	42bc      	cmp	r4, r7
 802d2d0:	4622      	mov	r2, r4
 802d2d2:	4631      	mov	r1, r6
 802d2d4:	bf28      	it	cs
 802d2d6:	463a      	movcs	r2, r7
 802d2d8:	f7fe ffda 	bl	802c290 <memcpy>
 802d2dc:	4631      	mov	r1, r6
 802d2de:	4640      	mov	r0, r8
 802d2e0:	f7ff f81c 	bl	802c31c <_free_r>
 802d2e4:	e7e1      	b.n	802d2aa <_realloc_r+0x1e>
 802d2e6:	4635      	mov	r5, r6
 802d2e8:	e7df      	b.n	802d2aa <_realloc_r+0x1e>

0802d2ea <__ssputs_r>:
 802d2ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d2ee:	688e      	ldr	r6, [r1, #8]
 802d2f0:	429e      	cmp	r6, r3
 802d2f2:	4682      	mov	sl, r0
 802d2f4:	460c      	mov	r4, r1
 802d2f6:	4690      	mov	r8, r2
 802d2f8:	461f      	mov	r7, r3
 802d2fa:	d838      	bhi.n	802d36e <__ssputs_r+0x84>
 802d2fc:	898a      	ldrh	r2, [r1, #12]
 802d2fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802d302:	d032      	beq.n	802d36a <__ssputs_r+0x80>
 802d304:	6825      	ldr	r5, [r4, #0]
 802d306:	6909      	ldr	r1, [r1, #16]
 802d308:	eba5 0901 	sub.w	r9, r5, r1
 802d30c:	6965      	ldr	r5, [r4, #20]
 802d30e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802d312:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802d316:	3301      	adds	r3, #1
 802d318:	444b      	add	r3, r9
 802d31a:	106d      	asrs	r5, r5, #1
 802d31c:	429d      	cmp	r5, r3
 802d31e:	bf38      	it	cc
 802d320:	461d      	movcc	r5, r3
 802d322:	0553      	lsls	r3, r2, #21
 802d324:	d531      	bpl.n	802d38a <__ssputs_r+0xa0>
 802d326:	4629      	mov	r1, r5
 802d328:	f7ff f864 	bl	802c3f4 <_malloc_r>
 802d32c:	4606      	mov	r6, r0
 802d32e:	b950      	cbnz	r0, 802d346 <__ssputs_r+0x5c>
 802d330:	230c      	movs	r3, #12
 802d332:	f8ca 3000 	str.w	r3, [sl]
 802d336:	89a3      	ldrh	r3, [r4, #12]
 802d338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d33c:	81a3      	strh	r3, [r4, #12]
 802d33e:	f04f 30ff 	mov.w	r0, #4294967295
 802d342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d346:	6921      	ldr	r1, [r4, #16]
 802d348:	464a      	mov	r2, r9
 802d34a:	f7fe ffa1 	bl	802c290 <memcpy>
 802d34e:	89a3      	ldrh	r3, [r4, #12]
 802d350:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802d354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802d358:	81a3      	strh	r3, [r4, #12]
 802d35a:	6126      	str	r6, [r4, #16]
 802d35c:	6165      	str	r5, [r4, #20]
 802d35e:	444e      	add	r6, r9
 802d360:	eba5 0509 	sub.w	r5, r5, r9
 802d364:	6026      	str	r6, [r4, #0]
 802d366:	60a5      	str	r5, [r4, #8]
 802d368:	463e      	mov	r6, r7
 802d36a:	42be      	cmp	r6, r7
 802d36c:	d900      	bls.n	802d370 <__ssputs_r+0x86>
 802d36e:	463e      	mov	r6, r7
 802d370:	6820      	ldr	r0, [r4, #0]
 802d372:	4632      	mov	r2, r6
 802d374:	4641      	mov	r1, r8
 802d376:	f7fe ff99 	bl	802c2ac <memmove>
 802d37a:	68a3      	ldr	r3, [r4, #8]
 802d37c:	1b9b      	subs	r3, r3, r6
 802d37e:	60a3      	str	r3, [r4, #8]
 802d380:	6823      	ldr	r3, [r4, #0]
 802d382:	4433      	add	r3, r6
 802d384:	6023      	str	r3, [r4, #0]
 802d386:	2000      	movs	r0, #0
 802d388:	e7db      	b.n	802d342 <__ssputs_r+0x58>
 802d38a:	462a      	mov	r2, r5
 802d38c:	f7ff ff7e 	bl	802d28c <_realloc_r>
 802d390:	4606      	mov	r6, r0
 802d392:	2800      	cmp	r0, #0
 802d394:	d1e1      	bne.n	802d35a <__ssputs_r+0x70>
 802d396:	6921      	ldr	r1, [r4, #16]
 802d398:	4650      	mov	r0, sl
 802d39a:	f7fe ffbf 	bl	802c31c <_free_r>
 802d39e:	e7c7      	b.n	802d330 <__ssputs_r+0x46>

0802d3a0 <_svfiprintf_r>:
 802d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d3a4:	4698      	mov	r8, r3
 802d3a6:	898b      	ldrh	r3, [r1, #12]
 802d3a8:	061b      	lsls	r3, r3, #24
 802d3aa:	b09d      	sub	sp, #116	; 0x74
 802d3ac:	4607      	mov	r7, r0
 802d3ae:	460d      	mov	r5, r1
 802d3b0:	4614      	mov	r4, r2
 802d3b2:	d50e      	bpl.n	802d3d2 <_svfiprintf_r+0x32>
 802d3b4:	690b      	ldr	r3, [r1, #16]
 802d3b6:	b963      	cbnz	r3, 802d3d2 <_svfiprintf_r+0x32>
 802d3b8:	2140      	movs	r1, #64	; 0x40
 802d3ba:	f7ff f81b 	bl	802c3f4 <_malloc_r>
 802d3be:	6028      	str	r0, [r5, #0]
 802d3c0:	6128      	str	r0, [r5, #16]
 802d3c2:	b920      	cbnz	r0, 802d3ce <_svfiprintf_r+0x2e>
 802d3c4:	230c      	movs	r3, #12
 802d3c6:	603b      	str	r3, [r7, #0]
 802d3c8:	f04f 30ff 	mov.w	r0, #4294967295
 802d3cc:	e0d1      	b.n	802d572 <_svfiprintf_r+0x1d2>
 802d3ce:	2340      	movs	r3, #64	; 0x40
 802d3d0:	616b      	str	r3, [r5, #20]
 802d3d2:	2300      	movs	r3, #0
 802d3d4:	9309      	str	r3, [sp, #36]	; 0x24
 802d3d6:	2320      	movs	r3, #32
 802d3d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802d3dc:	f8cd 800c 	str.w	r8, [sp, #12]
 802d3e0:	2330      	movs	r3, #48	; 0x30
 802d3e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802d58c <_svfiprintf_r+0x1ec>
 802d3e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802d3ea:	f04f 0901 	mov.w	r9, #1
 802d3ee:	4623      	mov	r3, r4
 802d3f0:	469a      	mov	sl, r3
 802d3f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d3f6:	b10a      	cbz	r2, 802d3fc <_svfiprintf_r+0x5c>
 802d3f8:	2a25      	cmp	r2, #37	; 0x25
 802d3fa:	d1f9      	bne.n	802d3f0 <_svfiprintf_r+0x50>
 802d3fc:	ebba 0b04 	subs.w	fp, sl, r4
 802d400:	d00b      	beq.n	802d41a <_svfiprintf_r+0x7a>
 802d402:	465b      	mov	r3, fp
 802d404:	4622      	mov	r2, r4
 802d406:	4629      	mov	r1, r5
 802d408:	4638      	mov	r0, r7
 802d40a:	f7ff ff6e 	bl	802d2ea <__ssputs_r>
 802d40e:	3001      	adds	r0, #1
 802d410:	f000 80aa 	beq.w	802d568 <_svfiprintf_r+0x1c8>
 802d414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802d416:	445a      	add	r2, fp
 802d418:	9209      	str	r2, [sp, #36]	; 0x24
 802d41a:	f89a 3000 	ldrb.w	r3, [sl]
 802d41e:	2b00      	cmp	r3, #0
 802d420:	f000 80a2 	beq.w	802d568 <_svfiprintf_r+0x1c8>
 802d424:	2300      	movs	r3, #0
 802d426:	f04f 32ff 	mov.w	r2, #4294967295
 802d42a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802d42e:	f10a 0a01 	add.w	sl, sl, #1
 802d432:	9304      	str	r3, [sp, #16]
 802d434:	9307      	str	r3, [sp, #28]
 802d436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802d43a:	931a      	str	r3, [sp, #104]	; 0x68
 802d43c:	4654      	mov	r4, sl
 802d43e:	2205      	movs	r2, #5
 802d440:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d444:	4851      	ldr	r0, [pc, #324]	; (802d58c <_svfiprintf_r+0x1ec>)
 802d446:	f7d2 fee3 	bl	8000210 <memchr>
 802d44a:	9a04      	ldr	r2, [sp, #16]
 802d44c:	b9d8      	cbnz	r0, 802d486 <_svfiprintf_r+0xe6>
 802d44e:	06d0      	lsls	r0, r2, #27
 802d450:	bf44      	itt	mi
 802d452:	2320      	movmi	r3, #32
 802d454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d458:	0711      	lsls	r1, r2, #28
 802d45a:	bf44      	itt	mi
 802d45c:	232b      	movmi	r3, #43	; 0x2b
 802d45e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d462:	f89a 3000 	ldrb.w	r3, [sl]
 802d466:	2b2a      	cmp	r3, #42	; 0x2a
 802d468:	d015      	beq.n	802d496 <_svfiprintf_r+0xf6>
 802d46a:	9a07      	ldr	r2, [sp, #28]
 802d46c:	4654      	mov	r4, sl
 802d46e:	2000      	movs	r0, #0
 802d470:	f04f 0c0a 	mov.w	ip, #10
 802d474:	4621      	mov	r1, r4
 802d476:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d47a:	3b30      	subs	r3, #48	; 0x30
 802d47c:	2b09      	cmp	r3, #9
 802d47e:	d94e      	bls.n	802d51e <_svfiprintf_r+0x17e>
 802d480:	b1b0      	cbz	r0, 802d4b0 <_svfiprintf_r+0x110>
 802d482:	9207      	str	r2, [sp, #28]
 802d484:	e014      	b.n	802d4b0 <_svfiprintf_r+0x110>
 802d486:	eba0 0308 	sub.w	r3, r0, r8
 802d48a:	fa09 f303 	lsl.w	r3, r9, r3
 802d48e:	4313      	orrs	r3, r2
 802d490:	9304      	str	r3, [sp, #16]
 802d492:	46a2      	mov	sl, r4
 802d494:	e7d2      	b.n	802d43c <_svfiprintf_r+0x9c>
 802d496:	9b03      	ldr	r3, [sp, #12]
 802d498:	1d19      	adds	r1, r3, #4
 802d49a:	681b      	ldr	r3, [r3, #0]
 802d49c:	9103      	str	r1, [sp, #12]
 802d49e:	2b00      	cmp	r3, #0
 802d4a0:	bfbb      	ittet	lt
 802d4a2:	425b      	neglt	r3, r3
 802d4a4:	f042 0202 	orrlt.w	r2, r2, #2
 802d4a8:	9307      	strge	r3, [sp, #28]
 802d4aa:	9307      	strlt	r3, [sp, #28]
 802d4ac:	bfb8      	it	lt
 802d4ae:	9204      	strlt	r2, [sp, #16]
 802d4b0:	7823      	ldrb	r3, [r4, #0]
 802d4b2:	2b2e      	cmp	r3, #46	; 0x2e
 802d4b4:	d10c      	bne.n	802d4d0 <_svfiprintf_r+0x130>
 802d4b6:	7863      	ldrb	r3, [r4, #1]
 802d4b8:	2b2a      	cmp	r3, #42	; 0x2a
 802d4ba:	d135      	bne.n	802d528 <_svfiprintf_r+0x188>
 802d4bc:	9b03      	ldr	r3, [sp, #12]
 802d4be:	1d1a      	adds	r2, r3, #4
 802d4c0:	681b      	ldr	r3, [r3, #0]
 802d4c2:	9203      	str	r2, [sp, #12]
 802d4c4:	2b00      	cmp	r3, #0
 802d4c6:	bfb8      	it	lt
 802d4c8:	f04f 33ff 	movlt.w	r3, #4294967295
 802d4cc:	3402      	adds	r4, #2
 802d4ce:	9305      	str	r3, [sp, #20]
 802d4d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802d59c <_svfiprintf_r+0x1fc>
 802d4d4:	7821      	ldrb	r1, [r4, #0]
 802d4d6:	2203      	movs	r2, #3
 802d4d8:	4650      	mov	r0, sl
 802d4da:	f7d2 fe99 	bl	8000210 <memchr>
 802d4de:	b140      	cbz	r0, 802d4f2 <_svfiprintf_r+0x152>
 802d4e0:	2340      	movs	r3, #64	; 0x40
 802d4e2:	eba0 000a 	sub.w	r0, r0, sl
 802d4e6:	fa03 f000 	lsl.w	r0, r3, r0
 802d4ea:	9b04      	ldr	r3, [sp, #16]
 802d4ec:	4303      	orrs	r3, r0
 802d4ee:	3401      	adds	r4, #1
 802d4f0:	9304      	str	r3, [sp, #16]
 802d4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d4f6:	4826      	ldr	r0, [pc, #152]	; (802d590 <_svfiprintf_r+0x1f0>)
 802d4f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802d4fc:	2206      	movs	r2, #6
 802d4fe:	f7d2 fe87 	bl	8000210 <memchr>
 802d502:	2800      	cmp	r0, #0
 802d504:	d038      	beq.n	802d578 <_svfiprintf_r+0x1d8>
 802d506:	4b23      	ldr	r3, [pc, #140]	; (802d594 <_svfiprintf_r+0x1f4>)
 802d508:	bb1b      	cbnz	r3, 802d552 <_svfiprintf_r+0x1b2>
 802d50a:	9b03      	ldr	r3, [sp, #12]
 802d50c:	3307      	adds	r3, #7
 802d50e:	f023 0307 	bic.w	r3, r3, #7
 802d512:	3308      	adds	r3, #8
 802d514:	9303      	str	r3, [sp, #12]
 802d516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d518:	4433      	add	r3, r6
 802d51a:	9309      	str	r3, [sp, #36]	; 0x24
 802d51c:	e767      	b.n	802d3ee <_svfiprintf_r+0x4e>
 802d51e:	fb0c 3202 	mla	r2, ip, r2, r3
 802d522:	460c      	mov	r4, r1
 802d524:	2001      	movs	r0, #1
 802d526:	e7a5      	b.n	802d474 <_svfiprintf_r+0xd4>
 802d528:	2300      	movs	r3, #0
 802d52a:	3401      	adds	r4, #1
 802d52c:	9305      	str	r3, [sp, #20]
 802d52e:	4619      	mov	r1, r3
 802d530:	f04f 0c0a 	mov.w	ip, #10
 802d534:	4620      	mov	r0, r4
 802d536:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d53a:	3a30      	subs	r2, #48	; 0x30
 802d53c:	2a09      	cmp	r2, #9
 802d53e:	d903      	bls.n	802d548 <_svfiprintf_r+0x1a8>
 802d540:	2b00      	cmp	r3, #0
 802d542:	d0c5      	beq.n	802d4d0 <_svfiprintf_r+0x130>
 802d544:	9105      	str	r1, [sp, #20]
 802d546:	e7c3      	b.n	802d4d0 <_svfiprintf_r+0x130>
 802d548:	fb0c 2101 	mla	r1, ip, r1, r2
 802d54c:	4604      	mov	r4, r0
 802d54e:	2301      	movs	r3, #1
 802d550:	e7f0      	b.n	802d534 <_svfiprintf_r+0x194>
 802d552:	ab03      	add	r3, sp, #12
 802d554:	9300      	str	r3, [sp, #0]
 802d556:	462a      	mov	r2, r5
 802d558:	4b0f      	ldr	r3, [pc, #60]	; (802d598 <_svfiprintf_r+0x1f8>)
 802d55a:	a904      	add	r1, sp, #16
 802d55c:	4638      	mov	r0, r7
 802d55e:	f3af 8000 	nop.w
 802d562:	1c42      	adds	r2, r0, #1
 802d564:	4606      	mov	r6, r0
 802d566:	d1d6      	bne.n	802d516 <_svfiprintf_r+0x176>
 802d568:	89ab      	ldrh	r3, [r5, #12]
 802d56a:	065b      	lsls	r3, r3, #25
 802d56c:	f53f af2c 	bmi.w	802d3c8 <_svfiprintf_r+0x28>
 802d570:	9809      	ldr	r0, [sp, #36]	; 0x24
 802d572:	b01d      	add	sp, #116	; 0x74
 802d574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d578:	ab03      	add	r3, sp, #12
 802d57a:	9300      	str	r3, [sp, #0]
 802d57c:	462a      	mov	r2, r5
 802d57e:	4b06      	ldr	r3, [pc, #24]	; (802d598 <_svfiprintf_r+0x1f8>)
 802d580:	a904      	add	r1, sp, #16
 802d582:	4638      	mov	r0, r7
 802d584:	f7ff f972 	bl	802c86c <_printf_i>
 802d588:	e7eb      	b.n	802d562 <_svfiprintf_r+0x1c2>
 802d58a:	bf00      	nop
 802d58c:	080320c0 	.word	0x080320c0
 802d590:	080320ca 	.word	0x080320ca
 802d594:	00000000 	.word	0x00000000
 802d598:	0802d2eb 	.word	0x0802d2eb
 802d59c:	080320c6 	.word	0x080320c6

0802d5a0 <__sread>:
 802d5a0:	b510      	push	{r4, lr}
 802d5a2:	460c      	mov	r4, r1
 802d5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d5a8:	f000 f89c 	bl	802d6e4 <_read_r>
 802d5ac:	2800      	cmp	r0, #0
 802d5ae:	bfab      	itete	ge
 802d5b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802d5b2:	89a3      	ldrhlt	r3, [r4, #12]
 802d5b4:	181b      	addge	r3, r3, r0
 802d5b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802d5ba:	bfac      	ite	ge
 802d5bc:	6563      	strge	r3, [r4, #84]	; 0x54
 802d5be:	81a3      	strhlt	r3, [r4, #12]
 802d5c0:	bd10      	pop	{r4, pc}

0802d5c2 <__swrite>:
 802d5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d5c6:	461f      	mov	r7, r3
 802d5c8:	898b      	ldrh	r3, [r1, #12]
 802d5ca:	05db      	lsls	r3, r3, #23
 802d5cc:	4605      	mov	r5, r0
 802d5ce:	460c      	mov	r4, r1
 802d5d0:	4616      	mov	r6, r2
 802d5d2:	d505      	bpl.n	802d5e0 <__swrite+0x1e>
 802d5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d5d8:	2302      	movs	r3, #2
 802d5da:	2200      	movs	r2, #0
 802d5dc:	f000 f868 	bl	802d6b0 <_lseek_r>
 802d5e0:	89a3      	ldrh	r3, [r4, #12]
 802d5e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d5e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802d5ea:	81a3      	strh	r3, [r4, #12]
 802d5ec:	4632      	mov	r2, r6
 802d5ee:	463b      	mov	r3, r7
 802d5f0:	4628      	mov	r0, r5
 802d5f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d5f6:	f000 b817 	b.w	802d628 <_write_r>

0802d5fa <__sseek>:
 802d5fa:	b510      	push	{r4, lr}
 802d5fc:	460c      	mov	r4, r1
 802d5fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d602:	f000 f855 	bl	802d6b0 <_lseek_r>
 802d606:	1c43      	adds	r3, r0, #1
 802d608:	89a3      	ldrh	r3, [r4, #12]
 802d60a:	bf15      	itete	ne
 802d60c:	6560      	strne	r0, [r4, #84]	; 0x54
 802d60e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802d612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802d616:	81a3      	strheq	r3, [r4, #12]
 802d618:	bf18      	it	ne
 802d61a:	81a3      	strhne	r3, [r4, #12]
 802d61c:	bd10      	pop	{r4, pc}

0802d61e <__sclose>:
 802d61e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d622:	f000 b813 	b.w	802d64c <_close_r>
	...

0802d628 <_write_r>:
 802d628:	b538      	push	{r3, r4, r5, lr}
 802d62a:	4d07      	ldr	r5, [pc, #28]	; (802d648 <_write_r+0x20>)
 802d62c:	4604      	mov	r4, r0
 802d62e:	4608      	mov	r0, r1
 802d630:	4611      	mov	r1, r2
 802d632:	2200      	movs	r2, #0
 802d634:	602a      	str	r2, [r5, #0]
 802d636:	461a      	mov	r2, r3
 802d638:	f7da fa2d 	bl	8007a96 <_write>
 802d63c:	1c43      	adds	r3, r0, #1
 802d63e:	d102      	bne.n	802d646 <_write_r+0x1e>
 802d640:	682b      	ldr	r3, [r5, #0]
 802d642:	b103      	cbz	r3, 802d646 <_write_r+0x1e>
 802d644:	6023      	str	r3, [r4, #0]
 802d646:	bd38      	pop	{r3, r4, r5, pc}
 802d648:	2000733c 	.word	0x2000733c

0802d64c <_close_r>:
 802d64c:	b538      	push	{r3, r4, r5, lr}
 802d64e:	4d06      	ldr	r5, [pc, #24]	; (802d668 <_close_r+0x1c>)
 802d650:	2300      	movs	r3, #0
 802d652:	4604      	mov	r4, r0
 802d654:	4608      	mov	r0, r1
 802d656:	602b      	str	r3, [r5, #0]
 802d658:	f7da fa39 	bl	8007ace <_close>
 802d65c:	1c43      	adds	r3, r0, #1
 802d65e:	d102      	bne.n	802d666 <_close_r+0x1a>
 802d660:	682b      	ldr	r3, [r5, #0]
 802d662:	b103      	cbz	r3, 802d666 <_close_r+0x1a>
 802d664:	6023      	str	r3, [r4, #0]
 802d666:	bd38      	pop	{r3, r4, r5, pc}
 802d668:	2000733c 	.word	0x2000733c

0802d66c <_fstat_r>:
 802d66c:	b538      	push	{r3, r4, r5, lr}
 802d66e:	4d07      	ldr	r5, [pc, #28]	; (802d68c <_fstat_r+0x20>)
 802d670:	2300      	movs	r3, #0
 802d672:	4604      	mov	r4, r0
 802d674:	4608      	mov	r0, r1
 802d676:	4611      	mov	r1, r2
 802d678:	602b      	str	r3, [r5, #0]
 802d67a:	f7da fa34 	bl	8007ae6 <_fstat>
 802d67e:	1c43      	adds	r3, r0, #1
 802d680:	d102      	bne.n	802d688 <_fstat_r+0x1c>
 802d682:	682b      	ldr	r3, [r5, #0]
 802d684:	b103      	cbz	r3, 802d688 <_fstat_r+0x1c>
 802d686:	6023      	str	r3, [r4, #0]
 802d688:	bd38      	pop	{r3, r4, r5, pc}
 802d68a:	bf00      	nop
 802d68c:	2000733c 	.word	0x2000733c

0802d690 <_isatty_r>:
 802d690:	b538      	push	{r3, r4, r5, lr}
 802d692:	4d06      	ldr	r5, [pc, #24]	; (802d6ac <_isatty_r+0x1c>)
 802d694:	2300      	movs	r3, #0
 802d696:	4604      	mov	r4, r0
 802d698:	4608      	mov	r0, r1
 802d69a:	602b      	str	r3, [r5, #0]
 802d69c:	f7da fa33 	bl	8007b06 <_isatty>
 802d6a0:	1c43      	adds	r3, r0, #1
 802d6a2:	d102      	bne.n	802d6aa <_isatty_r+0x1a>
 802d6a4:	682b      	ldr	r3, [r5, #0]
 802d6a6:	b103      	cbz	r3, 802d6aa <_isatty_r+0x1a>
 802d6a8:	6023      	str	r3, [r4, #0]
 802d6aa:	bd38      	pop	{r3, r4, r5, pc}
 802d6ac:	2000733c 	.word	0x2000733c

0802d6b0 <_lseek_r>:
 802d6b0:	b538      	push	{r3, r4, r5, lr}
 802d6b2:	4d07      	ldr	r5, [pc, #28]	; (802d6d0 <_lseek_r+0x20>)
 802d6b4:	4604      	mov	r4, r0
 802d6b6:	4608      	mov	r0, r1
 802d6b8:	4611      	mov	r1, r2
 802d6ba:	2200      	movs	r2, #0
 802d6bc:	602a      	str	r2, [r5, #0]
 802d6be:	461a      	mov	r2, r3
 802d6c0:	f7da fa2c 	bl	8007b1c <_lseek>
 802d6c4:	1c43      	adds	r3, r0, #1
 802d6c6:	d102      	bne.n	802d6ce <_lseek_r+0x1e>
 802d6c8:	682b      	ldr	r3, [r5, #0]
 802d6ca:	b103      	cbz	r3, 802d6ce <_lseek_r+0x1e>
 802d6cc:	6023      	str	r3, [r4, #0]
 802d6ce:	bd38      	pop	{r3, r4, r5, pc}
 802d6d0:	2000733c 	.word	0x2000733c

0802d6d4 <_malloc_usable_size_r>:
 802d6d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802d6d8:	1f18      	subs	r0, r3, #4
 802d6da:	2b00      	cmp	r3, #0
 802d6dc:	bfbc      	itt	lt
 802d6de:	580b      	ldrlt	r3, [r1, r0]
 802d6e0:	18c0      	addlt	r0, r0, r3
 802d6e2:	4770      	bx	lr

0802d6e4 <_read_r>:
 802d6e4:	b538      	push	{r3, r4, r5, lr}
 802d6e6:	4d07      	ldr	r5, [pc, #28]	; (802d704 <_read_r+0x20>)
 802d6e8:	4604      	mov	r4, r0
 802d6ea:	4608      	mov	r0, r1
 802d6ec:	4611      	mov	r1, r2
 802d6ee:	2200      	movs	r2, #0
 802d6f0:	602a      	str	r2, [r5, #0]
 802d6f2:	461a      	mov	r2, r3
 802d6f4:	f7da f9b2 	bl	8007a5c <_read>
 802d6f8:	1c43      	adds	r3, r0, #1
 802d6fa:	d102      	bne.n	802d702 <_read_r+0x1e>
 802d6fc:	682b      	ldr	r3, [r5, #0]
 802d6fe:	b103      	cbz	r3, 802d702 <_read_r+0x1e>
 802d700:	6023      	str	r3, [r4, #0]
 802d702:	bd38      	pop	{r3, r4, r5, pc}
 802d704:	2000733c 	.word	0x2000733c

0802d708 <_init>:
 802d708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d70a:	bf00      	nop
 802d70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d70e:	bc08      	pop	{r3}
 802d710:	469e      	mov	lr, r3
 802d712:	4770      	bx	lr

0802d714 <_fini>:
 802d714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d716:	bf00      	nop
 802d718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d71a:	bc08      	pop	{r3}
 802d71c:	469e      	mov	lr, r3
 802d71e:	4770      	bx	lr
